/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.3.6
 */

const memoryLayouts = require("memoryLayouts.json");
class VkBaseOutStructure {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this.memoryBuffer = new ArrayBuffer(VkBaseOutStructure.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBaseOutStructure.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    String
  }
  
};

VkBaseOutStructure.prototype.flush = function flush() {
  
};

const $VkBaseOutStructure = memoryLayouts.VkBaseOutStructure;
VkBaseOutStructure.byteLength = $VkBaseOutStructure.byteLength;

VkBaseOutStructure.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBaseOutStructure.sType.byteOffset,
    byteLength: $VkBaseOutStructure.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBaseOutStructure.pNext.byteOffset,
    byteLength: $VkBaseOutStructure.pNext.byteLength
  }),
});
class VkBaseInStructure {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this.memoryBuffer = new ArrayBuffer(VkBaseInStructure.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBaseInStructure.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    String
  }
  
};

VkBaseInStructure.prototype.flush = function flush() {
  
};

const $VkBaseInStructure = memoryLayouts.VkBaseInStructure;
VkBaseInStructure.byteLength = $VkBaseInStructure.byteLength;

VkBaseInStructure.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBaseInStructure.sType.byteOffset,
    byteLength: $VkBaseInStructure.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBaseInStructure.pNext.byteOffset,
    byteLength: $VkBaseInStructure.pNext.byteLength
  }),
});
class VkOffset2D {
  constructor(opts) {
    this._x = 0;
    this._y = 0;
    this.memoryBuffer = new ArrayBuffer(VkOffset2D.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      
    }
  }
  get x() {
    return this._x;
  }
  set x(value) {
    
this.memoryView.setInt32($VkOffset2D.x.byteOffset, value);
this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    
this.memoryView.setInt32($VkOffset2D.y.byteOffset, value);
this._y = value;
  }
  
};

VkOffset2D.prototype.flush = function flush() {
  
};

const $VkOffset2D = memoryLayouts.VkOffset2D;
VkOffset2D.byteLength = $VkOffset2D.byteLength;

VkOffset2D.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: $VkOffset2D.x.byteOffset,
    byteLength: $VkOffset2D.x.byteLength
  }),
  y: Object.freeze({
    byteOffset: $VkOffset2D.y.byteOffset,
    byteLength: $VkOffset2D.y.byteLength
  }),
});
class VkOffset3D {
  constructor(opts) {
    this._x = 0;
    this._y = 0;
    this._z = 0;
    this.memoryBuffer = new ArrayBuffer(VkOffset3D.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.z !== void 0) this.z = opts.z;
      
    }
  }
  get x() {
    return this._x;
  }
  set x(value) {
    
this.memoryView.setInt32($VkOffset3D.x.byteOffset, value);
this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    
this.memoryView.setInt32($VkOffset3D.y.byteOffset, value);
this._y = value;
  }
  get z() {
    return this._z;
  }
  set z(value) {
    
this.memoryView.setInt32($VkOffset3D.z.byteOffset, value);
this._z = value;
  }
  
};

VkOffset3D.prototype.flush = function flush() {
  
};

const $VkOffset3D = memoryLayouts.VkOffset3D;
VkOffset3D.byteLength = $VkOffset3D.byteLength;

VkOffset3D.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: $VkOffset3D.x.byteOffset,
    byteLength: $VkOffset3D.x.byteLength
  }),
  y: Object.freeze({
    byteOffset: $VkOffset3D.y.byteOffset,
    byteLength: $VkOffset3D.y.byteLength
  }),
  z: Object.freeze({
    byteOffset: $VkOffset3D.z.byteOffset,
    byteLength: $VkOffset3D.z.byteLength
  }),
});
class VkExtent2D {
  constructor(opts) {
    this._width = 0;
    this._height = 0;
    this.memoryBuffer = new ArrayBuffer(VkExtent2D.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      
    }
  }
  get width() {
    return this._width;
  }
  set width(value) {
    
this.memoryView.setUint32($VkExtent2D.width.byteOffset, value);
this._width = value;
  }
  get height() {
    return this._height;
  }
  set height(value) {
    
this.memoryView.setUint32($VkExtent2D.height.byteOffset, value);
this._height = value;
  }
  
};

VkExtent2D.prototype.flush = function flush() {
  
};

const $VkExtent2D = memoryLayouts.VkExtent2D;
VkExtent2D.byteLength = $VkExtent2D.byteLength;

VkExtent2D.memoryLayout = Object.freeze({
  width: Object.freeze({
    byteOffset: $VkExtent2D.width.byteOffset,
    byteLength: $VkExtent2D.width.byteLength
  }),
  height: Object.freeze({
    byteOffset: $VkExtent2D.height.byteOffset,
    byteLength: $VkExtent2D.height.byteLength
  }),
});
class VkExtent3D {
  constructor(opts) {
    this._width = 0;
    this._height = 0;
    this._depth = 0;
    this.memoryBuffer = new ArrayBuffer(VkExtent3D.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      if (opts.depth !== void 0) this.depth = opts.depth;
      
    }
  }
  get width() {
    return this._width;
  }
  set width(value) {
    
this.memoryView.setUint32($VkExtent3D.width.byteOffset, value);
this._width = value;
  }
  get height() {
    return this._height;
  }
  set height(value) {
    
this.memoryView.setUint32($VkExtent3D.height.byteOffset, value);
this._height = value;
  }
  get depth() {
    return this._depth;
  }
  set depth(value) {
    
this.memoryView.setUint32($VkExtent3D.depth.byteOffset, value);
this._depth = value;
  }
  
};

VkExtent3D.prototype.flush = function flush() {
  
};

const $VkExtent3D = memoryLayouts.VkExtent3D;
VkExtent3D.byteLength = $VkExtent3D.byteLength;

VkExtent3D.memoryLayout = Object.freeze({
  width: Object.freeze({
    byteOffset: $VkExtent3D.width.byteOffset,
    byteLength: $VkExtent3D.width.byteLength
  }),
  height: Object.freeze({
    byteOffset: $VkExtent3D.height.byteOffset,
    byteLength: $VkExtent3D.height.byteLength
  }),
  depth: Object.freeze({
    byteOffset: $VkExtent3D.depth.byteOffset,
    byteLength: $VkExtent3D.depth.byteLength
  }),
});
class VkViewport {
  constructor(opts) {
    this._x = 0;
    this._y = 0;
    this._width = 0;
    this._height = 0;
    this._minDepth = 0;
    this._maxDepth = 0;
    this.memoryBuffer = new ArrayBuffer(VkViewport.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      if (opts.minDepth !== void 0) this.minDepth = opts.minDepth;
      if (opts.maxDepth !== void 0) this.maxDepth = opts.maxDepth;
      
    }
  }
  get x() {
    return this._x;
  }
  set x(value) {
    
this.memoryView.setFloat32($VkViewport.x.byteOffset, value);
this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    
this.memoryView.setFloat32($VkViewport.y.byteOffset, value);
this._y = value;
  }
  get width() {
    return this._width;
  }
  set width(value) {
    
this.memoryView.setFloat32($VkViewport.width.byteOffset, value);
this._width = value;
  }
  get height() {
    return this._height;
  }
  set height(value) {
    
this.memoryView.setFloat32($VkViewport.height.byteOffset, value);
this._height = value;
  }
  get minDepth() {
    return this._minDepth;
  }
  set minDepth(value) {
    
this.memoryView.setFloat32($VkViewport.minDepth.byteOffset, value);
this._minDepth = value;
  }
  get maxDepth() {
    return this._maxDepth;
  }
  set maxDepth(value) {
    
this.memoryView.setFloat32($VkViewport.maxDepth.byteOffset, value);
this._maxDepth = value;
  }
  
};

VkViewport.prototype.flush = function flush() {
  
};

const $VkViewport = memoryLayouts.VkViewport;
VkViewport.byteLength = $VkViewport.byteLength;

VkViewport.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: $VkViewport.x.byteOffset,
    byteLength: $VkViewport.x.byteLength
  }),
  y: Object.freeze({
    byteOffset: $VkViewport.y.byteOffset,
    byteLength: $VkViewport.y.byteLength
  }),
  width: Object.freeze({
    byteOffset: $VkViewport.width.byteOffset,
    byteLength: $VkViewport.width.byteLength
  }),
  height: Object.freeze({
    byteOffset: $VkViewport.height.byteOffset,
    byteLength: $VkViewport.height.byteLength
  }),
  minDepth: Object.freeze({
    byteOffset: $VkViewport.minDepth.byteOffset,
    byteLength: $VkViewport.minDepth.byteLength
  }),
  maxDepth: Object.freeze({
    byteOffset: $VkViewport.maxDepth.byteOffset,
    byteLength: $VkViewport.maxDepth.byteLength
  }),
});
class VkRect2D {
  constructor(opts) {
    this._offset = null;
    this._extent = null;
    this.memoryBuffer = new ArrayBuffer(VkRect2D.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      
    }
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    String
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    String
  }
  
};

VkRect2D.prototype.flush = function flush() {
  
  if (this.offset !== null) { }
  
  if (this.extent !== null) { }
  
};

const $VkRect2D = memoryLayouts.VkRect2D;
VkRect2D.byteLength = $VkRect2D.byteLength;

VkRect2D.memoryLayout = Object.freeze({
  offset: Object.freeze({
    byteOffset: $VkRect2D.offset.byteOffset,
    byteLength: $VkRect2D.offset.byteLength
  }),
  extent: Object.freeze({
    byteOffset: $VkRect2D.extent.byteOffset,
    byteLength: $VkRect2D.extent.byteLength
  }),
});
class VkClearRect {
  constructor(opts) {
    this._rect = null;
    this._baseArrayLayer = 0;
    this._layerCount = 0;
    this.memoryBuffer = new ArrayBuffer(VkClearRect.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.rect !== void 0) this.rect = opts.rect;
      if (opts.baseArrayLayer !== void 0) this.baseArrayLayer = opts.baseArrayLayer;
      if (opts.layerCount !== void 0) this.layerCount = opts.layerCount;
      
    }
  }
  get rect() {
    return this._rect;
  }
  set rect(value) {
    String
  }
  get baseArrayLayer() {
    return this._baseArrayLayer;
  }
  set baseArrayLayer(value) {
    
this.memoryView.setUint32($VkClearRect.baseArrayLayer.byteOffset, value);
this._baseArrayLayer = value;
  }
  get layerCount() {
    return this._layerCount;
  }
  set layerCount(value) {
    
this.memoryView.setUint32($VkClearRect.layerCount.byteOffset, value);
this._layerCount = value;
  }
  
};

VkClearRect.prototype.flush = function flush() {
  
  if (this.rect !== null) { }
  
};

const $VkClearRect = memoryLayouts.VkClearRect;
VkClearRect.byteLength = $VkClearRect.byteLength;

VkClearRect.memoryLayout = Object.freeze({
  rect: Object.freeze({
    byteOffset: $VkClearRect.rect.byteOffset,
    byteLength: $VkClearRect.rect.byteLength
  }),
  baseArrayLayer: Object.freeze({
    byteOffset: $VkClearRect.baseArrayLayer.byteOffset,
    byteLength: $VkClearRect.baseArrayLayer.byteLength
  }),
  layerCount: Object.freeze({
    byteOffset: $VkClearRect.layerCount.byteOffset,
    byteLength: $VkClearRect.layerCount.byteLength
  }),
});
class VkComponentMapping {
  constructor(opts) {
    this._r = 0;
    this._g = 0;
    this._b = 0;
    this._a = 0;
    this.memoryBuffer = new ArrayBuffer(VkComponentMapping.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.r !== void 0) this.r = opts.r;
      if (opts.g !== void 0) this.g = opts.g;
      if (opts.b !== void 0) this.b = opts.b;
      if (opts.a !== void 0) this.a = opts.a;
      
    }
  }
  get r() {
    return this._r;
  }
  set r(value) {
    
this.memoryView.setInt32($VkComponentMapping.r.byteOffset, value);
this._r = value;
  }
  get g() {
    return this._g;
  }
  set g(value) {
    
this.memoryView.setInt32($VkComponentMapping.g.byteOffset, value);
this._g = value;
  }
  get b() {
    return this._b;
  }
  set b(value) {
    
this.memoryView.setInt32($VkComponentMapping.b.byteOffset, value);
this._b = value;
  }
  get a() {
    return this._a;
  }
  set a(value) {
    
this.memoryView.setInt32($VkComponentMapping.a.byteOffset, value);
this._a = value;
  }
  
};

VkComponentMapping.prototype.flush = function flush() {
  
};

const $VkComponentMapping = memoryLayouts.VkComponentMapping;
VkComponentMapping.byteLength = $VkComponentMapping.byteLength;

VkComponentMapping.memoryLayout = Object.freeze({
  r: Object.freeze({
    byteOffset: $VkComponentMapping.r.byteOffset,
    byteLength: $VkComponentMapping.r.byteLength
  }),
  g: Object.freeze({
    byteOffset: $VkComponentMapping.g.byteOffset,
    byteLength: $VkComponentMapping.g.byteLength
  }),
  b: Object.freeze({
    byteOffset: $VkComponentMapping.b.byteOffset,
    byteLength: $VkComponentMapping.b.byteLength
  }),
  a: Object.freeze({
    byteOffset: $VkComponentMapping.a.byteOffset,
    byteLength: $VkComponentMapping.a.byteLength
  }),
});
class VkPhysicalDeviceProperties {
  constructor(opts) {
    this._apiVersion = 0;
    this._driverVersion = 0;
    this._vendorID = 0;
    this._deviceID = 0;
    this._deviceType = 0;
    this._deviceName = null;
    this._pipelineCacheUUID = null;
    this._limits = null;
    this._sparseProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get apiVersion() {
    return this._apiVersion;
  }
  get driverVersion() {
    return this._driverVersion;
  }
  get vendorID() {
    return this._vendorID;
  }
  get deviceID() {
    return this._deviceID;
  }
  get deviceType() {
    return this._deviceType;
  }
  get deviceName() {
    return this._deviceName;
  }
  get pipelineCacheUUID() {
    return this._pipelineCacheUUID;
  }
  get limits() {
    return this._limits;
  }
  get sparseProperties() {
    return this._sparseProperties;
  }
  
};

VkPhysicalDeviceProperties.prototype.flush = function flush() {
  
  if (this.pipelineCacheUUID !== null) { }
  
  if (this.limits !== null) { }
  
  if (this.sparseProperties !== null) { }
  
};

const $VkPhysicalDeviceProperties = memoryLayouts.VkPhysicalDeviceProperties;
VkPhysicalDeviceProperties.byteLength = $VkPhysicalDeviceProperties.byteLength;

VkPhysicalDeviceProperties.memoryLayout = Object.freeze({
  apiVersion: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties.apiVersion.byteOffset,
    byteLength: $VkPhysicalDeviceProperties.apiVersion.byteLength
  }),
  driverVersion: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties.driverVersion.byteOffset,
    byteLength: $VkPhysicalDeviceProperties.driverVersion.byteLength
  }),
  vendorID: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties.vendorID.byteOffset,
    byteLength: $VkPhysicalDeviceProperties.vendorID.byteLength
  }),
  deviceID: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties.deviceID.byteOffset,
    byteLength: $VkPhysicalDeviceProperties.deviceID.byteLength
  }),
  deviceType: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties.deviceType.byteOffset,
    byteLength: $VkPhysicalDeviceProperties.deviceType.byteLength
  }),
  deviceName: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties.deviceName.byteOffset,
    byteLength: $VkPhysicalDeviceProperties.deviceName.byteLength
  }),
  pipelineCacheUUID: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties.pipelineCacheUUID.byteOffset,
    byteLength: $VkPhysicalDeviceProperties.pipelineCacheUUID.byteLength
  }),
  limits: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties.limits.byteOffset,
    byteLength: $VkPhysicalDeviceProperties.limits.byteLength
  }),
  sparseProperties: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties.sparseProperties.byteOffset,
    byteLength: $VkPhysicalDeviceProperties.sparseProperties.byteLength
  }),
});
class VkExtensionProperties {
  constructor(opts) {
    this._extensionName = null;
    this._specVersion = 0;
    this.memoryBuffer = new ArrayBuffer(VkExtensionProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get extensionName() {
    return this._extensionName;
  }
  get specVersion() {
    return this._specVersion;
  }
  
};

VkExtensionProperties.prototype.flush = function flush() {
  
};

const $VkExtensionProperties = memoryLayouts.VkExtensionProperties;
VkExtensionProperties.byteLength = $VkExtensionProperties.byteLength;

VkExtensionProperties.memoryLayout = Object.freeze({
  extensionName: Object.freeze({
    byteOffset: $VkExtensionProperties.extensionName.byteOffset,
    byteLength: $VkExtensionProperties.extensionName.byteLength
  }),
  specVersion: Object.freeze({
    byteOffset: $VkExtensionProperties.specVersion.byteOffset,
    byteLength: $VkExtensionProperties.specVersion.byteLength
  }),
});
class VkLayerProperties {
  constructor(opts) {
    this._layerName = null;
    this._specVersion = 0;
    this._implementationVersion = 0;
    this._description = null;
    this.memoryBuffer = new ArrayBuffer(VkLayerProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get layerName() {
    return this._layerName;
  }
  get specVersion() {
    return this._specVersion;
  }
  get implementationVersion() {
    return this._implementationVersion;
  }
  get description() {
    return this._description;
  }
  
};

VkLayerProperties.prototype.flush = function flush() {
  
};

const $VkLayerProperties = memoryLayouts.VkLayerProperties;
VkLayerProperties.byteLength = $VkLayerProperties.byteLength;

VkLayerProperties.memoryLayout = Object.freeze({
  layerName: Object.freeze({
    byteOffset: $VkLayerProperties.layerName.byteOffset,
    byteLength: $VkLayerProperties.layerName.byteLength
  }),
  specVersion: Object.freeze({
    byteOffset: $VkLayerProperties.specVersion.byteOffset,
    byteLength: $VkLayerProperties.specVersion.byteLength
  }),
  implementationVersion: Object.freeze({
    byteOffset: $VkLayerProperties.implementationVersion.byteOffset,
    byteLength: $VkLayerProperties.implementationVersion.byteLength
  }),
  description: Object.freeze({
    byteOffset: $VkLayerProperties.description.byteOffset,
    byteLength: $VkLayerProperties.description.byteLength
  }),
});
class VkApplicationInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._pApplicationName = null;
    this._applicationVersion = 0;
    this._pEngineName = null;
    this._engineVersion = 0;
    this._apiVersion = 0;
    this.memoryBuffer = new ArrayBuffer(VkApplicationInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pApplicationName !== void 0) this.pApplicationName = opts.pApplicationName;
      if (opts.applicationVersion !== void 0) this.applicationVersion = opts.applicationVersion;
      if (opts.pEngineName !== void 0) this.pEngineName = opts.pEngineName;
      if (opts.engineVersion !== void 0) this.engineVersion = opts.engineVersion;
      if (opts.apiVersion !== void 0) this.apiVersion = opts.apiVersion;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkApplicationInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get pApplicationName() {
    return this._pApplicationName;
  }
  set pApplicationName(value) {
    String
  }
  get applicationVersion() {
    return this._applicationVersion;
  }
  set applicationVersion(value) {
    
this.memoryView.setUint32($VkApplicationInfo.applicationVersion.byteOffset, value);
this._applicationVersion = value;
  }
  get pEngineName() {
    return this._pEngineName;
  }
  set pEngineName(value) {
    String
  }
  get engineVersion() {
    return this._engineVersion;
  }
  set engineVersion(value) {
    
this.memoryView.setUint32($VkApplicationInfo.engineVersion.byteOffset, value);
this._engineVersion = value;
  }
  get apiVersion() {
    return this._apiVersion;
  }
  set apiVersion(value) {
    
this.memoryView.setUint32($VkApplicationInfo.apiVersion.byteOffset, value);
this._apiVersion = value;
  }
  
};

VkApplicationInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkApplicationInfo = memoryLayouts.VkApplicationInfo;
VkApplicationInfo.byteLength = $VkApplicationInfo.byteLength;

VkApplicationInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkApplicationInfo.sType.byteOffset,
    byteLength: $VkApplicationInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkApplicationInfo.pNext.byteOffset,
    byteLength: $VkApplicationInfo.pNext.byteLength
  }),
  pApplicationName: Object.freeze({
    byteOffset: $VkApplicationInfo.pApplicationName.byteOffset,
    byteLength: $VkApplicationInfo.pApplicationName.byteLength
  }),
  applicationVersion: Object.freeze({
    byteOffset: $VkApplicationInfo.applicationVersion.byteOffset,
    byteLength: $VkApplicationInfo.applicationVersion.byteLength
  }),
  pEngineName: Object.freeze({
    byteOffset: $VkApplicationInfo.pEngineName.byteOffset,
    byteLength: $VkApplicationInfo.pEngineName.byteLength
  }),
  engineVersion: Object.freeze({
    byteOffset: $VkApplicationInfo.engineVersion.byteOffset,
    byteLength: $VkApplicationInfo.engineVersion.byteLength
  }),
  apiVersion: Object.freeze({
    byteOffset: $VkApplicationInfo.apiVersion.byteOffset,
    byteLength: $VkApplicationInfo.apiVersion.byteLength
  }),
});
class VkAllocationCallbacks {
  constructor(opts) {
    this._pUserData = null;
    this.memoryBuffer = new ArrayBuffer(VkAllocationCallbacks.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.pUserData !== void 0) this.pUserData = opts.pUserData;
      
    }
  }
  get pUserData() {
    return this._pUserData;
  }
  set pUserData(value) {
    
  }
  
};

VkAllocationCallbacks.prototype.flush = function flush() {
  
};

const $VkAllocationCallbacks = memoryLayouts.VkAllocationCallbacks;
VkAllocationCallbacks.byteLength = $VkAllocationCallbacks.byteLength;

VkAllocationCallbacks.memoryLayout = Object.freeze({
  pUserData: Object.freeze({
    byteOffset: $VkAllocationCallbacks.pUserData.byteOffset,
    byteLength: $VkAllocationCallbacks.pUserData.byteLength
  }),
});
class VkDeviceQueueCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._queueFamilyIndex = 0;
    this._queueCount = 0;
    this._pQueuePriorities = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceQueueCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueFamilyIndex !== void 0) this.queueFamilyIndex = opts.queueFamilyIndex;
      if (opts.queueCount !== void 0) this.queueCount = opts.queueCount;
      if (opts.pQueuePriorities !== void 0) this.pQueuePriorities = opts.pQueuePriorities;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceQueueCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkDeviceQueueCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get queueFamilyIndex() {
    return this._queueFamilyIndex;
  }
  set queueFamilyIndex(value) {
    
this.memoryView.setUint32($VkDeviceQueueCreateInfo.queueFamilyIndex.byteOffset, value);
this._queueFamilyIndex = value;
  }
  get queueCount() {
    return this._queueCount;
  }
  set queueCount(value) {
    
this.memoryView.setUint32($VkDeviceQueueCreateInfo.queueCount.byteOffset, value);
this._queueCount = value;
  }
  get pQueuePriorities() {
    return this._pQueuePriorities;
  }
  set pQueuePriorities(value) {
    
  }
  
};

VkDeviceQueueCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceQueueCreateInfo = memoryLayouts.VkDeviceQueueCreateInfo;
VkDeviceQueueCreateInfo.byteLength = $VkDeviceQueueCreateInfo.byteLength;

VkDeviceQueueCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceQueueCreateInfo.sType.byteOffset,
    byteLength: $VkDeviceQueueCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceQueueCreateInfo.pNext.byteOffset,
    byteLength: $VkDeviceQueueCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkDeviceQueueCreateInfo.flags.byteOffset,
    byteLength: $VkDeviceQueueCreateInfo.flags.byteLength
  }),
  queueFamilyIndex: Object.freeze({
    byteOffset: $VkDeviceQueueCreateInfo.queueFamilyIndex.byteOffset,
    byteLength: $VkDeviceQueueCreateInfo.queueFamilyIndex.byteLength
  }),
  queueCount: Object.freeze({
    byteOffset: $VkDeviceQueueCreateInfo.queueCount.byteOffset,
    byteLength: $VkDeviceQueueCreateInfo.queueCount.byteLength
  }),
  pQueuePriorities: Object.freeze({
    byteOffset: $VkDeviceQueueCreateInfo.pQueuePriorities.byteOffset,
    byteLength: $VkDeviceQueueCreateInfo.pQueuePriorities.byteLength
  }),
});
class VkDeviceCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._queueCreateInfoCount = 0;
    this._pQueueCreateInfos = null;
    this._enabledLayerCount = 0;
    this._ppEnabledLayerNames = null;
    this._enabledExtensionCount = 0;
    this._ppEnabledExtensionNames = null;
    this._pEnabledFeatures = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueCreateInfoCount !== void 0) this.queueCreateInfoCount = opts.queueCreateInfoCount;
      if (opts.pQueueCreateInfos !== void 0) this.pQueueCreateInfos = opts.pQueueCreateInfos;
      if (opts.enabledLayerCount !== void 0) this.enabledLayerCount = opts.enabledLayerCount;
      if (opts.ppEnabledLayerNames !== void 0) this.ppEnabledLayerNames = opts.ppEnabledLayerNames;
      if (opts.enabledExtensionCount !== void 0) this.enabledExtensionCount = opts.enabledExtensionCount;
      if (opts.ppEnabledExtensionNames !== void 0) this.ppEnabledExtensionNames = opts.ppEnabledExtensionNames;
      if (opts.pEnabledFeatures !== void 0) this.pEnabledFeatures = opts.pEnabledFeatures;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkDeviceCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get queueCreateInfoCount() {
    return this._queueCreateInfoCount;
  }
  set queueCreateInfoCount(value) {
    
this.memoryView.setUint32($VkDeviceCreateInfo.queueCreateInfoCount.byteOffset, value);
this._queueCreateInfoCount = value;
  }
  get pQueueCreateInfos() {
    return this._pQueueCreateInfos;
  }
  set pQueueCreateInfos(value) {
    
  }
  get enabledLayerCount() {
    return this._enabledLayerCount;
  }
  set enabledLayerCount(value) {
    
this.memoryView.setUint32($VkDeviceCreateInfo.enabledLayerCount.byteOffset, value);
this._enabledLayerCount = value;
  }
  get ppEnabledLayerNames() {
    return this._ppEnabledLayerNames;
  }
  set ppEnabledLayerNames(value) {
    
  }
  get enabledExtensionCount() {
    return this._enabledExtensionCount;
  }
  set enabledExtensionCount(value) {
    
this.memoryView.setUint32($VkDeviceCreateInfo.enabledExtensionCount.byteOffset, value);
this._enabledExtensionCount = value;
  }
  get ppEnabledExtensionNames() {
    return this._ppEnabledExtensionNames;
  }
  set ppEnabledExtensionNames(value) {
    
  }
  get pEnabledFeatures() {
    return this._pEnabledFeatures;
  }
  set pEnabledFeatures(value) {
    String
  }
  
};

VkDeviceCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pQueueCreateInfos !== null) { }
  
  if (this.ppEnabledLayerNames !== null) { }
  
  if (this.ppEnabledExtensionNames !== null) { }
  
};

const $VkDeviceCreateInfo = memoryLayouts.VkDeviceCreateInfo;
VkDeviceCreateInfo.byteLength = $VkDeviceCreateInfo.byteLength;

VkDeviceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceCreateInfo.sType.byteOffset,
    byteLength: $VkDeviceCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceCreateInfo.pNext.byteOffset,
    byteLength: $VkDeviceCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkDeviceCreateInfo.flags.byteOffset,
    byteLength: $VkDeviceCreateInfo.flags.byteLength
  }),
  queueCreateInfoCount: Object.freeze({
    byteOffset: $VkDeviceCreateInfo.queueCreateInfoCount.byteOffset,
    byteLength: $VkDeviceCreateInfo.queueCreateInfoCount.byteLength
  }),
  pQueueCreateInfos: Object.freeze({
    byteOffset: $VkDeviceCreateInfo.pQueueCreateInfos.byteOffset,
    byteLength: $VkDeviceCreateInfo.pQueueCreateInfos.byteLength
  }),
  enabledLayerCount: Object.freeze({
    byteOffset: $VkDeviceCreateInfo.enabledLayerCount.byteOffset,
    byteLength: $VkDeviceCreateInfo.enabledLayerCount.byteLength
  }),
  ppEnabledLayerNames: Object.freeze({
    byteOffset: $VkDeviceCreateInfo.ppEnabledLayerNames.byteOffset,
    byteLength: $VkDeviceCreateInfo.ppEnabledLayerNames.byteLength
  }),
  enabledExtensionCount: Object.freeze({
    byteOffset: $VkDeviceCreateInfo.enabledExtensionCount.byteOffset,
    byteLength: $VkDeviceCreateInfo.enabledExtensionCount.byteLength
  }),
  ppEnabledExtensionNames: Object.freeze({
    byteOffset: $VkDeviceCreateInfo.ppEnabledExtensionNames.byteOffset,
    byteLength: $VkDeviceCreateInfo.ppEnabledExtensionNames.byteLength
  }),
  pEnabledFeatures: Object.freeze({
    byteOffset: $VkDeviceCreateInfo.pEnabledFeatures.byteOffset,
    byteLength: $VkDeviceCreateInfo.pEnabledFeatures.byteLength
  }),
});
class VkInstanceCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._pApplicationInfo = null;
    this._enabledLayerCount = 0;
    this._ppEnabledLayerNames = null;
    this._enabledExtensionCount = 0;
    this._ppEnabledExtensionNames = null;
    this.memoryBuffer = new ArrayBuffer(VkInstanceCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pApplicationInfo !== void 0) this.pApplicationInfo = opts.pApplicationInfo;
      if (opts.enabledLayerCount !== void 0) this.enabledLayerCount = opts.enabledLayerCount;
      if (opts.ppEnabledLayerNames !== void 0) this.ppEnabledLayerNames = opts.ppEnabledLayerNames;
      if (opts.enabledExtensionCount !== void 0) this.enabledExtensionCount = opts.enabledExtensionCount;
      if (opts.ppEnabledExtensionNames !== void 0) this.ppEnabledExtensionNames = opts.ppEnabledExtensionNames;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkInstanceCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkInstanceCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get pApplicationInfo() {
    return this._pApplicationInfo;
  }
  set pApplicationInfo(value) {
    String
  }
  get enabledLayerCount() {
    return this._enabledLayerCount;
  }
  set enabledLayerCount(value) {
    
this.memoryView.setUint32($VkInstanceCreateInfo.enabledLayerCount.byteOffset, value);
this._enabledLayerCount = value;
  }
  get ppEnabledLayerNames() {
    return this._ppEnabledLayerNames;
  }
  set ppEnabledLayerNames(value) {
    
  }
  get enabledExtensionCount() {
    return this._enabledExtensionCount;
  }
  set enabledExtensionCount(value) {
    
this.memoryView.setUint32($VkInstanceCreateInfo.enabledExtensionCount.byteOffset, value);
this._enabledExtensionCount = value;
  }
  get ppEnabledExtensionNames() {
    return this._ppEnabledExtensionNames;
  }
  set ppEnabledExtensionNames(value) {
    
  }
  
};

VkInstanceCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.ppEnabledLayerNames !== null) { }
  
  if (this.ppEnabledExtensionNames !== null) { }
  
};

const $VkInstanceCreateInfo = memoryLayouts.VkInstanceCreateInfo;
VkInstanceCreateInfo.byteLength = $VkInstanceCreateInfo.byteLength;

VkInstanceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkInstanceCreateInfo.sType.byteOffset,
    byteLength: $VkInstanceCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkInstanceCreateInfo.pNext.byteOffset,
    byteLength: $VkInstanceCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkInstanceCreateInfo.flags.byteOffset,
    byteLength: $VkInstanceCreateInfo.flags.byteLength
  }),
  pApplicationInfo: Object.freeze({
    byteOffset: $VkInstanceCreateInfo.pApplicationInfo.byteOffset,
    byteLength: $VkInstanceCreateInfo.pApplicationInfo.byteLength
  }),
  enabledLayerCount: Object.freeze({
    byteOffset: $VkInstanceCreateInfo.enabledLayerCount.byteOffset,
    byteLength: $VkInstanceCreateInfo.enabledLayerCount.byteLength
  }),
  ppEnabledLayerNames: Object.freeze({
    byteOffset: $VkInstanceCreateInfo.ppEnabledLayerNames.byteOffset,
    byteLength: $VkInstanceCreateInfo.ppEnabledLayerNames.byteLength
  }),
  enabledExtensionCount: Object.freeze({
    byteOffset: $VkInstanceCreateInfo.enabledExtensionCount.byteOffset,
    byteLength: $VkInstanceCreateInfo.enabledExtensionCount.byteLength
  }),
  ppEnabledExtensionNames: Object.freeze({
    byteOffset: $VkInstanceCreateInfo.ppEnabledExtensionNames.byteOffset,
    byteLength: $VkInstanceCreateInfo.ppEnabledExtensionNames.byteLength
  }),
});
class VkQueueFamilyProperties {
  constructor(opts) {
    this._queueFlags = 0;
    this._queueCount = 0;
    this._timestampValidBits = 0;
    this._minImageTransferGranularity = null;
    this.memoryBuffer = new ArrayBuffer(VkQueueFamilyProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get queueFlags() {
    return this._queueFlags;
  }
  get queueCount() {
    return this._queueCount;
  }
  get timestampValidBits() {
    return this._timestampValidBits;
  }
  get minImageTransferGranularity() {
    return this._minImageTransferGranularity;
  }
  
};

VkQueueFamilyProperties.prototype.flush = function flush() {
  
  if (this.minImageTransferGranularity !== null) { }
  
};

const $VkQueueFamilyProperties = memoryLayouts.VkQueueFamilyProperties;
VkQueueFamilyProperties.byteLength = $VkQueueFamilyProperties.byteLength;

VkQueueFamilyProperties.memoryLayout = Object.freeze({
  queueFlags: Object.freeze({
    byteOffset: $VkQueueFamilyProperties.queueFlags.byteOffset,
    byteLength: $VkQueueFamilyProperties.queueFlags.byteLength
  }),
  queueCount: Object.freeze({
    byteOffset: $VkQueueFamilyProperties.queueCount.byteOffset,
    byteLength: $VkQueueFamilyProperties.queueCount.byteLength
  }),
  timestampValidBits: Object.freeze({
    byteOffset: $VkQueueFamilyProperties.timestampValidBits.byteOffset,
    byteLength: $VkQueueFamilyProperties.timestampValidBits.byteLength
  }),
  minImageTransferGranularity: Object.freeze({
    byteOffset: $VkQueueFamilyProperties.minImageTransferGranularity.byteOffset,
    byteLength: $VkQueueFamilyProperties.minImageTransferGranularity.byteLength
  }),
});
class VkPhysicalDeviceMemoryProperties {
  constructor(opts) {
    this._memoryTypeCount = 0;
    this._memoryTypes = null;
    this._memoryHeapCount = 0;
    this._memoryHeaps = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMemoryProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get memoryTypeCount() {
    return this._memoryTypeCount;
  }
  get memoryTypes() {
    return this._memoryTypes;
  }
  get memoryHeapCount() {
    return this._memoryHeapCount;
  }
  get memoryHeaps() {
    return this._memoryHeaps;
  }
  
};

VkPhysicalDeviceMemoryProperties.prototype.flush = function flush() {
  
  if (this.memoryTypes !== null) { }
  
  if (this.memoryHeaps !== null) { }
  
};

const $VkPhysicalDeviceMemoryProperties = memoryLayouts.VkPhysicalDeviceMemoryProperties;
VkPhysicalDeviceMemoryProperties.byteLength = $VkPhysicalDeviceMemoryProperties.byteLength;

VkPhysicalDeviceMemoryProperties.memoryLayout = Object.freeze({
  memoryTypeCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryProperties.memoryTypeCount.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryProperties.memoryTypeCount.byteLength
  }),
  memoryTypes: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryProperties.memoryTypes.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryProperties.memoryTypes.byteLength
  }),
  memoryHeapCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryProperties.memoryHeapCount.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryProperties.memoryHeapCount.byteLength
  }),
  memoryHeaps: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryProperties.memoryHeaps.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryProperties.memoryHeaps.byteLength
  }),
});
class VkMemoryAllocateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._allocationSize = 0;
    this._memoryTypeIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryAllocateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.allocationSize !== void 0) this.allocationSize = opts.allocationSize;
      if (opts.memoryTypeIndex !== void 0) this.memoryTypeIndex = opts.memoryTypeIndex;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryAllocateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get allocationSize() {
    return this._allocationSize;
  }
  set allocationSize(value) {
    
this.memoryView.setBigUint64($VkMemoryAllocateInfo.allocationSize.byteOffset, value);
this._allocationSize = value;
  }
  get memoryTypeIndex() {
    return this._memoryTypeIndex;
  }
  set memoryTypeIndex(value) {
    
this.memoryView.setUint32($VkMemoryAllocateInfo.memoryTypeIndex.byteOffset, value);
this._memoryTypeIndex = value;
  }
  
};

VkMemoryAllocateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryAllocateInfo = memoryLayouts.VkMemoryAllocateInfo;
VkMemoryAllocateInfo.byteLength = $VkMemoryAllocateInfo.byteLength;

VkMemoryAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryAllocateInfo.sType.byteOffset,
    byteLength: $VkMemoryAllocateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryAllocateInfo.pNext.byteOffset,
    byteLength: $VkMemoryAllocateInfo.pNext.byteLength
  }),
  allocationSize: Object.freeze({
    byteOffset: $VkMemoryAllocateInfo.allocationSize.byteOffset,
    byteLength: $VkMemoryAllocateInfo.allocationSize.byteLength
  }),
  memoryTypeIndex: Object.freeze({
    byteOffset: $VkMemoryAllocateInfo.memoryTypeIndex.byteOffset,
    byteLength: $VkMemoryAllocateInfo.memoryTypeIndex.byteLength
  }),
});
class VkMemoryRequirements {
  constructor(opts) {
    this._size = 0;
    this._alignment = 0;
    this._memoryTypeBits = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryRequirements.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get size() {
    return this._size;
  }
  get alignment() {
    return this._alignment;
  }
  get memoryTypeBits() {
    return this._memoryTypeBits;
  }
  
};

VkMemoryRequirements.prototype.flush = function flush() {
  
};

const $VkMemoryRequirements = memoryLayouts.VkMemoryRequirements;
VkMemoryRequirements.byteLength = $VkMemoryRequirements.byteLength;

VkMemoryRequirements.memoryLayout = Object.freeze({
  size: Object.freeze({
    byteOffset: $VkMemoryRequirements.size.byteOffset,
    byteLength: $VkMemoryRequirements.size.byteLength
  }),
  alignment: Object.freeze({
    byteOffset: $VkMemoryRequirements.alignment.byteOffset,
    byteLength: $VkMemoryRequirements.alignment.byteLength
  }),
  memoryTypeBits: Object.freeze({
    byteOffset: $VkMemoryRequirements.memoryTypeBits.byteOffset,
    byteLength: $VkMemoryRequirements.memoryTypeBits.byteLength
  }),
});
class VkSparseImageFormatProperties {
  constructor(opts) {
    this._aspectMask = 0;
    this._imageGranularity = null;
    this._flags = 0;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageFormatProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get aspectMask() {
    return this._aspectMask;
  }
  get imageGranularity() {
    return this._imageGranularity;
  }
  get flags() {
    return this._flags;
  }
  
};

VkSparseImageFormatProperties.prototype.flush = function flush() {
  
  if (this.imageGranularity !== null) { }
  
};

const $VkSparseImageFormatProperties = memoryLayouts.VkSparseImageFormatProperties;
VkSparseImageFormatProperties.byteLength = $VkSparseImageFormatProperties.byteLength;

VkSparseImageFormatProperties.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: $VkSparseImageFormatProperties.aspectMask.byteOffset,
    byteLength: $VkSparseImageFormatProperties.aspectMask.byteLength
  }),
  imageGranularity: Object.freeze({
    byteOffset: $VkSparseImageFormatProperties.imageGranularity.byteOffset,
    byteLength: $VkSparseImageFormatProperties.imageGranularity.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkSparseImageFormatProperties.flags.byteOffset,
    byteLength: $VkSparseImageFormatProperties.flags.byteLength
  }),
});
class VkSparseImageMemoryRequirements {
  constructor(opts) {
    this._formatProperties = null;
    this._imageMipTailFirstLod = 0;
    this._imageMipTailSize = 0;
    this._imageMipTailOffset = 0;
    this._imageMipTailStride = 0;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageMemoryRequirements.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get formatProperties() {
    return this._formatProperties;
  }
  get imageMipTailFirstLod() {
    return this._imageMipTailFirstLod;
  }
  get imageMipTailSize() {
    return this._imageMipTailSize;
  }
  get imageMipTailOffset() {
    return this._imageMipTailOffset;
  }
  get imageMipTailStride() {
    return this._imageMipTailStride;
  }
  
};

VkSparseImageMemoryRequirements.prototype.flush = function flush() {
  
  if (this.formatProperties !== null) { }
  
};

const $VkSparseImageMemoryRequirements = memoryLayouts.VkSparseImageMemoryRequirements;
VkSparseImageMemoryRequirements.byteLength = $VkSparseImageMemoryRequirements.byteLength;

VkSparseImageMemoryRequirements.memoryLayout = Object.freeze({
  formatProperties: Object.freeze({
    byteOffset: $VkSparseImageMemoryRequirements.formatProperties.byteOffset,
    byteLength: $VkSparseImageMemoryRequirements.formatProperties.byteLength
  }),
  imageMipTailFirstLod: Object.freeze({
    byteOffset: $VkSparseImageMemoryRequirements.imageMipTailFirstLod.byteOffset,
    byteLength: $VkSparseImageMemoryRequirements.imageMipTailFirstLod.byteLength
  }),
  imageMipTailSize: Object.freeze({
    byteOffset: $VkSparseImageMemoryRequirements.imageMipTailSize.byteOffset,
    byteLength: $VkSparseImageMemoryRequirements.imageMipTailSize.byteLength
  }),
  imageMipTailOffset: Object.freeze({
    byteOffset: $VkSparseImageMemoryRequirements.imageMipTailOffset.byteOffset,
    byteLength: $VkSparseImageMemoryRequirements.imageMipTailOffset.byteLength
  }),
  imageMipTailStride: Object.freeze({
    byteOffset: $VkSparseImageMemoryRequirements.imageMipTailStride.byteOffset,
    byteLength: $VkSparseImageMemoryRequirements.imageMipTailStride.byteLength
  }),
});
class VkMemoryType {
  constructor(opts) {
    this._propertyFlags = 0;
    this._heapIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryType.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get propertyFlags() {
    return this._propertyFlags;
  }
  get heapIndex() {
    return this._heapIndex;
  }
  
};

VkMemoryType.prototype.flush = function flush() {
  
};

const $VkMemoryType = memoryLayouts.VkMemoryType;
VkMemoryType.byteLength = $VkMemoryType.byteLength;

VkMemoryType.memoryLayout = Object.freeze({
  propertyFlags: Object.freeze({
    byteOffset: $VkMemoryType.propertyFlags.byteOffset,
    byteLength: $VkMemoryType.propertyFlags.byteLength
  }),
  heapIndex: Object.freeze({
    byteOffset: $VkMemoryType.heapIndex.byteOffset,
    byteLength: $VkMemoryType.heapIndex.byteLength
  }),
});
class VkMemoryHeap {
  constructor(opts) {
    this._size = 0;
    this._flags = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryHeap.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get size() {
    return this._size;
  }
  get flags() {
    return this._flags;
  }
  
};

VkMemoryHeap.prototype.flush = function flush() {
  
};

const $VkMemoryHeap = memoryLayouts.VkMemoryHeap;
VkMemoryHeap.byteLength = $VkMemoryHeap.byteLength;

VkMemoryHeap.memoryLayout = Object.freeze({
  size: Object.freeze({
    byteOffset: $VkMemoryHeap.size.byteOffset,
    byteLength: $VkMemoryHeap.size.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkMemoryHeap.flags.byteOffset,
    byteLength: $VkMemoryHeap.flags.byteLength
  }),
});
class VkMappedMemoryRange {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._memory = null;
    this._offset = 0;
    this._size = 0;
    this.memoryBuffer = new ArrayBuffer(VkMappedMemoryRange.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMappedMemoryRange.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    String
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    
this.memoryView.setBigUint64($VkMappedMemoryRange.offset.byteOffset, value);
this._offset = value;
  }
  get size() {
    return this._size;
  }
  set size(value) {
    
this.memoryView.setBigUint64($VkMappedMemoryRange.size.byteOffset, value);
this._size = value;
  }
  
};

VkMappedMemoryRange.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMappedMemoryRange = memoryLayouts.VkMappedMemoryRange;
VkMappedMemoryRange.byteLength = $VkMappedMemoryRange.byteLength;

VkMappedMemoryRange.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMappedMemoryRange.sType.byteOffset,
    byteLength: $VkMappedMemoryRange.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMappedMemoryRange.pNext.byteOffset,
    byteLength: $VkMappedMemoryRange.pNext.byteLength
  }),
  memory: Object.freeze({
    byteOffset: $VkMappedMemoryRange.memory.byteOffset,
    byteLength: $VkMappedMemoryRange.memory.byteLength
  }),
  offset: Object.freeze({
    byteOffset: $VkMappedMemoryRange.offset.byteOffset,
    byteLength: $VkMappedMemoryRange.offset.byteLength
  }),
  size: Object.freeze({
    byteOffset: $VkMappedMemoryRange.size.byteOffset,
    byteLength: $VkMappedMemoryRange.size.byteLength
  }),
});
class VkFormatProperties {
  constructor(opts) {
    this._linearTilingFeatures = 0;
    this._optimalTilingFeatures = 0;
    this._bufferFeatures = 0;
    this.memoryBuffer = new ArrayBuffer(VkFormatProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get linearTilingFeatures() {
    return this._linearTilingFeatures;
  }
  get optimalTilingFeatures() {
    return this._optimalTilingFeatures;
  }
  get bufferFeatures() {
    return this._bufferFeatures;
  }
  
};

VkFormatProperties.prototype.flush = function flush() {
  
};

const $VkFormatProperties = memoryLayouts.VkFormatProperties;
VkFormatProperties.byteLength = $VkFormatProperties.byteLength;

VkFormatProperties.memoryLayout = Object.freeze({
  linearTilingFeatures: Object.freeze({
    byteOffset: $VkFormatProperties.linearTilingFeatures.byteOffset,
    byteLength: $VkFormatProperties.linearTilingFeatures.byteLength
  }),
  optimalTilingFeatures: Object.freeze({
    byteOffset: $VkFormatProperties.optimalTilingFeatures.byteOffset,
    byteLength: $VkFormatProperties.optimalTilingFeatures.byteLength
  }),
  bufferFeatures: Object.freeze({
    byteOffset: $VkFormatProperties.bufferFeatures.byteOffset,
    byteLength: $VkFormatProperties.bufferFeatures.byteLength
  }),
});
class VkImageFormatProperties {
  constructor(opts) {
    this._maxExtent = null;
    this._maxMipLevels = 0;
    this._maxArrayLayers = 0;
    this._sampleCounts = 0;
    this._maxResourceSize = 0;
    this.memoryBuffer = new ArrayBuffer(VkImageFormatProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get maxExtent() {
    return this._maxExtent;
  }
  get maxMipLevels() {
    return this._maxMipLevels;
  }
  get maxArrayLayers() {
    return this._maxArrayLayers;
  }
  get sampleCounts() {
    return this._sampleCounts;
  }
  get maxResourceSize() {
    return this._maxResourceSize;
  }
  
};

VkImageFormatProperties.prototype.flush = function flush() {
  
  if (this.maxExtent !== null) { }
  
};

const $VkImageFormatProperties = memoryLayouts.VkImageFormatProperties;
VkImageFormatProperties.byteLength = $VkImageFormatProperties.byteLength;

VkImageFormatProperties.memoryLayout = Object.freeze({
  maxExtent: Object.freeze({
    byteOffset: $VkImageFormatProperties.maxExtent.byteOffset,
    byteLength: $VkImageFormatProperties.maxExtent.byteLength
  }),
  maxMipLevels: Object.freeze({
    byteOffset: $VkImageFormatProperties.maxMipLevels.byteOffset,
    byteLength: $VkImageFormatProperties.maxMipLevels.byteLength
  }),
  maxArrayLayers: Object.freeze({
    byteOffset: $VkImageFormatProperties.maxArrayLayers.byteOffset,
    byteLength: $VkImageFormatProperties.maxArrayLayers.byteLength
  }),
  sampleCounts: Object.freeze({
    byteOffset: $VkImageFormatProperties.sampleCounts.byteOffset,
    byteLength: $VkImageFormatProperties.sampleCounts.byteLength
  }),
  maxResourceSize: Object.freeze({
    byteOffset: $VkImageFormatProperties.maxResourceSize.byteOffset,
    byteLength: $VkImageFormatProperties.maxResourceSize.byteLength
  }),
});
class VkDescriptorBufferInfo {
  constructor(opts) {
    this._buffer = null;
    this._offset = 0;
    this._range = 0;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorBufferInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.range !== void 0) this.range = opts.range;
      
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    
this.memoryView.setBigUint64($VkDescriptorBufferInfo.offset.byteOffset, value);
this._offset = value;
  }
  get range() {
    return this._range;
  }
  set range(value) {
    
this.memoryView.setBigUint64($VkDescriptorBufferInfo.range.byteOffset, value);
this._range = value;
  }
  
};

VkDescriptorBufferInfo.prototype.flush = function flush() {
  
};

const $VkDescriptorBufferInfo = memoryLayouts.VkDescriptorBufferInfo;
VkDescriptorBufferInfo.byteLength = $VkDescriptorBufferInfo.byteLength;

VkDescriptorBufferInfo.memoryLayout = Object.freeze({
  buffer: Object.freeze({
    byteOffset: $VkDescriptorBufferInfo.buffer.byteOffset,
    byteLength: $VkDescriptorBufferInfo.buffer.byteLength
  }),
  offset: Object.freeze({
    byteOffset: $VkDescriptorBufferInfo.offset.byteOffset,
    byteLength: $VkDescriptorBufferInfo.offset.byteLength
  }),
  range: Object.freeze({
    byteOffset: $VkDescriptorBufferInfo.range.byteOffset,
    byteLength: $VkDescriptorBufferInfo.range.byteLength
  }),
});
class VkDescriptorImageInfo {
  constructor(opts) {
    this._sampler = null;
    this._imageView = null;
    this._imageLayout = 0;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorImageInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sampler !== void 0) this.sampler = opts.sampler;
      if (opts.imageView !== void 0) this.imageView = opts.imageView;
      if (opts.imageLayout !== void 0) this.imageLayout = opts.imageLayout;
      
    }
  }
  get sampler() {
    return this._sampler;
  }
  set sampler(value) {
    String
  }
  get imageView() {
    return this._imageView;
  }
  set imageView(value) {
    String
  }
  get imageLayout() {
    return this._imageLayout;
  }
  set imageLayout(value) {
    
this.memoryView.setInt32($VkDescriptorImageInfo.imageLayout.byteOffset, value);
this._imageLayout = value;
  }
  
};

VkDescriptorImageInfo.prototype.flush = function flush() {
  
};

const $VkDescriptorImageInfo = memoryLayouts.VkDescriptorImageInfo;
VkDescriptorImageInfo.byteLength = $VkDescriptorImageInfo.byteLength;

VkDescriptorImageInfo.memoryLayout = Object.freeze({
  sampler: Object.freeze({
    byteOffset: $VkDescriptorImageInfo.sampler.byteOffset,
    byteLength: $VkDescriptorImageInfo.sampler.byteLength
  }),
  imageView: Object.freeze({
    byteOffset: $VkDescriptorImageInfo.imageView.byteOffset,
    byteLength: $VkDescriptorImageInfo.imageView.byteLength
  }),
  imageLayout: Object.freeze({
    byteOffset: $VkDescriptorImageInfo.imageLayout.byteOffset,
    byteLength: $VkDescriptorImageInfo.imageLayout.byteLength
  }),
});
class VkWriteDescriptorSet {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._dstSet = null;
    this._dstBinding = 0;
    this._dstArrayElement = 0;
    this._descriptorCount = 0;
    this._descriptorType = 0;
    this._pImageInfo = null;
    this._pBufferInfo = null;
    this._pTexelBufferView = null;
    this.memoryBuffer = new ArrayBuffer(VkWriteDescriptorSet.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dstSet !== void 0) this.dstSet = opts.dstSet;
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.pImageInfo !== void 0) this.pImageInfo = opts.pImageInfo;
      if (opts.pBufferInfo !== void 0) this.pBufferInfo = opts.pBufferInfo;
      if (opts.pTexelBufferView !== void 0) this.pTexelBufferView = opts.pTexelBufferView;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkWriteDescriptorSet.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get dstSet() {
    return this._dstSet;
  }
  set dstSet(value) {
    String
  }
  get dstBinding() {
    return this._dstBinding;
  }
  set dstBinding(value) {
    
this.memoryView.setUint32($VkWriteDescriptorSet.dstBinding.byteOffset, value);
this._dstBinding = value;
  }
  get dstArrayElement() {
    return this._dstArrayElement;
  }
  set dstArrayElement(value) {
    
this.memoryView.setUint32($VkWriteDescriptorSet.dstArrayElement.byteOffset, value);
this._dstArrayElement = value;
  }
  get descriptorCount() {
    return this._descriptorCount;
  }
  set descriptorCount(value) {
    
this.memoryView.setUint32($VkWriteDescriptorSet.descriptorCount.byteOffset, value);
this._descriptorCount = value;
  }
  get descriptorType() {
    return this._descriptorType;
  }
  set descriptorType(value) {
    
this.memoryView.setInt32($VkWriteDescriptorSet.descriptorType.byteOffset, value);
this._descriptorType = value;
  }
  get pImageInfo() {
    return this._pImageInfo;
  }
  set pImageInfo(value) {
    
  }
  get pBufferInfo() {
    return this._pBufferInfo;
  }
  set pBufferInfo(value) {
    
  }
  get pTexelBufferView() {
    return this._pTexelBufferView;
  }
  set pTexelBufferView(value) {
    
  }
  
};

VkWriteDescriptorSet.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pImageInfo !== null) { }
  
  if (this.pBufferInfo !== null) { }
  
  if (this.pTexelBufferView !== null) { }
  
};

const $VkWriteDescriptorSet = memoryLayouts.VkWriteDescriptorSet;
VkWriteDescriptorSet.byteLength = $VkWriteDescriptorSet.byteLength;

VkWriteDescriptorSet.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkWriteDescriptorSet.sType.byteOffset,
    byteLength: $VkWriteDescriptorSet.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkWriteDescriptorSet.pNext.byteOffset,
    byteLength: $VkWriteDescriptorSet.pNext.byteLength
  }),
  dstSet: Object.freeze({
    byteOffset: $VkWriteDescriptorSet.dstSet.byteOffset,
    byteLength: $VkWriteDescriptorSet.dstSet.byteLength
  }),
  dstBinding: Object.freeze({
    byteOffset: $VkWriteDescriptorSet.dstBinding.byteOffset,
    byteLength: $VkWriteDescriptorSet.dstBinding.byteLength
  }),
  dstArrayElement: Object.freeze({
    byteOffset: $VkWriteDescriptorSet.dstArrayElement.byteOffset,
    byteLength: $VkWriteDescriptorSet.dstArrayElement.byteLength
  }),
  descriptorCount: Object.freeze({
    byteOffset: $VkWriteDescriptorSet.descriptorCount.byteOffset,
    byteLength: $VkWriteDescriptorSet.descriptorCount.byteLength
  }),
  descriptorType: Object.freeze({
    byteOffset: $VkWriteDescriptorSet.descriptorType.byteOffset,
    byteLength: $VkWriteDescriptorSet.descriptorType.byteLength
  }),
  pImageInfo: Object.freeze({
    byteOffset: $VkWriteDescriptorSet.pImageInfo.byteOffset,
    byteLength: $VkWriteDescriptorSet.pImageInfo.byteLength
  }),
  pBufferInfo: Object.freeze({
    byteOffset: $VkWriteDescriptorSet.pBufferInfo.byteOffset,
    byteLength: $VkWriteDescriptorSet.pBufferInfo.byteLength
  }),
  pTexelBufferView: Object.freeze({
    byteOffset: $VkWriteDescriptorSet.pTexelBufferView.byteOffset,
    byteLength: $VkWriteDescriptorSet.pTexelBufferView.byteLength
  }),
});
class VkCopyDescriptorSet {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._srcSet = null;
    this._srcBinding = 0;
    this._srcArrayElement = 0;
    this._dstSet = null;
    this._dstBinding = 0;
    this._dstArrayElement = 0;
    this._descriptorCount = 0;
    this.memoryBuffer = new ArrayBuffer(VkCopyDescriptorSet.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcSet !== void 0) this.srcSet = opts.srcSet;
      if (opts.srcBinding !== void 0) this.srcBinding = opts.srcBinding;
      if (opts.srcArrayElement !== void 0) this.srcArrayElement = opts.srcArrayElement;
      if (opts.dstSet !== void 0) this.dstSet = opts.dstSet;
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkCopyDescriptorSet.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get srcSet() {
    return this._srcSet;
  }
  set srcSet(value) {
    String
  }
  get srcBinding() {
    return this._srcBinding;
  }
  set srcBinding(value) {
    
this.memoryView.setUint32($VkCopyDescriptorSet.srcBinding.byteOffset, value);
this._srcBinding = value;
  }
  get srcArrayElement() {
    return this._srcArrayElement;
  }
  set srcArrayElement(value) {
    
this.memoryView.setUint32($VkCopyDescriptorSet.srcArrayElement.byteOffset, value);
this._srcArrayElement = value;
  }
  get dstSet() {
    return this._dstSet;
  }
  set dstSet(value) {
    String
  }
  get dstBinding() {
    return this._dstBinding;
  }
  set dstBinding(value) {
    
this.memoryView.setUint32($VkCopyDescriptorSet.dstBinding.byteOffset, value);
this._dstBinding = value;
  }
  get dstArrayElement() {
    return this._dstArrayElement;
  }
  set dstArrayElement(value) {
    
this.memoryView.setUint32($VkCopyDescriptorSet.dstArrayElement.byteOffset, value);
this._dstArrayElement = value;
  }
  get descriptorCount() {
    return this._descriptorCount;
  }
  set descriptorCount(value) {
    
this.memoryView.setUint32($VkCopyDescriptorSet.descriptorCount.byteOffset, value);
this._descriptorCount = value;
  }
  
};

VkCopyDescriptorSet.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkCopyDescriptorSet = memoryLayouts.VkCopyDescriptorSet;
VkCopyDescriptorSet.byteLength = $VkCopyDescriptorSet.byteLength;

VkCopyDescriptorSet.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkCopyDescriptorSet.sType.byteOffset,
    byteLength: $VkCopyDescriptorSet.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkCopyDescriptorSet.pNext.byteOffset,
    byteLength: $VkCopyDescriptorSet.pNext.byteLength
  }),
  srcSet: Object.freeze({
    byteOffset: $VkCopyDescriptorSet.srcSet.byteOffset,
    byteLength: $VkCopyDescriptorSet.srcSet.byteLength
  }),
  srcBinding: Object.freeze({
    byteOffset: $VkCopyDescriptorSet.srcBinding.byteOffset,
    byteLength: $VkCopyDescriptorSet.srcBinding.byteLength
  }),
  srcArrayElement: Object.freeze({
    byteOffset: $VkCopyDescriptorSet.srcArrayElement.byteOffset,
    byteLength: $VkCopyDescriptorSet.srcArrayElement.byteLength
  }),
  dstSet: Object.freeze({
    byteOffset: $VkCopyDescriptorSet.dstSet.byteOffset,
    byteLength: $VkCopyDescriptorSet.dstSet.byteLength
  }),
  dstBinding: Object.freeze({
    byteOffset: $VkCopyDescriptorSet.dstBinding.byteOffset,
    byteLength: $VkCopyDescriptorSet.dstBinding.byteLength
  }),
  dstArrayElement: Object.freeze({
    byteOffset: $VkCopyDescriptorSet.dstArrayElement.byteOffset,
    byteLength: $VkCopyDescriptorSet.dstArrayElement.byteLength
  }),
  descriptorCount: Object.freeze({
    byteOffset: $VkCopyDescriptorSet.descriptorCount.byteOffset,
    byteLength: $VkCopyDescriptorSet.descriptorCount.byteLength
  }),
});
class VkBufferCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._size = 0;
    this._usage = 0;
    this._sharingMode = 0;
    this._queueFamilyIndexCount = 0;
    this._pQueueFamilyIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkBufferCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.size !== void 0) this.size = opts.size;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.sharingMode !== void 0) this.sharingMode = opts.sharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBufferCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkBufferCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get size() {
    return this._size;
  }
  set size(value) {
    
this.memoryView.setBigUint64($VkBufferCreateInfo.size.byteOffset, value);
this._size = value;
  }
  get usage() {
    return this._usage;
  }
  set usage(value) {
    
this.memoryView.setInt32($VkBufferCreateInfo.usage.byteOffset, value);
this._usage = value;
  }
  get sharingMode() {
    return this._sharingMode;
  }
  set sharingMode(value) {
    
this.memoryView.setInt32($VkBufferCreateInfo.sharingMode.byteOffset, value);
this._sharingMode = value;
  }
  get queueFamilyIndexCount() {
    return this._queueFamilyIndexCount;
  }
  set queueFamilyIndexCount(value) {
    
this.memoryView.setUint32($VkBufferCreateInfo.queueFamilyIndexCount.byteOffset, value);
this._queueFamilyIndexCount = value;
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    
  }
  
};

VkBufferCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBufferCreateInfo = memoryLayouts.VkBufferCreateInfo;
VkBufferCreateInfo.byteLength = $VkBufferCreateInfo.byteLength;

VkBufferCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBufferCreateInfo.sType.byteOffset,
    byteLength: $VkBufferCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBufferCreateInfo.pNext.byteOffset,
    byteLength: $VkBufferCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkBufferCreateInfo.flags.byteOffset,
    byteLength: $VkBufferCreateInfo.flags.byteLength
  }),
  size: Object.freeze({
    byteOffset: $VkBufferCreateInfo.size.byteOffset,
    byteLength: $VkBufferCreateInfo.size.byteLength
  }),
  usage: Object.freeze({
    byteOffset: $VkBufferCreateInfo.usage.byteOffset,
    byteLength: $VkBufferCreateInfo.usage.byteLength
  }),
  sharingMode: Object.freeze({
    byteOffset: $VkBufferCreateInfo.sharingMode.byteOffset,
    byteLength: $VkBufferCreateInfo.sharingMode.byteLength
  }),
  queueFamilyIndexCount: Object.freeze({
    byteOffset: $VkBufferCreateInfo.queueFamilyIndexCount.byteOffset,
    byteLength: $VkBufferCreateInfo.queueFamilyIndexCount.byteLength
  }),
  pQueueFamilyIndices: Object.freeze({
    byteOffset: $VkBufferCreateInfo.pQueueFamilyIndices.byteOffset,
    byteLength: $VkBufferCreateInfo.pQueueFamilyIndices.byteLength
  }),
});
class VkBufferViewCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._buffer = null;
    this._format = 0;
    this._offset = 0;
    this._range = 0;
    this.memoryBuffer = new ArrayBuffer(VkBufferViewCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.range !== void 0) this.range = opts.range;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBufferViewCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkBufferViewCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  get format() {
    return this._format;
  }
  set format(value) {
    
this.memoryView.setInt32($VkBufferViewCreateInfo.format.byteOffset, value);
this._format = value;
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    
this.memoryView.setBigUint64($VkBufferViewCreateInfo.offset.byteOffset, value);
this._offset = value;
  }
  get range() {
    return this._range;
  }
  set range(value) {
    
this.memoryView.setBigUint64($VkBufferViewCreateInfo.range.byteOffset, value);
this._range = value;
  }
  
};

VkBufferViewCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBufferViewCreateInfo = memoryLayouts.VkBufferViewCreateInfo;
VkBufferViewCreateInfo.byteLength = $VkBufferViewCreateInfo.byteLength;

VkBufferViewCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBufferViewCreateInfo.sType.byteOffset,
    byteLength: $VkBufferViewCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBufferViewCreateInfo.pNext.byteOffset,
    byteLength: $VkBufferViewCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkBufferViewCreateInfo.flags.byteOffset,
    byteLength: $VkBufferViewCreateInfo.flags.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkBufferViewCreateInfo.buffer.byteOffset,
    byteLength: $VkBufferViewCreateInfo.buffer.byteLength
  }),
  format: Object.freeze({
    byteOffset: $VkBufferViewCreateInfo.format.byteOffset,
    byteLength: $VkBufferViewCreateInfo.format.byteLength
  }),
  offset: Object.freeze({
    byteOffset: $VkBufferViewCreateInfo.offset.byteOffset,
    byteLength: $VkBufferViewCreateInfo.offset.byteLength
  }),
  range: Object.freeze({
    byteOffset: $VkBufferViewCreateInfo.range.byteOffset,
    byteLength: $VkBufferViewCreateInfo.range.byteLength
  }),
});
class VkImageSubresource {
  constructor(opts) {
    this._aspectMask = 0;
    this._mipLevel = 0;
    this._arrayLayer = 0;
    this.memoryBuffer = new ArrayBuffer(VkImageSubresource.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.mipLevel !== void 0) this.mipLevel = opts.mipLevel;
      if (opts.arrayLayer !== void 0) this.arrayLayer = opts.arrayLayer;
      
    }
  }
  get aspectMask() {
    return this._aspectMask;
  }
  set aspectMask(value) {
    
this.memoryView.setInt32($VkImageSubresource.aspectMask.byteOffset, value);
this._aspectMask = value;
  }
  get mipLevel() {
    return this._mipLevel;
  }
  set mipLevel(value) {
    
this.memoryView.setUint32($VkImageSubresource.mipLevel.byteOffset, value);
this._mipLevel = value;
  }
  get arrayLayer() {
    return this._arrayLayer;
  }
  set arrayLayer(value) {
    
this.memoryView.setUint32($VkImageSubresource.arrayLayer.byteOffset, value);
this._arrayLayer = value;
  }
  
};

VkImageSubresource.prototype.flush = function flush() {
  
};

const $VkImageSubresource = memoryLayouts.VkImageSubresource;
VkImageSubresource.byteLength = $VkImageSubresource.byteLength;

VkImageSubresource.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: $VkImageSubresource.aspectMask.byteOffset,
    byteLength: $VkImageSubresource.aspectMask.byteLength
  }),
  mipLevel: Object.freeze({
    byteOffset: $VkImageSubresource.mipLevel.byteOffset,
    byteLength: $VkImageSubresource.mipLevel.byteLength
  }),
  arrayLayer: Object.freeze({
    byteOffset: $VkImageSubresource.arrayLayer.byteOffset,
    byteLength: $VkImageSubresource.arrayLayer.byteLength
  }),
});
class VkImageSubresourceLayers {
  constructor(opts) {
    this._aspectMask = 0;
    this._mipLevel = 0;
    this._baseArrayLayer = 0;
    this._layerCount = 0;
    this.memoryBuffer = new ArrayBuffer(VkImageSubresourceLayers.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.mipLevel !== void 0) this.mipLevel = opts.mipLevel;
      if (opts.baseArrayLayer !== void 0) this.baseArrayLayer = opts.baseArrayLayer;
      if (opts.layerCount !== void 0) this.layerCount = opts.layerCount;
      
    }
  }
  get aspectMask() {
    return this._aspectMask;
  }
  set aspectMask(value) {
    
this.memoryView.setInt32($VkImageSubresourceLayers.aspectMask.byteOffset, value);
this._aspectMask = value;
  }
  get mipLevel() {
    return this._mipLevel;
  }
  set mipLevel(value) {
    
this.memoryView.setUint32($VkImageSubresourceLayers.mipLevel.byteOffset, value);
this._mipLevel = value;
  }
  get baseArrayLayer() {
    return this._baseArrayLayer;
  }
  set baseArrayLayer(value) {
    
this.memoryView.setUint32($VkImageSubresourceLayers.baseArrayLayer.byteOffset, value);
this._baseArrayLayer = value;
  }
  get layerCount() {
    return this._layerCount;
  }
  set layerCount(value) {
    
this.memoryView.setUint32($VkImageSubresourceLayers.layerCount.byteOffset, value);
this._layerCount = value;
  }
  
};

VkImageSubresourceLayers.prototype.flush = function flush() {
  
};

const $VkImageSubresourceLayers = memoryLayouts.VkImageSubresourceLayers;
VkImageSubresourceLayers.byteLength = $VkImageSubresourceLayers.byteLength;

VkImageSubresourceLayers.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: $VkImageSubresourceLayers.aspectMask.byteOffset,
    byteLength: $VkImageSubresourceLayers.aspectMask.byteLength
  }),
  mipLevel: Object.freeze({
    byteOffset: $VkImageSubresourceLayers.mipLevel.byteOffset,
    byteLength: $VkImageSubresourceLayers.mipLevel.byteLength
  }),
  baseArrayLayer: Object.freeze({
    byteOffset: $VkImageSubresourceLayers.baseArrayLayer.byteOffset,
    byteLength: $VkImageSubresourceLayers.baseArrayLayer.byteLength
  }),
  layerCount: Object.freeze({
    byteOffset: $VkImageSubresourceLayers.layerCount.byteOffset,
    byteLength: $VkImageSubresourceLayers.layerCount.byteLength
  }),
});
class VkImageSubresourceRange {
  constructor(opts) {
    this._aspectMask = 0;
    this._baseMipLevel = 0;
    this._levelCount = 0;
    this._baseArrayLayer = 0;
    this._layerCount = 0;
    this.memoryBuffer = new ArrayBuffer(VkImageSubresourceRange.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.baseMipLevel !== void 0) this.baseMipLevel = opts.baseMipLevel;
      if (opts.levelCount !== void 0) this.levelCount = opts.levelCount;
      if (opts.baseArrayLayer !== void 0) this.baseArrayLayer = opts.baseArrayLayer;
      if (opts.layerCount !== void 0) this.layerCount = opts.layerCount;
      
    }
  }
  get aspectMask() {
    return this._aspectMask;
  }
  set aspectMask(value) {
    
this.memoryView.setInt32($VkImageSubresourceRange.aspectMask.byteOffset, value);
this._aspectMask = value;
  }
  get baseMipLevel() {
    return this._baseMipLevel;
  }
  set baseMipLevel(value) {
    
this.memoryView.setUint32($VkImageSubresourceRange.baseMipLevel.byteOffset, value);
this._baseMipLevel = value;
  }
  get levelCount() {
    return this._levelCount;
  }
  set levelCount(value) {
    
this.memoryView.setUint32($VkImageSubresourceRange.levelCount.byteOffset, value);
this._levelCount = value;
  }
  get baseArrayLayer() {
    return this._baseArrayLayer;
  }
  set baseArrayLayer(value) {
    
this.memoryView.setUint32($VkImageSubresourceRange.baseArrayLayer.byteOffset, value);
this._baseArrayLayer = value;
  }
  get layerCount() {
    return this._layerCount;
  }
  set layerCount(value) {
    
this.memoryView.setUint32($VkImageSubresourceRange.layerCount.byteOffset, value);
this._layerCount = value;
  }
  
};

VkImageSubresourceRange.prototype.flush = function flush() {
  
};

const $VkImageSubresourceRange = memoryLayouts.VkImageSubresourceRange;
VkImageSubresourceRange.byteLength = $VkImageSubresourceRange.byteLength;

VkImageSubresourceRange.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: $VkImageSubresourceRange.aspectMask.byteOffset,
    byteLength: $VkImageSubresourceRange.aspectMask.byteLength
  }),
  baseMipLevel: Object.freeze({
    byteOffset: $VkImageSubresourceRange.baseMipLevel.byteOffset,
    byteLength: $VkImageSubresourceRange.baseMipLevel.byteLength
  }),
  levelCount: Object.freeze({
    byteOffset: $VkImageSubresourceRange.levelCount.byteOffset,
    byteLength: $VkImageSubresourceRange.levelCount.byteLength
  }),
  baseArrayLayer: Object.freeze({
    byteOffset: $VkImageSubresourceRange.baseArrayLayer.byteOffset,
    byteLength: $VkImageSubresourceRange.baseArrayLayer.byteLength
  }),
  layerCount: Object.freeze({
    byteOffset: $VkImageSubresourceRange.layerCount.byteOffset,
    byteLength: $VkImageSubresourceRange.layerCount.byteLength
  }),
});
class VkMemoryBarrier {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._srcAccessMask = 0;
    this._dstAccessMask = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryBarrier.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryBarrier.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get srcAccessMask() {
    return this._srcAccessMask;
  }
  set srcAccessMask(value) {
    
this.memoryView.setInt32($VkMemoryBarrier.srcAccessMask.byteOffset, value);
this._srcAccessMask = value;
  }
  get dstAccessMask() {
    return this._dstAccessMask;
  }
  set dstAccessMask(value) {
    
this.memoryView.setInt32($VkMemoryBarrier.dstAccessMask.byteOffset, value);
this._dstAccessMask = value;
  }
  
};

VkMemoryBarrier.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryBarrier = memoryLayouts.VkMemoryBarrier;
VkMemoryBarrier.byteLength = $VkMemoryBarrier.byteLength;

VkMemoryBarrier.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryBarrier.sType.byteOffset,
    byteLength: $VkMemoryBarrier.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryBarrier.pNext.byteOffset,
    byteLength: $VkMemoryBarrier.pNext.byteLength
  }),
  srcAccessMask: Object.freeze({
    byteOffset: $VkMemoryBarrier.srcAccessMask.byteOffset,
    byteLength: $VkMemoryBarrier.srcAccessMask.byteLength
  }),
  dstAccessMask: Object.freeze({
    byteOffset: $VkMemoryBarrier.dstAccessMask.byteOffset,
    byteLength: $VkMemoryBarrier.dstAccessMask.byteLength
  }),
});
class VkBufferMemoryBarrier {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._srcAccessMask = 0;
    this._dstAccessMask = 0;
    this._srcQueueFamilyIndex = 0;
    this._dstQueueFamilyIndex = 0;
    this._buffer = null;
    this._offset = 0;
    this._size = 0;
    this.memoryBuffer = new ArrayBuffer(VkBufferMemoryBarrier.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.srcQueueFamilyIndex !== void 0) this.srcQueueFamilyIndex = opts.srcQueueFamilyIndex;
      if (opts.dstQueueFamilyIndex !== void 0) this.dstQueueFamilyIndex = opts.dstQueueFamilyIndex;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBufferMemoryBarrier.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get srcAccessMask() {
    return this._srcAccessMask;
  }
  set srcAccessMask(value) {
    
this.memoryView.setInt32($VkBufferMemoryBarrier.srcAccessMask.byteOffset, value);
this._srcAccessMask = value;
  }
  get dstAccessMask() {
    return this._dstAccessMask;
  }
  set dstAccessMask(value) {
    
this.memoryView.setInt32($VkBufferMemoryBarrier.dstAccessMask.byteOffset, value);
this._dstAccessMask = value;
  }
  get srcQueueFamilyIndex() {
    return this._srcQueueFamilyIndex;
  }
  set srcQueueFamilyIndex(value) {
    
this.memoryView.setUint32($VkBufferMemoryBarrier.srcQueueFamilyIndex.byteOffset, value);
this._srcQueueFamilyIndex = value;
  }
  get dstQueueFamilyIndex() {
    return this._dstQueueFamilyIndex;
  }
  set dstQueueFamilyIndex(value) {
    
this.memoryView.setUint32($VkBufferMemoryBarrier.dstQueueFamilyIndex.byteOffset, value);
this._dstQueueFamilyIndex = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    
this.memoryView.setBigUint64($VkBufferMemoryBarrier.offset.byteOffset, value);
this._offset = value;
  }
  get size() {
    return this._size;
  }
  set size(value) {
    
this.memoryView.setBigUint64($VkBufferMemoryBarrier.size.byteOffset, value);
this._size = value;
  }
  
};

VkBufferMemoryBarrier.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBufferMemoryBarrier = memoryLayouts.VkBufferMemoryBarrier;
VkBufferMemoryBarrier.byteLength = $VkBufferMemoryBarrier.byteLength;

VkBufferMemoryBarrier.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBufferMemoryBarrier.sType.byteOffset,
    byteLength: $VkBufferMemoryBarrier.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBufferMemoryBarrier.pNext.byteOffset,
    byteLength: $VkBufferMemoryBarrier.pNext.byteLength
  }),
  srcAccessMask: Object.freeze({
    byteOffset: $VkBufferMemoryBarrier.srcAccessMask.byteOffset,
    byteLength: $VkBufferMemoryBarrier.srcAccessMask.byteLength
  }),
  dstAccessMask: Object.freeze({
    byteOffset: $VkBufferMemoryBarrier.dstAccessMask.byteOffset,
    byteLength: $VkBufferMemoryBarrier.dstAccessMask.byteLength
  }),
  srcQueueFamilyIndex: Object.freeze({
    byteOffset: $VkBufferMemoryBarrier.srcQueueFamilyIndex.byteOffset,
    byteLength: $VkBufferMemoryBarrier.srcQueueFamilyIndex.byteLength
  }),
  dstQueueFamilyIndex: Object.freeze({
    byteOffset: $VkBufferMemoryBarrier.dstQueueFamilyIndex.byteOffset,
    byteLength: $VkBufferMemoryBarrier.dstQueueFamilyIndex.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkBufferMemoryBarrier.buffer.byteOffset,
    byteLength: $VkBufferMemoryBarrier.buffer.byteLength
  }),
  offset: Object.freeze({
    byteOffset: $VkBufferMemoryBarrier.offset.byteOffset,
    byteLength: $VkBufferMemoryBarrier.offset.byteLength
  }),
  size: Object.freeze({
    byteOffset: $VkBufferMemoryBarrier.size.byteOffset,
    byteLength: $VkBufferMemoryBarrier.size.byteLength
  }),
});
class VkImageMemoryBarrier {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._srcAccessMask = 0;
    this._dstAccessMask = 0;
    this._oldLayout = 0;
    this._newLayout = 0;
    this._srcQueueFamilyIndex = 0;
    this._dstQueueFamilyIndex = 0;
    this._image = null;
    this._subresourceRange = null;
    this.memoryBuffer = new ArrayBuffer(VkImageMemoryBarrier.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.oldLayout !== void 0) this.oldLayout = opts.oldLayout;
      if (opts.newLayout !== void 0) this.newLayout = opts.newLayout;
      if (opts.srcQueueFamilyIndex !== void 0) this.srcQueueFamilyIndex = opts.srcQueueFamilyIndex;
      if (opts.dstQueueFamilyIndex !== void 0) this.dstQueueFamilyIndex = opts.dstQueueFamilyIndex;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.subresourceRange !== void 0) this.subresourceRange = opts.subresourceRange;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageMemoryBarrier.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get srcAccessMask() {
    return this._srcAccessMask;
  }
  set srcAccessMask(value) {
    
this.memoryView.setInt32($VkImageMemoryBarrier.srcAccessMask.byteOffset, value);
this._srcAccessMask = value;
  }
  get dstAccessMask() {
    return this._dstAccessMask;
  }
  set dstAccessMask(value) {
    
this.memoryView.setInt32($VkImageMemoryBarrier.dstAccessMask.byteOffset, value);
this._dstAccessMask = value;
  }
  get oldLayout() {
    return this._oldLayout;
  }
  set oldLayout(value) {
    
this.memoryView.setInt32($VkImageMemoryBarrier.oldLayout.byteOffset, value);
this._oldLayout = value;
  }
  get newLayout() {
    return this._newLayout;
  }
  set newLayout(value) {
    
this.memoryView.setInt32($VkImageMemoryBarrier.newLayout.byteOffset, value);
this._newLayout = value;
  }
  get srcQueueFamilyIndex() {
    return this._srcQueueFamilyIndex;
  }
  set srcQueueFamilyIndex(value) {
    
this.memoryView.setUint32($VkImageMemoryBarrier.srcQueueFamilyIndex.byteOffset, value);
this._srcQueueFamilyIndex = value;
  }
  get dstQueueFamilyIndex() {
    return this._dstQueueFamilyIndex;
  }
  set dstQueueFamilyIndex(value) {
    
this.memoryView.setUint32($VkImageMemoryBarrier.dstQueueFamilyIndex.byteOffset, value);
this._dstQueueFamilyIndex = value;
  }
  get image() {
    return this._image;
  }
  set image(value) {
    String
  }
  get subresourceRange() {
    return this._subresourceRange;
  }
  set subresourceRange(value) {
    String
  }
  
};

VkImageMemoryBarrier.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.subresourceRange !== null) { }
  
};

const $VkImageMemoryBarrier = memoryLayouts.VkImageMemoryBarrier;
VkImageMemoryBarrier.byteLength = $VkImageMemoryBarrier.byteLength;

VkImageMemoryBarrier.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageMemoryBarrier.sType.byteOffset,
    byteLength: $VkImageMemoryBarrier.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageMemoryBarrier.pNext.byteOffset,
    byteLength: $VkImageMemoryBarrier.pNext.byteLength
  }),
  srcAccessMask: Object.freeze({
    byteOffset: $VkImageMemoryBarrier.srcAccessMask.byteOffset,
    byteLength: $VkImageMemoryBarrier.srcAccessMask.byteLength
  }),
  dstAccessMask: Object.freeze({
    byteOffset: $VkImageMemoryBarrier.dstAccessMask.byteOffset,
    byteLength: $VkImageMemoryBarrier.dstAccessMask.byteLength
  }),
  oldLayout: Object.freeze({
    byteOffset: $VkImageMemoryBarrier.oldLayout.byteOffset,
    byteLength: $VkImageMemoryBarrier.oldLayout.byteLength
  }),
  newLayout: Object.freeze({
    byteOffset: $VkImageMemoryBarrier.newLayout.byteOffset,
    byteLength: $VkImageMemoryBarrier.newLayout.byteLength
  }),
  srcQueueFamilyIndex: Object.freeze({
    byteOffset: $VkImageMemoryBarrier.srcQueueFamilyIndex.byteOffset,
    byteLength: $VkImageMemoryBarrier.srcQueueFamilyIndex.byteLength
  }),
  dstQueueFamilyIndex: Object.freeze({
    byteOffset: $VkImageMemoryBarrier.dstQueueFamilyIndex.byteOffset,
    byteLength: $VkImageMemoryBarrier.dstQueueFamilyIndex.byteLength
  }),
  image: Object.freeze({
    byteOffset: $VkImageMemoryBarrier.image.byteOffset,
    byteLength: $VkImageMemoryBarrier.image.byteLength
  }),
  subresourceRange: Object.freeze({
    byteOffset: $VkImageMemoryBarrier.subresourceRange.byteOffset,
    byteLength: $VkImageMemoryBarrier.subresourceRange.byteLength
  }),
});
class VkImageCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._imageType = 0;
    this._format = 0;
    this._extent = null;
    this._mipLevels = 0;
    this._arrayLayers = 0;
    this._samples = 0;
    this._tiling = 0;
    this._usage = 0;
    this._sharingMode = 0;
    this._queueFamilyIndexCount = 0;
    this._pQueueFamilyIndices = null;
    this._initialLayout = 0;
    this.memoryBuffer = new ArrayBuffer(VkImageCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.imageType !== void 0) this.imageType = opts.imageType;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.extent !== void 0) this.extent = opts.extent;
      if (opts.mipLevels !== void 0) this.mipLevels = opts.mipLevels;
      if (opts.arrayLayers !== void 0) this.arrayLayers = opts.arrayLayers;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.sharingMode !== void 0) this.sharingMode = opts.sharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      if (opts.initialLayout !== void 0) this.initialLayout = opts.initialLayout;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkImageCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get imageType() {
    return this._imageType;
  }
  set imageType(value) {
    
this.memoryView.setInt32($VkImageCreateInfo.imageType.byteOffset, value);
this._imageType = value;
  }
  get format() {
    return this._format;
  }
  set format(value) {
    
this.memoryView.setInt32($VkImageCreateInfo.format.byteOffset, value);
this._format = value;
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    String
  }
  get mipLevels() {
    return this._mipLevels;
  }
  set mipLevels(value) {
    
this.memoryView.setUint32($VkImageCreateInfo.mipLevels.byteOffset, value);
this._mipLevels = value;
  }
  get arrayLayers() {
    return this._arrayLayers;
  }
  set arrayLayers(value) {
    
this.memoryView.setUint32($VkImageCreateInfo.arrayLayers.byteOffset, value);
this._arrayLayers = value;
  }
  get samples() {
    return this._samples;
  }
  set samples(value) {
    
this.memoryView.setInt32($VkImageCreateInfo.samples.byteOffset, value);
this._samples = value;
  }
  get tiling() {
    return this._tiling;
  }
  set tiling(value) {
    
this.memoryView.setInt32($VkImageCreateInfo.tiling.byteOffset, value);
this._tiling = value;
  }
  get usage() {
    return this._usage;
  }
  set usage(value) {
    
this.memoryView.setInt32($VkImageCreateInfo.usage.byteOffset, value);
this._usage = value;
  }
  get sharingMode() {
    return this._sharingMode;
  }
  set sharingMode(value) {
    
this.memoryView.setInt32($VkImageCreateInfo.sharingMode.byteOffset, value);
this._sharingMode = value;
  }
  get queueFamilyIndexCount() {
    return this._queueFamilyIndexCount;
  }
  set queueFamilyIndexCount(value) {
    
this.memoryView.setUint32($VkImageCreateInfo.queueFamilyIndexCount.byteOffset, value);
this._queueFamilyIndexCount = value;
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    
  }
  get initialLayout() {
    return this._initialLayout;
  }
  set initialLayout(value) {
    
this.memoryView.setInt32($VkImageCreateInfo.initialLayout.byteOffset, value);
this._initialLayout = value;
  }
  
};

VkImageCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.extent !== null) { }
  
};

const $VkImageCreateInfo = memoryLayouts.VkImageCreateInfo;
VkImageCreateInfo.byteLength = $VkImageCreateInfo.byteLength;

VkImageCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageCreateInfo.sType.byteOffset,
    byteLength: $VkImageCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageCreateInfo.pNext.byteOffset,
    byteLength: $VkImageCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkImageCreateInfo.flags.byteOffset,
    byteLength: $VkImageCreateInfo.flags.byteLength
  }),
  imageType: Object.freeze({
    byteOffset: $VkImageCreateInfo.imageType.byteOffset,
    byteLength: $VkImageCreateInfo.imageType.byteLength
  }),
  format: Object.freeze({
    byteOffset: $VkImageCreateInfo.format.byteOffset,
    byteLength: $VkImageCreateInfo.format.byteLength
  }),
  extent: Object.freeze({
    byteOffset: $VkImageCreateInfo.extent.byteOffset,
    byteLength: $VkImageCreateInfo.extent.byteLength
  }),
  mipLevels: Object.freeze({
    byteOffset: $VkImageCreateInfo.mipLevels.byteOffset,
    byteLength: $VkImageCreateInfo.mipLevels.byteLength
  }),
  arrayLayers: Object.freeze({
    byteOffset: $VkImageCreateInfo.arrayLayers.byteOffset,
    byteLength: $VkImageCreateInfo.arrayLayers.byteLength
  }),
  samples: Object.freeze({
    byteOffset: $VkImageCreateInfo.samples.byteOffset,
    byteLength: $VkImageCreateInfo.samples.byteLength
  }),
  tiling: Object.freeze({
    byteOffset: $VkImageCreateInfo.tiling.byteOffset,
    byteLength: $VkImageCreateInfo.tiling.byteLength
  }),
  usage: Object.freeze({
    byteOffset: $VkImageCreateInfo.usage.byteOffset,
    byteLength: $VkImageCreateInfo.usage.byteLength
  }),
  sharingMode: Object.freeze({
    byteOffset: $VkImageCreateInfo.sharingMode.byteOffset,
    byteLength: $VkImageCreateInfo.sharingMode.byteLength
  }),
  queueFamilyIndexCount: Object.freeze({
    byteOffset: $VkImageCreateInfo.queueFamilyIndexCount.byteOffset,
    byteLength: $VkImageCreateInfo.queueFamilyIndexCount.byteLength
  }),
  pQueueFamilyIndices: Object.freeze({
    byteOffset: $VkImageCreateInfo.pQueueFamilyIndices.byteOffset,
    byteLength: $VkImageCreateInfo.pQueueFamilyIndices.byteLength
  }),
  initialLayout: Object.freeze({
    byteOffset: $VkImageCreateInfo.initialLayout.byteOffset,
    byteLength: $VkImageCreateInfo.initialLayout.byteLength
  }),
});
class VkSubresourceLayout {
  constructor(opts) {
    this._offset = 0;
    this._size = 0;
    this._rowPitch = 0;
    this._arrayPitch = 0;
    this._depthPitch = 0;
    this.memoryBuffer = new ArrayBuffer(VkSubresourceLayout.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get offset() {
    return this._offset;
  }
  get size() {
    return this._size;
  }
  get rowPitch() {
    return this._rowPitch;
  }
  get arrayPitch() {
    return this._arrayPitch;
  }
  get depthPitch() {
    return this._depthPitch;
  }
  
};

VkSubresourceLayout.prototype.flush = function flush() {
  
};

const $VkSubresourceLayout = memoryLayouts.VkSubresourceLayout;
VkSubresourceLayout.byteLength = $VkSubresourceLayout.byteLength;

VkSubresourceLayout.memoryLayout = Object.freeze({
  offset: Object.freeze({
    byteOffset: $VkSubresourceLayout.offset.byteOffset,
    byteLength: $VkSubresourceLayout.offset.byteLength
  }),
  size: Object.freeze({
    byteOffset: $VkSubresourceLayout.size.byteOffset,
    byteLength: $VkSubresourceLayout.size.byteLength
  }),
  rowPitch: Object.freeze({
    byteOffset: $VkSubresourceLayout.rowPitch.byteOffset,
    byteLength: $VkSubresourceLayout.rowPitch.byteLength
  }),
  arrayPitch: Object.freeze({
    byteOffset: $VkSubresourceLayout.arrayPitch.byteOffset,
    byteLength: $VkSubresourceLayout.arrayPitch.byteLength
  }),
  depthPitch: Object.freeze({
    byteOffset: $VkSubresourceLayout.depthPitch.byteOffset,
    byteLength: $VkSubresourceLayout.depthPitch.byteLength
  }),
});
class VkImageViewCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._image = null;
    this._viewType = 0;
    this._format = 0;
    this._components = null;
    this._subresourceRange = null;
    this.memoryBuffer = new ArrayBuffer(VkImageViewCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.viewType !== void 0) this.viewType = opts.viewType;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.components !== void 0) this.components = opts.components;
      if (opts.subresourceRange !== void 0) this.subresourceRange = opts.subresourceRange;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageViewCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkImageViewCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get image() {
    return this._image;
  }
  set image(value) {
    String
  }
  get viewType() {
    return this._viewType;
  }
  set viewType(value) {
    
this.memoryView.setInt32($VkImageViewCreateInfo.viewType.byteOffset, value);
this._viewType = value;
  }
  get format() {
    return this._format;
  }
  set format(value) {
    
this.memoryView.setInt32($VkImageViewCreateInfo.format.byteOffset, value);
this._format = value;
  }
  get components() {
    return this._components;
  }
  set components(value) {
    String
  }
  get subresourceRange() {
    return this._subresourceRange;
  }
  set subresourceRange(value) {
    String
  }
  
};

VkImageViewCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.components !== null) { }
  
  if (this.subresourceRange !== null) { }
  
};

const $VkImageViewCreateInfo = memoryLayouts.VkImageViewCreateInfo;
VkImageViewCreateInfo.byteLength = $VkImageViewCreateInfo.byteLength;

VkImageViewCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageViewCreateInfo.sType.byteOffset,
    byteLength: $VkImageViewCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageViewCreateInfo.pNext.byteOffset,
    byteLength: $VkImageViewCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkImageViewCreateInfo.flags.byteOffset,
    byteLength: $VkImageViewCreateInfo.flags.byteLength
  }),
  image: Object.freeze({
    byteOffset: $VkImageViewCreateInfo.image.byteOffset,
    byteLength: $VkImageViewCreateInfo.image.byteLength
  }),
  viewType: Object.freeze({
    byteOffset: $VkImageViewCreateInfo.viewType.byteOffset,
    byteLength: $VkImageViewCreateInfo.viewType.byteLength
  }),
  format: Object.freeze({
    byteOffset: $VkImageViewCreateInfo.format.byteOffset,
    byteLength: $VkImageViewCreateInfo.format.byteLength
  }),
  components: Object.freeze({
    byteOffset: $VkImageViewCreateInfo.components.byteOffset,
    byteLength: $VkImageViewCreateInfo.components.byteLength
  }),
  subresourceRange: Object.freeze({
    byteOffset: $VkImageViewCreateInfo.subresourceRange.byteOffset,
    byteLength: $VkImageViewCreateInfo.subresourceRange.byteLength
  }),
});
class VkBufferCopy {
  constructor(opts) {
    this._srcOffset = 0;
    this._dstOffset = 0;
    this._size = 0;
    this.memoryBuffer = new ArrayBuffer(VkBufferCopy.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.srcOffset !== void 0) this.srcOffset = opts.srcOffset;
      if (opts.dstOffset !== void 0) this.dstOffset = opts.dstOffset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get srcOffset() {
    return this._srcOffset;
  }
  set srcOffset(value) {
    
this.memoryView.setBigUint64($VkBufferCopy.srcOffset.byteOffset, value);
this._srcOffset = value;
  }
  get dstOffset() {
    return this._dstOffset;
  }
  set dstOffset(value) {
    
this.memoryView.setBigUint64($VkBufferCopy.dstOffset.byteOffset, value);
this._dstOffset = value;
  }
  get size() {
    return this._size;
  }
  set size(value) {
    
this.memoryView.setBigUint64($VkBufferCopy.size.byteOffset, value);
this._size = value;
  }
  
};

VkBufferCopy.prototype.flush = function flush() {
  
};

const $VkBufferCopy = memoryLayouts.VkBufferCopy;
VkBufferCopy.byteLength = $VkBufferCopy.byteLength;

VkBufferCopy.memoryLayout = Object.freeze({
  srcOffset: Object.freeze({
    byteOffset: $VkBufferCopy.srcOffset.byteOffset,
    byteLength: $VkBufferCopy.srcOffset.byteLength
  }),
  dstOffset: Object.freeze({
    byteOffset: $VkBufferCopy.dstOffset.byteOffset,
    byteLength: $VkBufferCopy.dstOffset.byteLength
  }),
  size: Object.freeze({
    byteOffset: $VkBufferCopy.size.byteOffset,
    byteLength: $VkBufferCopy.size.byteLength
  }),
});
class VkSparseMemoryBind {
  constructor(opts) {
    this._resourceOffset = 0;
    this._size = 0;
    this._memory = null;
    this._memoryOffset = 0;
    this._flags = 0;
    this.memoryBuffer = new ArrayBuffer(VkSparseMemoryBind.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.resourceOffset !== void 0) this.resourceOffset = opts.resourceOffset;
      if (opts.size !== void 0) this.size = opts.size;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get resourceOffset() {
    return this._resourceOffset;
  }
  set resourceOffset(value) {
    
this.memoryView.setBigUint64($VkSparseMemoryBind.resourceOffset.byteOffset, value);
this._resourceOffset = value;
  }
  get size() {
    return this._size;
  }
  set size(value) {
    
this.memoryView.setBigUint64($VkSparseMemoryBind.size.byteOffset, value);
this._size = value;
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    String
  }
  get memoryOffset() {
    return this._memoryOffset;
  }
  set memoryOffset(value) {
    
this.memoryView.setBigUint64($VkSparseMemoryBind.memoryOffset.byteOffset, value);
this._memoryOffset = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkSparseMemoryBind.flags.byteOffset, value);
this._flags = value;
  }
  
};

VkSparseMemoryBind.prototype.flush = function flush() {
  
};

const $VkSparseMemoryBind = memoryLayouts.VkSparseMemoryBind;
VkSparseMemoryBind.byteLength = $VkSparseMemoryBind.byteLength;

VkSparseMemoryBind.memoryLayout = Object.freeze({
  resourceOffset: Object.freeze({
    byteOffset: $VkSparseMemoryBind.resourceOffset.byteOffset,
    byteLength: $VkSparseMemoryBind.resourceOffset.byteLength
  }),
  size: Object.freeze({
    byteOffset: $VkSparseMemoryBind.size.byteOffset,
    byteLength: $VkSparseMemoryBind.size.byteLength
  }),
  memory: Object.freeze({
    byteOffset: $VkSparseMemoryBind.memory.byteOffset,
    byteLength: $VkSparseMemoryBind.memory.byteLength
  }),
  memoryOffset: Object.freeze({
    byteOffset: $VkSparseMemoryBind.memoryOffset.byteOffset,
    byteLength: $VkSparseMemoryBind.memoryOffset.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkSparseMemoryBind.flags.byteOffset,
    byteLength: $VkSparseMemoryBind.flags.byteLength
  }),
});
class VkSparseImageMemoryBind {
  constructor(opts) {
    this._subresource = null;
    this._offset = null;
    this._extent = null;
    this._memory = null;
    this._memoryOffset = 0;
    this._flags = 0;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageMemoryBind.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.subresource !== void 0) this.subresource = opts.subresource;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get subresource() {
    return this._subresource;
  }
  set subresource(value) {
    String
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    String
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    String
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    String
  }
  get memoryOffset() {
    return this._memoryOffset;
  }
  set memoryOffset(value) {
    
this.memoryView.setBigUint64($VkSparseImageMemoryBind.memoryOffset.byteOffset, value);
this._memoryOffset = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkSparseImageMemoryBind.flags.byteOffset, value);
this._flags = value;
  }
  
};

VkSparseImageMemoryBind.prototype.flush = function flush() {
  
  if (this.subresource !== null) { }
  
  if (this.offset !== null) { }
  
  if (this.extent !== null) { }
  
};

const $VkSparseImageMemoryBind = memoryLayouts.VkSparseImageMemoryBind;
VkSparseImageMemoryBind.byteLength = $VkSparseImageMemoryBind.byteLength;

VkSparseImageMemoryBind.memoryLayout = Object.freeze({
  subresource: Object.freeze({
    byteOffset: $VkSparseImageMemoryBind.subresource.byteOffset,
    byteLength: $VkSparseImageMemoryBind.subresource.byteLength
  }),
  offset: Object.freeze({
    byteOffset: $VkSparseImageMemoryBind.offset.byteOffset,
    byteLength: $VkSparseImageMemoryBind.offset.byteLength
  }),
  extent: Object.freeze({
    byteOffset: $VkSparseImageMemoryBind.extent.byteOffset,
    byteLength: $VkSparseImageMemoryBind.extent.byteLength
  }),
  memory: Object.freeze({
    byteOffset: $VkSparseImageMemoryBind.memory.byteOffset,
    byteLength: $VkSparseImageMemoryBind.memory.byteLength
  }),
  memoryOffset: Object.freeze({
    byteOffset: $VkSparseImageMemoryBind.memoryOffset.byteOffset,
    byteLength: $VkSparseImageMemoryBind.memoryOffset.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkSparseImageMemoryBind.flags.byteOffset,
    byteLength: $VkSparseImageMemoryBind.flags.byteLength
  }),
});
class VkSparseBufferMemoryBindInfo {
  constructor(opts) {
    this._buffer = null;
    this._bindCount = 0;
    this._pBinds = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseBufferMemoryBindInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.bindCount !== void 0) this.bindCount = opts.bindCount;
      if (opts.pBinds !== void 0) this.pBinds = opts.pBinds;
      
    }
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  get bindCount() {
    return this._bindCount;
  }
  set bindCount(value) {
    
this.memoryView.setUint32($VkSparseBufferMemoryBindInfo.bindCount.byteOffset, value);
this._bindCount = value;
  }
  get pBinds() {
    return this._pBinds;
  }
  set pBinds(value) {
    
  }
  
};

VkSparseBufferMemoryBindInfo.prototype.flush = function flush() {
  
  if (this.pBinds !== null) { }
  
};

const $VkSparseBufferMemoryBindInfo = memoryLayouts.VkSparseBufferMemoryBindInfo;
VkSparseBufferMemoryBindInfo.byteLength = $VkSparseBufferMemoryBindInfo.byteLength;

VkSparseBufferMemoryBindInfo.memoryLayout = Object.freeze({
  buffer: Object.freeze({
    byteOffset: $VkSparseBufferMemoryBindInfo.buffer.byteOffset,
    byteLength: $VkSparseBufferMemoryBindInfo.buffer.byteLength
  }),
  bindCount: Object.freeze({
    byteOffset: $VkSparseBufferMemoryBindInfo.bindCount.byteOffset,
    byteLength: $VkSparseBufferMemoryBindInfo.bindCount.byteLength
  }),
  pBinds: Object.freeze({
    byteOffset: $VkSparseBufferMemoryBindInfo.pBinds.byteOffset,
    byteLength: $VkSparseBufferMemoryBindInfo.pBinds.byteLength
  }),
});
class VkSparseImageOpaqueMemoryBindInfo {
  constructor(opts) {
    this._image = null;
    this._bindCount = 0;
    this._pBinds = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageOpaqueMemoryBindInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.bindCount !== void 0) this.bindCount = opts.bindCount;
      if (opts.pBinds !== void 0) this.pBinds = opts.pBinds;
      
    }
  }
  get image() {
    return this._image;
  }
  set image(value) {
    String
  }
  get bindCount() {
    return this._bindCount;
  }
  set bindCount(value) {
    
this.memoryView.setUint32($VkSparseImageOpaqueMemoryBindInfo.bindCount.byteOffset, value);
this._bindCount = value;
  }
  get pBinds() {
    return this._pBinds;
  }
  set pBinds(value) {
    
  }
  
};

VkSparseImageOpaqueMemoryBindInfo.prototype.flush = function flush() {
  
  if (this.pBinds !== null) { }
  
};

const $VkSparseImageOpaqueMemoryBindInfo = memoryLayouts.VkSparseImageOpaqueMemoryBindInfo;
VkSparseImageOpaqueMemoryBindInfo.byteLength = $VkSparseImageOpaqueMemoryBindInfo.byteLength;

VkSparseImageOpaqueMemoryBindInfo.memoryLayout = Object.freeze({
  image: Object.freeze({
    byteOffset: $VkSparseImageOpaqueMemoryBindInfo.image.byteOffset,
    byteLength: $VkSparseImageOpaqueMemoryBindInfo.image.byteLength
  }),
  bindCount: Object.freeze({
    byteOffset: $VkSparseImageOpaqueMemoryBindInfo.bindCount.byteOffset,
    byteLength: $VkSparseImageOpaqueMemoryBindInfo.bindCount.byteLength
  }),
  pBinds: Object.freeze({
    byteOffset: $VkSparseImageOpaqueMemoryBindInfo.pBinds.byteOffset,
    byteLength: $VkSparseImageOpaqueMemoryBindInfo.pBinds.byteLength
  }),
});
class VkSparseImageMemoryBindInfo {
  constructor(opts) {
    this._image = null;
    this._bindCount = 0;
    this._pBinds = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageMemoryBindInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.bindCount !== void 0) this.bindCount = opts.bindCount;
      if (opts.pBinds !== void 0) this.pBinds = opts.pBinds;
      
    }
  }
  get image() {
    return this._image;
  }
  set image(value) {
    String
  }
  get bindCount() {
    return this._bindCount;
  }
  set bindCount(value) {
    
this.memoryView.setUint32($VkSparseImageMemoryBindInfo.bindCount.byteOffset, value);
this._bindCount = value;
  }
  get pBinds() {
    return this._pBinds;
  }
  set pBinds(value) {
    
  }
  
};

VkSparseImageMemoryBindInfo.prototype.flush = function flush() {
  
  if (this.pBinds !== null) { }
  
};

const $VkSparseImageMemoryBindInfo = memoryLayouts.VkSparseImageMemoryBindInfo;
VkSparseImageMemoryBindInfo.byteLength = $VkSparseImageMemoryBindInfo.byteLength;

VkSparseImageMemoryBindInfo.memoryLayout = Object.freeze({
  image: Object.freeze({
    byteOffset: $VkSparseImageMemoryBindInfo.image.byteOffset,
    byteLength: $VkSparseImageMemoryBindInfo.image.byteLength
  }),
  bindCount: Object.freeze({
    byteOffset: $VkSparseImageMemoryBindInfo.bindCount.byteOffset,
    byteLength: $VkSparseImageMemoryBindInfo.bindCount.byteLength
  }),
  pBinds: Object.freeze({
    byteOffset: $VkSparseImageMemoryBindInfo.pBinds.byteOffset,
    byteLength: $VkSparseImageMemoryBindInfo.pBinds.byteLength
  }),
});
class VkBindSparseInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._waitSemaphoreCount = 0;
    this._pWaitSemaphores = null;
    this._bufferBindCount = 0;
    this._pBufferBinds = null;
    this._imageOpaqueBindCount = 0;
    this._pImageOpaqueBinds = null;
    this._imageBindCount = 0;
    this._pImageBinds = null;
    this._signalSemaphoreCount = 0;
    this._pSignalSemaphores = null;
    this.memoryBuffer = new ArrayBuffer(VkBindSparseInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphores !== void 0) this.pWaitSemaphores = opts.pWaitSemaphores;
      if (opts.bufferBindCount !== void 0) this.bufferBindCount = opts.bufferBindCount;
      if (opts.pBufferBinds !== void 0) this.pBufferBinds = opts.pBufferBinds;
      if (opts.imageOpaqueBindCount !== void 0) this.imageOpaqueBindCount = opts.imageOpaqueBindCount;
      if (opts.pImageOpaqueBinds !== void 0) this.pImageOpaqueBinds = opts.pImageOpaqueBinds;
      if (opts.imageBindCount !== void 0) this.imageBindCount = opts.imageBindCount;
      if (opts.pImageBinds !== void 0) this.pImageBinds = opts.pImageBinds;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphores !== void 0) this.pSignalSemaphores = opts.pSignalSemaphores;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBindSparseInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get waitSemaphoreCount() {
    return this._waitSemaphoreCount;
  }
  set waitSemaphoreCount(value) {
    
this.memoryView.setUint32($VkBindSparseInfo.waitSemaphoreCount.byteOffset, value);
this._waitSemaphoreCount = value;
  }
  get pWaitSemaphores() {
    return this._pWaitSemaphores;
  }
  set pWaitSemaphores(value) {
    
  }
  get bufferBindCount() {
    return this._bufferBindCount;
  }
  set bufferBindCount(value) {
    
this.memoryView.setUint32($VkBindSparseInfo.bufferBindCount.byteOffset, value);
this._bufferBindCount = value;
  }
  get pBufferBinds() {
    return this._pBufferBinds;
  }
  set pBufferBinds(value) {
    
  }
  get imageOpaqueBindCount() {
    return this._imageOpaqueBindCount;
  }
  set imageOpaqueBindCount(value) {
    
this.memoryView.setUint32($VkBindSparseInfo.imageOpaqueBindCount.byteOffset, value);
this._imageOpaqueBindCount = value;
  }
  get pImageOpaqueBinds() {
    return this._pImageOpaqueBinds;
  }
  set pImageOpaqueBinds(value) {
    
  }
  get imageBindCount() {
    return this._imageBindCount;
  }
  set imageBindCount(value) {
    
this.memoryView.setUint32($VkBindSparseInfo.imageBindCount.byteOffset, value);
this._imageBindCount = value;
  }
  get pImageBinds() {
    return this._pImageBinds;
  }
  set pImageBinds(value) {
    
  }
  get signalSemaphoreCount() {
    return this._signalSemaphoreCount;
  }
  set signalSemaphoreCount(value) {
    
this.memoryView.setUint32($VkBindSparseInfo.signalSemaphoreCount.byteOffset, value);
this._signalSemaphoreCount = value;
  }
  get pSignalSemaphores() {
    return this._pSignalSemaphores;
  }
  set pSignalSemaphores(value) {
    
  }
  
};

VkBindSparseInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pWaitSemaphores !== null) { }
  
  if (this.pBufferBinds !== null) { }
  
  if (this.pImageOpaqueBinds !== null) { }
  
  if (this.pImageBinds !== null) { }
  
  if (this.pSignalSemaphores !== null) { }
  
};

const $VkBindSparseInfo = memoryLayouts.VkBindSparseInfo;
VkBindSparseInfo.byteLength = $VkBindSparseInfo.byteLength;

VkBindSparseInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBindSparseInfo.sType.byteOffset,
    byteLength: $VkBindSparseInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBindSparseInfo.pNext.byteOffset,
    byteLength: $VkBindSparseInfo.pNext.byteLength
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: $VkBindSparseInfo.waitSemaphoreCount.byteOffset,
    byteLength: $VkBindSparseInfo.waitSemaphoreCount.byteLength
  }),
  pWaitSemaphores: Object.freeze({
    byteOffset: $VkBindSparseInfo.pWaitSemaphores.byteOffset,
    byteLength: $VkBindSparseInfo.pWaitSemaphores.byteLength
  }),
  bufferBindCount: Object.freeze({
    byteOffset: $VkBindSparseInfo.bufferBindCount.byteOffset,
    byteLength: $VkBindSparseInfo.bufferBindCount.byteLength
  }),
  pBufferBinds: Object.freeze({
    byteOffset: $VkBindSparseInfo.pBufferBinds.byteOffset,
    byteLength: $VkBindSparseInfo.pBufferBinds.byteLength
  }),
  imageOpaqueBindCount: Object.freeze({
    byteOffset: $VkBindSparseInfo.imageOpaqueBindCount.byteOffset,
    byteLength: $VkBindSparseInfo.imageOpaqueBindCount.byteLength
  }),
  pImageOpaqueBinds: Object.freeze({
    byteOffset: $VkBindSparseInfo.pImageOpaqueBinds.byteOffset,
    byteLength: $VkBindSparseInfo.pImageOpaqueBinds.byteLength
  }),
  imageBindCount: Object.freeze({
    byteOffset: $VkBindSparseInfo.imageBindCount.byteOffset,
    byteLength: $VkBindSparseInfo.imageBindCount.byteLength
  }),
  pImageBinds: Object.freeze({
    byteOffset: $VkBindSparseInfo.pImageBinds.byteOffset,
    byteLength: $VkBindSparseInfo.pImageBinds.byteLength
  }),
  signalSemaphoreCount: Object.freeze({
    byteOffset: $VkBindSparseInfo.signalSemaphoreCount.byteOffset,
    byteLength: $VkBindSparseInfo.signalSemaphoreCount.byteLength
  }),
  pSignalSemaphores: Object.freeze({
    byteOffset: $VkBindSparseInfo.pSignalSemaphores.byteOffset,
    byteLength: $VkBindSparseInfo.pSignalSemaphores.byteLength
  }),
});
class VkImageCopy {
  constructor(opts) {
    this._srcSubresource = null;
    this._srcOffset = null;
    this._dstSubresource = null;
    this._dstOffset = null;
    this._extent = null;
    this.memoryBuffer = new ArrayBuffer(VkImageCopy.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.srcSubresource !== void 0) this.srcSubresource = opts.srcSubresource;
      if (opts.srcOffset !== void 0) this.srcOffset = opts.srcOffset;
      if (opts.dstSubresource !== void 0) this.dstSubresource = opts.dstSubresource;
      if (opts.dstOffset !== void 0) this.dstOffset = opts.dstOffset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      
    }
  }
  get srcSubresource() {
    return this._srcSubresource;
  }
  set srcSubresource(value) {
    String
  }
  get srcOffset() {
    return this._srcOffset;
  }
  set srcOffset(value) {
    String
  }
  get dstSubresource() {
    return this._dstSubresource;
  }
  set dstSubresource(value) {
    String
  }
  get dstOffset() {
    return this._dstOffset;
  }
  set dstOffset(value) {
    String
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    String
  }
  
};

VkImageCopy.prototype.flush = function flush() {
  
  if (this.srcSubresource !== null) { }
  
  if (this.srcOffset !== null) { }
  
  if (this.dstSubresource !== null) { }
  
  if (this.dstOffset !== null) { }
  
  if (this.extent !== null) { }
  
};

const $VkImageCopy = memoryLayouts.VkImageCopy;
VkImageCopy.byteLength = $VkImageCopy.byteLength;

VkImageCopy.memoryLayout = Object.freeze({
  srcSubresource: Object.freeze({
    byteOffset: $VkImageCopy.srcSubresource.byteOffset,
    byteLength: $VkImageCopy.srcSubresource.byteLength
  }),
  srcOffset: Object.freeze({
    byteOffset: $VkImageCopy.srcOffset.byteOffset,
    byteLength: $VkImageCopy.srcOffset.byteLength
  }),
  dstSubresource: Object.freeze({
    byteOffset: $VkImageCopy.dstSubresource.byteOffset,
    byteLength: $VkImageCopy.dstSubresource.byteLength
  }),
  dstOffset: Object.freeze({
    byteOffset: $VkImageCopy.dstOffset.byteOffset,
    byteLength: $VkImageCopy.dstOffset.byteLength
  }),
  extent: Object.freeze({
    byteOffset: $VkImageCopy.extent.byteOffset,
    byteLength: $VkImageCopy.extent.byteLength
  }),
});
class VkImageBlit {
  constructor(opts) {
    this._srcSubresource = null;
    this._srcOffsets = null;
    this._dstSubresource = null;
    this._dstOffsets = null;
    this.memoryBuffer = new ArrayBuffer(VkImageBlit.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.srcSubresource !== void 0) this.srcSubresource = opts.srcSubresource;
      if (opts.srcOffsets !== void 0) this.srcOffsets = opts.srcOffsets;
      if (opts.dstSubresource !== void 0) this.dstSubresource = opts.dstSubresource;
      if (opts.dstOffsets !== void 0) this.dstOffsets = opts.dstOffsets;
      
    }
  }
  get srcSubresource() {
    return this._srcSubresource;
  }
  set srcSubresource(value) {
    String
  }
  get srcOffsets() {
    return this._srcOffsets;
  }
  set srcOffsets(value) {
    
  }
  get dstSubresource() {
    return this._dstSubresource;
  }
  set dstSubresource(value) {
    String
  }
  get dstOffsets() {
    return this._dstOffsets;
  }
  set dstOffsets(value) {
    
  }
  
};

VkImageBlit.prototype.flush = function flush() {
  
  if (this.srcSubresource !== null) { }
  
  if (this.srcOffsets !== null) { }
  
  if (this.dstSubresource !== null) { }
  
  if (this.dstOffsets !== null) { }
  
};

const $VkImageBlit = memoryLayouts.VkImageBlit;
VkImageBlit.byteLength = $VkImageBlit.byteLength;

VkImageBlit.memoryLayout = Object.freeze({
  srcSubresource: Object.freeze({
    byteOffset: $VkImageBlit.srcSubresource.byteOffset,
    byteLength: $VkImageBlit.srcSubresource.byteLength
  }),
  srcOffsets: Object.freeze({
    byteOffset: $VkImageBlit.srcOffsets.byteOffset,
    byteLength: $VkImageBlit.srcOffsets.byteLength
  }),
  dstSubresource: Object.freeze({
    byteOffset: $VkImageBlit.dstSubresource.byteOffset,
    byteLength: $VkImageBlit.dstSubresource.byteLength
  }),
  dstOffsets: Object.freeze({
    byteOffset: $VkImageBlit.dstOffsets.byteOffset,
    byteLength: $VkImageBlit.dstOffsets.byteLength
  }),
});
class VkBufferImageCopy {
  constructor(opts) {
    this._bufferOffset = 0;
    this._bufferRowLength = 0;
    this._bufferImageHeight = 0;
    this._imageSubresource = null;
    this._imageOffset = null;
    this._imageExtent = null;
    this.memoryBuffer = new ArrayBuffer(VkBufferImageCopy.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.bufferOffset !== void 0) this.bufferOffset = opts.bufferOffset;
      if (opts.bufferRowLength !== void 0) this.bufferRowLength = opts.bufferRowLength;
      if (opts.bufferImageHeight !== void 0) this.bufferImageHeight = opts.bufferImageHeight;
      if (opts.imageSubresource !== void 0) this.imageSubresource = opts.imageSubresource;
      if (opts.imageOffset !== void 0) this.imageOffset = opts.imageOffset;
      if (opts.imageExtent !== void 0) this.imageExtent = opts.imageExtent;
      
    }
  }
  get bufferOffset() {
    return this._bufferOffset;
  }
  set bufferOffset(value) {
    
this.memoryView.setBigUint64($VkBufferImageCopy.bufferOffset.byteOffset, value);
this._bufferOffset = value;
  }
  get bufferRowLength() {
    return this._bufferRowLength;
  }
  set bufferRowLength(value) {
    
this.memoryView.setUint32($VkBufferImageCopy.bufferRowLength.byteOffset, value);
this._bufferRowLength = value;
  }
  get bufferImageHeight() {
    return this._bufferImageHeight;
  }
  set bufferImageHeight(value) {
    
this.memoryView.setUint32($VkBufferImageCopy.bufferImageHeight.byteOffset, value);
this._bufferImageHeight = value;
  }
  get imageSubresource() {
    return this._imageSubresource;
  }
  set imageSubresource(value) {
    String
  }
  get imageOffset() {
    return this._imageOffset;
  }
  set imageOffset(value) {
    String
  }
  get imageExtent() {
    return this._imageExtent;
  }
  set imageExtent(value) {
    String
  }
  
};

VkBufferImageCopy.prototype.flush = function flush() {
  
  if (this.imageSubresource !== null) { }
  
  if (this.imageOffset !== null) { }
  
  if (this.imageExtent !== null) { }
  
};

const $VkBufferImageCopy = memoryLayouts.VkBufferImageCopy;
VkBufferImageCopy.byteLength = $VkBufferImageCopy.byteLength;

VkBufferImageCopy.memoryLayout = Object.freeze({
  bufferOffset: Object.freeze({
    byteOffset: $VkBufferImageCopy.bufferOffset.byteOffset,
    byteLength: $VkBufferImageCopy.bufferOffset.byteLength
  }),
  bufferRowLength: Object.freeze({
    byteOffset: $VkBufferImageCopy.bufferRowLength.byteOffset,
    byteLength: $VkBufferImageCopy.bufferRowLength.byteLength
  }),
  bufferImageHeight: Object.freeze({
    byteOffset: $VkBufferImageCopy.bufferImageHeight.byteOffset,
    byteLength: $VkBufferImageCopy.bufferImageHeight.byteLength
  }),
  imageSubresource: Object.freeze({
    byteOffset: $VkBufferImageCopy.imageSubresource.byteOffset,
    byteLength: $VkBufferImageCopy.imageSubresource.byteLength
  }),
  imageOffset: Object.freeze({
    byteOffset: $VkBufferImageCopy.imageOffset.byteOffset,
    byteLength: $VkBufferImageCopy.imageOffset.byteLength
  }),
  imageExtent: Object.freeze({
    byteOffset: $VkBufferImageCopy.imageExtent.byteOffset,
    byteLength: $VkBufferImageCopy.imageExtent.byteLength
  }),
});
class VkImageResolve {
  constructor(opts) {
    this._srcSubresource = null;
    this._srcOffset = null;
    this._dstSubresource = null;
    this._dstOffset = null;
    this._extent = null;
    this.memoryBuffer = new ArrayBuffer(VkImageResolve.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.srcSubresource !== void 0) this.srcSubresource = opts.srcSubresource;
      if (opts.srcOffset !== void 0) this.srcOffset = opts.srcOffset;
      if (opts.dstSubresource !== void 0) this.dstSubresource = opts.dstSubresource;
      if (opts.dstOffset !== void 0) this.dstOffset = opts.dstOffset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      
    }
  }
  get srcSubresource() {
    return this._srcSubresource;
  }
  set srcSubresource(value) {
    String
  }
  get srcOffset() {
    return this._srcOffset;
  }
  set srcOffset(value) {
    String
  }
  get dstSubresource() {
    return this._dstSubresource;
  }
  set dstSubresource(value) {
    String
  }
  get dstOffset() {
    return this._dstOffset;
  }
  set dstOffset(value) {
    String
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    String
  }
  
};

VkImageResolve.prototype.flush = function flush() {
  
  if (this.srcSubresource !== null) { }
  
  if (this.srcOffset !== null) { }
  
  if (this.dstSubresource !== null) { }
  
  if (this.dstOffset !== null) { }
  
  if (this.extent !== null) { }
  
};

const $VkImageResolve = memoryLayouts.VkImageResolve;
VkImageResolve.byteLength = $VkImageResolve.byteLength;

VkImageResolve.memoryLayout = Object.freeze({
  srcSubresource: Object.freeze({
    byteOffset: $VkImageResolve.srcSubresource.byteOffset,
    byteLength: $VkImageResolve.srcSubresource.byteLength
  }),
  srcOffset: Object.freeze({
    byteOffset: $VkImageResolve.srcOffset.byteOffset,
    byteLength: $VkImageResolve.srcOffset.byteLength
  }),
  dstSubresource: Object.freeze({
    byteOffset: $VkImageResolve.dstSubresource.byteOffset,
    byteLength: $VkImageResolve.dstSubresource.byteLength
  }),
  dstOffset: Object.freeze({
    byteOffset: $VkImageResolve.dstOffset.byteOffset,
    byteLength: $VkImageResolve.dstOffset.byteLength
  }),
  extent: Object.freeze({
    byteOffset: $VkImageResolve.extent.byteOffset,
    byteLength: $VkImageResolve.extent.byteLength
  }),
});
class VkShaderModuleCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._codeSize = 0;
    this._pCode = null;
    this.memoryBuffer = new ArrayBuffer(VkShaderModuleCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.codeSize !== void 0) this.codeSize = opts.codeSize;
      if (opts.pCode !== void 0) this.pCode = opts.pCode;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkShaderModuleCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkShaderModuleCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get codeSize() {
    return this._codeSize;
  }
  set codeSize(value) {
    
this.memoryView.setBigInt64($VkShaderModuleCreateInfo.codeSize.byteOffset, value);
this._codeSize = value;
  }
  get pCode() {
    return this._pCode;
  }
  set pCode(value) {
    
  }
  
};

VkShaderModuleCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkShaderModuleCreateInfo = memoryLayouts.VkShaderModuleCreateInfo;
VkShaderModuleCreateInfo.byteLength = $VkShaderModuleCreateInfo.byteLength;

VkShaderModuleCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkShaderModuleCreateInfo.sType.byteOffset,
    byteLength: $VkShaderModuleCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkShaderModuleCreateInfo.pNext.byteOffset,
    byteLength: $VkShaderModuleCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkShaderModuleCreateInfo.flags.byteOffset,
    byteLength: $VkShaderModuleCreateInfo.flags.byteLength
  }),
  codeSize: Object.freeze({
    byteOffset: $VkShaderModuleCreateInfo.codeSize.byteOffset,
    byteLength: $VkShaderModuleCreateInfo.codeSize.byteLength
  }),
  pCode: Object.freeze({
    byteOffset: $VkShaderModuleCreateInfo.pCode.byteOffset,
    byteLength: $VkShaderModuleCreateInfo.pCode.byteLength
  }),
});
class VkDescriptorSetLayoutBinding {
  constructor(opts) {
    this._binding = 0;
    this._descriptorType = 0;
    this._descriptorCount = 0;
    this._stageFlags = 0;
    this._pImmutableSamplers = null;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetLayoutBinding.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.stageFlags !== void 0) this.stageFlags = opts.stageFlags;
      if (opts.pImmutableSamplers !== void 0) this.pImmutableSamplers = opts.pImmutableSamplers;
      
    }
  }
  get binding() {
    return this._binding;
  }
  set binding(value) {
    
this.memoryView.setUint32($VkDescriptorSetLayoutBinding.binding.byteOffset, value);
this._binding = value;
  }
  get descriptorType() {
    return this._descriptorType;
  }
  set descriptorType(value) {
    
this.memoryView.setInt32($VkDescriptorSetLayoutBinding.descriptorType.byteOffset, value);
this._descriptorType = value;
  }
  get descriptorCount() {
    return this._descriptorCount;
  }
  set descriptorCount(value) {
    
this.memoryView.setUint32($VkDescriptorSetLayoutBinding.descriptorCount.byteOffset, value);
this._descriptorCount = value;
  }
  get stageFlags() {
    return this._stageFlags;
  }
  set stageFlags(value) {
    
this.memoryView.setInt32($VkDescriptorSetLayoutBinding.stageFlags.byteOffset, value);
this._stageFlags = value;
  }
  get pImmutableSamplers() {
    return this._pImmutableSamplers;
  }
  set pImmutableSamplers(value) {
    
  }
  
};

VkDescriptorSetLayoutBinding.prototype.flush = function flush() {
  
  if (this.pImmutableSamplers !== null) { }
  
};

const $VkDescriptorSetLayoutBinding = memoryLayouts.VkDescriptorSetLayoutBinding;
VkDescriptorSetLayoutBinding.byteLength = $VkDescriptorSetLayoutBinding.byteLength;

VkDescriptorSetLayoutBinding.memoryLayout = Object.freeze({
  binding: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutBinding.binding.byteOffset,
    byteLength: $VkDescriptorSetLayoutBinding.binding.byteLength
  }),
  descriptorType: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutBinding.descriptorType.byteOffset,
    byteLength: $VkDescriptorSetLayoutBinding.descriptorType.byteLength
  }),
  descriptorCount: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutBinding.descriptorCount.byteOffset,
    byteLength: $VkDescriptorSetLayoutBinding.descriptorCount.byteLength
  }),
  stageFlags: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutBinding.stageFlags.byteOffset,
    byteLength: $VkDescriptorSetLayoutBinding.stageFlags.byteLength
  }),
  pImmutableSamplers: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutBinding.pImmutableSamplers.byteOffset,
    byteLength: $VkDescriptorSetLayoutBinding.pImmutableSamplers.byteLength
  }),
});
class VkDescriptorSetLayoutCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._bindingCount = 0;
    this._pBindings = null;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetLayoutCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.bindingCount !== void 0) this.bindingCount = opts.bindingCount;
      if (opts.pBindings !== void 0) this.pBindings = opts.pBindings;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDescriptorSetLayoutCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkDescriptorSetLayoutCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get bindingCount() {
    return this._bindingCount;
  }
  set bindingCount(value) {
    
this.memoryView.setUint32($VkDescriptorSetLayoutCreateInfo.bindingCount.byteOffset, value);
this._bindingCount = value;
  }
  get pBindings() {
    return this._pBindings;
  }
  set pBindings(value) {
    
  }
  
};

VkDescriptorSetLayoutCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pBindings !== null) { }
  
};

const $VkDescriptorSetLayoutCreateInfo = memoryLayouts.VkDescriptorSetLayoutCreateInfo;
VkDescriptorSetLayoutCreateInfo.byteLength = $VkDescriptorSetLayoutCreateInfo.byteLength;

VkDescriptorSetLayoutCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutCreateInfo.sType.byteOffset,
    byteLength: $VkDescriptorSetLayoutCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutCreateInfo.pNext.byteOffset,
    byteLength: $VkDescriptorSetLayoutCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutCreateInfo.flags.byteOffset,
    byteLength: $VkDescriptorSetLayoutCreateInfo.flags.byteLength
  }),
  bindingCount: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutCreateInfo.bindingCount.byteOffset,
    byteLength: $VkDescriptorSetLayoutCreateInfo.bindingCount.byteLength
  }),
  pBindings: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutCreateInfo.pBindings.byteOffset,
    byteLength: $VkDescriptorSetLayoutCreateInfo.pBindings.byteLength
  }),
});
class VkDescriptorPoolSize {
  constructor(opts) {
    this._type = 0;
    this._descriptorCount = 0;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorPoolSize.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      
    }
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkDescriptorPoolSize.type.byteOffset, value);
this._type = value;
  }
  get descriptorCount() {
    return this._descriptorCount;
  }
  set descriptorCount(value) {
    
this.memoryView.setUint32($VkDescriptorPoolSize.descriptorCount.byteOffset, value);
this._descriptorCount = value;
  }
  
};

VkDescriptorPoolSize.prototype.flush = function flush() {
  
};

const $VkDescriptorPoolSize = memoryLayouts.VkDescriptorPoolSize;
VkDescriptorPoolSize.byteLength = $VkDescriptorPoolSize.byteLength;

VkDescriptorPoolSize.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: $VkDescriptorPoolSize.type.byteOffset,
    byteLength: $VkDescriptorPoolSize.type.byteLength
  }),
  descriptorCount: Object.freeze({
    byteOffset: $VkDescriptorPoolSize.descriptorCount.byteOffset,
    byteLength: $VkDescriptorPoolSize.descriptorCount.byteLength
  }),
});
class VkDescriptorPoolCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._maxSets = 0;
    this._poolSizeCount = 0;
    this._pPoolSizes = null;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorPoolCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.maxSets !== void 0) this.maxSets = opts.maxSets;
      if (opts.poolSizeCount !== void 0) this.poolSizeCount = opts.poolSizeCount;
      if (opts.pPoolSizes !== void 0) this.pPoolSizes = opts.pPoolSizes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDescriptorPoolCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkDescriptorPoolCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get maxSets() {
    return this._maxSets;
  }
  set maxSets(value) {
    
this.memoryView.setUint32($VkDescriptorPoolCreateInfo.maxSets.byteOffset, value);
this._maxSets = value;
  }
  get poolSizeCount() {
    return this._poolSizeCount;
  }
  set poolSizeCount(value) {
    
this.memoryView.setUint32($VkDescriptorPoolCreateInfo.poolSizeCount.byteOffset, value);
this._poolSizeCount = value;
  }
  get pPoolSizes() {
    return this._pPoolSizes;
  }
  set pPoolSizes(value) {
    
  }
  
};

VkDescriptorPoolCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pPoolSizes !== null) { }
  
};

const $VkDescriptorPoolCreateInfo = memoryLayouts.VkDescriptorPoolCreateInfo;
VkDescriptorPoolCreateInfo.byteLength = $VkDescriptorPoolCreateInfo.byteLength;

VkDescriptorPoolCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDescriptorPoolCreateInfo.sType.byteOffset,
    byteLength: $VkDescriptorPoolCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDescriptorPoolCreateInfo.pNext.byteOffset,
    byteLength: $VkDescriptorPoolCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkDescriptorPoolCreateInfo.flags.byteOffset,
    byteLength: $VkDescriptorPoolCreateInfo.flags.byteLength
  }),
  maxSets: Object.freeze({
    byteOffset: $VkDescriptorPoolCreateInfo.maxSets.byteOffset,
    byteLength: $VkDescriptorPoolCreateInfo.maxSets.byteLength
  }),
  poolSizeCount: Object.freeze({
    byteOffset: $VkDescriptorPoolCreateInfo.poolSizeCount.byteOffset,
    byteLength: $VkDescriptorPoolCreateInfo.poolSizeCount.byteLength
  }),
  pPoolSizes: Object.freeze({
    byteOffset: $VkDescriptorPoolCreateInfo.pPoolSizes.byteOffset,
    byteLength: $VkDescriptorPoolCreateInfo.pPoolSizes.byteLength
  }),
});
class VkDescriptorSetAllocateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._descriptorPool = null;
    this._descriptorSetCount = 0;
    this._pSetLayouts = null;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetAllocateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.descriptorPool !== void 0) this.descriptorPool = opts.descriptorPool;
      if (opts.descriptorSetCount !== void 0) this.descriptorSetCount = opts.descriptorSetCount;
      if (opts.pSetLayouts !== void 0) this.pSetLayouts = opts.pSetLayouts;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDescriptorSetAllocateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get descriptorPool() {
    return this._descriptorPool;
  }
  set descriptorPool(value) {
    String
  }
  get descriptorSetCount() {
    return this._descriptorSetCount;
  }
  set descriptorSetCount(value) {
    
this.memoryView.setUint32($VkDescriptorSetAllocateInfo.descriptorSetCount.byteOffset, value);
this._descriptorSetCount = value;
  }
  get pSetLayouts() {
    return this._pSetLayouts;
  }
  set pSetLayouts(value) {
    
  }
  
};

VkDescriptorSetAllocateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pSetLayouts !== null) { }
  
};

const $VkDescriptorSetAllocateInfo = memoryLayouts.VkDescriptorSetAllocateInfo;
VkDescriptorSetAllocateInfo.byteLength = $VkDescriptorSetAllocateInfo.byteLength;

VkDescriptorSetAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDescriptorSetAllocateInfo.sType.byteOffset,
    byteLength: $VkDescriptorSetAllocateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDescriptorSetAllocateInfo.pNext.byteOffset,
    byteLength: $VkDescriptorSetAllocateInfo.pNext.byteLength
  }),
  descriptorPool: Object.freeze({
    byteOffset: $VkDescriptorSetAllocateInfo.descriptorPool.byteOffset,
    byteLength: $VkDescriptorSetAllocateInfo.descriptorPool.byteLength
  }),
  descriptorSetCount: Object.freeze({
    byteOffset: $VkDescriptorSetAllocateInfo.descriptorSetCount.byteOffset,
    byteLength: $VkDescriptorSetAllocateInfo.descriptorSetCount.byteLength
  }),
  pSetLayouts: Object.freeze({
    byteOffset: $VkDescriptorSetAllocateInfo.pSetLayouts.byteOffset,
    byteLength: $VkDescriptorSetAllocateInfo.pSetLayouts.byteLength
  }),
});
class VkSpecializationMapEntry {
  constructor(opts) {
    this._constantID = 0;
    this._offset = 0;
    this._size = 0;
    this.memoryBuffer = new ArrayBuffer(VkSpecializationMapEntry.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.constantID !== void 0) this.constantID = opts.constantID;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get constantID() {
    return this._constantID;
  }
  set constantID(value) {
    
this.memoryView.setUint32($VkSpecializationMapEntry.constantID.byteOffset, value);
this._constantID = value;
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    
this.memoryView.setUint32($VkSpecializationMapEntry.offset.byteOffset, value);
this._offset = value;
  }
  get size() {
    return this._size;
  }
  set size(value) {
    
this.memoryView.setBigInt64($VkSpecializationMapEntry.size.byteOffset, value);
this._size = value;
  }
  
};

VkSpecializationMapEntry.prototype.flush = function flush() {
  
};

const $VkSpecializationMapEntry = memoryLayouts.VkSpecializationMapEntry;
VkSpecializationMapEntry.byteLength = $VkSpecializationMapEntry.byteLength;

VkSpecializationMapEntry.memoryLayout = Object.freeze({
  constantID: Object.freeze({
    byteOffset: $VkSpecializationMapEntry.constantID.byteOffset,
    byteLength: $VkSpecializationMapEntry.constantID.byteLength
  }),
  offset: Object.freeze({
    byteOffset: $VkSpecializationMapEntry.offset.byteOffset,
    byteLength: $VkSpecializationMapEntry.offset.byteLength
  }),
  size: Object.freeze({
    byteOffset: $VkSpecializationMapEntry.size.byteOffset,
    byteLength: $VkSpecializationMapEntry.size.byteLength
  }),
});
class VkSpecializationInfo {
  constructor(opts) {
    this._mapEntryCount = 0;
    this._pMapEntries = null;
    this._dataSize = 0;
    this._pData = null;
    this.memoryBuffer = new ArrayBuffer(VkSpecializationInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.mapEntryCount !== void 0) this.mapEntryCount = opts.mapEntryCount;
      if (opts.pMapEntries !== void 0) this.pMapEntries = opts.pMapEntries;
      if (opts.dataSize !== void 0) this.dataSize = opts.dataSize;
      if (opts.pData !== void 0) this.pData = opts.pData;
      
    }
  }
  get mapEntryCount() {
    return this._mapEntryCount;
  }
  set mapEntryCount(value) {
    
this.memoryView.setUint32($VkSpecializationInfo.mapEntryCount.byteOffset, value);
this._mapEntryCount = value;
  }
  get pMapEntries() {
    return this._pMapEntries;
  }
  set pMapEntries(value) {
    
  }
  get dataSize() {
    return this._dataSize;
  }
  set dataSize(value) {
    
this.memoryView.setBigInt64($VkSpecializationInfo.dataSize.byteOffset, value);
this._dataSize = value;
  }
  get pData() {
    return this._pData;
  }
  set pData(value) {
    
  }
  
};

VkSpecializationInfo.prototype.flush = function flush() {
  
  if (this.pMapEntries !== null) { }
  
};

const $VkSpecializationInfo = memoryLayouts.VkSpecializationInfo;
VkSpecializationInfo.byteLength = $VkSpecializationInfo.byteLength;

VkSpecializationInfo.memoryLayout = Object.freeze({
  mapEntryCount: Object.freeze({
    byteOffset: $VkSpecializationInfo.mapEntryCount.byteOffset,
    byteLength: $VkSpecializationInfo.mapEntryCount.byteLength
  }),
  pMapEntries: Object.freeze({
    byteOffset: $VkSpecializationInfo.pMapEntries.byteOffset,
    byteLength: $VkSpecializationInfo.pMapEntries.byteLength
  }),
  dataSize: Object.freeze({
    byteOffset: $VkSpecializationInfo.dataSize.byteOffset,
    byteLength: $VkSpecializationInfo.dataSize.byteLength
  }),
  pData: Object.freeze({
    byteOffset: $VkSpecializationInfo.pData.byteOffset,
    byteLength: $VkSpecializationInfo.pData.byteLength
  }),
});
class VkPipelineShaderStageCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._stage = 0;
    this._module = null;
    this._pName = null;
    this._pSpecializationInfo = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineShaderStageCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stage !== void 0) this.stage = opts.stage;
      if (opts.module !== void 0) this.module = opts.module;
      if (opts.pName !== void 0) this.pName = opts.pName;
      if (opts.pSpecializationInfo !== void 0) this.pSpecializationInfo = opts.pSpecializationInfo;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineShaderStageCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineShaderStageCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get stage() {
    return this._stage;
  }
  set stage(value) {
    
this.memoryView.setInt32($VkPipelineShaderStageCreateInfo.stage.byteOffset, value);
this._stage = value;
  }
  get module() {
    return this._module;
  }
  set module(value) {
    String
  }
  get pName() {
    return this._pName;
  }
  set pName(value) {
    String
  }
  get pSpecializationInfo() {
    return this._pSpecializationInfo;
  }
  set pSpecializationInfo(value) {
    String
  }
  
};

VkPipelineShaderStageCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineShaderStageCreateInfo = memoryLayouts.VkPipelineShaderStageCreateInfo;
VkPipelineShaderStageCreateInfo.byteLength = $VkPipelineShaderStageCreateInfo.byteLength;

VkPipelineShaderStageCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineShaderStageCreateInfo.sType.byteOffset,
    byteLength: $VkPipelineShaderStageCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineShaderStageCreateInfo.pNext.byteOffset,
    byteLength: $VkPipelineShaderStageCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineShaderStageCreateInfo.flags.byteOffset,
    byteLength: $VkPipelineShaderStageCreateInfo.flags.byteLength
  }),
  stage: Object.freeze({
    byteOffset: $VkPipelineShaderStageCreateInfo.stage.byteOffset,
    byteLength: $VkPipelineShaderStageCreateInfo.stage.byteLength
  }),
  module: Object.freeze({
    byteOffset: $VkPipelineShaderStageCreateInfo.module.byteOffset,
    byteLength: $VkPipelineShaderStageCreateInfo.module.byteLength
  }),
  pName: Object.freeze({
    byteOffset: $VkPipelineShaderStageCreateInfo.pName.byteOffset,
    byteLength: $VkPipelineShaderStageCreateInfo.pName.byteLength
  }),
  pSpecializationInfo: Object.freeze({
    byteOffset: $VkPipelineShaderStageCreateInfo.pSpecializationInfo.byteOffset,
    byteLength: $VkPipelineShaderStageCreateInfo.pSpecializationInfo.byteLength
  }),
});
class VkComputePipelineCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._stage = null;
    this._layout = null;
    this._basePipelineHandle = null;
    this._basePipelineIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkComputePipelineCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stage !== void 0) this.stage = opts.stage;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.basePipelineHandle !== void 0) this.basePipelineHandle = opts.basePipelineHandle;
      if (opts.basePipelineIndex !== void 0) this.basePipelineIndex = opts.basePipelineIndex;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkComputePipelineCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkComputePipelineCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get stage() {
    return this._stage;
  }
  set stage(value) {
    String
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    String
  }
  get basePipelineHandle() {
    return this._basePipelineHandle;
  }
  set basePipelineHandle(value) {
    String
  }
  get basePipelineIndex() {
    return this._basePipelineIndex;
  }
  set basePipelineIndex(value) {
    
this.memoryView.setInt32($VkComputePipelineCreateInfo.basePipelineIndex.byteOffset, value);
this._basePipelineIndex = value;
  }
  
};

VkComputePipelineCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.stage !== null) { }
  
};

const $VkComputePipelineCreateInfo = memoryLayouts.VkComputePipelineCreateInfo;
VkComputePipelineCreateInfo.byteLength = $VkComputePipelineCreateInfo.byteLength;

VkComputePipelineCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkComputePipelineCreateInfo.sType.byteOffset,
    byteLength: $VkComputePipelineCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkComputePipelineCreateInfo.pNext.byteOffset,
    byteLength: $VkComputePipelineCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkComputePipelineCreateInfo.flags.byteOffset,
    byteLength: $VkComputePipelineCreateInfo.flags.byteLength
  }),
  stage: Object.freeze({
    byteOffset: $VkComputePipelineCreateInfo.stage.byteOffset,
    byteLength: $VkComputePipelineCreateInfo.stage.byteLength
  }),
  layout: Object.freeze({
    byteOffset: $VkComputePipelineCreateInfo.layout.byteOffset,
    byteLength: $VkComputePipelineCreateInfo.layout.byteLength
  }),
  basePipelineHandle: Object.freeze({
    byteOffset: $VkComputePipelineCreateInfo.basePipelineHandle.byteOffset,
    byteLength: $VkComputePipelineCreateInfo.basePipelineHandle.byteLength
  }),
  basePipelineIndex: Object.freeze({
    byteOffset: $VkComputePipelineCreateInfo.basePipelineIndex.byteOffset,
    byteLength: $VkComputePipelineCreateInfo.basePipelineIndex.byteLength
  }),
});
class VkVertexInputBindingDescription {
  constructor(opts) {
    this._binding = 0;
    this._stride = 0;
    this._inputRate = 0;
    this.memoryBuffer = new ArrayBuffer(VkVertexInputBindingDescription.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.stride !== void 0) this.stride = opts.stride;
      if (opts.inputRate !== void 0) this.inputRate = opts.inputRate;
      
    }
  }
  get binding() {
    return this._binding;
  }
  set binding(value) {
    
this.memoryView.setUint32($VkVertexInputBindingDescription.binding.byteOffset, value);
this._binding = value;
  }
  get stride() {
    return this._stride;
  }
  set stride(value) {
    
this.memoryView.setUint32($VkVertexInputBindingDescription.stride.byteOffset, value);
this._stride = value;
  }
  get inputRate() {
    return this._inputRate;
  }
  set inputRate(value) {
    
this.memoryView.setInt32($VkVertexInputBindingDescription.inputRate.byteOffset, value);
this._inputRate = value;
  }
  
};

VkVertexInputBindingDescription.prototype.flush = function flush() {
  
};

const $VkVertexInputBindingDescription = memoryLayouts.VkVertexInputBindingDescription;
VkVertexInputBindingDescription.byteLength = $VkVertexInputBindingDescription.byteLength;

VkVertexInputBindingDescription.memoryLayout = Object.freeze({
  binding: Object.freeze({
    byteOffset: $VkVertexInputBindingDescription.binding.byteOffset,
    byteLength: $VkVertexInputBindingDescription.binding.byteLength
  }),
  stride: Object.freeze({
    byteOffset: $VkVertexInputBindingDescription.stride.byteOffset,
    byteLength: $VkVertexInputBindingDescription.stride.byteLength
  }),
  inputRate: Object.freeze({
    byteOffset: $VkVertexInputBindingDescription.inputRate.byteOffset,
    byteLength: $VkVertexInputBindingDescription.inputRate.byteLength
  }),
});
class VkVertexInputAttributeDescription {
  constructor(opts) {
    this._location = 0;
    this._binding = 0;
    this._format = 0;
    this._offset = 0;
    this.memoryBuffer = new ArrayBuffer(VkVertexInputAttributeDescription.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.location !== void 0) this.location = opts.location;
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.offset !== void 0) this.offset = opts.offset;
      
    }
  }
  get location() {
    return this._location;
  }
  set location(value) {
    
this.memoryView.setUint32($VkVertexInputAttributeDescription.location.byteOffset, value);
this._location = value;
  }
  get binding() {
    return this._binding;
  }
  set binding(value) {
    
this.memoryView.setUint32($VkVertexInputAttributeDescription.binding.byteOffset, value);
this._binding = value;
  }
  get format() {
    return this._format;
  }
  set format(value) {
    
this.memoryView.setInt32($VkVertexInputAttributeDescription.format.byteOffset, value);
this._format = value;
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    
this.memoryView.setUint32($VkVertexInputAttributeDescription.offset.byteOffset, value);
this._offset = value;
  }
  
};

VkVertexInputAttributeDescription.prototype.flush = function flush() {
  
};

const $VkVertexInputAttributeDescription = memoryLayouts.VkVertexInputAttributeDescription;
VkVertexInputAttributeDescription.byteLength = $VkVertexInputAttributeDescription.byteLength;

VkVertexInputAttributeDescription.memoryLayout = Object.freeze({
  location: Object.freeze({
    byteOffset: $VkVertexInputAttributeDescription.location.byteOffset,
    byteLength: $VkVertexInputAttributeDescription.location.byteLength
  }),
  binding: Object.freeze({
    byteOffset: $VkVertexInputAttributeDescription.binding.byteOffset,
    byteLength: $VkVertexInputAttributeDescription.binding.byteLength
  }),
  format: Object.freeze({
    byteOffset: $VkVertexInputAttributeDescription.format.byteOffset,
    byteLength: $VkVertexInputAttributeDescription.format.byteLength
  }),
  offset: Object.freeze({
    byteOffset: $VkVertexInputAttributeDescription.offset.byteOffset,
    byteLength: $VkVertexInputAttributeDescription.offset.byteLength
  }),
});
class VkPipelineVertexInputStateCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._vertexBindingDescriptionCount = 0;
    this._pVertexBindingDescriptions = null;
    this._vertexAttributeDescriptionCount = 0;
    this._pVertexAttributeDescriptions = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineVertexInputStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.vertexBindingDescriptionCount !== void 0) this.vertexBindingDescriptionCount = opts.vertexBindingDescriptionCount;
      if (opts.pVertexBindingDescriptions !== void 0) this.pVertexBindingDescriptions = opts.pVertexBindingDescriptions;
      if (opts.vertexAttributeDescriptionCount !== void 0) this.vertexAttributeDescriptionCount = opts.vertexAttributeDescriptionCount;
      if (opts.pVertexAttributeDescriptions !== void 0) this.pVertexAttributeDescriptions = opts.pVertexAttributeDescriptions;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineVertexInputStateCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineVertexInputStateCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get vertexBindingDescriptionCount() {
    return this._vertexBindingDescriptionCount;
  }
  set vertexBindingDescriptionCount(value) {
    
this.memoryView.setUint32($VkPipelineVertexInputStateCreateInfo.vertexBindingDescriptionCount.byteOffset, value);
this._vertexBindingDescriptionCount = value;
  }
  get pVertexBindingDescriptions() {
    return this._pVertexBindingDescriptions;
  }
  set pVertexBindingDescriptions(value) {
    
  }
  get vertexAttributeDescriptionCount() {
    return this._vertexAttributeDescriptionCount;
  }
  set vertexAttributeDescriptionCount(value) {
    
this.memoryView.setUint32($VkPipelineVertexInputStateCreateInfo.vertexAttributeDescriptionCount.byteOffset, value);
this._vertexAttributeDescriptionCount = value;
  }
  get pVertexAttributeDescriptions() {
    return this._pVertexAttributeDescriptions;
  }
  set pVertexAttributeDescriptions(value) {
    
  }
  
};

VkPipelineVertexInputStateCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pVertexBindingDescriptions !== null) { }
  
  if (this.pVertexAttributeDescriptions !== null) { }
  
};

const $VkPipelineVertexInputStateCreateInfo = memoryLayouts.VkPipelineVertexInputStateCreateInfo;
VkPipelineVertexInputStateCreateInfo.byteLength = $VkPipelineVertexInputStateCreateInfo.byteLength;

VkPipelineVertexInputStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineVertexInputStateCreateInfo.sType.byteOffset,
    byteLength: $VkPipelineVertexInputStateCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineVertexInputStateCreateInfo.pNext.byteOffset,
    byteLength: $VkPipelineVertexInputStateCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineVertexInputStateCreateInfo.flags.byteOffset,
    byteLength: $VkPipelineVertexInputStateCreateInfo.flags.byteLength
  }),
  vertexBindingDescriptionCount: Object.freeze({
    byteOffset: $VkPipelineVertexInputStateCreateInfo.vertexBindingDescriptionCount.byteOffset,
    byteLength: $VkPipelineVertexInputStateCreateInfo.vertexBindingDescriptionCount.byteLength
  }),
  pVertexBindingDescriptions: Object.freeze({
    byteOffset: $VkPipelineVertexInputStateCreateInfo.pVertexBindingDescriptions.byteOffset,
    byteLength: $VkPipelineVertexInputStateCreateInfo.pVertexBindingDescriptions.byteLength
  }),
  vertexAttributeDescriptionCount: Object.freeze({
    byteOffset: $VkPipelineVertexInputStateCreateInfo.vertexAttributeDescriptionCount.byteOffset,
    byteLength: $VkPipelineVertexInputStateCreateInfo.vertexAttributeDescriptionCount.byteLength
  }),
  pVertexAttributeDescriptions: Object.freeze({
    byteOffset: $VkPipelineVertexInputStateCreateInfo.pVertexAttributeDescriptions.byteOffset,
    byteLength: $VkPipelineVertexInputStateCreateInfo.pVertexAttributeDescriptions.byteLength
  }),
});
class VkPipelineInputAssemblyStateCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._topology = 0;
    this._primitiveRestartEnable = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineInputAssemblyStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.topology !== void 0) this.topology = opts.topology;
      if (opts.primitiveRestartEnable !== void 0) this.primitiveRestartEnable = opts.primitiveRestartEnable;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineInputAssemblyStateCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineInputAssemblyStateCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get topology() {
    return this._topology;
  }
  set topology(value) {
    
this.memoryView.setInt32($VkPipelineInputAssemblyStateCreateInfo.topology.byteOffset, value);
this._topology = value;
  }
  get primitiveRestartEnable() {
    return this._primitiveRestartEnable;
  }
  set primitiveRestartEnable(value) {
    
this.memoryView.setUint32($VkPipelineInputAssemblyStateCreateInfo.primitiveRestartEnable.byteOffset, value);
this._primitiveRestartEnable = value;
  }
  
};

VkPipelineInputAssemblyStateCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineInputAssemblyStateCreateInfo = memoryLayouts.VkPipelineInputAssemblyStateCreateInfo;
VkPipelineInputAssemblyStateCreateInfo.byteLength = $VkPipelineInputAssemblyStateCreateInfo.byteLength;

VkPipelineInputAssemblyStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineInputAssemblyStateCreateInfo.sType.byteOffset,
    byteLength: $VkPipelineInputAssemblyStateCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineInputAssemblyStateCreateInfo.pNext.byteOffset,
    byteLength: $VkPipelineInputAssemblyStateCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineInputAssemblyStateCreateInfo.flags.byteOffset,
    byteLength: $VkPipelineInputAssemblyStateCreateInfo.flags.byteLength
  }),
  topology: Object.freeze({
    byteOffset: $VkPipelineInputAssemblyStateCreateInfo.topology.byteOffset,
    byteLength: $VkPipelineInputAssemblyStateCreateInfo.topology.byteLength
  }),
  primitiveRestartEnable: Object.freeze({
    byteOffset: $VkPipelineInputAssemblyStateCreateInfo.primitiveRestartEnable.byteOffset,
    byteLength: $VkPipelineInputAssemblyStateCreateInfo.primitiveRestartEnable.byteLength
  }),
});
class VkPipelineTessellationStateCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._patchControlPoints = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineTessellationStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.patchControlPoints !== void 0) this.patchControlPoints = opts.patchControlPoints;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineTessellationStateCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineTessellationStateCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get patchControlPoints() {
    return this._patchControlPoints;
  }
  set patchControlPoints(value) {
    
this.memoryView.setUint32($VkPipelineTessellationStateCreateInfo.patchControlPoints.byteOffset, value);
this._patchControlPoints = value;
  }
  
};

VkPipelineTessellationStateCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineTessellationStateCreateInfo = memoryLayouts.VkPipelineTessellationStateCreateInfo;
VkPipelineTessellationStateCreateInfo.byteLength = $VkPipelineTessellationStateCreateInfo.byteLength;

VkPipelineTessellationStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineTessellationStateCreateInfo.sType.byteOffset,
    byteLength: $VkPipelineTessellationStateCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineTessellationStateCreateInfo.pNext.byteOffset,
    byteLength: $VkPipelineTessellationStateCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineTessellationStateCreateInfo.flags.byteOffset,
    byteLength: $VkPipelineTessellationStateCreateInfo.flags.byteLength
  }),
  patchControlPoints: Object.freeze({
    byteOffset: $VkPipelineTessellationStateCreateInfo.patchControlPoints.byteOffset,
    byteLength: $VkPipelineTessellationStateCreateInfo.patchControlPoints.byteLength
  }),
});
class VkPipelineViewportStateCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._viewportCount = 0;
    this._pViewports = null;
    this._scissorCount = 0;
    this._pScissors = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineViewportStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pViewports !== void 0) this.pViewports = opts.pViewports;
      if (opts.scissorCount !== void 0) this.scissorCount = opts.scissorCount;
      if (opts.pScissors !== void 0) this.pScissors = opts.pScissors;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineViewportStateCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineViewportStateCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get viewportCount() {
    return this._viewportCount;
  }
  set viewportCount(value) {
    
this.memoryView.setUint32($VkPipelineViewportStateCreateInfo.viewportCount.byteOffset, value);
this._viewportCount = value;
  }
  get pViewports() {
    return this._pViewports;
  }
  set pViewports(value) {
    
  }
  get scissorCount() {
    return this._scissorCount;
  }
  set scissorCount(value) {
    
this.memoryView.setUint32($VkPipelineViewportStateCreateInfo.scissorCount.byteOffset, value);
this._scissorCount = value;
  }
  get pScissors() {
    return this._pScissors;
  }
  set pScissors(value) {
    
  }
  
};

VkPipelineViewportStateCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pViewports !== null) { }
  
  if (this.pScissors !== null) { }
  
};

const $VkPipelineViewportStateCreateInfo = memoryLayouts.VkPipelineViewportStateCreateInfo;
VkPipelineViewportStateCreateInfo.byteLength = $VkPipelineViewportStateCreateInfo.byteLength;

VkPipelineViewportStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineViewportStateCreateInfo.sType.byteOffset,
    byteLength: $VkPipelineViewportStateCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineViewportStateCreateInfo.pNext.byteOffset,
    byteLength: $VkPipelineViewportStateCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineViewportStateCreateInfo.flags.byteOffset,
    byteLength: $VkPipelineViewportStateCreateInfo.flags.byteLength
  }),
  viewportCount: Object.freeze({
    byteOffset: $VkPipelineViewportStateCreateInfo.viewportCount.byteOffset,
    byteLength: $VkPipelineViewportStateCreateInfo.viewportCount.byteLength
  }),
  pViewports: Object.freeze({
    byteOffset: $VkPipelineViewportStateCreateInfo.pViewports.byteOffset,
    byteLength: $VkPipelineViewportStateCreateInfo.pViewports.byteLength
  }),
  scissorCount: Object.freeze({
    byteOffset: $VkPipelineViewportStateCreateInfo.scissorCount.byteOffset,
    byteLength: $VkPipelineViewportStateCreateInfo.scissorCount.byteLength
  }),
  pScissors: Object.freeze({
    byteOffset: $VkPipelineViewportStateCreateInfo.pScissors.byteOffset,
    byteLength: $VkPipelineViewportStateCreateInfo.pScissors.byteLength
  }),
});
class VkPipelineRasterizationStateCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._depthClampEnable = 0;
    this._rasterizerDiscardEnable = 0;
    this._polygonMode = 0;
    this._cullMode = 0;
    this._frontFace = 0;
    this._depthBiasEnable = 0;
    this._depthBiasConstantFactor = 0;
    this._depthBiasClamp = 0;
    this._depthBiasSlopeFactor = 0;
    this._lineWidth = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineRasterizationStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.depthClampEnable !== void 0) this.depthClampEnable = opts.depthClampEnable;
      if (opts.rasterizerDiscardEnable !== void 0) this.rasterizerDiscardEnable = opts.rasterizerDiscardEnable;
      if (opts.polygonMode !== void 0) this.polygonMode = opts.polygonMode;
      if (opts.cullMode !== void 0) this.cullMode = opts.cullMode;
      if (opts.frontFace !== void 0) this.frontFace = opts.frontFace;
      if (opts.depthBiasEnable !== void 0) this.depthBiasEnable = opts.depthBiasEnable;
      if (opts.depthBiasConstantFactor !== void 0) this.depthBiasConstantFactor = opts.depthBiasConstantFactor;
      if (opts.depthBiasClamp !== void 0) this.depthBiasClamp = opts.depthBiasClamp;
      if (opts.depthBiasSlopeFactor !== void 0) this.depthBiasSlopeFactor = opts.depthBiasSlopeFactor;
      if (opts.lineWidth !== void 0) this.lineWidth = opts.lineWidth;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationStateCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationStateCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get depthClampEnable() {
    return this._depthClampEnable;
  }
  set depthClampEnable(value) {
    
this.memoryView.setUint32($VkPipelineRasterizationStateCreateInfo.depthClampEnable.byteOffset, value);
this._depthClampEnable = value;
  }
  get rasterizerDiscardEnable() {
    return this._rasterizerDiscardEnable;
  }
  set rasterizerDiscardEnable(value) {
    
this.memoryView.setUint32($VkPipelineRasterizationStateCreateInfo.rasterizerDiscardEnable.byteOffset, value);
this._rasterizerDiscardEnable = value;
  }
  get polygonMode() {
    return this._polygonMode;
  }
  set polygonMode(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationStateCreateInfo.polygonMode.byteOffset, value);
this._polygonMode = value;
  }
  get cullMode() {
    return this._cullMode;
  }
  set cullMode(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationStateCreateInfo.cullMode.byteOffset, value);
this._cullMode = value;
  }
  get frontFace() {
    return this._frontFace;
  }
  set frontFace(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationStateCreateInfo.frontFace.byteOffset, value);
this._frontFace = value;
  }
  get depthBiasEnable() {
    return this._depthBiasEnable;
  }
  set depthBiasEnable(value) {
    
this.memoryView.setUint32($VkPipelineRasterizationStateCreateInfo.depthBiasEnable.byteOffset, value);
this._depthBiasEnable = value;
  }
  get depthBiasConstantFactor() {
    return this._depthBiasConstantFactor;
  }
  set depthBiasConstantFactor(value) {
    
this.memoryView.setFloat32($VkPipelineRasterizationStateCreateInfo.depthBiasConstantFactor.byteOffset, value);
this._depthBiasConstantFactor = value;
  }
  get depthBiasClamp() {
    return this._depthBiasClamp;
  }
  set depthBiasClamp(value) {
    
this.memoryView.setFloat32($VkPipelineRasterizationStateCreateInfo.depthBiasClamp.byteOffset, value);
this._depthBiasClamp = value;
  }
  get depthBiasSlopeFactor() {
    return this._depthBiasSlopeFactor;
  }
  set depthBiasSlopeFactor(value) {
    
this.memoryView.setFloat32($VkPipelineRasterizationStateCreateInfo.depthBiasSlopeFactor.byteOffset, value);
this._depthBiasSlopeFactor = value;
  }
  get lineWidth() {
    return this._lineWidth;
  }
  set lineWidth(value) {
    
this.memoryView.setFloat32($VkPipelineRasterizationStateCreateInfo.lineWidth.byteOffset, value);
this._lineWidth = value;
  }
  
};

VkPipelineRasterizationStateCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineRasterizationStateCreateInfo = memoryLayouts.VkPipelineRasterizationStateCreateInfo;
VkPipelineRasterizationStateCreateInfo.byteLength = $VkPipelineRasterizationStateCreateInfo.byteLength;

VkPipelineRasterizationStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateCreateInfo.sType.byteOffset,
    byteLength: $VkPipelineRasterizationStateCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateCreateInfo.pNext.byteOffset,
    byteLength: $VkPipelineRasterizationStateCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateCreateInfo.flags.byteOffset,
    byteLength: $VkPipelineRasterizationStateCreateInfo.flags.byteLength
  }),
  depthClampEnable: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateCreateInfo.depthClampEnable.byteOffset,
    byteLength: $VkPipelineRasterizationStateCreateInfo.depthClampEnable.byteLength
  }),
  rasterizerDiscardEnable: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateCreateInfo.rasterizerDiscardEnable.byteOffset,
    byteLength: $VkPipelineRasterizationStateCreateInfo.rasterizerDiscardEnable.byteLength
  }),
  polygonMode: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateCreateInfo.polygonMode.byteOffset,
    byteLength: $VkPipelineRasterizationStateCreateInfo.polygonMode.byteLength
  }),
  cullMode: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateCreateInfo.cullMode.byteOffset,
    byteLength: $VkPipelineRasterizationStateCreateInfo.cullMode.byteLength
  }),
  frontFace: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateCreateInfo.frontFace.byteOffset,
    byteLength: $VkPipelineRasterizationStateCreateInfo.frontFace.byteLength
  }),
  depthBiasEnable: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateCreateInfo.depthBiasEnable.byteOffset,
    byteLength: $VkPipelineRasterizationStateCreateInfo.depthBiasEnable.byteLength
  }),
  depthBiasConstantFactor: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateCreateInfo.depthBiasConstantFactor.byteOffset,
    byteLength: $VkPipelineRasterizationStateCreateInfo.depthBiasConstantFactor.byteLength
  }),
  depthBiasClamp: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateCreateInfo.depthBiasClamp.byteOffset,
    byteLength: $VkPipelineRasterizationStateCreateInfo.depthBiasClamp.byteLength
  }),
  depthBiasSlopeFactor: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateCreateInfo.depthBiasSlopeFactor.byteOffset,
    byteLength: $VkPipelineRasterizationStateCreateInfo.depthBiasSlopeFactor.byteLength
  }),
  lineWidth: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateCreateInfo.lineWidth.byteOffset,
    byteLength: $VkPipelineRasterizationStateCreateInfo.lineWidth.byteLength
  }),
});
class VkPipelineMultisampleStateCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._rasterizationSamples = 0;
    this._sampleShadingEnable = 0;
    this._minSampleShading = 0;
    this._pSampleMask = null;
    this._alphaToCoverageEnable = 0;
    this._alphaToOneEnable = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineMultisampleStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.rasterizationSamples !== void 0) this.rasterizationSamples = opts.rasterizationSamples;
      if (opts.sampleShadingEnable !== void 0) this.sampleShadingEnable = opts.sampleShadingEnable;
      if (opts.minSampleShading !== void 0) this.minSampleShading = opts.minSampleShading;
      if (opts.pSampleMask !== void 0) this.pSampleMask = opts.pSampleMask;
      if (opts.alphaToCoverageEnable !== void 0) this.alphaToCoverageEnable = opts.alphaToCoverageEnable;
      if (opts.alphaToOneEnable !== void 0) this.alphaToOneEnable = opts.alphaToOneEnable;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineMultisampleStateCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineMultisampleStateCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get rasterizationSamples() {
    return this._rasterizationSamples;
  }
  set rasterizationSamples(value) {
    
this.memoryView.setInt32($VkPipelineMultisampleStateCreateInfo.rasterizationSamples.byteOffset, value);
this._rasterizationSamples = value;
  }
  get sampleShadingEnable() {
    return this._sampleShadingEnable;
  }
  set sampleShadingEnable(value) {
    
this.memoryView.setUint32($VkPipelineMultisampleStateCreateInfo.sampleShadingEnable.byteOffset, value);
this._sampleShadingEnable = value;
  }
  get minSampleShading() {
    return this._minSampleShading;
  }
  set minSampleShading(value) {
    
this.memoryView.setFloat32($VkPipelineMultisampleStateCreateInfo.minSampleShading.byteOffset, value);
this._minSampleShading = value;
  }
  get pSampleMask() {
    return this._pSampleMask;
  }
  set pSampleMask(value) {
    
  }
  get alphaToCoverageEnable() {
    return this._alphaToCoverageEnable;
  }
  set alphaToCoverageEnable(value) {
    
this.memoryView.setUint32($VkPipelineMultisampleStateCreateInfo.alphaToCoverageEnable.byteOffset, value);
this._alphaToCoverageEnable = value;
  }
  get alphaToOneEnable() {
    return this._alphaToOneEnable;
  }
  set alphaToOneEnable(value) {
    
this.memoryView.setUint32($VkPipelineMultisampleStateCreateInfo.alphaToOneEnable.byteOffset, value);
this._alphaToOneEnable = value;
  }
  
};

VkPipelineMultisampleStateCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineMultisampleStateCreateInfo = memoryLayouts.VkPipelineMultisampleStateCreateInfo;
VkPipelineMultisampleStateCreateInfo.byteLength = $VkPipelineMultisampleStateCreateInfo.byteLength;

VkPipelineMultisampleStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineMultisampleStateCreateInfo.sType.byteOffset,
    byteLength: $VkPipelineMultisampleStateCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineMultisampleStateCreateInfo.pNext.byteOffset,
    byteLength: $VkPipelineMultisampleStateCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineMultisampleStateCreateInfo.flags.byteOffset,
    byteLength: $VkPipelineMultisampleStateCreateInfo.flags.byteLength
  }),
  rasterizationSamples: Object.freeze({
    byteOffset: $VkPipelineMultisampleStateCreateInfo.rasterizationSamples.byteOffset,
    byteLength: $VkPipelineMultisampleStateCreateInfo.rasterizationSamples.byteLength
  }),
  sampleShadingEnable: Object.freeze({
    byteOffset: $VkPipelineMultisampleStateCreateInfo.sampleShadingEnable.byteOffset,
    byteLength: $VkPipelineMultisampleStateCreateInfo.sampleShadingEnable.byteLength
  }),
  minSampleShading: Object.freeze({
    byteOffset: $VkPipelineMultisampleStateCreateInfo.minSampleShading.byteOffset,
    byteLength: $VkPipelineMultisampleStateCreateInfo.minSampleShading.byteLength
  }),
  pSampleMask: Object.freeze({
    byteOffset: $VkPipelineMultisampleStateCreateInfo.pSampleMask.byteOffset,
    byteLength: $VkPipelineMultisampleStateCreateInfo.pSampleMask.byteLength
  }),
  alphaToCoverageEnable: Object.freeze({
    byteOffset: $VkPipelineMultisampleStateCreateInfo.alphaToCoverageEnable.byteOffset,
    byteLength: $VkPipelineMultisampleStateCreateInfo.alphaToCoverageEnable.byteLength
  }),
  alphaToOneEnable: Object.freeze({
    byteOffset: $VkPipelineMultisampleStateCreateInfo.alphaToOneEnable.byteOffset,
    byteLength: $VkPipelineMultisampleStateCreateInfo.alphaToOneEnable.byteLength
  }),
});
class VkPipelineColorBlendAttachmentState {
  constructor(opts) {
    this._blendEnable = 0;
    this._srcColorBlendFactor = 0;
    this._dstColorBlendFactor = 0;
    this._colorBlendOp = 0;
    this._srcAlphaBlendFactor = 0;
    this._dstAlphaBlendFactor = 0;
    this._alphaBlendOp = 0;
    this._colorWriteMask = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineColorBlendAttachmentState.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.blendEnable !== void 0) this.blendEnable = opts.blendEnable;
      if (opts.srcColorBlendFactor !== void 0) this.srcColorBlendFactor = opts.srcColorBlendFactor;
      if (opts.dstColorBlendFactor !== void 0) this.dstColorBlendFactor = opts.dstColorBlendFactor;
      if (opts.colorBlendOp !== void 0) this.colorBlendOp = opts.colorBlendOp;
      if (opts.srcAlphaBlendFactor !== void 0) this.srcAlphaBlendFactor = opts.srcAlphaBlendFactor;
      if (opts.dstAlphaBlendFactor !== void 0) this.dstAlphaBlendFactor = opts.dstAlphaBlendFactor;
      if (opts.alphaBlendOp !== void 0) this.alphaBlendOp = opts.alphaBlendOp;
      if (opts.colorWriteMask !== void 0) this.colorWriteMask = opts.colorWriteMask;
      
    }
  }
  get blendEnable() {
    return this._blendEnable;
  }
  set blendEnable(value) {
    
this.memoryView.setUint32($VkPipelineColorBlendAttachmentState.blendEnable.byteOffset, value);
this._blendEnable = value;
  }
  get srcColorBlendFactor() {
    return this._srcColorBlendFactor;
  }
  set srcColorBlendFactor(value) {
    
this.memoryView.setInt32($VkPipelineColorBlendAttachmentState.srcColorBlendFactor.byteOffset, value);
this._srcColorBlendFactor = value;
  }
  get dstColorBlendFactor() {
    return this._dstColorBlendFactor;
  }
  set dstColorBlendFactor(value) {
    
this.memoryView.setInt32($VkPipelineColorBlendAttachmentState.dstColorBlendFactor.byteOffset, value);
this._dstColorBlendFactor = value;
  }
  get colorBlendOp() {
    return this._colorBlendOp;
  }
  set colorBlendOp(value) {
    
this.memoryView.setInt32($VkPipelineColorBlendAttachmentState.colorBlendOp.byteOffset, value);
this._colorBlendOp = value;
  }
  get srcAlphaBlendFactor() {
    return this._srcAlphaBlendFactor;
  }
  set srcAlphaBlendFactor(value) {
    
this.memoryView.setInt32($VkPipelineColorBlendAttachmentState.srcAlphaBlendFactor.byteOffset, value);
this._srcAlphaBlendFactor = value;
  }
  get dstAlphaBlendFactor() {
    return this._dstAlphaBlendFactor;
  }
  set dstAlphaBlendFactor(value) {
    
this.memoryView.setInt32($VkPipelineColorBlendAttachmentState.dstAlphaBlendFactor.byteOffset, value);
this._dstAlphaBlendFactor = value;
  }
  get alphaBlendOp() {
    return this._alphaBlendOp;
  }
  set alphaBlendOp(value) {
    
this.memoryView.setInt32($VkPipelineColorBlendAttachmentState.alphaBlendOp.byteOffset, value);
this._alphaBlendOp = value;
  }
  get colorWriteMask() {
    return this._colorWriteMask;
  }
  set colorWriteMask(value) {
    
this.memoryView.setInt32($VkPipelineColorBlendAttachmentState.colorWriteMask.byteOffset, value);
this._colorWriteMask = value;
  }
  
};

VkPipelineColorBlendAttachmentState.prototype.flush = function flush() {
  
};

const $VkPipelineColorBlendAttachmentState = memoryLayouts.VkPipelineColorBlendAttachmentState;
VkPipelineColorBlendAttachmentState.byteLength = $VkPipelineColorBlendAttachmentState.byteLength;

VkPipelineColorBlendAttachmentState.memoryLayout = Object.freeze({
  blendEnable: Object.freeze({
    byteOffset: $VkPipelineColorBlendAttachmentState.blendEnable.byteOffset,
    byteLength: $VkPipelineColorBlendAttachmentState.blendEnable.byteLength
  }),
  srcColorBlendFactor: Object.freeze({
    byteOffset: $VkPipelineColorBlendAttachmentState.srcColorBlendFactor.byteOffset,
    byteLength: $VkPipelineColorBlendAttachmentState.srcColorBlendFactor.byteLength
  }),
  dstColorBlendFactor: Object.freeze({
    byteOffset: $VkPipelineColorBlendAttachmentState.dstColorBlendFactor.byteOffset,
    byteLength: $VkPipelineColorBlendAttachmentState.dstColorBlendFactor.byteLength
  }),
  colorBlendOp: Object.freeze({
    byteOffset: $VkPipelineColorBlendAttachmentState.colorBlendOp.byteOffset,
    byteLength: $VkPipelineColorBlendAttachmentState.colorBlendOp.byteLength
  }),
  srcAlphaBlendFactor: Object.freeze({
    byteOffset: $VkPipelineColorBlendAttachmentState.srcAlphaBlendFactor.byteOffset,
    byteLength: $VkPipelineColorBlendAttachmentState.srcAlphaBlendFactor.byteLength
  }),
  dstAlphaBlendFactor: Object.freeze({
    byteOffset: $VkPipelineColorBlendAttachmentState.dstAlphaBlendFactor.byteOffset,
    byteLength: $VkPipelineColorBlendAttachmentState.dstAlphaBlendFactor.byteLength
  }),
  alphaBlendOp: Object.freeze({
    byteOffset: $VkPipelineColorBlendAttachmentState.alphaBlendOp.byteOffset,
    byteLength: $VkPipelineColorBlendAttachmentState.alphaBlendOp.byteLength
  }),
  colorWriteMask: Object.freeze({
    byteOffset: $VkPipelineColorBlendAttachmentState.colorWriteMask.byteOffset,
    byteLength: $VkPipelineColorBlendAttachmentState.colorWriteMask.byteLength
  }),
});
class VkPipelineColorBlendStateCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._logicOpEnable = 0;
    this._logicOp = 0;
    this._attachmentCount = 0;
    this._pAttachments = null;
    this._blendConstants = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineColorBlendStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.logicOpEnable !== void 0) this.logicOpEnable = opts.logicOpEnable;
      if (opts.logicOp !== void 0) this.logicOp = opts.logicOp;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.blendConstants !== void 0) this.blendConstants = opts.blendConstants;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineColorBlendStateCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineColorBlendStateCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get logicOpEnable() {
    return this._logicOpEnable;
  }
  set logicOpEnable(value) {
    
this.memoryView.setUint32($VkPipelineColorBlendStateCreateInfo.logicOpEnable.byteOffset, value);
this._logicOpEnable = value;
  }
  get logicOp() {
    return this._logicOp;
  }
  set logicOp(value) {
    
this.memoryView.setInt32($VkPipelineColorBlendStateCreateInfo.logicOp.byteOffset, value);
this._logicOp = value;
  }
  get attachmentCount() {
    return this._attachmentCount;
  }
  set attachmentCount(value) {
    
this.memoryView.setUint32($VkPipelineColorBlendStateCreateInfo.attachmentCount.byteOffset, value);
this._attachmentCount = value;
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    
  }
  get blendConstants() {
    return this._blendConstants;
  }
  set blendConstants(value) {
    
  }
  
};

VkPipelineColorBlendStateCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pAttachments !== null) { }
  
  if (this.blendConstants !== null) { }
  
};

const $VkPipelineColorBlendStateCreateInfo = memoryLayouts.VkPipelineColorBlendStateCreateInfo;
VkPipelineColorBlendStateCreateInfo.byteLength = $VkPipelineColorBlendStateCreateInfo.byteLength;

VkPipelineColorBlendStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineColorBlendStateCreateInfo.sType.byteOffset,
    byteLength: $VkPipelineColorBlendStateCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineColorBlendStateCreateInfo.pNext.byteOffset,
    byteLength: $VkPipelineColorBlendStateCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineColorBlendStateCreateInfo.flags.byteOffset,
    byteLength: $VkPipelineColorBlendStateCreateInfo.flags.byteLength
  }),
  logicOpEnable: Object.freeze({
    byteOffset: $VkPipelineColorBlendStateCreateInfo.logicOpEnable.byteOffset,
    byteLength: $VkPipelineColorBlendStateCreateInfo.logicOpEnable.byteLength
  }),
  logicOp: Object.freeze({
    byteOffset: $VkPipelineColorBlendStateCreateInfo.logicOp.byteOffset,
    byteLength: $VkPipelineColorBlendStateCreateInfo.logicOp.byteLength
  }),
  attachmentCount: Object.freeze({
    byteOffset: $VkPipelineColorBlendStateCreateInfo.attachmentCount.byteOffset,
    byteLength: $VkPipelineColorBlendStateCreateInfo.attachmentCount.byteLength
  }),
  pAttachments: Object.freeze({
    byteOffset: $VkPipelineColorBlendStateCreateInfo.pAttachments.byteOffset,
    byteLength: $VkPipelineColorBlendStateCreateInfo.pAttachments.byteLength
  }),
  blendConstants: Object.freeze({
    byteOffset: $VkPipelineColorBlendStateCreateInfo.blendConstants.byteOffset,
    byteLength: $VkPipelineColorBlendStateCreateInfo.blendConstants.byteLength
  }),
});
class VkPipelineDynamicStateCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._dynamicStateCount = 0;
    this._pDynamicStates = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineDynamicStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.dynamicStateCount !== void 0) this.dynamicStateCount = opts.dynamicStateCount;
      if (opts.pDynamicStates !== void 0) this.pDynamicStates = opts.pDynamicStates;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineDynamicStateCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineDynamicStateCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get dynamicStateCount() {
    return this._dynamicStateCount;
  }
  set dynamicStateCount(value) {
    
this.memoryView.setUint32($VkPipelineDynamicStateCreateInfo.dynamicStateCount.byteOffset, value);
this._dynamicStateCount = value;
  }
  get pDynamicStates() {
    return this._pDynamicStates;
  }
  set pDynamicStates(value) {
    
  }
  
};

VkPipelineDynamicStateCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineDynamicStateCreateInfo = memoryLayouts.VkPipelineDynamicStateCreateInfo;
VkPipelineDynamicStateCreateInfo.byteLength = $VkPipelineDynamicStateCreateInfo.byteLength;

VkPipelineDynamicStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineDynamicStateCreateInfo.sType.byteOffset,
    byteLength: $VkPipelineDynamicStateCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineDynamicStateCreateInfo.pNext.byteOffset,
    byteLength: $VkPipelineDynamicStateCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineDynamicStateCreateInfo.flags.byteOffset,
    byteLength: $VkPipelineDynamicStateCreateInfo.flags.byteLength
  }),
  dynamicStateCount: Object.freeze({
    byteOffset: $VkPipelineDynamicStateCreateInfo.dynamicStateCount.byteOffset,
    byteLength: $VkPipelineDynamicStateCreateInfo.dynamicStateCount.byteLength
  }),
  pDynamicStates: Object.freeze({
    byteOffset: $VkPipelineDynamicStateCreateInfo.pDynamicStates.byteOffset,
    byteLength: $VkPipelineDynamicStateCreateInfo.pDynamicStates.byteLength
  }),
});
class VkStencilOpState {
  constructor(opts) {
    this._failOp = 0;
    this._passOp = 0;
    this._depthFailOp = 0;
    this._compareOp = 0;
    this._compareMask = 0;
    this._writeMask = 0;
    this._reference = 0;
    this.memoryBuffer = new ArrayBuffer(VkStencilOpState.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.failOp !== void 0) this.failOp = opts.failOp;
      if (opts.passOp !== void 0) this.passOp = opts.passOp;
      if (opts.depthFailOp !== void 0) this.depthFailOp = opts.depthFailOp;
      if (opts.compareOp !== void 0) this.compareOp = opts.compareOp;
      if (opts.compareMask !== void 0) this.compareMask = opts.compareMask;
      if (opts.writeMask !== void 0) this.writeMask = opts.writeMask;
      if (opts.reference !== void 0) this.reference = opts.reference;
      
    }
  }
  get failOp() {
    return this._failOp;
  }
  set failOp(value) {
    
this.memoryView.setInt32($VkStencilOpState.failOp.byteOffset, value);
this._failOp = value;
  }
  get passOp() {
    return this._passOp;
  }
  set passOp(value) {
    
this.memoryView.setInt32($VkStencilOpState.passOp.byteOffset, value);
this._passOp = value;
  }
  get depthFailOp() {
    return this._depthFailOp;
  }
  set depthFailOp(value) {
    
this.memoryView.setInt32($VkStencilOpState.depthFailOp.byteOffset, value);
this._depthFailOp = value;
  }
  get compareOp() {
    return this._compareOp;
  }
  set compareOp(value) {
    
this.memoryView.setInt32($VkStencilOpState.compareOp.byteOffset, value);
this._compareOp = value;
  }
  get compareMask() {
    return this._compareMask;
  }
  set compareMask(value) {
    
this.memoryView.setUint32($VkStencilOpState.compareMask.byteOffset, value);
this._compareMask = value;
  }
  get writeMask() {
    return this._writeMask;
  }
  set writeMask(value) {
    
this.memoryView.setUint32($VkStencilOpState.writeMask.byteOffset, value);
this._writeMask = value;
  }
  get reference() {
    return this._reference;
  }
  set reference(value) {
    
this.memoryView.setUint32($VkStencilOpState.reference.byteOffset, value);
this._reference = value;
  }
  
};

VkStencilOpState.prototype.flush = function flush() {
  
};

const $VkStencilOpState = memoryLayouts.VkStencilOpState;
VkStencilOpState.byteLength = $VkStencilOpState.byteLength;

VkStencilOpState.memoryLayout = Object.freeze({
  failOp: Object.freeze({
    byteOffset: $VkStencilOpState.failOp.byteOffset,
    byteLength: $VkStencilOpState.failOp.byteLength
  }),
  passOp: Object.freeze({
    byteOffset: $VkStencilOpState.passOp.byteOffset,
    byteLength: $VkStencilOpState.passOp.byteLength
  }),
  depthFailOp: Object.freeze({
    byteOffset: $VkStencilOpState.depthFailOp.byteOffset,
    byteLength: $VkStencilOpState.depthFailOp.byteLength
  }),
  compareOp: Object.freeze({
    byteOffset: $VkStencilOpState.compareOp.byteOffset,
    byteLength: $VkStencilOpState.compareOp.byteLength
  }),
  compareMask: Object.freeze({
    byteOffset: $VkStencilOpState.compareMask.byteOffset,
    byteLength: $VkStencilOpState.compareMask.byteLength
  }),
  writeMask: Object.freeze({
    byteOffset: $VkStencilOpState.writeMask.byteOffset,
    byteLength: $VkStencilOpState.writeMask.byteLength
  }),
  reference: Object.freeze({
    byteOffset: $VkStencilOpState.reference.byteOffset,
    byteLength: $VkStencilOpState.reference.byteLength
  }),
});
class VkPipelineDepthStencilStateCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._depthTestEnable = 0;
    this._depthWriteEnable = 0;
    this._depthCompareOp = 0;
    this._depthBoundsTestEnable = 0;
    this._stencilTestEnable = 0;
    this._front = null;
    this._back = null;
    this._minDepthBounds = 0;
    this._maxDepthBounds = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineDepthStencilStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.depthTestEnable !== void 0) this.depthTestEnable = opts.depthTestEnable;
      if (opts.depthWriteEnable !== void 0) this.depthWriteEnable = opts.depthWriteEnable;
      if (opts.depthCompareOp !== void 0) this.depthCompareOp = opts.depthCompareOp;
      if (opts.depthBoundsTestEnable !== void 0) this.depthBoundsTestEnable = opts.depthBoundsTestEnable;
      if (opts.stencilTestEnable !== void 0) this.stencilTestEnable = opts.stencilTestEnable;
      if (opts.front !== void 0) this.front = opts.front;
      if (opts.back !== void 0) this.back = opts.back;
      if (opts.minDepthBounds !== void 0) this.minDepthBounds = opts.minDepthBounds;
      if (opts.maxDepthBounds !== void 0) this.maxDepthBounds = opts.maxDepthBounds;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineDepthStencilStateCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineDepthStencilStateCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get depthTestEnable() {
    return this._depthTestEnable;
  }
  set depthTestEnable(value) {
    
this.memoryView.setUint32($VkPipelineDepthStencilStateCreateInfo.depthTestEnable.byteOffset, value);
this._depthTestEnable = value;
  }
  get depthWriteEnable() {
    return this._depthWriteEnable;
  }
  set depthWriteEnable(value) {
    
this.memoryView.setUint32($VkPipelineDepthStencilStateCreateInfo.depthWriteEnable.byteOffset, value);
this._depthWriteEnable = value;
  }
  get depthCompareOp() {
    return this._depthCompareOp;
  }
  set depthCompareOp(value) {
    
this.memoryView.setInt32($VkPipelineDepthStencilStateCreateInfo.depthCompareOp.byteOffset, value);
this._depthCompareOp = value;
  }
  get depthBoundsTestEnable() {
    return this._depthBoundsTestEnable;
  }
  set depthBoundsTestEnable(value) {
    
this.memoryView.setUint32($VkPipelineDepthStencilStateCreateInfo.depthBoundsTestEnable.byteOffset, value);
this._depthBoundsTestEnable = value;
  }
  get stencilTestEnable() {
    return this._stencilTestEnable;
  }
  set stencilTestEnable(value) {
    
this.memoryView.setUint32($VkPipelineDepthStencilStateCreateInfo.stencilTestEnable.byteOffset, value);
this._stencilTestEnable = value;
  }
  get front() {
    return this._front;
  }
  set front(value) {
    String
  }
  get back() {
    return this._back;
  }
  set back(value) {
    String
  }
  get minDepthBounds() {
    return this._minDepthBounds;
  }
  set minDepthBounds(value) {
    
this.memoryView.setFloat32($VkPipelineDepthStencilStateCreateInfo.minDepthBounds.byteOffset, value);
this._minDepthBounds = value;
  }
  get maxDepthBounds() {
    return this._maxDepthBounds;
  }
  set maxDepthBounds(value) {
    
this.memoryView.setFloat32($VkPipelineDepthStencilStateCreateInfo.maxDepthBounds.byteOffset, value);
this._maxDepthBounds = value;
  }
  
};

VkPipelineDepthStencilStateCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.front !== null) { }
  
  if (this.back !== null) { }
  
};

const $VkPipelineDepthStencilStateCreateInfo = memoryLayouts.VkPipelineDepthStencilStateCreateInfo;
VkPipelineDepthStencilStateCreateInfo.byteLength = $VkPipelineDepthStencilStateCreateInfo.byteLength;

VkPipelineDepthStencilStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineDepthStencilStateCreateInfo.sType.byteOffset,
    byteLength: $VkPipelineDepthStencilStateCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineDepthStencilStateCreateInfo.pNext.byteOffset,
    byteLength: $VkPipelineDepthStencilStateCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineDepthStencilStateCreateInfo.flags.byteOffset,
    byteLength: $VkPipelineDepthStencilStateCreateInfo.flags.byteLength
  }),
  depthTestEnable: Object.freeze({
    byteOffset: $VkPipelineDepthStencilStateCreateInfo.depthTestEnable.byteOffset,
    byteLength: $VkPipelineDepthStencilStateCreateInfo.depthTestEnable.byteLength
  }),
  depthWriteEnable: Object.freeze({
    byteOffset: $VkPipelineDepthStencilStateCreateInfo.depthWriteEnable.byteOffset,
    byteLength: $VkPipelineDepthStencilStateCreateInfo.depthWriteEnable.byteLength
  }),
  depthCompareOp: Object.freeze({
    byteOffset: $VkPipelineDepthStencilStateCreateInfo.depthCompareOp.byteOffset,
    byteLength: $VkPipelineDepthStencilStateCreateInfo.depthCompareOp.byteLength
  }),
  depthBoundsTestEnable: Object.freeze({
    byteOffset: $VkPipelineDepthStencilStateCreateInfo.depthBoundsTestEnable.byteOffset,
    byteLength: $VkPipelineDepthStencilStateCreateInfo.depthBoundsTestEnable.byteLength
  }),
  stencilTestEnable: Object.freeze({
    byteOffset: $VkPipelineDepthStencilStateCreateInfo.stencilTestEnable.byteOffset,
    byteLength: $VkPipelineDepthStencilStateCreateInfo.stencilTestEnable.byteLength
  }),
  front: Object.freeze({
    byteOffset: $VkPipelineDepthStencilStateCreateInfo.front.byteOffset,
    byteLength: $VkPipelineDepthStencilStateCreateInfo.front.byteLength
  }),
  back: Object.freeze({
    byteOffset: $VkPipelineDepthStencilStateCreateInfo.back.byteOffset,
    byteLength: $VkPipelineDepthStencilStateCreateInfo.back.byteLength
  }),
  minDepthBounds: Object.freeze({
    byteOffset: $VkPipelineDepthStencilStateCreateInfo.minDepthBounds.byteOffset,
    byteLength: $VkPipelineDepthStencilStateCreateInfo.minDepthBounds.byteLength
  }),
  maxDepthBounds: Object.freeze({
    byteOffset: $VkPipelineDepthStencilStateCreateInfo.maxDepthBounds.byteOffset,
    byteLength: $VkPipelineDepthStencilStateCreateInfo.maxDepthBounds.byteLength
  }),
});
class VkGraphicsPipelineCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._stageCount = 0;
    this._pStages = null;
    this._pVertexInputState = null;
    this._pInputAssemblyState = null;
    this._pTessellationState = null;
    this._pViewportState = null;
    this._pRasterizationState = null;
    this._pMultisampleState = null;
    this._pDepthStencilState = null;
    this._pColorBlendState = null;
    this._pDynamicState = null;
    this._layout = null;
    this._renderPass = null;
    this._subpass = 0;
    this._basePipelineHandle = null;
    this._basePipelineIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkGraphicsPipelineCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stageCount !== void 0) this.stageCount = opts.stageCount;
      if (opts.pStages !== void 0) this.pStages = opts.pStages;
      if (opts.pVertexInputState !== void 0) this.pVertexInputState = opts.pVertexInputState;
      if (opts.pInputAssemblyState !== void 0) this.pInputAssemblyState = opts.pInputAssemblyState;
      if (opts.pTessellationState !== void 0) this.pTessellationState = opts.pTessellationState;
      if (opts.pViewportState !== void 0) this.pViewportState = opts.pViewportState;
      if (opts.pRasterizationState !== void 0) this.pRasterizationState = opts.pRasterizationState;
      if (opts.pMultisampleState !== void 0) this.pMultisampleState = opts.pMultisampleState;
      if (opts.pDepthStencilState !== void 0) this.pDepthStencilState = opts.pDepthStencilState;
      if (opts.pColorBlendState !== void 0) this.pColorBlendState = opts.pColorBlendState;
      if (opts.pDynamicState !== void 0) this.pDynamicState = opts.pDynamicState;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.basePipelineHandle !== void 0) this.basePipelineHandle = opts.basePipelineHandle;
      if (opts.basePipelineIndex !== void 0) this.basePipelineIndex = opts.basePipelineIndex;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkGraphicsPipelineCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkGraphicsPipelineCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get stageCount() {
    return this._stageCount;
  }
  set stageCount(value) {
    
this.memoryView.setUint32($VkGraphicsPipelineCreateInfo.stageCount.byteOffset, value);
this._stageCount = value;
  }
  get pStages() {
    return this._pStages;
  }
  set pStages(value) {
    
  }
  get pVertexInputState() {
    return this._pVertexInputState;
  }
  set pVertexInputState(value) {
    String
  }
  get pInputAssemblyState() {
    return this._pInputAssemblyState;
  }
  set pInputAssemblyState(value) {
    String
  }
  get pTessellationState() {
    return this._pTessellationState;
  }
  set pTessellationState(value) {
    String
  }
  get pViewportState() {
    return this._pViewportState;
  }
  set pViewportState(value) {
    String
  }
  get pRasterizationState() {
    return this._pRasterizationState;
  }
  set pRasterizationState(value) {
    String
  }
  get pMultisampleState() {
    return this._pMultisampleState;
  }
  set pMultisampleState(value) {
    String
  }
  get pDepthStencilState() {
    return this._pDepthStencilState;
  }
  set pDepthStencilState(value) {
    String
  }
  get pColorBlendState() {
    return this._pColorBlendState;
  }
  set pColorBlendState(value) {
    String
  }
  get pDynamicState() {
    return this._pDynamicState;
  }
  set pDynamicState(value) {
    String
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    String
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    String
  }
  get subpass() {
    return this._subpass;
  }
  set subpass(value) {
    
this.memoryView.setUint32($VkGraphicsPipelineCreateInfo.subpass.byteOffset, value);
this._subpass = value;
  }
  get basePipelineHandle() {
    return this._basePipelineHandle;
  }
  set basePipelineHandle(value) {
    String
  }
  get basePipelineIndex() {
    return this._basePipelineIndex;
  }
  set basePipelineIndex(value) {
    
this.memoryView.setInt32($VkGraphicsPipelineCreateInfo.basePipelineIndex.byteOffset, value);
this._basePipelineIndex = value;
  }
  
};

VkGraphicsPipelineCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pStages !== null) { }
  
};

const $VkGraphicsPipelineCreateInfo = memoryLayouts.VkGraphicsPipelineCreateInfo;
VkGraphicsPipelineCreateInfo.byteLength = $VkGraphicsPipelineCreateInfo.byteLength;

VkGraphicsPipelineCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.sType.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.pNext.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.flags.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.flags.byteLength
  }),
  stageCount: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.stageCount.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.stageCount.byteLength
  }),
  pStages: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.pStages.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.pStages.byteLength
  }),
  pVertexInputState: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.pVertexInputState.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.pVertexInputState.byteLength
  }),
  pInputAssemblyState: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.pInputAssemblyState.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.pInputAssemblyState.byteLength
  }),
  pTessellationState: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.pTessellationState.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.pTessellationState.byteLength
  }),
  pViewportState: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.pViewportState.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.pViewportState.byteLength
  }),
  pRasterizationState: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.pRasterizationState.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.pRasterizationState.byteLength
  }),
  pMultisampleState: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.pMultisampleState.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.pMultisampleState.byteLength
  }),
  pDepthStencilState: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.pDepthStencilState.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.pDepthStencilState.byteLength
  }),
  pColorBlendState: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.pColorBlendState.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.pColorBlendState.byteLength
  }),
  pDynamicState: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.pDynamicState.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.pDynamicState.byteLength
  }),
  layout: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.layout.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.layout.byteLength
  }),
  renderPass: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.renderPass.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.renderPass.byteLength
  }),
  subpass: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.subpass.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.subpass.byteLength
  }),
  basePipelineHandle: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.basePipelineHandle.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.basePipelineHandle.byteLength
  }),
  basePipelineIndex: Object.freeze({
    byteOffset: $VkGraphicsPipelineCreateInfo.basePipelineIndex.byteOffset,
    byteLength: $VkGraphicsPipelineCreateInfo.basePipelineIndex.byteLength
  }),
});
class VkPipelineCacheCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._initialDataSize = 0;
    this._pInitialData = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineCacheCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.initialDataSize !== void 0) this.initialDataSize = opts.initialDataSize;
      if (opts.pInitialData !== void 0) this.pInitialData = opts.pInitialData;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineCacheCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineCacheCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get initialDataSize() {
    return this._initialDataSize;
  }
  set initialDataSize(value) {
    
this.memoryView.setBigInt64($VkPipelineCacheCreateInfo.initialDataSize.byteOffset, value);
this._initialDataSize = value;
  }
  get pInitialData() {
    return this._pInitialData;
  }
  set pInitialData(value) {
    
  }
  
};

VkPipelineCacheCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineCacheCreateInfo = memoryLayouts.VkPipelineCacheCreateInfo;
VkPipelineCacheCreateInfo.byteLength = $VkPipelineCacheCreateInfo.byteLength;

VkPipelineCacheCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineCacheCreateInfo.sType.byteOffset,
    byteLength: $VkPipelineCacheCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineCacheCreateInfo.pNext.byteOffset,
    byteLength: $VkPipelineCacheCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineCacheCreateInfo.flags.byteOffset,
    byteLength: $VkPipelineCacheCreateInfo.flags.byteLength
  }),
  initialDataSize: Object.freeze({
    byteOffset: $VkPipelineCacheCreateInfo.initialDataSize.byteOffset,
    byteLength: $VkPipelineCacheCreateInfo.initialDataSize.byteLength
  }),
  pInitialData: Object.freeze({
    byteOffset: $VkPipelineCacheCreateInfo.pInitialData.byteOffset,
    byteLength: $VkPipelineCacheCreateInfo.pInitialData.byteLength
  }),
});
class VkPushConstantRange {
  constructor(opts) {
    this._stageFlags = 0;
    this._offset = 0;
    this._size = 0;
    this.memoryBuffer = new ArrayBuffer(VkPushConstantRange.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.stageFlags !== void 0) this.stageFlags = opts.stageFlags;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.size !== void 0) this.size = opts.size;
      
    }
  }
  get stageFlags() {
    return this._stageFlags;
  }
  set stageFlags(value) {
    
this.memoryView.setInt32($VkPushConstantRange.stageFlags.byteOffset, value);
this._stageFlags = value;
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    
this.memoryView.setUint32($VkPushConstantRange.offset.byteOffset, value);
this._offset = value;
  }
  get size() {
    return this._size;
  }
  set size(value) {
    
this.memoryView.setUint32($VkPushConstantRange.size.byteOffset, value);
this._size = value;
  }
  
};

VkPushConstantRange.prototype.flush = function flush() {
  
};

const $VkPushConstantRange = memoryLayouts.VkPushConstantRange;
VkPushConstantRange.byteLength = $VkPushConstantRange.byteLength;

VkPushConstantRange.memoryLayout = Object.freeze({
  stageFlags: Object.freeze({
    byteOffset: $VkPushConstantRange.stageFlags.byteOffset,
    byteLength: $VkPushConstantRange.stageFlags.byteLength
  }),
  offset: Object.freeze({
    byteOffset: $VkPushConstantRange.offset.byteOffset,
    byteLength: $VkPushConstantRange.offset.byteLength
  }),
  size: Object.freeze({
    byteOffset: $VkPushConstantRange.size.byteOffset,
    byteLength: $VkPushConstantRange.size.byteLength
  }),
});
class VkPipelineLayoutCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._setLayoutCount = 0;
    this._pSetLayouts = null;
    this._pushConstantRangeCount = 0;
    this._pPushConstantRanges = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineLayoutCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.setLayoutCount !== void 0) this.setLayoutCount = opts.setLayoutCount;
      if (opts.pSetLayouts !== void 0) this.pSetLayouts = opts.pSetLayouts;
      if (opts.pushConstantRangeCount !== void 0) this.pushConstantRangeCount = opts.pushConstantRangeCount;
      if (opts.pPushConstantRanges !== void 0) this.pPushConstantRanges = opts.pPushConstantRanges;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineLayoutCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineLayoutCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get setLayoutCount() {
    return this._setLayoutCount;
  }
  set setLayoutCount(value) {
    
this.memoryView.setUint32($VkPipelineLayoutCreateInfo.setLayoutCount.byteOffset, value);
this._setLayoutCount = value;
  }
  get pSetLayouts() {
    return this._pSetLayouts;
  }
  set pSetLayouts(value) {
    
  }
  get pushConstantRangeCount() {
    return this._pushConstantRangeCount;
  }
  set pushConstantRangeCount(value) {
    
this.memoryView.setUint32($VkPipelineLayoutCreateInfo.pushConstantRangeCount.byteOffset, value);
this._pushConstantRangeCount = value;
  }
  get pPushConstantRanges() {
    return this._pPushConstantRanges;
  }
  set pPushConstantRanges(value) {
    
  }
  
};

VkPipelineLayoutCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pSetLayouts !== null) { }
  
  if (this.pPushConstantRanges !== null) { }
  
};

const $VkPipelineLayoutCreateInfo = memoryLayouts.VkPipelineLayoutCreateInfo;
VkPipelineLayoutCreateInfo.byteLength = $VkPipelineLayoutCreateInfo.byteLength;

VkPipelineLayoutCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineLayoutCreateInfo.sType.byteOffset,
    byteLength: $VkPipelineLayoutCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineLayoutCreateInfo.pNext.byteOffset,
    byteLength: $VkPipelineLayoutCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineLayoutCreateInfo.flags.byteOffset,
    byteLength: $VkPipelineLayoutCreateInfo.flags.byteLength
  }),
  setLayoutCount: Object.freeze({
    byteOffset: $VkPipelineLayoutCreateInfo.setLayoutCount.byteOffset,
    byteLength: $VkPipelineLayoutCreateInfo.setLayoutCount.byteLength
  }),
  pSetLayouts: Object.freeze({
    byteOffset: $VkPipelineLayoutCreateInfo.pSetLayouts.byteOffset,
    byteLength: $VkPipelineLayoutCreateInfo.pSetLayouts.byteLength
  }),
  pushConstantRangeCount: Object.freeze({
    byteOffset: $VkPipelineLayoutCreateInfo.pushConstantRangeCount.byteOffset,
    byteLength: $VkPipelineLayoutCreateInfo.pushConstantRangeCount.byteLength
  }),
  pPushConstantRanges: Object.freeze({
    byteOffset: $VkPipelineLayoutCreateInfo.pPushConstantRanges.byteOffset,
    byteLength: $VkPipelineLayoutCreateInfo.pPushConstantRanges.byteLength
  }),
});
class VkSamplerCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._magFilter = 0;
    this._minFilter = 0;
    this._mipmapMode = 0;
    this._addressModeU = 0;
    this._addressModeV = 0;
    this._addressModeW = 0;
    this._mipLodBias = 0;
    this._anisotropyEnable = 0;
    this._maxAnisotropy = 0;
    this._compareEnable = 0;
    this._compareOp = 0;
    this._minLod = 0;
    this._maxLod = 0;
    this._borderColor = 0;
    this._unnormalizedCoordinates = 0;
    this.memoryBuffer = new ArrayBuffer(VkSamplerCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.magFilter !== void 0) this.magFilter = opts.magFilter;
      if (opts.minFilter !== void 0) this.minFilter = opts.minFilter;
      if (opts.mipmapMode !== void 0) this.mipmapMode = opts.mipmapMode;
      if (opts.addressModeU !== void 0) this.addressModeU = opts.addressModeU;
      if (opts.addressModeV !== void 0) this.addressModeV = opts.addressModeV;
      if (opts.addressModeW !== void 0) this.addressModeW = opts.addressModeW;
      if (opts.mipLodBias !== void 0) this.mipLodBias = opts.mipLodBias;
      if (opts.anisotropyEnable !== void 0) this.anisotropyEnable = opts.anisotropyEnable;
      if (opts.maxAnisotropy !== void 0) this.maxAnisotropy = opts.maxAnisotropy;
      if (opts.compareEnable !== void 0) this.compareEnable = opts.compareEnable;
      if (opts.compareOp !== void 0) this.compareOp = opts.compareOp;
      if (opts.minLod !== void 0) this.minLod = opts.minLod;
      if (opts.maxLod !== void 0) this.maxLod = opts.maxLod;
      if (opts.borderColor !== void 0) this.borderColor = opts.borderColor;
      if (opts.unnormalizedCoordinates !== void 0) this.unnormalizedCoordinates = opts.unnormalizedCoordinates;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSamplerCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkSamplerCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get magFilter() {
    return this._magFilter;
  }
  set magFilter(value) {
    
this.memoryView.setInt32($VkSamplerCreateInfo.magFilter.byteOffset, value);
this._magFilter = value;
  }
  get minFilter() {
    return this._minFilter;
  }
  set minFilter(value) {
    
this.memoryView.setInt32($VkSamplerCreateInfo.minFilter.byteOffset, value);
this._minFilter = value;
  }
  get mipmapMode() {
    return this._mipmapMode;
  }
  set mipmapMode(value) {
    
this.memoryView.setInt32($VkSamplerCreateInfo.mipmapMode.byteOffset, value);
this._mipmapMode = value;
  }
  get addressModeU() {
    return this._addressModeU;
  }
  set addressModeU(value) {
    
this.memoryView.setInt32($VkSamplerCreateInfo.addressModeU.byteOffset, value);
this._addressModeU = value;
  }
  get addressModeV() {
    return this._addressModeV;
  }
  set addressModeV(value) {
    
this.memoryView.setInt32($VkSamplerCreateInfo.addressModeV.byteOffset, value);
this._addressModeV = value;
  }
  get addressModeW() {
    return this._addressModeW;
  }
  set addressModeW(value) {
    
this.memoryView.setInt32($VkSamplerCreateInfo.addressModeW.byteOffset, value);
this._addressModeW = value;
  }
  get mipLodBias() {
    return this._mipLodBias;
  }
  set mipLodBias(value) {
    
this.memoryView.setFloat32($VkSamplerCreateInfo.mipLodBias.byteOffset, value);
this._mipLodBias = value;
  }
  get anisotropyEnable() {
    return this._anisotropyEnable;
  }
  set anisotropyEnable(value) {
    
this.memoryView.setUint32($VkSamplerCreateInfo.anisotropyEnable.byteOffset, value);
this._anisotropyEnable = value;
  }
  get maxAnisotropy() {
    return this._maxAnisotropy;
  }
  set maxAnisotropy(value) {
    
this.memoryView.setFloat32($VkSamplerCreateInfo.maxAnisotropy.byteOffset, value);
this._maxAnisotropy = value;
  }
  get compareEnable() {
    return this._compareEnable;
  }
  set compareEnable(value) {
    
this.memoryView.setUint32($VkSamplerCreateInfo.compareEnable.byteOffset, value);
this._compareEnable = value;
  }
  get compareOp() {
    return this._compareOp;
  }
  set compareOp(value) {
    
this.memoryView.setInt32($VkSamplerCreateInfo.compareOp.byteOffset, value);
this._compareOp = value;
  }
  get minLod() {
    return this._minLod;
  }
  set minLod(value) {
    
this.memoryView.setFloat32($VkSamplerCreateInfo.minLod.byteOffset, value);
this._minLod = value;
  }
  get maxLod() {
    return this._maxLod;
  }
  set maxLod(value) {
    
this.memoryView.setFloat32($VkSamplerCreateInfo.maxLod.byteOffset, value);
this._maxLod = value;
  }
  get borderColor() {
    return this._borderColor;
  }
  set borderColor(value) {
    
this.memoryView.setInt32($VkSamplerCreateInfo.borderColor.byteOffset, value);
this._borderColor = value;
  }
  get unnormalizedCoordinates() {
    return this._unnormalizedCoordinates;
  }
  set unnormalizedCoordinates(value) {
    
this.memoryView.setUint32($VkSamplerCreateInfo.unnormalizedCoordinates.byteOffset, value);
this._unnormalizedCoordinates = value;
  }
  
};

VkSamplerCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSamplerCreateInfo = memoryLayouts.VkSamplerCreateInfo;
VkSamplerCreateInfo.byteLength = $VkSamplerCreateInfo.byteLength;

VkSamplerCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.sType.byteOffset,
    byteLength: $VkSamplerCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.pNext.byteOffset,
    byteLength: $VkSamplerCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.flags.byteOffset,
    byteLength: $VkSamplerCreateInfo.flags.byteLength
  }),
  magFilter: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.magFilter.byteOffset,
    byteLength: $VkSamplerCreateInfo.magFilter.byteLength
  }),
  minFilter: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.minFilter.byteOffset,
    byteLength: $VkSamplerCreateInfo.minFilter.byteLength
  }),
  mipmapMode: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.mipmapMode.byteOffset,
    byteLength: $VkSamplerCreateInfo.mipmapMode.byteLength
  }),
  addressModeU: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.addressModeU.byteOffset,
    byteLength: $VkSamplerCreateInfo.addressModeU.byteLength
  }),
  addressModeV: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.addressModeV.byteOffset,
    byteLength: $VkSamplerCreateInfo.addressModeV.byteLength
  }),
  addressModeW: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.addressModeW.byteOffset,
    byteLength: $VkSamplerCreateInfo.addressModeW.byteLength
  }),
  mipLodBias: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.mipLodBias.byteOffset,
    byteLength: $VkSamplerCreateInfo.mipLodBias.byteLength
  }),
  anisotropyEnable: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.anisotropyEnable.byteOffset,
    byteLength: $VkSamplerCreateInfo.anisotropyEnable.byteLength
  }),
  maxAnisotropy: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.maxAnisotropy.byteOffset,
    byteLength: $VkSamplerCreateInfo.maxAnisotropy.byteLength
  }),
  compareEnable: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.compareEnable.byteOffset,
    byteLength: $VkSamplerCreateInfo.compareEnable.byteLength
  }),
  compareOp: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.compareOp.byteOffset,
    byteLength: $VkSamplerCreateInfo.compareOp.byteLength
  }),
  minLod: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.minLod.byteOffset,
    byteLength: $VkSamplerCreateInfo.minLod.byteLength
  }),
  maxLod: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.maxLod.byteOffset,
    byteLength: $VkSamplerCreateInfo.maxLod.byteLength
  }),
  borderColor: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.borderColor.byteOffset,
    byteLength: $VkSamplerCreateInfo.borderColor.byteLength
  }),
  unnormalizedCoordinates: Object.freeze({
    byteOffset: $VkSamplerCreateInfo.unnormalizedCoordinates.byteOffset,
    byteLength: $VkSamplerCreateInfo.unnormalizedCoordinates.byteLength
  }),
});
class VkCommandPoolCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._queueFamilyIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkCommandPoolCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueFamilyIndex !== void 0) this.queueFamilyIndex = opts.queueFamilyIndex;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkCommandPoolCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkCommandPoolCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get queueFamilyIndex() {
    return this._queueFamilyIndex;
  }
  set queueFamilyIndex(value) {
    
this.memoryView.setUint32($VkCommandPoolCreateInfo.queueFamilyIndex.byteOffset, value);
this._queueFamilyIndex = value;
  }
  
};

VkCommandPoolCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkCommandPoolCreateInfo = memoryLayouts.VkCommandPoolCreateInfo;
VkCommandPoolCreateInfo.byteLength = $VkCommandPoolCreateInfo.byteLength;

VkCommandPoolCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkCommandPoolCreateInfo.sType.byteOffset,
    byteLength: $VkCommandPoolCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkCommandPoolCreateInfo.pNext.byteOffset,
    byteLength: $VkCommandPoolCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkCommandPoolCreateInfo.flags.byteOffset,
    byteLength: $VkCommandPoolCreateInfo.flags.byteLength
  }),
  queueFamilyIndex: Object.freeze({
    byteOffset: $VkCommandPoolCreateInfo.queueFamilyIndex.byteOffset,
    byteLength: $VkCommandPoolCreateInfo.queueFamilyIndex.byteLength
  }),
});
class VkCommandBufferAllocateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._commandPool = null;
    this._level = 0;
    this._commandBufferCount = 0;
    this.memoryBuffer = new ArrayBuffer(VkCommandBufferAllocateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.commandPool !== void 0) this.commandPool = opts.commandPool;
      if (opts.level !== void 0) this.level = opts.level;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkCommandBufferAllocateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get commandPool() {
    return this._commandPool;
  }
  set commandPool(value) {
    String
  }
  get level() {
    return this._level;
  }
  set level(value) {
    
this.memoryView.setInt32($VkCommandBufferAllocateInfo.level.byteOffset, value);
this._level = value;
  }
  get commandBufferCount() {
    return this._commandBufferCount;
  }
  set commandBufferCount(value) {
    
this.memoryView.setUint32($VkCommandBufferAllocateInfo.commandBufferCount.byteOffset, value);
this._commandBufferCount = value;
  }
  
};

VkCommandBufferAllocateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkCommandBufferAllocateInfo = memoryLayouts.VkCommandBufferAllocateInfo;
VkCommandBufferAllocateInfo.byteLength = $VkCommandBufferAllocateInfo.byteLength;

VkCommandBufferAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkCommandBufferAllocateInfo.sType.byteOffset,
    byteLength: $VkCommandBufferAllocateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkCommandBufferAllocateInfo.pNext.byteOffset,
    byteLength: $VkCommandBufferAllocateInfo.pNext.byteLength
  }),
  commandPool: Object.freeze({
    byteOffset: $VkCommandBufferAllocateInfo.commandPool.byteOffset,
    byteLength: $VkCommandBufferAllocateInfo.commandPool.byteLength
  }),
  level: Object.freeze({
    byteOffset: $VkCommandBufferAllocateInfo.level.byteOffset,
    byteLength: $VkCommandBufferAllocateInfo.level.byteLength
  }),
  commandBufferCount: Object.freeze({
    byteOffset: $VkCommandBufferAllocateInfo.commandBufferCount.byteOffset,
    byteLength: $VkCommandBufferAllocateInfo.commandBufferCount.byteLength
  }),
});
class VkCommandBufferInheritanceInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._renderPass = null;
    this._subpass = 0;
    this._framebuffer = null;
    this._occlusionQueryEnable = 0;
    this._queryFlags = 0;
    this._pipelineStatistics = 0;
    this.memoryBuffer = new ArrayBuffer(VkCommandBufferInheritanceInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.framebuffer !== void 0) this.framebuffer = opts.framebuffer;
      if (opts.occlusionQueryEnable !== void 0) this.occlusionQueryEnable = opts.occlusionQueryEnable;
      if (opts.queryFlags !== void 0) this.queryFlags = opts.queryFlags;
      if (opts.pipelineStatistics !== void 0) this.pipelineStatistics = opts.pipelineStatistics;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkCommandBufferInheritanceInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    String
  }
  get subpass() {
    return this._subpass;
  }
  set subpass(value) {
    
this.memoryView.setUint32($VkCommandBufferInheritanceInfo.subpass.byteOffset, value);
this._subpass = value;
  }
  get framebuffer() {
    return this._framebuffer;
  }
  set framebuffer(value) {
    String
  }
  get occlusionQueryEnable() {
    return this._occlusionQueryEnable;
  }
  set occlusionQueryEnable(value) {
    
this.memoryView.setUint32($VkCommandBufferInheritanceInfo.occlusionQueryEnable.byteOffset, value);
this._occlusionQueryEnable = value;
  }
  get queryFlags() {
    return this._queryFlags;
  }
  set queryFlags(value) {
    
this.memoryView.setInt32($VkCommandBufferInheritanceInfo.queryFlags.byteOffset, value);
this._queryFlags = value;
  }
  get pipelineStatistics() {
    return this._pipelineStatistics;
  }
  set pipelineStatistics(value) {
    
this.memoryView.setInt32($VkCommandBufferInheritanceInfo.pipelineStatistics.byteOffset, value);
this._pipelineStatistics = value;
  }
  
};

VkCommandBufferInheritanceInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkCommandBufferInheritanceInfo = memoryLayouts.VkCommandBufferInheritanceInfo;
VkCommandBufferInheritanceInfo.byteLength = $VkCommandBufferInheritanceInfo.byteLength;

VkCommandBufferInheritanceInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkCommandBufferInheritanceInfo.sType.byteOffset,
    byteLength: $VkCommandBufferInheritanceInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkCommandBufferInheritanceInfo.pNext.byteOffset,
    byteLength: $VkCommandBufferInheritanceInfo.pNext.byteLength
  }),
  renderPass: Object.freeze({
    byteOffset: $VkCommandBufferInheritanceInfo.renderPass.byteOffset,
    byteLength: $VkCommandBufferInheritanceInfo.renderPass.byteLength
  }),
  subpass: Object.freeze({
    byteOffset: $VkCommandBufferInheritanceInfo.subpass.byteOffset,
    byteLength: $VkCommandBufferInheritanceInfo.subpass.byteLength
  }),
  framebuffer: Object.freeze({
    byteOffset: $VkCommandBufferInheritanceInfo.framebuffer.byteOffset,
    byteLength: $VkCommandBufferInheritanceInfo.framebuffer.byteLength
  }),
  occlusionQueryEnable: Object.freeze({
    byteOffset: $VkCommandBufferInheritanceInfo.occlusionQueryEnable.byteOffset,
    byteLength: $VkCommandBufferInheritanceInfo.occlusionQueryEnable.byteLength
  }),
  queryFlags: Object.freeze({
    byteOffset: $VkCommandBufferInheritanceInfo.queryFlags.byteOffset,
    byteLength: $VkCommandBufferInheritanceInfo.queryFlags.byteLength
  }),
  pipelineStatistics: Object.freeze({
    byteOffset: $VkCommandBufferInheritanceInfo.pipelineStatistics.byteOffset,
    byteLength: $VkCommandBufferInheritanceInfo.pipelineStatistics.byteLength
  }),
});
class VkCommandBufferBeginInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._pInheritanceInfo = null;
    this.memoryBuffer = new ArrayBuffer(VkCommandBufferBeginInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pInheritanceInfo !== void 0) this.pInheritanceInfo = opts.pInheritanceInfo;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkCommandBufferBeginInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkCommandBufferBeginInfo.flags.byteOffset, value);
this._flags = value;
  }
  get pInheritanceInfo() {
    return this._pInheritanceInfo;
  }
  set pInheritanceInfo(value) {
    String
  }
  
};

VkCommandBufferBeginInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkCommandBufferBeginInfo = memoryLayouts.VkCommandBufferBeginInfo;
VkCommandBufferBeginInfo.byteLength = $VkCommandBufferBeginInfo.byteLength;

VkCommandBufferBeginInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkCommandBufferBeginInfo.sType.byteOffset,
    byteLength: $VkCommandBufferBeginInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkCommandBufferBeginInfo.pNext.byteOffset,
    byteLength: $VkCommandBufferBeginInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkCommandBufferBeginInfo.flags.byteOffset,
    byteLength: $VkCommandBufferBeginInfo.flags.byteLength
  }),
  pInheritanceInfo: Object.freeze({
    byteOffset: $VkCommandBufferBeginInfo.pInheritanceInfo.byteOffset,
    byteLength: $VkCommandBufferBeginInfo.pInheritanceInfo.byteLength
  }),
});
class VkRenderPassBeginInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._renderPass = null;
    this._framebuffer = null;
    this._renderArea = null;
    this._clearValueCount = 0;
    this._pClearValues = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassBeginInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.framebuffer !== void 0) this.framebuffer = opts.framebuffer;
      if (opts.renderArea !== void 0) this.renderArea = opts.renderArea;
      if (opts.clearValueCount !== void 0) this.clearValueCount = opts.clearValueCount;
      if (opts.pClearValues !== void 0) this.pClearValues = opts.pClearValues;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkRenderPassBeginInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    String
  }
  get framebuffer() {
    return this._framebuffer;
  }
  set framebuffer(value) {
    String
  }
  get renderArea() {
    return this._renderArea;
  }
  set renderArea(value) {
    String
  }
  get clearValueCount() {
    return this._clearValueCount;
  }
  set clearValueCount(value) {
    
this.memoryView.setUint32($VkRenderPassBeginInfo.clearValueCount.byteOffset, value);
this._clearValueCount = value;
  }
  get pClearValues() {
    return this._pClearValues;
  }
  set pClearValues(value) {
    
  }
  
};

VkRenderPassBeginInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.renderArea !== null) { }
  
  if (this.pClearValues !== null) { }
  
};

const $VkRenderPassBeginInfo = memoryLayouts.VkRenderPassBeginInfo;
VkRenderPassBeginInfo.byteLength = $VkRenderPassBeginInfo.byteLength;

VkRenderPassBeginInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkRenderPassBeginInfo.sType.byteOffset,
    byteLength: $VkRenderPassBeginInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkRenderPassBeginInfo.pNext.byteOffset,
    byteLength: $VkRenderPassBeginInfo.pNext.byteLength
  }),
  renderPass: Object.freeze({
    byteOffset: $VkRenderPassBeginInfo.renderPass.byteOffset,
    byteLength: $VkRenderPassBeginInfo.renderPass.byteLength
  }),
  framebuffer: Object.freeze({
    byteOffset: $VkRenderPassBeginInfo.framebuffer.byteOffset,
    byteLength: $VkRenderPassBeginInfo.framebuffer.byteLength
  }),
  renderArea: Object.freeze({
    byteOffset: $VkRenderPassBeginInfo.renderArea.byteOffset,
    byteLength: $VkRenderPassBeginInfo.renderArea.byteLength
  }),
  clearValueCount: Object.freeze({
    byteOffset: $VkRenderPassBeginInfo.clearValueCount.byteOffset,
    byteLength: $VkRenderPassBeginInfo.clearValueCount.byteLength
  }),
  pClearValues: Object.freeze({
    byteOffset: $VkRenderPassBeginInfo.pClearValues.byteOffset,
    byteLength: $VkRenderPassBeginInfo.pClearValues.byteLength
  }),
});
class VkClearDepthStencilValue {
  constructor(opts) {
    this._depth = 0;
    this._stencil = 0;
    this.memoryBuffer = new ArrayBuffer(VkClearDepthStencilValue.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.depth !== void 0) this.depth = opts.depth;
      if (opts.stencil !== void 0) this.stencil = opts.stencil;
      
    }
  }
  get depth() {
    return this._depth;
  }
  set depth(value) {
    
this.memoryView.setFloat32($VkClearDepthStencilValue.depth.byteOffset, value);
this._depth = value;
  }
  get stencil() {
    return this._stencil;
  }
  set stencil(value) {
    
this.memoryView.setUint32($VkClearDepthStencilValue.stencil.byteOffset, value);
this._stencil = value;
  }
  
};

VkClearDepthStencilValue.prototype.flush = function flush() {
  
};

const $VkClearDepthStencilValue = memoryLayouts.VkClearDepthStencilValue;
VkClearDepthStencilValue.byteLength = $VkClearDepthStencilValue.byteLength;

VkClearDepthStencilValue.memoryLayout = Object.freeze({
  depth: Object.freeze({
    byteOffset: $VkClearDepthStencilValue.depth.byteOffset,
    byteLength: $VkClearDepthStencilValue.depth.byteLength
  }),
  stencil: Object.freeze({
    byteOffset: $VkClearDepthStencilValue.stencil.byteOffset,
    byteLength: $VkClearDepthStencilValue.stencil.byteLength
  }),
});
class VkClearAttachment {
  constructor(opts) {
    this._aspectMask = 0;
    this._colorAttachment = 0;
    this._clearValue = null;
    this.memoryBuffer = new ArrayBuffer(VkClearAttachment.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      if (opts.colorAttachment !== void 0) this.colorAttachment = opts.colorAttachment;
      if (opts.clearValue !== void 0) this.clearValue = opts.clearValue;
      
    }
  }
  get aspectMask() {
    return this._aspectMask;
  }
  set aspectMask(value) {
    
this.memoryView.setInt32($VkClearAttachment.aspectMask.byteOffset, value);
this._aspectMask = value;
  }
  get colorAttachment() {
    return this._colorAttachment;
  }
  set colorAttachment(value) {
    
this.memoryView.setUint32($VkClearAttachment.colorAttachment.byteOffset, value);
this._colorAttachment = value;
  }
  get clearValue() {
    return this._clearValue;
  }
  set clearValue(value) {
    String
  }
  
};

VkClearAttachment.prototype.flush = function flush() {
  
  if (this.clearValue !== null) { }
  
};

const $VkClearAttachment = memoryLayouts.VkClearAttachment;
VkClearAttachment.byteLength = $VkClearAttachment.byteLength;

VkClearAttachment.memoryLayout = Object.freeze({
  aspectMask: Object.freeze({
    byteOffset: $VkClearAttachment.aspectMask.byteOffset,
    byteLength: $VkClearAttachment.aspectMask.byteLength
  }),
  colorAttachment: Object.freeze({
    byteOffset: $VkClearAttachment.colorAttachment.byteOffset,
    byteLength: $VkClearAttachment.colorAttachment.byteLength
  }),
  clearValue: Object.freeze({
    byteOffset: $VkClearAttachment.clearValue.byteOffset,
    byteLength: $VkClearAttachment.clearValue.byteLength
  }),
});
class VkAttachmentDescription {
  constructor(opts) {
    this._flags = 0;
    this._format = 0;
    this._samples = 0;
    this._loadOp = 0;
    this._storeOp = 0;
    this._stencilLoadOp = 0;
    this._stencilStoreOp = 0;
    this._initialLayout = 0;
    this._finalLayout = 0;
    this.memoryBuffer = new ArrayBuffer(VkAttachmentDescription.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.loadOp !== void 0) this.loadOp = opts.loadOp;
      if (opts.storeOp !== void 0) this.storeOp = opts.storeOp;
      if (opts.stencilLoadOp !== void 0) this.stencilLoadOp = opts.stencilLoadOp;
      if (opts.stencilStoreOp !== void 0) this.stencilStoreOp = opts.stencilStoreOp;
      if (opts.initialLayout !== void 0) this.initialLayout = opts.initialLayout;
      if (opts.finalLayout !== void 0) this.finalLayout = opts.finalLayout;
      
    }
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkAttachmentDescription.flags.byteOffset, value);
this._flags = value;
  }
  get format() {
    return this._format;
  }
  set format(value) {
    
this.memoryView.setInt32($VkAttachmentDescription.format.byteOffset, value);
this._format = value;
  }
  get samples() {
    return this._samples;
  }
  set samples(value) {
    
this.memoryView.setInt32($VkAttachmentDescription.samples.byteOffset, value);
this._samples = value;
  }
  get loadOp() {
    return this._loadOp;
  }
  set loadOp(value) {
    
this.memoryView.setInt32($VkAttachmentDescription.loadOp.byteOffset, value);
this._loadOp = value;
  }
  get storeOp() {
    return this._storeOp;
  }
  set storeOp(value) {
    
this.memoryView.setInt32($VkAttachmentDescription.storeOp.byteOffset, value);
this._storeOp = value;
  }
  get stencilLoadOp() {
    return this._stencilLoadOp;
  }
  set stencilLoadOp(value) {
    
this.memoryView.setInt32($VkAttachmentDescription.stencilLoadOp.byteOffset, value);
this._stencilLoadOp = value;
  }
  get stencilStoreOp() {
    return this._stencilStoreOp;
  }
  set stencilStoreOp(value) {
    
this.memoryView.setInt32($VkAttachmentDescription.stencilStoreOp.byteOffset, value);
this._stencilStoreOp = value;
  }
  get initialLayout() {
    return this._initialLayout;
  }
  set initialLayout(value) {
    
this.memoryView.setInt32($VkAttachmentDescription.initialLayout.byteOffset, value);
this._initialLayout = value;
  }
  get finalLayout() {
    return this._finalLayout;
  }
  set finalLayout(value) {
    
this.memoryView.setInt32($VkAttachmentDescription.finalLayout.byteOffset, value);
this._finalLayout = value;
  }
  
};

VkAttachmentDescription.prototype.flush = function flush() {
  
};

const $VkAttachmentDescription = memoryLayouts.VkAttachmentDescription;
VkAttachmentDescription.byteLength = $VkAttachmentDescription.byteLength;

VkAttachmentDescription.memoryLayout = Object.freeze({
  flags: Object.freeze({
    byteOffset: $VkAttachmentDescription.flags.byteOffset,
    byteLength: $VkAttachmentDescription.flags.byteLength
  }),
  format: Object.freeze({
    byteOffset: $VkAttachmentDescription.format.byteOffset,
    byteLength: $VkAttachmentDescription.format.byteLength
  }),
  samples: Object.freeze({
    byteOffset: $VkAttachmentDescription.samples.byteOffset,
    byteLength: $VkAttachmentDescription.samples.byteLength
  }),
  loadOp: Object.freeze({
    byteOffset: $VkAttachmentDescription.loadOp.byteOffset,
    byteLength: $VkAttachmentDescription.loadOp.byteLength
  }),
  storeOp: Object.freeze({
    byteOffset: $VkAttachmentDescription.storeOp.byteOffset,
    byteLength: $VkAttachmentDescription.storeOp.byteLength
  }),
  stencilLoadOp: Object.freeze({
    byteOffset: $VkAttachmentDescription.stencilLoadOp.byteOffset,
    byteLength: $VkAttachmentDescription.stencilLoadOp.byteLength
  }),
  stencilStoreOp: Object.freeze({
    byteOffset: $VkAttachmentDescription.stencilStoreOp.byteOffset,
    byteLength: $VkAttachmentDescription.stencilStoreOp.byteLength
  }),
  initialLayout: Object.freeze({
    byteOffset: $VkAttachmentDescription.initialLayout.byteOffset,
    byteLength: $VkAttachmentDescription.initialLayout.byteLength
  }),
  finalLayout: Object.freeze({
    byteOffset: $VkAttachmentDescription.finalLayout.byteOffset,
    byteLength: $VkAttachmentDescription.finalLayout.byteLength
  }),
});
class VkAttachmentReference {
  constructor(opts) {
    this._attachment = 0;
    this._layout = 0;
    this.memoryBuffer = new ArrayBuffer(VkAttachmentReference.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.attachment !== void 0) this.attachment = opts.attachment;
      if (opts.layout !== void 0) this.layout = opts.layout;
      
    }
  }
  get attachment() {
    return this._attachment;
  }
  set attachment(value) {
    
this.memoryView.setUint32($VkAttachmentReference.attachment.byteOffset, value);
this._attachment = value;
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    
this.memoryView.setInt32($VkAttachmentReference.layout.byteOffset, value);
this._layout = value;
  }
  
};

VkAttachmentReference.prototype.flush = function flush() {
  
};

const $VkAttachmentReference = memoryLayouts.VkAttachmentReference;
VkAttachmentReference.byteLength = $VkAttachmentReference.byteLength;

VkAttachmentReference.memoryLayout = Object.freeze({
  attachment: Object.freeze({
    byteOffset: $VkAttachmentReference.attachment.byteOffset,
    byteLength: $VkAttachmentReference.attachment.byteLength
  }),
  layout: Object.freeze({
    byteOffset: $VkAttachmentReference.layout.byteOffset,
    byteLength: $VkAttachmentReference.layout.byteLength
  }),
});
class VkSubpassDescription {
  constructor(opts) {
    this._flags = 0;
    this._pipelineBindPoint = 0;
    this._inputAttachmentCount = 0;
    this._pInputAttachments = null;
    this._colorAttachmentCount = 0;
    this._pColorAttachments = null;
    this._pResolveAttachments = null;
    this._pDepthStencilAttachment = null;
    this._preserveAttachmentCount = 0;
    this._pPreserveAttachments = null;
    this.memoryBuffer = new ArrayBuffer(VkSubpassDescription.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.inputAttachmentCount !== void 0) this.inputAttachmentCount = opts.inputAttachmentCount;
      if (opts.pInputAttachments !== void 0) this.pInputAttachments = opts.pInputAttachments;
      if (opts.colorAttachmentCount !== void 0) this.colorAttachmentCount = opts.colorAttachmentCount;
      if (opts.pColorAttachments !== void 0) this.pColorAttachments = opts.pColorAttachments;
      if (opts.pResolveAttachments !== void 0) this.pResolveAttachments = opts.pResolveAttachments;
      if (opts.pDepthStencilAttachment !== void 0) this.pDepthStencilAttachment = opts.pDepthStencilAttachment;
      if (opts.preserveAttachmentCount !== void 0) this.preserveAttachmentCount = opts.preserveAttachmentCount;
      if (opts.pPreserveAttachments !== void 0) this.pPreserveAttachments = opts.pPreserveAttachments;
      
    }
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkSubpassDescription.flags.byteOffset, value);
this._flags = value;
  }
  get pipelineBindPoint() {
    return this._pipelineBindPoint;
  }
  set pipelineBindPoint(value) {
    
this.memoryView.setInt32($VkSubpassDescription.pipelineBindPoint.byteOffset, value);
this._pipelineBindPoint = value;
  }
  get inputAttachmentCount() {
    return this._inputAttachmentCount;
  }
  set inputAttachmentCount(value) {
    
this.memoryView.setUint32($VkSubpassDescription.inputAttachmentCount.byteOffset, value);
this._inputAttachmentCount = value;
  }
  get pInputAttachments() {
    return this._pInputAttachments;
  }
  set pInputAttachments(value) {
    
  }
  get colorAttachmentCount() {
    return this._colorAttachmentCount;
  }
  set colorAttachmentCount(value) {
    
this.memoryView.setUint32($VkSubpassDescription.colorAttachmentCount.byteOffset, value);
this._colorAttachmentCount = value;
  }
  get pColorAttachments() {
    return this._pColorAttachments;
  }
  set pColorAttachments(value) {
    
  }
  get pResolveAttachments() {
    return this._pResolveAttachments;
  }
  set pResolveAttachments(value) {
    
  }
  get pDepthStencilAttachment() {
    return this._pDepthStencilAttachment;
  }
  set pDepthStencilAttachment(value) {
    String
  }
  get preserveAttachmentCount() {
    return this._preserveAttachmentCount;
  }
  set preserveAttachmentCount(value) {
    
this.memoryView.setUint32($VkSubpassDescription.preserveAttachmentCount.byteOffset, value);
this._preserveAttachmentCount = value;
  }
  get pPreserveAttachments() {
    return this._pPreserveAttachments;
  }
  set pPreserveAttachments(value) {
    
  }
  
};

VkSubpassDescription.prototype.flush = function flush() {
  
  if (this.pInputAttachments !== null) { }
  
  if (this.pColorAttachments !== null) { }
  
  if (this.pResolveAttachments !== null) { }
  
};

const $VkSubpassDescription = memoryLayouts.VkSubpassDescription;
VkSubpassDescription.byteLength = $VkSubpassDescription.byteLength;

VkSubpassDescription.memoryLayout = Object.freeze({
  flags: Object.freeze({
    byteOffset: $VkSubpassDescription.flags.byteOffset,
    byteLength: $VkSubpassDescription.flags.byteLength
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: $VkSubpassDescription.pipelineBindPoint.byteOffset,
    byteLength: $VkSubpassDescription.pipelineBindPoint.byteLength
  }),
  inputAttachmentCount: Object.freeze({
    byteOffset: $VkSubpassDescription.inputAttachmentCount.byteOffset,
    byteLength: $VkSubpassDescription.inputAttachmentCount.byteLength
  }),
  pInputAttachments: Object.freeze({
    byteOffset: $VkSubpassDescription.pInputAttachments.byteOffset,
    byteLength: $VkSubpassDescription.pInputAttachments.byteLength
  }),
  colorAttachmentCount: Object.freeze({
    byteOffset: $VkSubpassDescription.colorAttachmentCount.byteOffset,
    byteLength: $VkSubpassDescription.colorAttachmentCount.byteLength
  }),
  pColorAttachments: Object.freeze({
    byteOffset: $VkSubpassDescription.pColorAttachments.byteOffset,
    byteLength: $VkSubpassDescription.pColorAttachments.byteLength
  }),
  pResolveAttachments: Object.freeze({
    byteOffset: $VkSubpassDescription.pResolveAttachments.byteOffset,
    byteLength: $VkSubpassDescription.pResolveAttachments.byteLength
  }),
  pDepthStencilAttachment: Object.freeze({
    byteOffset: $VkSubpassDescription.pDepthStencilAttachment.byteOffset,
    byteLength: $VkSubpassDescription.pDepthStencilAttachment.byteLength
  }),
  preserveAttachmentCount: Object.freeze({
    byteOffset: $VkSubpassDescription.preserveAttachmentCount.byteOffset,
    byteLength: $VkSubpassDescription.preserveAttachmentCount.byteLength
  }),
  pPreserveAttachments: Object.freeze({
    byteOffset: $VkSubpassDescription.pPreserveAttachments.byteOffset,
    byteLength: $VkSubpassDescription.pPreserveAttachments.byteLength
  }),
});
class VkSubpassDependency {
  constructor(opts) {
    this._srcSubpass = 0;
    this._dstSubpass = 0;
    this._srcStageMask = 0;
    this._dstStageMask = 0;
    this._srcAccessMask = 0;
    this._dstAccessMask = 0;
    this._dependencyFlags = 0;
    this.memoryBuffer = new ArrayBuffer(VkSubpassDependency.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.srcSubpass !== void 0) this.srcSubpass = opts.srcSubpass;
      if (opts.dstSubpass !== void 0) this.dstSubpass = opts.dstSubpass;
      if (opts.srcStageMask !== void 0) this.srcStageMask = opts.srcStageMask;
      if (opts.dstStageMask !== void 0) this.dstStageMask = opts.dstStageMask;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.dependencyFlags !== void 0) this.dependencyFlags = opts.dependencyFlags;
      
    }
  }
  get srcSubpass() {
    return this._srcSubpass;
  }
  set srcSubpass(value) {
    
this.memoryView.setUint32($VkSubpassDependency.srcSubpass.byteOffset, value);
this._srcSubpass = value;
  }
  get dstSubpass() {
    return this._dstSubpass;
  }
  set dstSubpass(value) {
    
this.memoryView.setUint32($VkSubpassDependency.dstSubpass.byteOffset, value);
this._dstSubpass = value;
  }
  get srcStageMask() {
    return this._srcStageMask;
  }
  set srcStageMask(value) {
    
this.memoryView.setInt32($VkSubpassDependency.srcStageMask.byteOffset, value);
this._srcStageMask = value;
  }
  get dstStageMask() {
    return this._dstStageMask;
  }
  set dstStageMask(value) {
    
this.memoryView.setInt32($VkSubpassDependency.dstStageMask.byteOffset, value);
this._dstStageMask = value;
  }
  get srcAccessMask() {
    return this._srcAccessMask;
  }
  set srcAccessMask(value) {
    
this.memoryView.setInt32($VkSubpassDependency.srcAccessMask.byteOffset, value);
this._srcAccessMask = value;
  }
  get dstAccessMask() {
    return this._dstAccessMask;
  }
  set dstAccessMask(value) {
    
this.memoryView.setInt32($VkSubpassDependency.dstAccessMask.byteOffset, value);
this._dstAccessMask = value;
  }
  get dependencyFlags() {
    return this._dependencyFlags;
  }
  set dependencyFlags(value) {
    
this.memoryView.setInt32($VkSubpassDependency.dependencyFlags.byteOffset, value);
this._dependencyFlags = value;
  }
  
};

VkSubpassDependency.prototype.flush = function flush() {
  
};

const $VkSubpassDependency = memoryLayouts.VkSubpassDependency;
VkSubpassDependency.byteLength = $VkSubpassDependency.byteLength;

VkSubpassDependency.memoryLayout = Object.freeze({
  srcSubpass: Object.freeze({
    byteOffset: $VkSubpassDependency.srcSubpass.byteOffset,
    byteLength: $VkSubpassDependency.srcSubpass.byteLength
  }),
  dstSubpass: Object.freeze({
    byteOffset: $VkSubpassDependency.dstSubpass.byteOffset,
    byteLength: $VkSubpassDependency.dstSubpass.byteLength
  }),
  srcStageMask: Object.freeze({
    byteOffset: $VkSubpassDependency.srcStageMask.byteOffset,
    byteLength: $VkSubpassDependency.srcStageMask.byteLength
  }),
  dstStageMask: Object.freeze({
    byteOffset: $VkSubpassDependency.dstStageMask.byteOffset,
    byteLength: $VkSubpassDependency.dstStageMask.byteLength
  }),
  srcAccessMask: Object.freeze({
    byteOffset: $VkSubpassDependency.srcAccessMask.byteOffset,
    byteLength: $VkSubpassDependency.srcAccessMask.byteLength
  }),
  dstAccessMask: Object.freeze({
    byteOffset: $VkSubpassDependency.dstAccessMask.byteOffset,
    byteLength: $VkSubpassDependency.dstAccessMask.byteLength
  }),
  dependencyFlags: Object.freeze({
    byteOffset: $VkSubpassDependency.dependencyFlags.byteOffset,
    byteLength: $VkSubpassDependency.dependencyFlags.byteLength
  }),
});
class VkRenderPassCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._attachmentCount = 0;
    this._pAttachments = null;
    this._subpassCount = 0;
    this._pSubpasses = null;
    this._dependencyCount = 0;
    this._pDependencies = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pSubpasses !== void 0) this.pSubpasses = opts.pSubpasses;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pDependencies !== void 0) this.pDependencies = opts.pDependencies;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkRenderPassCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkRenderPassCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get attachmentCount() {
    return this._attachmentCount;
  }
  set attachmentCount(value) {
    
this.memoryView.setUint32($VkRenderPassCreateInfo.attachmentCount.byteOffset, value);
this._attachmentCount = value;
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    
  }
  get subpassCount() {
    return this._subpassCount;
  }
  set subpassCount(value) {
    
this.memoryView.setUint32($VkRenderPassCreateInfo.subpassCount.byteOffset, value);
this._subpassCount = value;
  }
  get pSubpasses() {
    return this._pSubpasses;
  }
  set pSubpasses(value) {
    
  }
  get dependencyCount() {
    return this._dependencyCount;
  }
  set dependencyCount(value) {
    
this.memoryView.setUint32($VkRenderPassCreateInfo.dependencyCount.byteOffset, value);
this._dependencyCount = value;
  }
  get pDependencies() {
    return this._pDependencies;
  }
  set pDependencies(value) {
    
  }
  
};

VkRenderPassCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pAttachments !== null) { }
  
  if (this.pSubpasses !== null) { }
  
  if (this.pDependencies !== null) { }
  
};

const $VkRenderPassCreateInfo = memoryLayouts.VkRenderPassCreateInfo;
VkRenderPassCreateInfo.byteLength = $VkRenderPassCreateInfo.byteLength;

VkRenderPassCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo.sType.byteOffset,
    byteLength: $VkRenderPassCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo.pNext.byteOffset,
    byteLength: $VkRenderPassCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo.flags.byteOffset,
    byteLength: $VkRenderPassCreateInfo.flags.byteLength
  }),
  attachmentCount: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo.attachmentCount.byteOffset,
    byteLength: $VkRenderPassCreateInfo.attachmentCount.byteLength
  }),
  pAttachments: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo.pAttachments.byteOffset,
    byteLength: $VkRenderPassCreateInfo.pAttachments.byteLength
  }),
  subpassCount: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo.subpassCount.byteOffset,
    byteLength: $VkRenderPassCreateInfo.subpassCount.byteLength
  }),
  pSubpasses: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo.pSubpasses.byteOffset,
    byteLength: $VkRenderPassCreateInfo.pSubpasses.byteLength
  }),
  dependencyCount: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo.dependencyCount.byteOffset,
    byteLength: $VkRenderPassCreateInfo.dependencyCount.byteLength
  }),
  pDependencies: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo.pDependencies.byteOffset,
    byteLength: $VkRenderPassCreateInfo.pDependencies.byteLength
  }),
});
class VkEventCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this.memoryBuffer = new ArrayBuffer(VkEventCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkEventCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkEventCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  
};

VkEventCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkEventCreateInfo = memoryLayouts.VkEventCreateInfo;
VkEventCreateInfo.byteLength = $VkEventCreateInfo.byteLength;

VkEventCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkEventCreateInfo.sType.byteOffset,
    byteLength: $VkEventCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkEventCreateInfo.pNext.byteOffset,
    byteLength: $VkEventCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkEventCreateInfo.flags.byteOffset,
    byteLength: $VkEventCreateInfo.flags.byteLength
  }),
});
class VkFenceCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this.memoryBuffer = new ArrayBuffer(VkFenceCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkFenceCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkFenceCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  
};

VkFenceCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkFenceCreateInfo = memoryLayouts.VkFenceCreateInfo;
VkFenceCreateInfo.byteLength = $VkFenceCreateInfo.byteLength;

VkFenceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkFenceCreateInfo.sType.byteOffset,
    byteLength: $VkFenceCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkFenceCreateInfo.pNext.byteOffset,
    byteLength: $VkFenceCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkFenceCreateInfo.flags.byteOffset,
    byteLength: $VkFenceCreateInfo.flags.byteLength
  }),
});
class VkPhysicalDeviceFeatures {
  constructor(opts) {
    this._robustBufferAccess = 0;
    this._fullDrawIndexUint32 = 0;
    this._imageCubeArray = 0;
    this._independentBlend = 0;
    this._geometryShader = 0;
    this._tessellationShader = 0;
    this._sampleRateShading = 0;
    this._dualSrcBlend = 0;
    this._logicOp = 0;
    this._multiDrawIndirect = 0;
    this._drawIndirectFirstInstance = 0;
    this._depthClamp = 0;
    this._depthBiasClamp = 0;
    this._fillModeNonSolid = 0;
    this._depthBounds = 0;
    this._wideLines = 0;
    this._largePoints = 0;
    this._alphaToOne = 0;
    this._multiViewport = 0;
    this._samplerAnisotropy = 0;
    this._textureCompressionETC2 = 0;
    this._textureCompressionASTC_LDR = 0;
    this._textureCompressionBC = 0;
    this._occlusionQueryPrecise = 0;
    this._pipelineStatisticsQuery = 0;
    this._vertexPipelineStoresAndAtomics = 0;
    this._fragmentStoresAndAtomics = 0;
    this._shaderTessellationAndGeometryPointSize = 0;
    this._shaderImageGatherExtended = 0;
    this._shaderStorageImageExtendedFormats = 0;
    this._shaderStorageImageMultisample = 0;
    this._shaderStorageImageReadWithoutFormat = 0;
    this._shaderStorageImageWriteWithoutFormat = 0;
    this._shaderUniformBufferArrayDynamicIndexing = 0;
    this._shaderSampledImageArrayDynamicIndexing = 0;
    this._shaderStorageBufferArrayDynamicIndexing = 0;
    this._shaderStorageImageArrayDynamicIndexing = 0;
    this._shaderClipDistance = 0;
    this._shaderCullDistance = 0;
    this._shaderFloat64 = 0;
    this._shaderInt64 = 0;
    this._shaderInt16 = 0;
    this._shaderResourceResidency = 0;
    this._shaderResourceMinLod = 0;
    this._sparseBinding = 0;
    this._sparseResidencyBuffer = 0;
    this._sparseResidencyImage2D = 0;
    this._sparseResidencyImage3D = 0;
    this._sparseResidency2Samples = 0;
    this._sparseResidency4Samples = 0;
    this._sparseResidency8Samples = 0;
    this._sparseResidency16Samples = 0;
    this._sparseResidencyAliased = 0;
    this._variableMultisampleRate = 0;
    this._inheritedQueries = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.robustBufferAccess !== void 0) this.robustBufferAccess = opts.robustBufferAccess;
      if (opts.fullDrawIndexUint32 !== void 0) this.fullDrawIndexUint32 = opts.fullDrawIndexUint32;
      if (opts.imageCubeArray !== void 0) this.imageCubeArray = opts.imageCubeArray;
      if (opts.independentBlend !== void 0) this.independentBlend = opts.independentBlend;
      if (opts.geometryShader !== void 0) this.geometryShader = opts.geometryShader;
      if (opts.tessellationShader !== void 0) this.tessellationShader = opts.tessellationShader;
      if (opts.sampleRateShading !== void 0) this.sampleRateShading = opts.sampleRateShading;
      if (opts.dualSrcBlend !== void 0) this.dualSrcBlend = opts.dualSrcBlend;
      if (opts.logicOp !== void 0) this.logicOp = opts.logicOp;
      if (opts.multiDrawIndirect !== void 0) this.multiDrawIndirect = opts.multiDrawIndirect;
      if (opts.drawIndirectFirstInstance !== void 0) this.drawIndirectFirstInstance = opts.drawIndirectFirstInstance;
      if (opts.depthClamp !== void 0) this.depthClamp = opts.depthClamp;
      if (opts.depthBiasClamp !== void 0) this.depthBiasClamp = opts.depthBiasClamp;
      if (opts.fillModeNonSolid !== void 0) this.fillModeNonSolid = opts.fillModeNonSolid;
      if (opts.depthBounds !== void 0) this.depthBounds = opts.depthBounds;
      if (opts.wideLines !== void 0) this.wideLines = opts.wideLines;
      if (opts.largePoints !== void 0) this.largePoints = opts.largePoints;
      if (opts.alphaToOne !== void 0) this.alphaToOne = opts.alphaToOne;
      if (opts.multiViewport !== void 0) this.multiViewport = opts.multiViewport;
      if (opts.samplerAnisotropy !== void 0) this.samplerAnisotropy = opts.samplerAnisotropy;
      if (opts.textureCompressionETC2 !== void 0) this.textureCompressionETC2 = opts.textureCompressionETC2;
      if (opts.textureCompressionASTC_LDR !== void 0) this.textureCompressionASTC_LDR = opts.textureCompressionASTC_LDR;
      if (opts.textureCompressionBC !== void 0) this.textureCompressionBC = opts.textureCompressionBC;
      if (opts.occlusionQueryPrecise !== void 0) this.occlusionQueryPrecise = opts.occlusionQueryPrecise;
      if (opts.pipelineStatisticsQuery !== void 0) this.pipelineStatisticsQuery = opts.pipelineStatisticsQuery;
      if (opts.vertexPipelineStoresAndAtomics !== void 0) this.vertexPipelineStoresAndAtomics = opts.vertexPipelineStoresAndAtomics;
      if (opts.fragmentStoresAndAtomics !== void 0) this.fragmentStoresAndAtomics = opts.fragmentStoresAndAtomics;
      if (opts.shaderTessellationAndGeometryPointSize !== void 0) this.shaderTessellationAndGeometryPointSize = opts.shaderTessellationAndGeometryPointSize;
      if (opts.shaderImageGatherExtended !== void 0) this.shaderImageGatherExtended = opts.shaderImageGatherExtended;
      if (opts.shaderStorageImageExtendedFormats !== void 0) this.shaderStorageImageExtendedFormats = opts.shaderStorageImageExtendedFormats;
      if (opts.shaderStorageImageMultisample !== void 0) this.shaderStorageImageMultisample = opts.shaderStorageImageMultisample;
      if (opts.shaderStorageImageReadWithoutFormat !== void 0) this.shaderStorageImageReadWithoutFormat = opts.shaderStorageImageReadWithoutFormat;
      if (opts.shaderStorageImageWriteWithoutFormat !== void 0) this.shaderStorageImageWriteWithoutFormat = opts.shaderStorageImageWriteWithoutFormat;
      if (opts.shaderUniformBufferArrayDynamicIndexing !== void 0) this.shaderUniformBufferArrayDynamicIndexing = opts.shaderUniformBufferArrayDynamicIndexing;
      if (opts.shaderSampledImageArrayDynamicIndexing !== void 0) this.shaderSampledImageArrayDynamicIndexing = opts.shaderSampledImageArrayDynamicIndexing;
      if (opts.shaderStorageBufferArrayDynamicIndexing !== void 0) this.shaderStorageBufferArrayDynamicIndexing = opts.shaderStorageBufferArrayDynamicIndexing;
      if (opts.shaderStorageImageArrayDynamicIndexing !== void 0) this.shaderStorageImageArrayDynamicIndexing = opts.shaderStorageImageArrayDynamicIndexing;
      if (opts.shaderClipDistance !== void 0) this.shaderClipDistance = opts.shaderClipDistance;
      if (opts.shaderCullDistance !== void 0) this.shaderCullDistance = opts.shaderCullDistance;
      if (opts.shaderFloat64 !== void 0) this.shaderFloat64 = opts.shaderFloat64;
      if (opts.shaderInt64 !== void 0) this.shaderInt64 = opts.shaderInt64;
      if (opts.shaderInt16 !== void 0) this.shaderInt16 = opts.shaderInt16;
      if (opts.shaderResourceResidency !== void 0) this.shaderResourceResidency = opts.shaderResourceResidency;
      if (opts.shaderResourceMinLod !== void 0) this.shaderResourceMinLod = opts.shaderResourceMinLod;
      if (opts.sparseBinding !== void 0) this.sparseBinding = opts.sparseBinding;
      if (opts.sparseResidencyBuffer !== void 0) this.sparseResidencyBuffer = opts.sparseResidencyBuffer;
      if (opts.sparseResidencyImage2D !== void 0) this.sparseResidencyImage2D = opts.sparseResidencyImage2D;
      if (opts.sparseResidencyImage3D !== void 0) this.sparseResidencyImage3D = opts.sparseResidencyImage3D;
      if (opts.sparseResidency2Samples !== void 0) this.sparseResidency2Samples = opts.sparseResidency2Samples;
      if (opts.sparseResidency4Samples !== void 0) this.sparseResidency4Samples = opts.sparseResidency4Samples;
      if (opts.sparseResidency8Samples !== void 0) this.sparseResidency8Samples = opts.sparseResidency8Samples;
      if (opts.sparseResidency16Samples !== void 0) this.sparseResidency16Samples = opts.sparseResidency16Samples;
      if (opts.sparseResidencyAliased !== void 0) this.sparseResidencyAliased = opts.sparseResidencyAliased;
      if (opts.variableMultisampleRate !== void 0) this.variableMultisampleRate = opts.variableMultisampleRate;
      if (opts.inheritedQueries !== void 0) this.inheritedQueries = opts.inheritedQueries;
      
    }
  }
  get robustBufferAccess() {
    return this._robustBufferAccess;
  }
  set robustBufferAccess(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.robustBufferAccess.byteOffset, value);
this._robustBufferAccess = value;
  }
  get fullDrawIndexUint32() {
    return this._fullDrawIndexUint32;
  }
  set fullDrawIndexUint32(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.fullDrawIndexUint32.byteOffset, value);
this._fullDrawIndexUint32 = value;
  }
  get imageCubeArray() {
    return this._imageCubeArray;
  }
  set imageCubeArray(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.imageCubeArray.byteOffset, value);
this._imageCubeArray = value;
  }
  get independentBlend() {
    return this._independentBlend;
  }
  set independentBlend(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.independentBlend.byteOffset, value);
this._independentBlend = value;
  }
  get geometryShader() {
    return this._geometryShader;
  }
  set geometryShader(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.geometryShader.byteOffset, value);
this._geometryShader = value;
  }
  get tessellationShader() {
    return this._tessellationShader;
  }
  set tessellationShader(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.tessellationShader.byteOffset, value);
this._tessellationShader = value;
  }
  get sampleRateShading() {
    return this._sampleRateShading;
  }
  set sampleRateShading(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.sampleRateShading.byteOffset, value);
this._sampleRateShading = value;
  }
  get dualSrcBlend() {
    return this._dualSrcBlend;
  }
  set dualSrcBlend(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.dualSrcBlend.byteOffset, value);
this._dualSrcBlend = value;
  }
  get logicOp() {
    return this._logicOp;
  }
  set logicOp(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.logicOp.byteOffset, value);
this._logicOp = value;
  }
  get multiDrawIndirect() {
    return this._multiDrawIndirect;
  }
  set multiDrawIndirect(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.multiDrawIndirect.byteOffset, value);
this._multiDrawIndirect = value;
  }
  get drawIndirectFirstInstance() {
    return this._drawIndirectFirstInstance;
  }
  set drawIndirectFirstInstance(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.drawIndirectFirstInstance.byteOffset, value);
this._drawIndirectFirstInstance = value;
  }
  get depthClamp() {
    return this._depthClamp;
  }
  set depthClamp(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.depthClamp.byteOffset, value);
this._depthClamp = value;
  }
  get depthBiasClamp() {
    return this._depthBiasClamp;
  }
  set depthBiasClamp(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.depthBiasClamp.byteOffset, value);
this._depthBiasClamp = value;
  }
  get fillModeNonSolid() {
    return this._fillModeNonSolid;
  }
  set fillModeNonSolid(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.fillModeNonSolid.byteOffset, value);
this._fillModeNonSolid = value;
  }
  get depthBounds() {
    return this._depthBounds;
  }
  set depthBounds(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.depthBounds.byteOffset, value);
this._depthBounds = value;
  }
  get wideLines() {
    return this._wideLines;
  }
  set wideLines(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.wideLines.byteOffset, value);
this._wideLines = value;
  }
  get largePoints() {
    return this._largePoints;
  }
  set largePoints(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.largePoints.byteOffset, value);
this._largePoints = value;
  }
  get alphaToOne() {
    return this._alphaToOne;
  }
  set alphaToOne(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.alphaToOne.byteOffset, value);
this._alphaToOne = value;
  }
  get multiViewport() {
    return this._multiViewport;
  }
  set multiViewport(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.multiViewport.byteOffset, value);
this._multiViewport = value;
  }
  get samplerAnisotropy() {
    return this._samplerAnisotropy;
  }
  set samplerAnisotropy(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.samplerAnisotropy.byteOffset, value);
this._samplerAnisotropy = value;
  }
  get textureCompressionETC2() {
    return this._textureCompressionETC2;
  }
  set textureCompressionETC2(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.textureCompressionETC2.byteOffset, value);
this._textureCompressionETC2 = value;
  }
  get textureCompressionASTC_LDR() {
    return this._textureCompressionASTC_LDR;
  }
  set textureCompressionASTC_LDR(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.textureCompressionASTC_LDR.byteOffset, value);
this._textureCompressionASTC_LDR = value;
  }
  get textureCompressionBC() {
    return this._textureCompressionBC;
  }
  set textureCompressionBC(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.textureCompressionBC.byteOffset, value);
this._textureCompressionBC = value;
  }
  get occlusionQueryPrecise() {
    return this._occlusionQueryPrecise;
  }
  set occlusionQueryPrecise(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.occlusionQueryPrecise.byteOffset, value);
this._occlusionQueryPrecise = value;
  }
  get pipelineStatisticsQuery() {
    return this._pipelineStatisticsQuery;
  }
  set pipelineStatisticsQuery(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.pipelineStatisticsQuery.byteOffset, value);
this._pipelineStatisticsQuery = value;
  }
  get vertexPipelineStoresAndAtomics() {
    return this._vertexPipelineStoresAndAtomics;
  }
  set vertexPipelineStoresAndAtomics(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.vertexPipelineStoresAndAtomics.byteOffset, value);
this._vertexPipelineStoresAndAtomics = value;
  }
  get fragmentStoresAndAtomics() {
    return this._fragmentStoresAndAtomics;
  }
  set fragmentStoresAndAtomics(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.fragmentStoresAndAtomics.byteOffset, value);
this._fragmentStoresAndAtomics = value;
  }
  get shaderTessellationAndGeometryPointSize() {
    return this._shaderTessellationAndGeometryPointSize;
  }
  set shaderTessellationAndGeometryPointSize(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderTessellationAndGeometryPointSize.byteOffset, value);
this._shaderTessellationAndGeometryPointSize = value;
  }
  get shaderImageGatherExtended() {
    return this._shaderImageGatherExtended;
  }
  set shaderImageGatherExtended(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderImageGatherExtended.byteOffset, value);
this._shaderImageGatherExtended = value;
  }
  get shaderStorageImageExtendedFormats() {
    return this._shaderStorageImageExtendedFormats;
  }
  set shaderStorageImageExtendedFormats(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderStorageImageExtendedFormats.byteOffset, value);
this._shaderStorageImageExtendedFormats = value;
  }
  get shaderStorageImageMultisample() {
    return this._shaderStorageImageMultisample;
  }
  set shaderStorageImageMultisample(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderStorageImageMultisample.byteOffset, value);
this._shaderStorageImageMultisample = value;
  }
  get shaderStorageImageReadWithoutFormat() {
    return this._shaderStorageImageReadWithoutFormat;
  }
  set shaderStorageImageReadWithoutFormat(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderStorageImageReadWithoutFormat.byteOffset, value);
this._shaderStorageImageReadWithoutFormat = value;
  }
  get shaderStorageImageWriteWithoutFormat() {
    return this._shaderStorageImageWriteWithoutFormat;
  }
  set shaderStorageImageWriteWithoutFormat(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderStorageImageWriteWithoutFormat.byteOffset, value);
this._shaderStorageImageWriteWithoutFormat = value;
  }
  get shaderUniformBufferArrayDynamicIndexing() {
    return this._shaderUniformBufferArrayDynamicIndexing;
  }
  set shaderUniformBufferArrayDynamicIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderUniformBufferArrayDynamicIndexing.byteOffset, value);
this._shaderUniformBufferArrayDynamicIndexing = value;
  }
  get shaderSampledImageArrayDynamicIndexing() {
    return this._shaderSampledImageArrayDynamicIndexing;
  }
  set shaderSampledImageArrayDynamicIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderSampledImageArrayDynamicIndexing.byteOffset, value);
this._shaderSampledImageArrayDynamicIndexing = value;
  }
  get shaderStorageBufferArrayDynamicIndexing() {
    return this._shaderStorageBufferArrayDynamicIndexing;
  }
  set shaderStorageBufferArrayDynamicIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderStorageBufferArrayDynamicIndexing.byteOffset, value);
this._shaderStorageBufferArrayDynamicIndexing = value;
  }
  get shaderStorageImageArrayDynamicIndexing() {
    return this._shaderStorageImageArrayDynamicIndexing;
  }
  set shaderStorageImageArrayDynamicIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderStorageImageArrayDynamicIndexing.byteOffset, value);
this._shaderStorageImageArrayDynamicIndexing = value;
  }
  get shaderClipDistance() {
    return this._shaderClipDistance;
  }
  set shaderClipDistance(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderClipDistance.byteOffset, value);
this._shaderClipDistance = value;
  }
  get shaderCullDistance() {
    return this._shaderCullDistance;
  }
  set shaderCullDistance(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderCullDistance.byteOffset, value);
this._shaderCullDistance = value;
  }
  get shaderFloat64() {
    return this._shaderFloat64;
  }
  set shaderFloat64(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderFloat64.byteOffset, value);
this._shaderFloat64 = value;
  }
  get shaderInt64() {
    return this._shaderInt64;
  }
  set shaderInt64(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderInt64.byteOffset, value);
this._shaderInt64 = value;
  }
  get shaderInt16() {
    return this._shaderInt16;
  }
  set shaderInt16(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderInt16.byteOffset, value);
this._shaderInt16 = value;
  }
  get shaderResourceResidency() {
    return this._shaderResourceResidency;
  }
  set shaderResourceResidency(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderResourceResidency.byteOffset, value);
this._shaderResourceResidency = value;
  }
  get shaderResourceMinLod() {
    return this._shaderResourceMinLod;
  }
  set shaderResourceMinLod(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.shaderResourceMinLod.byteOffset, value);
this._shaderResourceMinLod = value;
  }
  get sparseBinding() {
    return this._sparseBinding;
  }
  set sparseBinding(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.sparseBinding.byteOffset, value);
this._sparseBinding = value;
  }
  get sparseResidencyBuffer() {
    return this._sparseResidencyBuffer;
  }
  set sparseResidencyBuffer(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.sparseResidencyBuffer.byteOffset, value);
this._sparseResidencyBuffer = value;
  }
  get sparseResidencyImage2D() {
    return this._sparseResidencyImage2D;
  }
  set sparseResidencyImage2D(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.sparseResidencyImage2D.byteOffset, value);
this._sparseResidencyImage2D = value;
  }
  get sparseResidencyImage3D() {
    return this._sparseResidencyImage3D;
  }
  set sparseResidencyImage3D(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.sparseResidencyImage3D.byteOffset, value);
this._sparseResidencyImage3D = value;
  }
  get sparseResidency2Samples() {
    return this._sparseResidency2Samples;
  }
  set sparseResidency2Samples(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.sparseResidency2Samples.byteOffset, value);
this._sparseResidency2Samples = value;
  }
  get sparseResidency4Samples() {
    return this._sparseResidency4Samples;
  }
  set sparseResidency4Samples(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.sparseResidency4Samples.byteOffset, value);
this._sparseResidency4Samples = value;
  }
  get sparseResidency8Samples() {
    return this._sparseResidency8Samples;
  }
  set sparseResidency8Samples(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.sparseResidency8Samples.byteOffset, value);
this._sparseResidency8Samples = value;
  }
  get sparseResidency16Samples() {
    return this._sparseResidency16Samples;
  }
  set sparseResidency16Samples(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.sparseResidency16Samples.byteOffset, value);
this._sparseResidency16Samples = value;
  }
  get sparseResidencyAliased() {
    return this._sparseResidencyAliased;
  }
  set sparseResidencyAliased(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.sparseResidencyAliased.byteOffset, value);
this._sparseResidencyAliased = value;
  }
  get variableMultisampleRate() {
    return this._variableMultisampleRate;
  }
  set variableMultisampleRate(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.variableMultisampleRate.byteOffset, value);
this._variableMultisampleRate = value;
  }
  get inheritedQueries() {
    return this._inheritedQueries;
  }
  set inheritedQueries(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFeatures.inheritedQueries.byteOffset, value);
this._inheritedQueries = value;
  }
  
};

VkPhysicalDeviceFeatures.prototype.flush = function flush() {
  
};

const $VkPhysicalDeviceFeatures = memoryLayouts.VkPhysicalDeviceFeatures;
VkPhysicalDeviceFeatures.byteLength = $VkPhysicalDeviceFeatures.byteLength;

VkPhysicalDeviceFeatures.memoryLayout = Object.freeze({
  robustBufferAccess: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.robustBufferAccess.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.robustBufferAccess.byteLength
  }),
  fullDrawIndexUint32: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.fullDrawIndexUint32.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.fullDrawIndexUint32.byteLength
  }),
  imageCubeArray: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.imageCubeArray.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.imageCubeArray.byteLength
  }),
  independentBlend: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.independentBlend.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.independentBlend.byteLength
  }),
  geometryShader: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.geometryShader.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.geometryShader.byteLength
  }),
  tessellationShader: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.tessellationShader.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.tessellationShader.byteLength
  }),
  sampleRateShading: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.sampleRateShading.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.sampleRateShading.byteLength
  }),
  dualSrcBlend: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.dualSrcBlend.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.dualSrcBlend.byteLength
  }),
  logicOp: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.logicOp.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.logicOp.byteLength
  }),
  multiDrawIndirect: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.multiDrawIndirect.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.multiDrawIndirect.byteLength
  }),
  drawIndirectFirstInstance: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.drawIndirectFirstInstance.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.drawIndirectFirstInstance.byteLength
  }),
  depthClamp: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.depthClamp.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.depthClamp.byteLength
  }),
  depthBiasClamp: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.depthBiasClamp.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.depthBiasClamp.byteLength
  }),
  fillModeNonSolid: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.fillModeNonSolid.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.fillModeNonSolid.byteLength
  }),
  depthBounds: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.depthBounds.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.depthBounds.byteLength
  }),
  wideLines: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.wideLines.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.wideLines.byteLength
  }),
  largePoints: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.largePoints.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.largePoints.byteLength
  }),
  alphaToOne: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.alphaToOne.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.alphaToOne.byteLength
  }),
  multiViewport: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.multiViewport.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.multiViewport.byteLength
  }),
  samplerAnisotropy: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.samplerAnisotropy.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.samplerAnisotropy.byteLength
  }),
  textureCompressionETC2: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.textureCompressionETC2.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.textureCompressionETC2.byteLength
  }),
  textureCompressionASTC_LDR: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.textureCompressionASTC_LDR.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.textureCompressionASTC_LDR.byteLength
  }),
  textureCompressionBC: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.textureCompressionBC.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.textureCompressionBC.byteLength
  }),
  occlusionQueryPrecise: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.occlusionQueryPrecise.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.occlusionQueryPrecise.byteLength
  }),
  pipelineStatisticsQuery: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.pipelineStatisticsQuery.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.pipelineStatisticsQuery.byteLength
  }),
  vertexPipelineStoresAndAtomics: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.vertexPipelineStoresAndAtomics.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.vertexPipelineStoresAndAtomics.byteLength
  }),
  fragmentStoresAndAtomics: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.fragmentStoresAndAtomics.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.fragmentStoresAndAtomics.byteLength
  }),
  shaderTessellationAndGeometryPointSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderTessellationAndGeometryPointSize.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderTessellationAndGeometryPointSize.byteLength
  }),
  shaderImageGatherExtended: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderImageGatherExtended.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderImageGatherExtended.byteLength
  }),
  shaderStorageImageExtendedFormats: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderStorageImageExtendedFormats.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderStorageImageExtendedFormats.byteLength
  }),
  shaderStorageImageMultisample: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderStorageImageMultisample.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderStorageImageMultisample.byteLength
  }),
  shaderStorageImageReadWithoutFormat: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderStorageImageReadWithoutFormat.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderStorageImageReadWithoutFormat.byteLength
  }),
  shaderStorageImageWriteWithoutFormat: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderStorageImageWriteWithoutFormat.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderStorageImageWriteWithoutFormat.byteLength
  }),
  shaderUniformBufferArrayDynamicIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderUniformBufferArrayDynamicIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderUniformBufferArrayDynamicIndexing.byteLength
  }),
  shaderSampledImageArrayDynamicIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderSampledImageArrayDynamicIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderSampledImageArrayDynamicIndexing.byteLength
  }),
  shaderStorageBufferArrayDynamicIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderStorageBufferArrayDynamicIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderStorageBufferArrayDynamicIndexing.byteLength
  }),
  shaderStorageImageArrayDynamicIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderStorageImageArrayDynamicIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderStorageImageArrayDynamicIndexing.byteLength
  }),
  shaderClipDistance: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderClipDistance.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderClipDistance.byteLength
  }),
  shaderCullDistance: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderCullDistance.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderCullDistance.byteLength
  }),
  shaderFloat64: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderFloat64.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderFloat64.byteLength
  }),
  shaderInt64: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderInt64.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderInt64.byteLength
  }),
  shaderInt16: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderInt16.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderInt16.byteLength
  }),
  shaderResourceResidency: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderResourceResidency.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderResourceResidency.byteLength
  }),
  shaderResourceMinLod: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.shaderResourceMinLod.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.shaderResourceMinLod.byteLength
  }),
  sparseBinding: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.sparseBinding.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.sparseBinding.byteLength
  }),
  sparseResidencyBuffer: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.sparseResidencyBuffer.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.sparseResidencyBuffer.byteLength
  }),
  sparseResidencyImage2D: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.sparseResidencyImage2D.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.sparseResidencyImage2D.byteLength
  }),
  sparseResidencyImage3D: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.sparseResidencyImage3D.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.sparseResidencyImage3D.byteLength
  }),
  sparseResidency2Samples: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.sparseResidency2Samples.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.sparseResidency2Samples.byteLength
  }),
  sparseResidency4Samples: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.sparseResidency4Samples.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.sparseResidency4Samples.byteLength
  }),
  sparseResidency8Samples: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.sparseResidency8Samples.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.sparseResidency8Samples.byteLength
  }),
  sparseResidency16Samples: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.sparseResidency16Samples.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.sparseResidency16Samples.byteLength
  }),
  sparseResidencyAliased: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.sparseResidencyAliased.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.sparseResidencyAliased.byteLength
  }),
  variableMultisampleRate: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.variableMultisampleRate.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.variableMultisampleRate.byteLength
  }),
  inheritedQueries: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures.inheritedQueries.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures.inheritedQueries.byteLength
  }),
});
class VkPhysicalDeviceSparseProperties {
  constructor(opts) {
    this._residencyStandard2DBlockShape = 0;
    this._residencyStandard2DMultisampleBlockShape = 0;
    this._residencyStandard3DBlockShape = 0;
    this._residencyAlignedMipSize = 0;
    this._residencyNonResidentStrict = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSparseProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get residencyStandard2DBlockShape() {
    return this._residencyStandard2DBlockShape;
  }
  get residencyStandard2DMultisampleBlockShape() {
    return this._residencyStandard2DMultisampleBlockShape;
  }
  get residencyStandard3DBlockShape() {
    return this._residencyStandard3DBlockShape;
  }
  get residencyAlignedMipSize() {
    return this._residencyAlignedMipSize;
  }
  get residencyNonResidentStrict() {
    return this._residencyNonResidentStrict;
  }
  
};

VkPhysicalDeviceSparseProperties.prototype.flush = function flush() {
  
};

const $VkPhysicalDeviceSparseProperties = memoryLayouts.VkPhysicalDeviceSparseProperties;
VkPhysicalDeviceSparseProperties.byteLength = $VkPhysicalDeviceSparseProperties.byteLength;

VkPhysicalDeviceSparseProperties.memoryLayout = Object.freeze({
  residencyStandard2DBlockShape: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseProperties.residencyStandard2DBlockShape.byteOffset,
    byteLength: $VkPhysicalDeviceSparseProperties.residencyStandard2DBlockShape.byteLength
  }),
  residencyStandard2DMultisampleBlockShape: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseProperties.residencyStandard2DMultisampleBlockShape.byteOffset,
    byteLength: $VkPhysicalDeviceSparseProperties.residencyStandard2DMultisampleBlockShape.byteLength
  }),
  residencyStandard3DBlockShape: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseProperties.residencyStandard3DBlockShape.byteOffset,
    byteLength: $VkPhysicalDeviceSparseProperties.residencyStandard3DBlockShape.byteLength
  }),
  residencyAlignedMipSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseProperties.residencyAlignedMipSize.byteOffset,
    byteLength: $VkPhysicalDeviceSparseProperties.residencyAlignedMipSize.byteLength
  }),
  residencyNonResidentStrict: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseProperties.residencyNonResidentStrict.byteOffset,
    byteLength: $VkPhysicalDeviceSparseProperties.residencyNonResidentStrict.byteLength
  }),
});
class VkPhysicalDeviceLimits {
  constructor(opts) {
    this._maxImageDimension1D = 0;
    this._maxImageDimension2D = 0;
    this._maxImageDimension3D = 0;
    this._maxImageDimensionCube = 0;
    this._maxImageArrayLayers = 0;
    this._maxTexelBufferElements = 0;
    this._maxUniformBufferRange = 0;
    this._maxStorageBufferRange = 0;
    this._maxPushConstantsSize = 0;
    this._maxMemoryAllocationCount = 0;
    this._maxSamplerAllocationCount = 0;
    this._bufferImageGranularity = 0;
    this._sparseAddressSpaceSize = 0;
    this._maxBoundDescriptorSets = 0;
    this._maxPerStageDescriptorSamplers = 0;
    this._maxPerStageDescriptorUniformBuffers = 0;
    this._maxPerStageDescriptorStorageBuffers = 0;
    this._maxPerStageDescriptorSampledImages = 0;
    this._maxPerStageDescriptorStorageImages = 0;
    this._maxPerStageDescriptorInputAttachments = 0;
    this._maxPerStageResources = 0;
    this._maxDescriptorSetSamplers = 0;
    this._maxDescriptorSetUniformBuffers = 0;
    this._maxDescriptorSetUniformBuffersDynamic = 0;
    this._maxDescriptorSetStorageBuffers = 0;
    this._maxDescriptorSetStorageBuffersDynamic = 0;
    this._maxDescriptorSetSampledImages = 0;
    this._maxDescriptorSetStorageImages = 0;
    this._maxDescriptorSetInputAttachments = 0;
    this._maxVertexInputAttributes = 0;
    this._maxVertexInputBindings = 0;
    this._maxVertexInputAttributeOffset = 0;
    this._maxVertexInputBindingStride = 0;
    this._maxVertexOutputComponents = 0;
    this._maxTessellationGenerationLevel = 0;
    this._maxTessellationPatchSize = 0;
    this._maxTessellationControlPerVertexInputComponents = 0;
    this._maxTessellationControlPerVertexOutputComponents = 0;
    this._maxTessellationControlPerPatchOutputComponents = 0;
    this._maxTessellationControlTotalOutputComponents = 0;
    this._maxTessellationEvaluationInputComponents = 0;
    this._maxTessellationEvaluationOutputComponents = 0;
    this._maxGeometryShaderInvocations = 0;
    this._maxGeometryInputComponents = 0;
    this._maxGeometryOutputComponents = 0;
    this._maxGeometryOutputVertices = 0;
    this._maxGeometryTotalOutputComponents = 0;
    this._maxFragmentInputComponents = 0;
    this._maxFragmentOutputAttachments = 0;
    this._maxFragmentDualSrcAttachments = 0;
    this._maxFragmentCombinedOutputResources = 0;
    this._maxComputeSharedMemorySize = 0;
    this._maxComputeWorkGroupCount = null;
    this._maxComputeWorkGroupInvocations = 0;
    this._maxComputeWorkGroupSize = null;
    this._subPixelPrecisionBits = 0;
    this._subTexelPrecisionBits = 0;
    this._mipmapPrecisionBits = 0;
    this._maxDrawIndexedIndexValue = 0;
    this._maxDrawIndirectCount = 0;
    this._maxSamplerLodBias = 0;
    this._maxSamplerAnisotropy = 0;
    this._maxViewports = 0;
    this._maxViewportDimensions = null;
    this._viewportBoundsRange = null;
    this._viewportSubPixelBits = 0;
    this._minMemoryMapAlignment = 0;
    this._minTexelBufferOffsetAlignment = 0;
    this._minUniformBufferOffsetAlignment = 0;
    this._minStorageBufferOffsetAlignment = 0;
    this._minTexelOffset = 0;
    this._maxTexelOffset = 0;
    this._minTexelGatherOffset = 0;
    this._maxTexelGatherOffset = 0;
    this._minInterpolationOffset = 0;
    this._maxInterpolationOffset = 0;
    this._subPixelInterpolationOffsetBits = 0;
    this._maxFramebufferWidth = 0;
    this._maxFramebufferHeight = 0;
    this._maxFramebufferLayers = 0;
    this._framebufferColorSampleCounts = 0;
    this._framebufferDepthSampleCounts = 0;
    this._framebufferStencilSampleCounts = 0;
    this._framebufferNoAttachmentsSampleCounts = 0;
    this._maxColorAttachments = 0;
    this._sampledImageColorSampleCounts = 0;
    this._sampledImageIntegerSampleCounts = 0;
    this._sampledImageDepthSampleCounts = 0;
    this._sampledImageStencilSampleCounts = 0;
    this._storageImageSampleCounts = 0;
    this._maxSampleMaskWords = 0;
    this._timestampComputeAndGraphics = 0;
    this._timestampPeriod = 0;
    this._maxClipDistances = 0;
    this._maxCullDistances = 0;
    this._maxCombinedClipAndCullDistances = 0;
    this._discreteQueuePriorities = 0;
    this._pointSizeRange = null;
    this._lineWidthRange = null;
    this._pointSizeGranularity = 0;
    this._lineWidthGranularity = 0;
    this._strictLines = 0;
    this._standardSampleLocations = 0;
    this._optimalBufferCopyOffsetAlignment = 0;
    this._optimalBufferCopyRowPitchAlignment = 0;
    this._nonCoherentAtomSize = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceLimits.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get maxImageDimension1D() {
    return this._maxImageDimension1D;
  }
  get maxImageDimension2D() {
    return this._maxImageDimension2D;
  }
  get maxImageDimension3D() {
    return this._maxImageDimension3D;
  }
  get maxImageDimensionCube() {
    return this._maxImageDimensionCube;
  }
  get maxImageArrayLayers() {
    return this._maxImageArrayLayers;
  }
  get maxTexelBufferElements() {
    return this._maxTexelBufferElements;
  }
  get maxUniformBufferRange() {
    return this._maxUniformBufferRange;
  }
  get maxStorageBufferRange() {
    return this._maxStorageBufferRange;
  }
  get maxPushConstantsSize() {
    return this._maxPushConstantsSize;
  }
  get maxMemoryAllocationCount() {
    return this._maxMemoryAllocationCount;
  }
  get maxSamplerAllocationCount() {
    return this._maxSamplerAllocationCount;
  }
  get bufferImageGranularity() {
    return this._bufferImageGranularity;
  }
  get sparseAddressSpaceSize() {
    return this._sparseAddressSpaceSize;
  }
  get maxBoundDescriptorSets() {
    return this._maxBoundDescriptorSets;
  }
  get maxPerStageDescriptorSamplers() {
    return this._maxPerStageDescriptorSamplers;
  }
  get maxPerStageDescriptorUniformBuffers() {
    return this._maxPerStageDescriptorUniformBuffers;
  }
  get maxPerStageDescriptorStorageBuffers() {
    return this._maxPerStageDescriptorStorageBuffers;
  }
  get maxPerStageDescriptorSampledImages() {
    return this._maxPerStageDescriptorSampledImages;
  }
  get maxPerStageDescriptorStorageImages() {
    return this._maxPerStageDescriptorStorageImages;
  }
  get maxPerStageDescriptorInputAttachments() {
    return this._maxPerStageDescriptorInputAttachments;
  }
  get maxPerStageResources() {
    return this._maxPerStageResources;
  }
  get maxDescriptorSetSamplers() {
    return this._maxDescriptorSetSamplers;
  }
  get maxDescriptorSetUniformBuffers() {
    return this._maxDescriptorSetUniformBuffers;
  }
  get maxDescriptorSetUniformBuffersDynamic() {
    return this._maxDescriptorSetUniformBuffersDynamic;
  }
  get maxDescriptorSetStorageBuffers() {
    return this._maxDescriptorSetStorageBuffers;
  }
  get maxDescriptorSetStorageBuffersDynamic() {
    return this._maxDescriptorSetStorageBuffersDynamic;
  }
  get maxDescriptorSetSampledImages() {
    return this._maxDescriptorSetSampledImages;
  }
  get maxDescriptorSetStorageImages() {
    return this._maxDescriptorSetStorageImages;
  }
  get maxDescriptorSetInputAttachments() {
    return this._maxDescriptorSetInputAttachments;
  }
  get maxVertexInputAttributes() {
    return this._maxVertexInputAttributes;
  }
  get maxVertexInputBindings() {
    return this._maxVertexInputBindings;
  }
  get maxVertexInputAttributeOffset() {
    return this._maxVertexInputAttributeOffset;
  }
  get maxVertexInputBindingStride() {
    return this._maxVertexInputBindingStride;
  }
  get maxVertexOutputComponents() {
    return this._maxVertexOutputComponents;
  }
  get maxTessellationGenerationLevel() {
    return this._maxTessellationGenerationLevel;
  }
  get maxTessellationPatchSize() {
    return this._maxTessellationPatchSize;
  }
  get maxTessellationControlPerVertexInputComponents() {
    return this._maxTessellationControlPerVertexInputComponents;
  }
  get maxTessellationControlPerVertexOutputComponents() {
    return this._maxTessellationControlPerVertexOutputComponents;
  }
  get maxTessellationControlPerPatchOutputComponents() {
    return this._maxTessellationControlPerPatchOutputComponents;
  }
  get maxTessellationControlTotalOutputComponents() {
    return this._maxTessellationControlTotalOutputComponents;
  }
  get maxTessellationEvaluationInputComponents() {
    return this._maxTessellationEvaluationInputComponents;
  }
  get maxTessellationEvaluationOutputComponents() {
    return this._maxTessellationEvaluationOutputComponents;
  }
  get maxGeometryShaderInvocations() {
    return this._maxGeometryShaderInvocations;
  }
  get maxGeometryInputComponents() {
    return this._maxGeometryInputComponents;
  }
  get maxGeometryOutputComponents() {
    return this._maxGeometryOutputComponents;
  }
  get maxGeometryOutputVertices() {
    return this._maxGeometryOutputVertices;
  }
  get maxGeometryTotalOutputComponents() {
    return this._maxGeometryTotalOutputComponents;
  }
  get maxFragmentInputComponents() {
    return this._maxFragmentInputComponents;
  }
  get maxFragmentOutputAttachments() {
    return this._maxFragmentOutputAttachments;
  }
  get maxFragmentDualSrcAttachments() {
    return this._maxFragmentDualSrcAttachments;
  }
  get maxFragmentCombinedOutputResources() {
    return this._maxFragmentCombinedOutputResources;
  }
  get maxComputeSharedMemorySize() {
    return this._maxComputeSharedMemorySize;
  }
  get maxComputeWorkGroupCount() {
    return this._maxComputeWorkGroupCount;
  }
  get maxComputeWorkGroupInvocations() {
    return this._maxComputeWorkGroupInvocations;
  }
  get maxComputeWorkGroupSize() {
    return this._maxComputeWorkGroupSize;
  }
  get subPixelPrecisionBits() {
    return this._subPixelPrecisionBits;
  }
  get subTexelPrecisionBits() {
    return this._subTexelPrecisionBits;
  }
  get mipmapPrecisionBits() {
    return this._mipmapPrecisionBits;
  }
  get maxDrawIndexedIndexValue() {
    return this._maxDrawIndexedIndexValue;
  }
  get maxDrawIndirectCount() {
    return this._maxDrawIndirectCount;
  }
  get maxSamplerLodBias() {
    return this._maxSamplerLodBias;
  }
  get maxSamplerAnisotropy() {
    return this._maxSamplerAnisotropy;
  }
  get maxViewports() {
    return this._maxViewports;
  }
  get maxViewportDimensions() {
    return this._maxViewportDimensions;
  }
  get viewportBoundsRange() {
    return this._viewportBoundsRange;
  }
  get viewportSubPixelBits() {
    return this._viewportSubPixelBits;
  }
  get minMemoryMapAlignment() {
    return this._minMemoryMapAlignment;
  }
  get minTexelBufferOffsetAlignment() {
    return this._minTexelBufferOffsetAlignment;
  }
  get minUniformBufferOffsetAlignment() {
    return this._minUniformBufferOffsetAlignment;
  }
  get minStorageBufferOffsetAlignment() {
    return this._minStorageBufferOffsetAlignment;
  }
  get minTexelOffset() {
    return this._minTexelOffset;
  }
  get maxTexelOffset() {
    return this._maxTexelOffset;
  }
  get minTexelGatherOffset() {
    return this._minTexelGatherOffset;
  }
  get maxTexelGatherOffset() {
    return this._maxTexelGatherOffset;
  }
  get minInterpolationOffset() {
    return this._minInterpolationOffset;
  }
  get maxInterpolationOffset() {
    return this._maxInterpolationOffset;
  }
  get subPixelInterpolationOffsetBits() {
    return this._subPixelInterpolationOffsetBits;
  }
  get maxFramebufferWidth() {
    return this._maxFramebufferWidth;
  }
  get maxFramebufferHeight() {
    return this._maxFramebufferHeight;
  }
  get maxFramebufferLayers() {
    return this._maxFramebufferLayers;
  }
  get framebufferColorSampleCounts() {
    return this._framebufferColorSampleCounts;
  }
  get framebufferDepthSampleCounts() {
    return this._framebufferDepthSampleCounts;
  }
  get framebufferStencilSampleCounts() {
    return this._framebufferStencilSampleCounts;
  }
  get framebufferNoAttachmentsSampleCounts() {
    return this._framebufferNoAttachmentsSampleCounts;
  }
  get maxColorAttachments() {
    return this._maxColorAttachments;
  }
  get sampledImageColorSampleCounts() {
    return this._sampledImageColorSampleCounts;
  }
  get sampledImageIntegerSampleCounts() {
    return this._sampledImageIntegerSampleCounts;
  }
  get sampledImageDepthSampleCounts() {
    return this._sampledImageDepthSampleCounts;
  }
  get sampledImageStencilSampleCounts() {
    return this._sampledImageStencilSampleCounts;
  }
  get storageImageSampleCounts() {
    return this._storageImageSampleCounts;
  }
  get maxSampleMaskWords() {
    return this._maxSampleMaskWords;
  }
  get timestampComputeAndGraphics() {
    return this._timestampComputeAndGraphics;
  }
  get timestampPeriod() {
    return this._timestampPeriod;
  }
  get maxClipDistances() {
    return this._maxClipDistances;
  }
  get maxCullDistances() {
    return this._maxCullDistances;
  }
  get maxCombinedClipAndCullDistances() {
    return this._maxCombinedClipAndCullDistances;
  }
  get discreteQueuePriorities() {
    return this._discreteQueuePriorities;
  }
  get pointSizeRange() {
    return this._pointSizeRange;
  }
  get lineWidthRange() {
    return this._lineWidthRange;
  }
  get pointSizeGranularity() {
    return this._pointSizeGranularity;
  }
  get lineWidthGranularity() {
    return this._lineWidthGranularity;
  }
  get strictLines() {
    return this._strictLines;
  }
  get standardSampleLocations() {
    return this._standardSampleLocations;
  }
  get optimalBufferCopyOffsetAlignment() {
    return this._optimalBufferCopyOffsetAlignment;
  }
  get optimalBufferCopyRowPitchAlignment() {
    return this._optimalBufferCopyRowPitchAlignment;
  }
  get nonCoherentAtomSize() {
    return this._nonCoherentAtomSize;
  }
  
};

VkPhysicalDeviceLimits.prototype.flush = function flush() {
  
  if (this.maxComputeWorkGroupCount !== null) { }
  
  if (this.maxComputeWorkGroupSize !== null) { }
  
  if (this.maxViewportDimensions !== null) { }
  
  if (this.viewportBoundsRange !== null) { }
  
  if (this.pointSizeRange !== null) { }
  
  if (this.lineWidthRange !== null) { }
  
};

const $VkPhysicalDeviceLimits = memoryLayouts.VkPhysicalDeviceLimits;
VkPhysicalDeviceLimits.byteLength = $VkPhysicalDeviceLimits.byteLength;

VkPhysicalDeviceLimits.memoryLayout = Object.freeze({
  maxImageDimension1D: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxImageDimension1D.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxImageDimension1D.byteLength
  }),
  maxImageDimension2D: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxImageDimension2D.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxImageDimension2D.byteLength
  }),
  maxImageDimension3D: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxImageDimension3D.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxImageDimension3D.byteLength
  }),
  maxImageDimensionCube: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxImageDimensionCube.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxImageDimensionCube.byteLength
  }),
  maxImageArrayLayers: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxImageArrayLayers.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxImageArrayLayers.byteLength
  }),
  maxTexelBufferElements: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxTexelBufferElements.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxTexelBufferElements.byteLength
  }),
  maxUniformBufferRange: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxUniformBufferRange.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxUniformBufferRange.byteLength
  }),
  maxStorageBufferRange: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxStorageBufferRange.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxStorageBufferRange.byteLength
  }),
  maxPushConstantsSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxPushConstantsSize.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxPushConstantsSize.byteLength
  }),
  maxMemoryAllocationCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxMemoryAllocationCount.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxMemoryAllocationCount.byteLength
  }),
  maxSamplerAllocationCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxSamplerAllocationCount.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxSamplerAllocationCount.byteLength
  }),
  bufferImageGranularity: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.bufferImageGranularity.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.bufferImageGranularity.byteLength
  }),
  sparseAddressSpaceSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.sparseAddressSpaceSize.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.sparseAddressSpaceSize.byteLength
  }),
  maxBoundDescriptorSets: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxBoundDescriptorSets.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxBoundDescriptorSets.byteLength
  }),
  maxPerStageDescriptorSamplers: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxPerStageDescriptorSamplers.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxPerStageDescriptorSamplers.byteLength
  }),
  maxPerStageDescriptorUniformBuffers: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxPerStageDescriptorUniformBuffers.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxPerStageDescriptorUniformBuffers.byteLength
  }),
  maxPerStageDescriptorStorageBuffers: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxPerStageDescriptorStorageBuffers.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxPerStageDescriptorStorageBuffers.byteLength
  }),
  maxPerStageDescriptorSampledImages: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxPerStageDescriptorSampledImages.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxPerStageDescriptorSampledImages.byteLength
  }),
  maxPerStageDescriptorStorageImages: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxPerStageDescriptorStorageImages.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxPerStageDescriptorStorageImages.byteLength
  }),
  maxPerStageDescriptorInputAttachments: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxPerStageDescriptorInputAttachments.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxPerStageDescriptorInputAttachments.byteLength
  }),
  maxPerStageResources: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxPerStageResources.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxPerStageResources.byteLength
  }),
  maxDescriptorSetSamplers: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxDescriptorSetSamplers.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxDescriptorSetSamplers.byteLength
  }),
  maxDescriptorSetUniformBuffers: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxDescriptorSetUniformBuffers.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxDescriptorSetUniformBuffers.byteLength
  }),
  maxDescriptorSetUniformBuffersDynamic: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxDescriptorSetUniformBuffersDynamic.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxDescriptorSetUniformBuffersDynamic.byteLength
  }),
  maxDescriptorSetStorageBuffers: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxDescriptorSetStorageBuffers.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxDescriptorSetStorageBuffers.byteLength
  }),
  maxDescriptorSetStorageBuffersDynamic: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxDescriptorSetStorageBuffersDynamic.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxDescriptorSetStorageBuffersDynamic.byteLength
  }),
  maxDescriptorSetSampledImages: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxDescriptorSetSampledImages.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxDescriptorSetSampledImages.byteLength
  }),
  maxDescriptorSetStorageImages: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxDescriptorSetStorageImages.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxDescriptorSetStorageImages.byteLength
  }),
  maxDescriptorSetInputAttachments: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxDescriptorSetInputAttachments.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxDescriptorSetInputAttachments.byteLength
  }),
  maxVertexInputAttributes: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxVertexInputAttributes.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxVertexInputAttributes.byteLength
  }),
  maxVertexInputBindings: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxVertexInputBindings.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxVertexInputBindings.byteLength
  }),
  maxVertexInputAttributeOffset: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxVertexInputAttributeOffset.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxVertexInputAttributeOffset.byteLength
  }),
  maxVertexInputBindingStride: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxVertexInputBindingStride.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxVertexInputBindingStride.byteLength
  }),
  maxVertexOutputComponents: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxVertexOutputComponents.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxVertexOutputComponents.byteLength
  }),
  maxTessellationGenerationLevel: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxTessellationGenerationLevel.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxTessellationGenerationLevel.byteLength
  }),
  maxTessellationPatchSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxTessellationPatchSize.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxTessellationPatchSize.byteLength
  }),
  maxTessellationControlPerVertexInputComponents: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxTessellationControlPerVertexInputComponents.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxTessellationControlPerVertexInputComponents.byteLength
  }),
  maxTessellationControlPerVertexOutputComponents: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxTessellationControlPerVertexOutputComponents.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxTessellationControlPerVertexOutputComponents.byteLength
  }),
  maxTessellationControlPerPatchOutputComponents: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxTessellationControlPerPatchOutputComponents.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxTessellationControlPerPatchOutputComponents.byteLength
  }),
  maxTessellationControlTotalOutputComponents: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxTessellationControlTotalOutputComponents.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxTessellationControlTotalOutputComponents.byteLength
  }),
  maxTessellationEvaluationInputComponents: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxTessellationEvaluationInputComponents.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxTessellationEvaluationInputComponents.byteLength
  }),
  maxTessellationEvaluationOutputComponents: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxTessellationEvaluationOutputComponents.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxTessellationEvaluationOutputComponents.byteLength
  }),
  maxGeometryShaderInvocations: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxGeometryShaderInvocations.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxGeometryShaderInvocations.byteLength
  }),
  maxGeometryInputComponents: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxGeometryInputComponents.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxGeometryInputComponents.byteLength
  }),
  maxGeometryOutputComponents: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxGeometryOutputComponents.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxGeometryOutputComponents.byteLength
  }),
  maxGeometryOutputVertices: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxGeometryOutputVertices.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxGeometryOutputVertices.byteLength
  }),
  maxGeometryTotalOutputComponents: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxGeometryTotalOutputComponents.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxGeometryTotalOutputComponents.byteLength
  }),
  maxFragmentInputComponents: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxFragmentInputComponents.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxFragmentInputComponents.byteLength
  }),
  maxFragmentOutputAttachments: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxFragmentOutputAttachments.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxFragmentOutputAttachments.byteLength
  }),
  maxFragmentDualSrcAttachments: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxFragmentDualSrcAttachments.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxFragmentDualSrcAttachments.byteLength
  }),
  maxFragmentCombinedOutputResources: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxFragmentCombinedOutputResources.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxFragmentCombinedOutputResources.byteLength
  }),
  maxComputeSharedMemorySize: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxComputeSharedMemorySize.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxComputeSharedMemorySize.byteLength
  }),
  maxComputeWorkGroupCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxComputeWorkGroupCount.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxComputeWorkGroupCount.byteLength
  }),
  maxComputeWorkGroupInvocations: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxComputeWorkGroupInvocations.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxComputeWorkGroupInvocations.byteLength
  }),
  maxComputeWorkGroupSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxComputeWorkGroupSize.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxComputeWorkGroupSize.byteLength
  }),
  subPixelPrecisionBits: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.subPixelPrecisionBits.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.subPixelPrecisionBits.byteLength
  }),
  subTexelPrecisionBits: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.subTexelPrecisionBits.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.subTexelPrecisionBits.byteLength
  }),
  mipmapPrecisionBits: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.mipmapPrecisionBits.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.mipmapPrecisionBits.byteLength
  }),
  maxDrawIndexedIndexValue: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxDrawIndexedIndexValue.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxDrawIndexedIndexValue.byteLength
  }),
  maxDrawIndirectCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxDrawIndirectCount.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxDrawIndirectCount.byteLength
  }),
  maxSamplerLodBias: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxSamplerLodBias.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxSamplerLodBias.byteLength
  }),
  maxSamplerAnisotropy: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxSamplerAnisotropy.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxSamplerAnisotropy.byteLength
  }),
  maxViewports: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxViewports.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxViewports.byteLength
  }),
  maxViewportDimensions: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxViewportDimensions.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxViewportDimensions.byteLength
  }),
  viewportBoundsRange: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.viewportBoundsRange.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.viewportBoundsRange.byteLength
  }),
  viewportSubPixelBits: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.viewportSubPixelBits.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.viewportSubPixelBits.byteLength
  }),
  minMemoryMapAlignment: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.minMemoryMapAlignment.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.minMemoryMapAlignment.byteLength
  }),
  minTexelBufferOffsetAlignment: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.minTexelBufferOffsetAlignment.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.minTexelBufferOffsetAlignment.byteLength
  }),
  minUniformBufferOffsetAlignment: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.minUniformBufferOffsetAlignment.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.minUniformBufferOffsetAlignment.byteLength
  }),
  minStorageBufferOffsetAlignment: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.minStorageBufferOffsetAlignment.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.minStorageBufferOffsetAlignment.byteLength
  }),
  minTexelOffset: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.minTexelOffset.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.minTexelOffset.byteLength
  }),
  maxTexelOffset: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxTexelOffset.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxTexelOffset.byteLength
  }),
  minTexelGatherOffset: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.minTexelGatherOffset.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.minTexelGatherOffset.byteLength
  }),
  maxTexelGatherOffset: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxTexelGatherOffset.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxTexelGatherOffset.byteLength
  }),
  minInterpolationOffset: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.minInterpolationOffset.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.minInterpolationOffset.byteLength
  }),
  maxInterpolationOffset: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxInterpolationOffset.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxInterpolationOffset.byteLength
  }),
  subPixelInterpolationOffsetBits: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.subPixelInterpolationOffsetBits.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.subPixelInterpolationOffsetBits.byteLength
  }),
  maxFramebufferWidth: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxFramebufferWidth.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxFramebufferWidth.byteLength
  }),
  maxFramebufferHeight: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxFramebufferHeight.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxFramebufferHeight.byteLength
  }),
  maxFramebufferLayers: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxFramebufferLayers.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxFramebufferLayers.byteLength
  }),
  framebufferColorSampleCounts: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.framebufferColorSampleCounts.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.framebufferColorSampleCounts.byteLength
  }),
  framebufferDepthSampleCounts: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.framebufferDepthSampleCounts.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.framebufferDepthSampleCounts.byteLength
  }),
  framebufferStencilSampleCounts: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.framebufferStencilSampleCounts.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.framebufferStencilSampleCounts.byteLength
  }),
  framebufferNoAttachmentsSampleCounts: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.framebufferNoAttachmentsSampleCounts.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.framebufferNoAttachmentsSampleCounts.byteLength
  }),
  maxColorAttachments: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxColorAttachments.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxColorAttachments.byteLength
  }),
  sampledImageColorSampleCounts: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.sampledImageColorSampleCounts.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.sampledImageColorSampleCounts.byteLength
  }),
  sampledImageIntegerSampleCounts: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.sampledImageIntegerSampleCounts.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.sampledImageIntegerSampleCounts.byteLength
  }),
  sampledImageDepthSampleCounts: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.sampledImageDepthSampleCounts.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.sampledImageDepthSampleCounts.byteLength
  }),
  sampledImageStencilSampleCounts: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.sampledImageStencilSampleCounts.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.sampledImageStencilSampleCounts.byteLength
  }),
  storageImageSampleCounts: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.storageImageSampleCounts.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.storageImageSampleCounts.byteLength
  }),
  maxSampleMaskWords: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxSampleMaskWords.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxSampleMaskWords.byteLength
  }),
  timestampComputeAndGraphics: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.timestampComputeAndGraphics.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.timestampComputeAndGraphics.byteLength
  }),
  timestampPeriod: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.timestampPeriod.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.timestampPeriod.byteLength
  }),
  maxClipDistances: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxClipDistances.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxClipDistances.byteLength
  }),
  maxCullDistances: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxCullDistances.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxCullDistances.byteLength
  }),
  maxCombinedClipAndCullDistances: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.maxCombinedClipAndCullDistances.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.maxCombinedClipAndCullDistances.byteLength
  }),
  discreteQueuePriorities: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.discreteQueuePriorities.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.discreteQueuePriorities.byteLength
  }),
  pointSizeRange: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.pointSizeRange.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.pointSizeRange.byteLength
  }),
  lineWidthRange: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.lineWidthRange.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.lineWidthRange.byteLength
  }),
  pointSizeGranularity: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.pointSizeGranularity.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.pointSizeGranularity.byteLength
  }),
  lineWidthGranularity: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.lineWidthGranularity.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.lineWidthGranularity.byteLength
  }),
  strictLines: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.strictLines.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.strictLines.byteLength
  }),
  standardSampleLocations: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.standardSampleLocations.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.standardSampleLocations.byteLength
  }),
  optimalBufferCopyOffsetAlignment: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.optimalBufferCopyOffsetAlignment.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.optimalBufferCopyOffsetAlignment.byteLength
  }),
  optimalBufferCopyRowPitchAlignment: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.optimalBufferCopyRowPitchAlignment.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.optimalBufferCopyRowPitchAlignment.byteLength
  }),
  nonCoherentAtomSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceLimits.nonCoherentAtomSize.byteOffset,
    byteLength: $VkPhysicalDeviceLimits.nonCoherentAtomSize.byteLength
  }),
});
class VkSemaphoreCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this.memoryBuffer = new ArrayBuffer(VkSemaphoreCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSemaphoreCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkSemaphoreCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  
};

VkSemaphoreCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSemaphoreCreateInfo = memoryLayouts.VkSemaphoreCreateInfo;
VkSemaphoreCreateInfo.byteLength = $VkSemaphoreCreateInfo.byteLength;

VkSemaphoreCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSemaphoreCreateInfo.sType.byteOffset,
    byteLength: $VkSemaphoreCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSemaphoreCreateInfo.pNext.byteOffset,
    byteLength: $VkSemaphoreCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkSemaphoreCreateInfo.flags.byteOffset,
    byteLength: $VkSemaphoreCreateInfo.flags.byteLength
  }),
});
class VkQueryPoolCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._queryType = 0;
    this._queryCount = 0;
    this._pipelineStatistics = 0;
    this.memoryBuffer = new ArrayBuffer(VkQueryPoolCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queryType !== void 0) this.queryType = opts.queryType;
      if (opts.queryCount !== void 0) this.queryCount = opts.queryCount;
      if (opts.pipelineStatistics !== void 0) this.pipelineStatistics = opts.pipelineStatistics;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkQueryPoolCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkQueryPoolCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get queryType() {
    return this._queryType;
  }
  set queryType(value) {
    
this.memoryView.setInt32($VkQueryPoolCreateInfo.queryType.byteOffset, value);
this._queryType = value;
  }
  get queryCount() {
    return this._queryCount;
  }
  set queryCount(value) {
    
this.memoryView.setUint32($VkQueryPoolCreateInfo.queryCount.byteOffset, value);
this._queryCount = value;
  }
  get pipelineStatistics() {
    return this._pipelineStatistics;
  }
  set pipelineStatistics(value) {
    
this.memoryView.setInt32($VkQueryPoolCreateInfo.pipelineStatistics.byteOffset, value);
this._pipelineStatistics = value;
  }
  
};

VkQueryPoolCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkQueryPoolCreateInfo = memoryLayouts.VkQueryPoolCreateInfo;
VkQueryPoolCreateInfo.byteLength = $VkQueryPoolCreateInfo.byteLength;

VkQueryPoolCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkQueryPoolCreateInfo.sType.byteOffset,
    byteLength: $VkQueryPoolCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkQueryPoolCreateInfo.pNext.byteOffset,
    byteLength: $VkQueryPoolCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkQueryPoolCreateInfo.flags.byteOffset,
    byteLength: $VkQueryPoolCreateInfo.flags.byteLength
  }),
  queryType: Object.freeze({
    byteOffset: $VkQueryPoolCreateInfo.queryType.byteOffset,
    byteLength: $VkQueryPoolCreateInfo.queryType.byteLength
  }),
  queryCount: Object.freeze({
    byteOffset: $VkQueryPoolCreateInfo.queryCount.byteOffset,
    byteLength: $VkQueryPoolCreateInfo.queryCount.byteLength
  }),
  pipelineStatistics: Object.freeze({
    byteOffset: $VkQueryPoolCreateInfo.pipelineStatistics.byteOffset,
    byteLength: $VkQueryPoolCreateInfo.pipelineStatistics.byteLength
  }),
});
class VkFramebufferCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._renderPass = null;
    this._attachmentCount = 0;
    this._pAttachments = null;
    this._width = 0;
    this._height = 0;
    this._layers = 0;
    this.memoryBuffer = new ArrayBuffer(VkFramebufferCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.renderPass !== void 0) this.renderPass = opts.renderPass;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.width !== void 0) this.width = opts.width;
      if (opts.height !== void 0) this.height = opts.height;
      if (opts.layers !== void 0) this.layers = opts.layers;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkFramebufferCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkFramebufferCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get renderPass() {
    return this._renderPass;
  }
  set renderPass(value) {
    String
  }
  get attachmentCount() {
    return this._attachmentCount;
  }
  set attachmentCount(value) {
    
this.memoryView.setUint32($VkFramebufferCreateInfo.attachmentCount.byteOffset, value);
this._attachmentCount = value;
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    
  }
  get width() {
    return this._width;
  }
  set width(value) {
    
this.memoryView.setUint32($VkFramebufferCreateInfo.width.byteOffset, value);
this._width = value;
  }
  get height() {
    return this._height;
  }
  set height(value) {
    
this.memoryView.setUint32($VkFramebufferCreateInfo.height.byteOffset, value);
this._height = value;
  }
  get layers() {
    return this._layers;
  }
  set layers(value) {
    
this.memoryView.setUint32($VkFramebufferCreateInfo.layers.byteOffset, value);
this._layers = value;
  }
  
};

VkFramebufferCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pAttachments !== null) { }
  
};

const $VkFramebufferCreateInfo = memoryLayouts.VkFramebufferCreateInfo;
VkFramebufferCreateInfo.byteLength = $VkFramebufferCreateInfo.byteLength;

VkFramebufferCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkFramebufferCreateInfo.sType.byteOffset,
    byteLength: $VkFramebufferCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkFramebufferCreateInfo.pNext.byteOffset,
    byteLength: $VkFramebufferCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkFramebufferCreateInfo.flags.byteOffset,
    byteLength: $VkFramebufferCreateInfo.flags.byteLength
  }),
  renderPass: Object.freeze({
    byteOffset: $VkFramebufferCreateInfo.renderPass.byteOffset,
    byteLength: $VkFramebufferCreateInfo.renderPass.byteLength
  }),
  attachmentCount: Object.freeze({
    byteOffset: $VkFramebufferCreateInfo.attachmentCount.byteOffset,
    byteLength: $VkFramebufferCreateInfo.attachmentCount.byteLength
  }),
  pAttachments: Object.freeze({
    byteOffset: $VkFramebufferCreateInfo.pAttachments.byteOffset,
    byteLength: $VkFramebufferCreateInfo.pAttachments.byteLength
  }),
  width: Object.freeze({
    byteOffset: $VkFramebufferCreateInfo.width.byteOffset,
    byteLength: $VkFramebufferCreateInfo.width.byteLength
  }),
  height: Object.freeze({
    byteOffset: $VkFramebufferCreateInfo.height.byteOffset,
    byteLength: $VkFramebufferCreateInfo.height.byteLength
  }),
  layers: Object.freeze({
    byteOffset: $VkFramebufferCreateInfo.layers.byteOffset,
    byteLength: $VkFramebufferCreateInfo.layers.byteLength
  }),
});
class VkDrawIndirectCommand {
  constructor(opts) {
    this._vertexCount = 0;
    this._instanceCount = 0;
    this._firstVertex = 0;
    this._firstInstance = 0;
    this.memoryBuffer = new ArrayBuffer(VkDrawIndirectCommand.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.vertexCount !== void 0) this.vertexCount = opts.vertexCount;
      if (opts.instanceCount !== void 0) this.instanceCount = opts.instanceCount;
      if (opts.firstVertex !== void 0) this.firstVertex = opts.firstVertex;
      if (opts.firstInstance !== void 0) this.firstInstance = opts.firstInstance;
      
    }
  }
  get vertexCount() {
    return this._vertexCount;
  }
  set vertexCount(value) {
    
this.memoryView.setUint32($VkDrawIndirectCommand.vertexCount.byteOffset, value);
this._vertexCount = value;
  }
  get instanceCount() {
    return this._instanceCount;
  }
  set instanceCount(value) {
    
this.memoryView.setUint32($VkDrawIndirectCommand.instanceCount.byteOffset, value);
this._instanceCount = value;
  }
  get firstVertex() {
    return this._firstVertex;
  }
  set firstVertex(value) {
    
this.memoryView.setUint32($VkDrawIndirectCommand.firstVertex.byteOffset, value);
this._firstVertex = value;
  }
  get firstInstance() {
    return this._firstInstance;
  }
  set firstInstance(value) {
    
this.memoryView.setUint32($VkDrawIndirectCommand.firstInstance.byteOffset, value);
this._firstInstance = value;
  }
  
};

VkDrawIndirectCommand.prototype.flush = function flush() {
  
};

const $VkDrawIndirectCommand = memoryLayouts.VkDrawIndirectCommand;
VkDrawIndirectCommand.byteLength = $VkDrawIndirectCommand.byteLength;

VkDrawIndirectCommand.memoryLayout = Object.freeze({
  vertexCount: Object.freeze({
    byteOffset: $VkDrawIndirectCommand.vertexCount.byteOffset,
    byteLength: $VkDrawIndirectCommand.vertexCount.byteLength
  }),
  instanceCount: Object.freeze({
    byteOffset: $VkDrawIndirectCommand.instanceCount.byteOffset,
    byteLength: $VkDrawIndirectCommand.instanceCount.byteLength
  }),
  firstVertex: Object.freeze({
    byteOffset: $VkDrawIndirectCommand.firstVertex.byteOffset,
    byteLength: $VkDrawIndirectCommand.firstVertex.byteLength
  }),
  firstInstance: Object.freeze({
    byteOffset: $VkDrawIndirectCommand.firstInstance.byteOffset,
    byteLength: $VkDrawIndirectCommand.firstInstance.byteLength
  }),
});
class VkDrawIndexedIndirectCommand {
  constructor(opts) {
    this._indexCount = 0;
    this._instanceCount = 0;
    this._firstIndex = 0;
    this._vertexOffset = 0;
    this._firstInstance = 0;
    this.memoryBuffer = new ArrayBuffer(VkDrawIndexedIndirectCommand.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.indexCount !== void 0) this.indexCount = opts.indexCount;
      if (opts.instanceCount !== void 0) this.instanceCount = opts.instanceCount;
      if (opts.firstIndex !== void 0) this.firstIndex = opts.firstIndex;
      if (opts.vertexOffset !== void 0) this.vertexOffset = opts.vertexOffset;
      if (opts.firstInstance !== void 0) this.firstInstance = opts.firstInstance;
      
    }
  }
  get indexCount() {
    return this._indexCount;
  }
  set indexCount(value) {
    
this.memoryView.setUint32($VkDrawIndexedIndirectCommand.indexCount.byteOffset, value);
this._indexCount = value;
  }
  get instanceCount() {
    return this._instanceCount;
  }
  set instanceCount(value) {
    
this.memoryView.setUint32($VkDrawIndexedIndirectCommand.instanceCount.byteOffset, value);
this._instanceCount = value;
  }
  get firstIndex() {
    return this._firstIndex;
  }
  set firstIndex(value) {
    
this.memoryView.setUint32($VkDrawIndexedIndirectCommand.firstIndex.byteOffset, value);
this._firstIndex = value;
  }
  get vertexOffset() {
    return this._vertexOffset;
  }
  set vertexOffset(value) {
    
this.memoryView.setInt32($VkDrawIndexedIndirectCommand.vertexOffset.byteOffset, value);
this._vertexOffset = value;
  }
  get firstInstance() {
    return this._firstInstance;
  }
  set firstInstance(value) {
    
this.memoryView.setUint32($VkDrawIndexedIndirectCommand.firstInstance.byteOffset, value);
this._firstInstance = value;
  }
  
};

VkDrawIndexedIndirectCommand.prototype.flush = function flush() {
  
};

const $VkDrawIndexedIndirectCommand = memoryLayouts.VkDrawIndexedIndirectCommand;
VkDrawIndexedIndirectCommand.byteLength = $VkDrawIndexedIndirectCommand.byteLength;

VkDrawIndexedIndirectCommand.memoryLayout = Object.freeze({
  indexCount: Object.freeze({
    byteOffset: $VkDrawIndexedIndirectCommand.indexCount.byteOffset,
    byteLength: $VkDrawIndexedIndirectCommand.indexCount.byteLength
  }),
  instanceCount: Object.freeze({
    byteOffset: $VkDrawIndexedIndirectCommand.instanceCount.byteOffset,
    byteLength: $VkDrawIndexedIndirectCommand.instanceCount.byteLength
  }),
  firstIndex: Object.freeze({
    byteOffset: $VkDrawIndexedIndirectCommand.firstIndex.byteOffset,
    byteLength: $VkDrawIndexedIndirectCommand.firstIndex.byteLength
  }),
  vertexOffset: Object.freeze({
    byteOffset: $VkDrawIndexedIndirectCommand.vertexOffset.byteOffset,
    byteLength: $VkDrawIndexedIndirectCommand.vertexOffset.byteLength
  }),
  firstInstance: Object.freeze({
    byteOffset: $VkDrawIndexedIndirectCommand.firstInstance.byteOffset,
    byteLength: $VkDrawIndexedIndirectCommand.firstInstance.byteLength
  }),
});
class VkDispatchIndirectCommand {
  constructor(opts) {
    this._x = 0;
    this._y = 0;
    this._z = 0;
    this.memoryBuffer = new ArrayBuffer(VkDispatchIndirectCommand.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.z !== void 0) this.z = opts.z;
      
    }
  }
  get x() {
    return this._x;
  }
  set x(value) {
    
this.memoryView.setUint32($VkDispatchIndirectCommand.x.byteOffset, value);
this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    
this.memoryView.setUint32($VkDispatchIndirectCommand.y.byteOffset, value);
this._y = value;
  }
  get z() {
    return this._z;
  }
  set z(value) {
    
this.memoryView.setUint32($VkDispatchIndirectCommand.z.byteOffset, value);
this._z = value;
  }
  
};

VkDispatchIndirectCommand.prototype.flush = function flush() {
  
};

const $VkDispatchIndirectCommand = memoryLayouts.VkDispatchIndirectCommand;
VkDispatchIndirectCommand.byteLength = $VkDispatchIndirectCommand.byteLength;

VkDispatchIndirectCommand.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: $VkDispatchIndirectCommand.x.byteOffset,
    byteLength: $VkDispatchIndirectCommand.x.byteLength
  }),
  y: Object.freeze({
    byteOffset: $VkDispatchIndirectCommand.y.byteOffset,
    byteLength: $VkDispatchIndirectCommand.y.byteLength
  }),
  z: Object.freeze({
    byteOffset: $VkDispatchIndirectCommand.z.byteOffset,
    byteLength: $VkDispatchIndirectCommand.z.byteLength
  }),
});
class VkSubmitInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._waitSemaphoreCount = 0;
    this._pWaitSemaphores = null;
    this._pWaitDstStageMask = null;
    this._commandBufferCount = 0;
    this._pCommandBuffers = null;
    this._signalSemaphoreCount = 0;
    this._pSignalSemaphores = null;
    this.memoryBuffer = new ArrayBuffer(VkSubmitInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphores !== void 0) this.pWaitSemaphores = opts.pWaitSemaphores;
      if (opts.pWaitDstStageMask !== void 0) this.pWaitDstStageMask = opts.pWaitDstStageMask;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      if (opts.pCommandBuffers !== void 0) this.pCommandBuffers = opts.pCommandBuffers;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphores !== void 0) this.pSignalSemaphores = opts.pSignalSemaphores;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSubmitInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get waitSemaphoreCount() {
    return this._waitSemaphoreCount;
  }
  set waitSemaphoreCount(value) {
    
this.memoryView.setUint32($VkSubmitInfo.waitSemaphoreCount.byteOffset, value);
this._waitSemaphoreCount = value;
  }
  get pWaitSemaphores() {
    return this._pWaitSemaphores;
  }
  set pWaitSemaphores(value) {
    
  }
  get pWaitDstStageMask() {
    return this._pWaitDstStageMask;
  }
  set pWaitDstStageMask(value) {
    
  }
  get commandBufferCount() {
    return this._commandBufferCount;
  }
  set commandBufferCount(value) {
    
this.memoryView.setUint32($VkSubmitInfo.commandBufferCount.byteOffset, value);
this._commandBufferCount = value;
  }
  get pCommandBuffers() {
    return this._pCommandBuffers;
  }
  set pCommandBuffers(value) {
    
  }
  get signalSemaphoreCount() {
    return this._signalSemaphoreCount;
  }
  set signalSemaphoreCount(value) {
    
this.memoryView.setUint32($VkSubmitInfo.signalSemaphoreCount.byteOffset, value);
this._signalSemaphoreCount = value;
  }
  get pSignalSemaphores() {
    return this._pSignalSemaphores;
  }
  set pSignalSemaphores(value) {
    
  }
  
};

VkSubmitInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pWaitSemaphores !== null) { }
  
  if (this.pCommandBuffers !== null) { }
  
  if (this.pSignalSemaphores !== null) { }
  
};

const $VkSubmitInfo = memoryLayouts.VkSubmitInfo;
VkSubmitInfo.byteLength = $VkSubmitInfo.byteLength;

VkSubmitInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSubmitInfo.sType.byteOffset,
    byteLength: $VkSubmitInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSubmitInfo.pNext.byteOffset,
    byteLength: $VkSubmitInfo.pNext.byteLength
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: $VkSubmitInfo.waitSemaphoreCount.byteOffset,
    byteLength: $VkSubmitInfo.waitSemaphoreCount.byteLength
  }),
  pWaitSemaphores: Object.freeze({
    byteOffset: $VkSubmitInfo.pWaitSemaphores.byteOffset,
    byteLength: $VkSubmitInfo.pWaitSemaphores.byteLength
  }),
  pWaitDstStageMask: Object.freeze({
    byteOffset: $VkSubmitInfo.pWaitDstStageMask.byteOffset,
    byteLength: $VkSubmitInfo.pWaitDstStageMask.byteLength
  }),
  commandBufferCount: Object.freeze({
    byteOffset: $VkSubmitInfo.commandBufferCount.byteOffset,
    byteLength: $VkSubmitInfo.commandBufferCount.byteLength
  }),
  pCommandBuffers: Object.freeze({
    byteOffset: $VkSubmitInfo.pCommandBuffers.byteOffset,
    byteLength: $VkSubmitInfo.pCommandBuffers.byteLength
  }),
  signalSemaphoreCount: Object.freeze({
    byteOffset: $VkSubmitInfo.signalSemaphoreCount.byteOffset,
    byteLength: $VkSubmitInfo.signalSemaphoreCount.byteLength
  }),
  pSignalSemaphores: Object.freeze({
    byteOffset: $VkSubmitInfo.pSignalSemaphores.byteOffset,
    byteLength: $VkSubmitInfo.pSignalSemaphores.byteLength
  }),
});
class VkDisplayPropertiesKHR {
  constructor(opts) {
    this._display = null;
    this._displayName = null;
    this._physicalDimensions = null;
    this._physicalResolution = null;
    this._supportedTransforms = 0;
    this._planeReorderPossible = 0;
    this._persistentContent = 0;
    this.memoryBuffer = new ArrayBuffer(VkDisplayPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get display() {
    return this._display;
  }
  get displayName() {
    return this._displayName;
  }
  get physicalDimensions() {
    return this._physicalDimensions;
  }
  get physicalResolution() {
    return this._physicalResolution;
  }
  get supportedTransforms() {
    return this._supportedTransforms;
  }
  get planeReorderPossible() {
    return this._planeReorderPossible;
  }
  get persistentContent() {
    return this._persistentContent;
  }
  
};

VkDisplayPropertiesKHR.prototype.flush = function flush() {
  
  if (this.physicalDimensions !== null) { }
  
  if (this.physicalResolution !== null) { }
  
};

const $VkDisplayPropertiesKHR = memoryLayouts.VkDisplayPropertiesKHR;
VkDisplayPropertiesKHR.byteLength = $VkDisplayPropertiesKHR.byteLength;

VkDisplayPropertiesKHR.memoryLayout = Object.freeze({
  display: Object.freeze({
    byteOffset: $VkDisplayPropertiesKHR.display.byteOffset,
    byteLength: $VkDisplayPropertiesKHR.display.byteLength
  }),
  displayName: Object.freeze({
    byteOffset: $VkDisplayPropertiesKHR.displayName.byteOffset,
    byteLength: $VkDisplayPropertiesKHR.displayName.byteLength
  }),
  physicalDimensions: Object.freeze({
    byteOffset: $VkDisplayPropertiesKHR.physicalDimensions.byteOffset,
    byteLength: $VkDisplayPropertiesKHR.physicalDimensions.byteLength
  }),
  physicalResolution: Object.freeze({
    byteOffset: $VkDisplayPropertiesKHR.physicalResolution.byteOffset,
    byteLength: $VkDisplayPropertiesKHR.physicalResolution.byteLength
  }),
  supportedTransforms: Object.freeze({
    byteOffset: $VkDisplayPropertiesKHR.supportedTransforms.byteOffset,
    byteLength: $VkDisplayPropertiesKHR.supportedTransforms.byteLength
  }),
  planeReorderPossible: Object.freeze({
    byteOffset: $VkDisplayPropertiesKHR.planeReorderPossible.byteOffset,
    byteLength: $VkDisplayPropertiesKHR.planeReorderPossible.byteLength
  }),
  persistentContent: Object.freeze({
    byteOffset: $VkDisplayPropertiesKHR.persistentContent.byteOffset,
    byteLength: $VkDisplayPropertiesKHR.persistentContent.byteLength
  }),
});
class VkDisplayPlanePropertiesKHR {
  constructor(opts) {
    this._currentDisplay = null;
    this._currentStackIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkDisplayPlanePropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get currentDisplay() {
    return this._currentDisplay;
  }
  get currentStackIndex() {
    return this._currentStackIndex;
  }
  
};

VkDisplayPlanePropertiesKHR.prototype.flush = function flush() {
  
};

const $VkDisplayPlanePropertiesKHR = memoryLayouts.VkDisplayPlanePropertiesKHR;
VkDisplayPlanePropertiesKHR.byteLength = $VkDisplayPlanePropertiesKHR.byteLength;

VkDisplayPlanePropertiesKHR.memoryLayout = Object.freeze({
  currentDisplay: Object.freeze({
    byteOffset: $VkDisplayPlanePropertiesKHR.currentDisplay.byteOffset,
    byteLength: $VkDisplayPlanePropertiesKHR.currentDisplay.byteLength
  }),
  currentStackIndex: Object.freeze({
    byteOffset: $VkDisplayPlanePropertiesKHR.currentStackIndex.byteOffset,
    byteLength: $VkDisplayPlanePropertiesKHR.currentStackIndex.byteLength
  }),
});
class VkDisplayModeParametersKHR {
  constructor(opts) {
    this._visibleRegion = null;
    this._refreshRate = 0;
    this.memoryBuffer = new ArrayBuffer(VkDisplayModeParametersKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.visibleRegion !== void 0) this.visibleRegion = opts.visibleRegion;
      if (opts.refreshRate !== void 0) this.refreshRate = opts.refreshRate;
      
    }
  }
  get visibleRegion() {
    return this._visibleRegion;
  }
  set visibleRegion(value) {
    String
  }
  get refreshRate() {
    return this._refreshRate;
  }
  set refreshRate(value) {
    
this.memoryView.setUint32($VkDisplayModeParametersKHR.refreshRate.byteOffset, value);
this._refreshRate = value;
  }
  
};

VkDisplayModeParametersKHR.prototype.flush = function flush() {
  
  if (this.visibleRegion !== null) { }
  
};

const $VkDisplayModeParametersKHR = memoryLayouts.VkDisplayModeParametersKHR;
VkDisplayModeParametersKHR.byteLength = $VkDisplayModeParametersKHR.byteLength;

VkDisplayModeParametersKHR.memoryLayout = Object.freeze({
  visibleRegion: Object.freeze({
    byteOffset: $VkDisplayModeParametersKHR.visibleRegion.byteOffset,
    byteLength: $VkDisplayModeParametersKHR.visibleRegion.byteLength
  }),
  refreshRate: Object.freeze({
    byteOffset: $VkDisplayModeParametersKHR.refreshRate.byteOffset,
    byteLength: $VkDisplayModeParametersKHR.refreshRate.byteLength
  }),
});
class VkDisplayModePropertiesKHR {
  constructor(opts) {
    this._displayMode = null;
    this._parameters = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayModePropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get displayMode() {
    return this._displayMode;
  }
  get parameters() {
    return this._parameters;
  }
  
};

VkDisplayModePropertiesKHR.prototype.flush = function flush() {
  
  if (this.parameters !== null) { }
  
};

const $VkDisplayModePropertiesKHR = memoryLayouts.VkDisplayModePropertiesKHR;
VkDisplayModePropertiesKHR.byteLength = $VkDisplayModePropertiesKHR.byteLength;

VkDisplayModePropertiesKHR.memoryLayout = Object.freeze({
  displayMode: Object.freeze({
    byteOffset: $VkDisplayModePropertiesKHR.displayMode.byteOffset,
    byteLength: $VkDisplayModePropertiesKHR.displayMode.byteLength
  }),
  parameters: Object.freeze({
    byteOffset: $VkDisplayModePropertiesKHR.parameters.byteOffset,
    byteLength: $VkDisplayModePropertiesKHR.parameters.byteLength
  }),
});
class VkDisplayModeCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._parameters = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayModeCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.parameters !== void 0) this.parameters = opts.parameters;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDisplayModeCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkDisplayModeCreateInfoKHR.flags.byteOffset, value);
this._flags = value;
  }
  get parameters() {
    return this._parameters;
  }
  set parameters(value) {
    String
  }
  
};

VkDisplayModeCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.parameters !== null) { }
  
};

const $VkDisplayModeCreateInfoKHR = memoryLayouts.VkDisplayModeCreateInfoKHR;
VkDisplayModeCreateInfoKHR.byteLength = $VkDisplayModeCreateInfoKHR.byteLength;

VkDisplayModeCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDisplayModeCreateInfoKHR.sType.byteOffset,
    byteLength: $VkDisplayModeCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDisplayModeCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkDisplayModeCreateInfoKHR.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkDisplayModeCreateInfoKHR.flags.byteOffset,
    byteLength: $VkDisplayModeCreateInfoKHR.flags.byteLength
  }),
  parameters: Object.freeze({
    byteOffset: $VkDisplayModeCreateInfoKHR.parameters.byteOffset,
    byteLength: $VkDisplayModeCreateInfoKHR.parameters.byteLength
  }),
});
class VkDisplayPlaneCapabilitiesKHR {
  constructor(opts) {
    this._supportedAlpha = 0;
    this._minSrcPosition = null;
    this._maxSrcPosition = null;
    this._minSrcExtent = null;
    this._maxSrcExtent = null;
    this._minDstPosition = null;
    this._maxDstPosition = null;
    this._minDstExtent = null;
    this._maxDstExtent = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayPlaneCapabilitiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get supportedAlpha() {
    return this._supportedAlpha;
  }
  get minSrcPosition() {
    return this._minSrcPosition;
  }
  get maxSrcPosition() {
    return this._maxSrcPosition;
  }
  get minSrcExtent() {
    return this._minSrcExtent;
  }
  get maxSrcExtent() {
    return this._maxSrcExtent;
  }
  get minDstPosition() {
    return this._minDstPosition;
  }
  get maxDstPosition() {
    return this._maxDstPosition;
  }
  get minDstExtent() {
    return this._minDstExtent;
  }
  get maxDstExtent() {
    return this._maxDstExtent;
  }
  
};

VkDisplayPlaneCapabilitiesKHR.prototype.flush = function flush() {
  
  if (this.minSrcPosition !== null) { }
  
  if (this.maxSrcPosition !== null) { }
  
  if (this.minSrcExtent !== null) { }
  
  if (this.maxSrcExtent !== null) { }
  
  if (this.minDstPosition !== null) { }
  
  if (this.maxDstPosition !== null) { }
  
  if (this.minDstExtent !== null) { }
  
  if (this.maxDstExtent !== null) { }
  
};

const $VkDisplayPlaneCapabilitiesKHR = memoryLayouts.VkDisplayPlaneCapabilitiesKHR;
VkDisplayPlaneCapabilitiesKHR.byteLength = $VkDisplayPlaneCapabilitiesKHR.byteLength;

VkDisplayPlaneCapabilitiesKHR.memoryLayout = Object.freeze({
  supportedAlpha: Object.freeze({
    byteOffset: $VkDisplayPlaneCapabilitiesKHR.supportedAlpha.byteOffset,
    byteLength: $VkDisplayPlaneCapabilitiesKHR.supportedAlpha.byteLength
  }),
  minSrcPosition: Object.freeze({
    byteOffset: $VkDisplayPlaneCapabilitiesKHR.minSrcPosition.byteOffset,
    byteLength: $VkDisplayPlaneCapabilitiesKHR.minSrcPosition.byteLength
  }),
  maxSrcPosition: Object.freeze({
    byteOffset: $VkDisplayPlaneCapabilitiesKHR.maxSrcPosition.byteOffset,
    byteLength: $VkDisplayPlaneCapabilitiesKHR.maxSrcPosition.byteLength
  }),
  minSrcExtent: Object.freeze({
    byteOffset: $VkDisplayPlaneCapabilitiesKHR.minSrcExtent.byteOffset,
    byteLength: $VkDisplayPlaneCapabilitiesKHR.minSrcExtent.byteLength
  }),
  maxSrcExtent: Object.freeze({
    byteOffset: $VkDisplayPlaneCapabilitiesKHR.maxSrcExtent.byteOffset,
    byteLength: $VkDisplayPlaneCapabilitiesKHR.maxSrcExtent.byteLength
  }),
  minDstPosition: Object.freeze({
    byteOffset: $VkDisplayPlaneCapabilitiesKHR.minDstPosition.byteOffset,
    byteLength: $VkDisplayPlaneCapabilitiesKHR.minDstPosition.byteLength
  }),
  maxDstPosition: Object.freeze({
    byteOffset: $VkDisplayPlaneCapabilitiesKHR.maxDstPosition.byteOffset,
    byteLength: $VkDisplayPlaneCapabilitiesKHR.maxDstPosition.byteLength
  }),
  minDstExtent: Object.freeze({
    byteOffset: $VkDisplayPlaneCapabilitiesKHR.minDstExtent.byteOffset,
    byteLength: $VkDisplayPlaneCapabilitiesKHR.minDstExtent.byteLength
  }),
  maxDstExtent: Object.freeze({
    byteOffset: $VkDisplayPlaneCapabilitiesKHR.maxDstExtent.byteOffset,
    byteLength: $VkDisplayPlaneCapabilitiesKHR.maxDstExtent.byteLength
  }),
});
class VkDisplaySurfaceCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._displayMode = null;
    this._planeIndex = 0;
    this._planeStackIndex = 0;
    this._transform = 0;
    this._globalAlpha = 0;
    this._alphaMode = 0;
    this._imageExtent = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplaySurfaceCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.displayMode !== void 0) this.displayMode = opts.displayMode;
      if (opts.planeIndex !== void 0) this.planeIndex = opts.planeIndex;
      if (opts.planeStackIndex !== void 0) this.planeStackIndex = opts.planeStackIndex;
      if (opts.transform !== void 0) this.transform = opts.transform;
      if (opts.globalAlpha !== void 0) this.globalAlpha = opts.globalAlpha;
      if (opts.alphaMode !== void 0) this.alphaMode = opts.alphaMode;
      if (opts.imageExtent !== void 0) this.imageExtent = opts.imageExtent;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDisplaySurfaceCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkDisplaySurfaceCreateInfoKHR.flags.byteOffset, value);
this._flags = value;
  }
  get displayMode() {
    return this._displayMode;
  }
  set displayMode(value) {
    String
  }
  get planeIndex() {
    return this._planeIndex;
  }
  set planeIndex(value) {
    
this.memoryView.setUint32($VkDisplaySurfaceCreateInfoKHR.planeIndex.byteOffset, value);
this._planeIndex = value;
  }
  get planeStackIndex() {
    return this._planeStackIndex;
  }
  set planeStackIndex(value) {
    
this.memoryView.setUint32($VkDisplaySurfaceCreateInfoKHR.planeStackIndex.byteOffset, value);
this._planeStackIndex = value;
  }
  get transform() {
    return this._transform;
  }
  set transform(value) {
    
this.memoryView.setInt32($VkDisplaySurfaceCreateInfoKHR.transform.byteOffset, value);
this._transform = value;
  }
  get globalAlpha() {
    return this._globalAlpha;
  }
  set globalAlpha(value) {
    
this.memoryView.setFloat32($VkDisplaySurfaceCreateInfoKHR.globalAlpha.byteOffset, value);
this._globalAlpha = value;
  }
  get alphaMode() {
    return this._alphaMode;
  }
  set alphaMode(value) {
    
this.memoryView.setInt32($VkDisplaySurfaceCreateInfoKHR.alphaMode.byteOffset, value);
this._alphaMode = value;
  }
  get imageExtent() {
    return this._imageExtent;
  }
  set imageExtent(value) {
    String
  }
  
};

VkDisplaySurfaceCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.imageExtent !== null) { }
  
};

const $VkDisplaySurfaceCreateInfoKHR = memoryLayouts.VkDisplaySurfaceCreateInfoKHR;
VkDisplaySurfaceCreateInfoKHR.byteLength = $VkDisplaySurfaceCreateInfoKHR.byteLength;

VkDisplaySurfaceCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDisplaySurfaceCreateInfoKHR.sType.byteOffset,
    byteLength: $VkDisplaySurfaceCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDisplaySurfaceCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkDisplaySurfaceCreateInfoKHR.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkDisplaySurfaceCreateInfoKHR.flags.byteOffset,
    byteLength: $VkDisplaySurfaceCreateInfoKHR.flags.byteLength
  }),
  displayMode: Object.freeze({
    byteOffset: $VkDisplaySurfaceCreateInfoKHR.displayMode.byteOffset,
    byteLength: $VkDisplaySurfaceCreateInfoKHR.displayMode.byteLength
  }),
  planeIndex: Object.freeze({
    byteOffset: $VkDisplaySurfaceCreateInfoKHR.planeIndex.byteOffset,
    byteLength: $VkDisplaySurfaceCreateInfoKHR.planeIndex.byteLength
  }),
  planeStackIndex: Object.freeze({
    byteOffset: $VkDisplaySurfaceCreateInfoKHR.planeStackIndex.byteOffset,
    byteLength: $VkDisplaySurfaceCreateInfoKHR.planeStackIndex.byteLength
  }),
  transform: Object.freeze({
    byteOffset: $VkDisplaySurfaceCreateInfoKHR.transform.byteOffset,
    byteLength: $VkDisplaySurfaceCreateInfoKHR.transform.byteLength
  }),
  globalAlpha: Object.freeze({
    byteOffset: $VkDisplaySurfaceCreateInfoKHR.globalAlpha.byteOffset,
    byteLength: $VkDisplaySurfaceCreateInfoKHR.globalAlpha.byteLength
  }),
  alphaMode: Object.freeze({
    byteOffset: $VkDisplaySurfaceCreateInfoKHR.alphaMode.byteOffset,
    byteLength: $VkDisplaySurfaceCreateInfoKHR.alphaMode.byteLength
  }),
  imageExtent: Object.freeze({
    byteOffset: $VkDisplaySurfaceCreateInfoKHR.imageExtent.byteOffset,
    byteLength: $VkDisplaySurfaceCreateInfoKHR.imageExtent.byteLength
  }),
});
class VkDisplayPresentInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._srcRect = null;
    this._dstRect = null;
    this._persistent = 0;
    this.memoryBuffer = new ArrayBuffer(VkDisplayPresentInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcRect !== void 0) this.srcRect = opts.srcRect;
      if (opts.dstRect !== void 0) this.dstRect = opts.dstRect;
      if (opts.persistent !== void 0) this.persistent = opts.persistent;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDisplayPresentInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get srcRect() {
    return this._srcRect;
  }
  set srcRect(value) {
    String
  }
  get dstRect() {
    return this._dstRect;
  }
  set dstRect(value) {
    String
  }
  get persistent() {
    return this._persistent;
  }
  set persistent(value) {
    
this.memoryView.setUint32($VkDisplayPresentInfoKHR.persistent.byteOffset, value);
this._persistent = value;
  }
  
};

VkDisplayPresentInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.srcRect !== null) { }
  
  if (this.dstRect !== null) { }
  
};

const $VkDisplayPresentInfoKHR = memoryLayouts.VkDisplayPresentInfoKHR;
VkDisplayPresentInfoKHR.byteLength = $VkDisplayPresentInfoKHR.byteLength;

VkDisplayPresentInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDisplayPresentInfoKHR.sType.byteOffset,
    byteLength: $VkDisplayPresentInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDisplayPresentInfoKHR.pNext.byteOffset,
    byteLength: $VkDisplayPresentInfoKHR.pNext.byteLength
  }),
  srcRect: Object.freeze({
    byteOffset: $VkDisplayPresentInfoKHR.srcRect.byteOffset,
    byteLength: $VkDisplayPresentInfoKHR.srcRect.byteLength
  }),
  dstRect: Object.freeze({
    byteOffset: $VkDisplayPresentInfoKHR.dstRect.byteOffset,
    byteLength: $VkDisplayPresentInfoKHR.dstRect.byteLength
  }),
  persistent: Object.freeze({
    byteOffset: $VkDisplayPresentInfoKHR.persistent.byteOffset,
    byteLength: $VkDisplayPresentInfoKHR.persistent.byteLength
  }),
});
class VkSurfaceCapabilitiesKHR {
  constructor(opts) {
    this._minImageCount = 0;
    this._maxImageCount = 0;
    this._currentExtent = null;
    this._minImageExtent = null;
    this._maxImageExtent = null;
    this._maxImageArrayLayers = 0;
    this._supportedTransforms = 0;
    this._currentTransform = 0;
    this._supportedCompositeAlpha = 0;
    this._supportedUsageFlags = 0;
    this.memoryBuffer = new ArrayBuffer(VkSurfaceCapabilitiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get minImageCount() {
    return this._minImageCount;
  }
  get maxImageCount() {
    return this._maxImageCount;
  }
  get currentExtent() {
    return this._currentExtent;
  }
  get minImageExtent() {
    return this._minImageExtent;
  }
  get maxImageExtent() {
    return this._maxImageExtent;
  }
  get maxImageArrayLayers() {
    return this._maxImageArrayLayers;
  }
  get supportedTransforms() {
    return this._supportedTransforms;
  }
  get currentTransform() {
    return this._currentTransform;
  }
  get supportedCompositeAlpha() {
    return this._supportedCompositeAlpha;
  }
  get supportedUsageFlags() {
    return this._supportedUsageFlags;
  }
  
};

VkSurfaceCapabilitiesKHR.prototype.flush = function flush() {
  
  if (this.currentExtent !== null) { }
  
  if (this.minImageExtent !== null) { }
  
  if (this.maxImageExtent !== null) { }
  
};

const $VkSurfaceCapabilitiesKHR = memoryLayouts.VkSurfaceCapabilitiesKHR;
VkSurfaceCapabilitiesKHR.byteLength = $VkSurfaceCapabilitiesKHR.byteLength;

VkSurfaceCapabilitiesKHR.memoryLayout = Object.freeze({
  minImageCount: Object.freeze({
    byteOffset: $VkSurfaceCapabilitiesKHR.minImageCount.byteOffset,
    byteLength: $VkSurfaceCapabilitiesKHR.minImageCount.byteLength
  }),
  maxImageCount: Object.freeze({
    byteOffset: $VkSurfaceCapabilitiesKHR.maxImageCount.byteOffset,
    byteLength: $VkSurfaceCapabilitiesKHR.maxImageCount.byteLength
  }),
  currentExtent: Object.freeze({
    byteOffset: $VkSurfaceCapabilitiesKHR.currentExtent.byteOffset,
    byteLength: $VkSurfaceCapabilitiesKHR.currentExtent.byteLength
  }),
  minImageExtent: Object.freeze({
    byteOffset: $VkSurfaceCapabilitiesKHR.minImageExtent.byteOffset,
    byteLength: $VkSurfaceCapabilitiesKHR.minImageExtent.byteLength
  }),
  maxImageExtent: Object.freeze({
    byteOffset: $VkSurfaceCapabilitiesKHR.maxImageExtent.byteOffset,
    byteLength: $VkSurfaceCapabilitiesKHR.maxImageExtent.byteLength
  }),
  maxImageArrayLayers: Object.freeze({
    byteOffset: $VkSurfaceCapabilitiesKHR.maxImageArrayLayers.byteOffset,
    byteLength: $VkSurfaceCapabilitiesKHR.maxImageArrayLayers.byteLength
  }),
  supportedTransforms: Object.freeze({
    byteOffset: $VkSurfaceCapabilitiesKHR.supportedTransforms.byteOffset,
    byteLength: $VkSurfaceCapabilitiesKHR.supportedTransforms.byteLength
  }),
  currentTransform: Object.freeze({
    byteOffset: $VkSurfaceCapabilitiesKHR.currentTransform.byteOffset,
    byteLength: $VkSurfaceCapabilitiesKHR.currentTransform.byteLength
  }),
  supportedCompositeAlpha: Object.freeze({
    byteOffset: $VkSurfaceCapabilitiesKHR.supportedCompositeAlpha.byteOffset,
    byteLength: $VkSurfaceCapabilitiesKHR.supportedCompositeAlpha.byteLength
  }),
  supportedUsageFlags: Object.freeze({
    byteOffset: $VkSurfaceCapabilitiesKHR.supportedUsageFlags.byteOffset,
    byteLength: $VkSurfaceCapabilitiesKHR.supportedUsageFlags.byteLength
  }),
});
class VkWin32SurfaceCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._hinstance = 0n;
    this._hwnd = 0n;
    this.memoryBuffer = new ArrayBuffer(VkWin32SurfaceCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.hinstance !== void 0) this.hinstance = opts.hinstance;
      if (opts.hwnd !== void 0) this.hwnd = opts.hwnd;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkWin32SurfaceCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkWin32SurfaceCreateInfoKHR.flags.byteOffset, value);
this._flags = value;
  }
  get hinstance() {
    return this._hinstance;
  }
  set hinstance(value) {
    
  }
  get hwnd() {
    return this._hwnd;
  }
  set hwnd(value) {
    
  }
  
};

VkWin32SurfaceCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkWin32SurfaceCreateInfoKHR = memoryLayouts.VkWin32SurfaceCreateInfoKHR;
VkWin32SurfaceCreateInfoKHR.byteLength = $VkWin32SurfaceCreateInfoKHR.byteLength;

VkWin32SurfaceCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkWin32SurfaceCreateInfoKHR.sType.byteOffset,
    byteLength: $VkWin32SurfaceCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkWin32SurfaceCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkWin32SurfaceCreateInfoKHR.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkWin32SurfaceCreateInfoKHR.flags.byteOffset,
    byteLength: $VkWin32SurfaceCreateInfoKHR.flags.byteLength
  }),
  hinstance: Object.freeze({
    byteOffset: $VkWin32SurfaceCreateInfoKHR.hinstance.byteOffset,
    byteLength: $VkWin32SurfaceCreateInfoKHR.hinstance.byteLength
  }),
  hwnd: Object.freeze({
    byteOffset: $VkWin32SurfaceCreateInfoKHR.hwnd.byteOffset,
    byteLength: $VkWin32SurfaceCreateInfoKHR.hwnd.byteLength
  }),
});
class VkSurfaceFormatKHR {
  constructor(opts) {
    this._format = 0;
    this._colorSpace = 0;
    this.memoryBuffer = new ArrayBuffer(VkSurfaceFormatKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get format() {
    return this._format;
  }
  get colorSpace() {
    return this._colorSpace;
  }
  
};

VkSurfaceFormatKHR.prototype.flush = function flush() {
  
};

const $VkSurfaceFormatKHR = memoryLayouts.VkSurfaceFormatKHR;
VkSurfaceFormatKHR.byteLength = $VkSurfaceFormatKHR.byteLength;

VkSurfaceFormatKHR.memoryLayout = Object.freeze({
  format: Object.freeze({
    byteOffset: $VkSurfaceFormatKHR.format.byteOffset,
    byteLength: $VkSurfaceFormatKHR.format.byteLength
  }),
  colorSpace: Object.freeze({
    byteOffset: $VkSurfaceFormatKHR.colorSpace.byteOffset,
    byteLength: $VkSurfaceFormatKHR.colorSpace.byteLength
  }),
});
class VkSwapchainCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._surface = null;
    this._minImageCount = 0;
    this._imageFormat = 0;
    this._imageColorSpace = 0;
    this._imageExtent = null;
    this._imageArrayLayers = 0;
    this._imageUsage = 0;
    this._imageSharingMode = 0;
    this._queueFamilyIndexCount = 0;
    this._pQueueFamilyIndices = null;
    this._preTransform = 0;
    this._compositeAlpha = 0;
    this._presentMode = 0;
    this._clipped = 0;
    this._oldSwapchain = null;
    this.memoryBuffer = new ArrayBuffer(VkSwapchainCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.surface !== void 0) this.surface = opts.surface;
      if (opts.minImageCount !== void 0) this.minImageCount = opts.minImageCount;
      if (opts.imageFormat !== void 0) this.imageFormat = opts.imageFormat;
      if (opts.imageColorSpace !== void 0) this.imageColorSpace = opts.imageColorSpace;
      if (opts.imageExtent !== void 0) this.imageExtent = opts.imageExtent;
      if (opts.imageArrayLayers !== void 0) this.imageArrayLayers = opts.imageArrayLayers;
      if (opts.imageUsage !== void 0) this.imageUsage = opts.imageUsage;
      if (opts.imageSharingMode !== void 0) this.imageSharingMode = opts.imageSharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      if (opts.preTransform !== void 0) this.preTransform = opts.preTransform;
      if (opts.compositeAlpha !== void 0) this.compositeAlpha = opts.compositeAlpha;
      if (opts.presentMode !== void 0) this.presentMode = opts.presentMode;
      if (opts.clipped !== void 0) this.clipped = opts.clipped;
      if (opts.oldSwapchain !== void 0) this.oldSwapchain = opts.oldSwapchain;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSwapchainCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkSwapchainCreateInfoKHR.flags.byteOffset, value);
this._flags = value;
  }
  get surface() {
    return this._surface;
  }
  set surface(value) {
    String
  }
  get minImageCount() {
    return this._minImageCount;
  }
  set minImageCount(value) {
    
this.memoryView.setUint32($VkSwapchainCreateInfoKHR.minImageCount.byteOffset, value);
this._minImageCount = value;
  }
  get imageFormat() {
    return this._imageFormat;
  }
  set imageFormat(value) {
    
this.memoryView.setInt32($VkSwapchainCreateInfoKHR.imageFormat.byteOffset, value);
this._imageFormat = value;
  }
  get imageColorSpace() {
    return this._imageColorSpace;
  }
  set imageColorSpace(value) {
    
this.memoryView.setInt32($VkSwapchainCreateInfoKHR.imageColorSpace.byteOffset, value);
this._imageColorSpace = value;
  }
  get imageExtent() {
    return this._imageExtent;
  }
  set imageExtent(value) {
    String
  }
  get imageArrayLayers() {
    return this._imageArrayLayers;
  }
  set imageArrayLayers(value) {
    
this.memoryView.setUint32($VkSwapchainCreateInfoKHR.imageArrayLayers.byteOffset, value);
this._imageArrayLayers = value;
  }
  get imageUsage() {
    return this._imageUsage;
  }
  set imageUsage(value) {
    
this.memoryView.setInt32($VkSwapchainCreateInfoKHR.imageUsage.byteOffset, value);
this._imageUsage = value;
  }
  get imageSharingMode() {
    return this._imageSharingMode;
  }
  set imageSharingMode(value) {
    
this.memoryView.setInt32($VkSwapchainCreateInfoKHR.imageSharingMode.byteOffset, value);
this._imageSharingMode = value;
  }
  get queueFamilyIndexCount() {
    return this._queueFamilyIndexCount;
  }
  set queueFamilyIndexCount(value) {
    
this.memoryView.setUint32($VkSwapchainCreateInfoKHR.queueFamilyIndexCount.byteOffset, value);
this._queueFamilyIndexCount = value;
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    
  }
  get preTransform() {
    return this._preTransform;
  }
  set preTransform(value) {
    
this.memoryView.setInt32($VkSwapchainCreateInfoKHR.preTransform.byteOffset, value);
this._preTransform = value;
  }
  get compositeAlpha() {
    return this._compositeAlpha;
  }
  set compositeAlpha(value) {
    
this.memoryView.setInt32($VkSwapchainCreateInfoKHR.compositeAlpha.byteOffset, value);
this._compositeAlpha = value;
  }
  get presentMode() {
    return this._presentMode;
  }
  set presentMode(value) {
    
this.memoryView.setInt32($VkSwapchainCreateInfoKHR.presentMode.byteOffset, value);
this._presentMode = value;
  }
  get clipped() {
    return this._clipped;
  }
  set clipped(value) {
    
this.memoryView.setUint32($VkSwapchainCreateInfoKHR.clipped.byteOffset, value);
this._clipped = value;
  }
  get oldSwapchain() {
    return this._oldSwapchain;
  }
  set oldSwapchain(value) {
    String
  }
  
};

VkSwapchainCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.imageExtent !== null) { }
  
};

const $VkSwapchainCreateInfoKHR = memoryLayouts.VkSwapchainCreateInfoKHR;
VkSwapchainCreateInfoKHR.byteLength = $VkSwapchainCreateInfoKHR.byteLength;

VkSwapchainCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.sType.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.flags.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.flags.byteLength
  }),
  surface: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.surface.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.surface.byteLength
  }),
  minImageCount: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.minImageCount.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.minImageCount.byteLength
  }),
  imageFormat: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.imageFormat.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.imageFormat.byteLength
  }),
  imageColorSpace: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.imageColorSpace.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.imageColorSpace.byteLength
  }),
  imageExtent: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.imageExtent.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.imageExtent.byteLength
  }),
  imageArrayLayers: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.imageArrayLayers.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.imageArrayLayers.byteLength
  }),
  imageUsage: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.imageUsage.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.imageUsage.byteLength
  }),
  imageSharingMode: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.imageSharingMode.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.imageSharingMode.byteLength
  }),
  queueFamilyIndexCount: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.queueFamilyIndexCount.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.queueFamilyIndexCount.byteLength
  }),
  pQueueFamilyIndices: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.pQueueFamilyIndices.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.pQueueFamilyIndices.byteLength
  }),
  preTransform: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.preTransform.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.preTransform.byteLength
  }),
  compositeAlpha: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.compositeAlpha.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.compositeAlpha.byteLength
  }),
  presentMode: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.presentMode.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.presentMode.byteLength
  }),
  clipped: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.clipped.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.clipped.byteLength
  }),
  oldSwapchain: Object.freeze({
    byteOffset: $VkSwapchainCreateInfoKHR.oldSwapchain.byteOffset,
    byteLength: $VkSwapchainCreateInfoKHR.oldSwapchain.byteLength
  }),
});
class VkPresentInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._waitSemaphoreCount = 0;
    this._pWaitSemaphores = null;
    this._swapchainCount = 0;
    this._pSwapchains = null;
    this._pImageIndices = null;
    this._pResults = null;
    this.memoryBuffer = new ArrayBuffer(VkPresentInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphores !== void 0) this.pWaitSemaphores = opts.pWaitSemaphores;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pSwapchains !== void 0) this.pSwapchains = opts.pSwapchains;
      if (opts.pImageIndices !== void 0) this.pImageIndices = opts.pImageIndices;
      if (opts.pResults !== void 0) this.pResults = opts.pResults;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPresentInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get waitSemaphoreCount() {
    return this._waitSemaphoreCount;
  }
  set waitSemaphoreCount(value) {
    
this.memoryView.setUint32($VkPresentInfoKHR.waitSemaphoreCount.byteOffset, value);
this._waitSemaphoreCount = value;
  }
  get pWaitSemaphores() {
    return this._pWaitSemaphores;
  }
  set pWaitSemaphores(value) {
    
  }
  get swapchainCount() {
    return this._swapchainCount;
  }
  set swapchainCount(value) {
    
this.memoryView.setUint32($VkPresentInfoKHR.swapchainCount.byteOffset, value);
this._swapchainCount = value;
  }
  get pSwapchains() {
    return this._pSwapchains;
  }
  set pSwapchains(value) {
    
  }
  get pImageIndices() {
    return this._pImageIndices;
  }
  set pImageIndices(value) {
    
  }
  get pResults() {
    return this._pResults;
  }
  set pResults(value) {
    
  }
  
};

VkPresentInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pWaitSemaphores !== null) { }
  
  if (this.pSwapchains !== null) { }
  
};

const $VkPresentInfoKHR = memoryLayouts.VkPresentInfoKHR;
VkPresentInfoKHR.byteLength = $VkPresentInfoKHR.byteLength;

VkPresentInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPresentInfoKHR.sType.byteOffset,
    byteLength: $VkPresentInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPresentInfoKHR.pNext.byteOffset,
    byteLength: $VkPresentInfoKHR.pNext.byteLength
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: $VkPresentInfoKHR.waitSemaphoreCount.byteOffset,
    byteLength: $VkPresentInfoKHR.waitSemaphoreCount.byteLength
  }),
  pWaitSemaphores: Object.freeze({
    byteOffset: $VkPresentInfoKHR.pWaitSemaphores.byteOffset,
    byteLength: $VkPresentInfoKHR.pWaitSemaphores.byteLength
  }),
  swapchainCount: Object.freeze({
    byteOffset: $VkPresentInfoKHR.swapchainCount.byteOffset,
    byteLength: $VkPresentInfoKHR.swapchainCount.byteLength
  }),
  pSwapchains: Object.freeze({
    byteOffset: $VkPresentInfoKHR.pSwapchains.byteOffset,
    byteLength: $VkPresentInfoKHR.pSwapchains.byteLength
  }),
  pImageIndices: Object.freeze({
    byteOffset: $VkPresentInfoKHR.pImageIndices.byteOffset,
    byteLength: $VkPresentInfoKHR.pImageIndices.byteLength
  }),
  pResults: Object.freeze({
    byteOffset: $VkPresentInfoKHR.pResults.byteOffset,
    byteLength: $VkPresentInfoKHR.pResults.byteLength
  }),
});
class VkDebugReportCallbackCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._pUserData = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugReportCallbackCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pUserData !== void 0) this.pUserData = opts.pUserData;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDebugReportCallbackCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkDebugReportCallbackCreateInfoEXT.flags.byteOffset, value);
this._flags = value;
  }
  get pUserData() {
    return this._pUserData;
  }
  set pUserData(value) {
    
  }
  
};

VkDebugReportCallbackCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDebugReportCallbackCreateInfoEXT = memoryLayouts.VkDebugReportCallbackCreateInfoEXT;
VkDebugReportCallbackCreateInfoEXT.byteLength = $VkDebugReportCallbackCreateInfoEXT.byteLength;

VkDebugReportCallbackCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDebugReportCallbackCreateInfoEXT.sType.byteOffset,
    byteLength: $VkDebugReportCallbackCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDebugReportCallbackCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkDebugReportCallbackCreateInfoEXT.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkDebugReportCallbackCreateInfoEXT.flags.byteOffset,
    byteLength: $VkDebugReportCallbackCreateInfoEXT.flags.byteLength
  }),
  pUserData: Object.freeze({
    byteOffset: $VkDebugReportCallbackCreateInfoEXT.pUserData.byteOffset,
    byteLength: $VkDebugReportCallbackCreateInfoEXT.pUserData.byteLength
  }),
});
class VkValidationFlagsEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._disabledValidationCheckCount = 0;
    this._pDisabledValidationChecks = null;
    this.memoryBuffer = new ArrayBuffer(VkValidationFlagsEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.disabledValidationCheckCount !== void 0) this.disabledValidationCheckCount = opts.disabledValidationCheckCount;
      if (opts.pDisabledValidationChecks !== void 0) this.pDisabledValidationChecks = opts.pDisabledValidationChecks;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkValidationFlagsEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get disabledValidationCheckCount() {
    return this._disabledValidationCheckCount;
  }
  set disabledValidationCheckCount(value) {
    
this.memoryView.setUint32($VkValidationFlagsEXT.disabledValidationCheckCount.byteOffset, value);
this._disabledValidationCheckCount = value;
  }
  get pDisabledValidationChecks() {
    return this._pDisabledValidationChecks;
  }
  set pDisabledValidationChecks(value) {
    
  }
  
};

VkValidationFlagsEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkValidationFlagsEXT = memoryLayouts.VkValidationFlagsEXT;
VkValidationFlagsEXT.byteLength = $VkValidationFlagsEXT.byteLength;

VkValidationFlagsEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkValidationFlagsEXT.sType.byteOffset,
    byteLength: $VkValidationFlagsEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkValidationFlagsEXT.pNext.byteOffset,
    byteLength: $VkValidationFlagsEXT.pNext.byteLength
  }),
  disabledValidationCheckCount: Object.freeze({
    byteOffset: $VkValidationFlagsEXT.disabledValidationCheckCount.byteOffset,
    byteLength: $VkValidationFlagsEXT.disabledValidationCheckCount.byteLength
  }),
  pDisabledValidationChecks: Object.freeze({
    byteOffset: $VkValidationFlagsEXT.pDisabledValidationChecks.byteOffset,
    byteLength: $VkValidationFlagsEXT.pDisabledValidationChecks.byteLength
  }),
});
class VkValidationFeaturesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._enabledValidationFeatureCount = 0;
    this._pEnabledValidationFeatures = null;
    this._disabledValidationFeatureCount = 0;
    this._pDisabledValidationFeatures = null;
    this.memoryBuffer = new ArrayBuffer(VkValidationFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.enabledValidationFeatureCount !== void 0) this.enabledValidationFeatureCount = opts.enabledValidationFeatureCount;
      if (opts.pEnabledValidationFeatures !== void 0) this.pEnabledValidationFeatures = opts.pEnabledValidationFeatures;
      if (opts.disabledValidationFeatureCount !== void 0) this.disabledValidationFeatureCount = opts.disabledValidationFeatureCount;
      if (opts.pDisabledValidationFeatures !== void 0) this.pDisabledValidationFeatures = opts.pDisabledValidationFeatures;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkValidationFeaturesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get enabledValidationFeatureCount() {
    return this._enabledValidationFeatureCount;
  }
  set enabledValidationFeatureCount(value) {
    
this.memoryView.setUint32($VkValidationFeaturesEXT.enabledValidationFeatureCount.byteOffset, value);
this._enabledValidationFeatureCount = value;
  }
  get pEnabledValidationFeatures() {
    return this._pEnabledValidationFeatures;
  }
  set pEnabledValidationFeatures(value) {
    
  }
  get disabledValidationFeatureCount() {
    return this._disabledValidationFeatureCount;
  }
  set disabledValidationFeatureCount(value) {
    
this.memoryView.setUint32($VkValidationFeaturesEXT.disabledValidationFeatureCount.byteOffset, value);
this._disabledValidationFeatureCount = value;
  }
  get pDisabledValidationFeatures() {
    return this._pDisabledValidationFeatures;
  }
  set pDisabledValidationFeatures(value) {
    
  }
  
};

VkValidationFeaturesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkValidationFeaturesEXT = memoryLayouts.VkValidationFeaturesEXT;
VkValidationFeaturesEXT.byteLength = $VkValidationFeaturesEXT.byteLength;

VkValidationFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkValidationFeaturesEXT.sType.byteOffset,
    byteLength: $VkValidationFeaturesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkValidationFeaturesEXT.pNext.byteOffset,
    byteLength: $VkValidationFeaturesEXT.pNext.byteLength
  }),
  enabledValidationFeatureCount: Object.freeze({
    byteOffset: $VkValidationFeaturesEXT.enabledValidationFeatureCount.byteOffset,
    byteLength: $VkValidationFeaturesEXT.enabledValidationFeatureCount.byteLength
  }),
  pEnabledValidationFeatures: Object.freeze({
    byteOffset: $VkValidationFeaturesEXT.pEnabledValidationFeatures.byteOffset,
    byteLength: $VkValidationFeaturesEXT.pEnabledValidationFeatures.byteLength
  }),
  disabledValidationFeatureCount: Object.freeze({
    byteOffset: $VkValidationFeaturesEXT.disabledValidationFeatureCount.byteOffset,
    byteLength: $VkValidationFeaturesEXT.disabledValidationFeatureCount.byteLength
  }),
  pDisabledValidationFeatures: Object.freeze({
    byteOffset: $VkValidationFeaturesEXT.pDisabledValidationFeatures.byteOffset,
    byteLength: $VkValidationFeaturesEXT.pDisabledValidationFeatures.byteLength
  }),
});
class VkPipelineRasterizationStateRasterizationOrderAMD {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._rasterizationOrder = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineRasterizationStateRasterizationOrderAMD.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.rasterizationOrder !== void 0) this.rasterizationOrder = opts.rasterizationOrder;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationStateRasterizationOrderAMD.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get rasterizationOrder() {
    return this._rasterizationOrder;
  }
  set rasterizationOrder(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationStateRasterizationOrderAMD.rasterizationOrder.byteOffset, value);
this._rasterizationOrder = value;
  }
  
};

VkPipelineRasterizationStateRasterizationOrderAMD.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineRasterizationStateRasterizationOrderAMD = memoryLayouts.VkPipelineRasterizationStateRasterizationOrderAMD;
VkPipelineRasterizationStateRasterizationOrderAMD.byteLength = $VkPipelineRasterizationStateRasterizationOrderAMD.byteLength;

VkPipelineRasterizationStateRasterizationOrderAMD.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateRasterizationOrderAMD.sType.byteOffset,
    byteLength: $VkPipelineRasterizationStateRasterizationOrderAMD.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateRasterizationOrderAMD.pNext.byteOffset,
    byteLength: $VkPipelineRasterizationStateRasterizationOrderAMD.pNext.byteLength
  }),
  rasterizationOrder: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateRasterizationOrderAMD.rasterizationOrder.byteOffset,
    byteLength: $VkPipelineRasterizationStateRasterizationOrderAMD.rasterizationOrder.byteLength
  }),
});
class VkDebugMarkerObjectNameInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._objectType = 0;
    this._object = 0;
    this._pObjectName = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugMarkerObjectNameInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.object !== void 0) this.object = opts.object;
      if (opts.pObjectName !== void 0) this.pObjectName = opts.pObjectName;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDebugMarkerObjectNameInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get objectType() {
    return this._objectType;
  }
  set objectType(value) {
    
this.memoryView.setInt32($VkDebugMarkerObjectNameInfoEXT.objectType.byteOffset, value);
this._objectType = value;
  }
  get object() {
    return this._object;
  }
  set object(value) {
    
this.memoryView.setBigUint64($VkDebugMarkerObjectNameInfoEXT.object.byteOffset, value);
this._object = value;
  }
  get pObjectName() {
    return this._pObjectName;
  }
  set pObjectName(value) {
    String
  }
  
};

VkDebugMarkerObjectNameInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDebugMarkerObjectNameInfoEXT = memoryLayouts.VkDebugMarkerObjectNameInfoEXT;
VkDebugMarkerObjectNameInfoEXT.byteLength = $VkDebugMarkerObjectNameInfoEXT.byteLength;

VkDebugMarkerObjectNameInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDebugMarkerObjectNameInfoEXT.sType.byteOffset,
    byteLength: $VkDebugMarkerObjectNameInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDebugMarkerObjectNameInfoEXT.pNext.byteOffset,
    byteLength: $VkDebugMarkerObjectNameInfoEXT.pNext.byteLength
  }),
  objectType: Object.freeze({
    byteOffset: $VkDebugMarkerObjectNameInfoEXT.objectType.byteOffset,
    byteLength: $VkDebugMarkerObjectNameInfoEXT.objectType.byteLength
  }),
  object: Object.freeze({
    byteOffset: $VkDebugMarkerObjectNameInfoEXT.object.byteOffset,
    byteLength: $VkDebugMarkerObjectNameInfoEXT.object.byteLength
  }),
  pObjectName: Object.freeze({
    byteOffset: $VkDebugMarkerObjectNameInfoEXT.pObjectName.byteOffset,
    byteLength: $VkDebugMarkerObjectNameInfoEXT.pObjectName.byteLength
  }),
});
class VkDebugMarkerObjectTagInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._objectType = 0;
    this._object = 0;
    this._tagName = 0;
    this._tagSize = 0;
    this._pTag = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugMarkerObjectTagInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.object !== void 0) this.object = opts.object;
      if (opts.tagName !== void 0) this.tagName = opts.tagName;
      if (opts.tagSize !== void 0) this.tagSize = opts.tagSize;
      if (opts.pTag !== void 0) this.pTag = opts.pTag;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDebugMarkerObjectTagInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get objectType() {
    return this._objectType;
  }
  set objectType(value) {
    
this.memoryView.setInt32($VkDebugMarkerObjectTagInfoEXT.objectType.byteOffset, value);
this._objectType = value;
  }
  get object() {
    return this._object;
  }
  set object(value) {
    
this.memoryView.setBigUint64($VkDebugMarkerObjectTagInfoEXT.object.byteOffset, value);
this._object = value;
  }
  get tagName() {
    return this._tagName;
  }
  set tagName(value) {
    
this.memoryView.setBigUint64($VkDebugMarkerObjectTagInfoEXT.tagName.byteOffset, value);
this._tagName = value;
  }
  get tagSize() {
    return this._tagSize;
  }
  set tagSize(value) {
    
this.memoryView.setBigInt64($VkDebugMarkerObjectTagInfoEXT.tagSize.byteOffset, value);
this._tagSize = value;
  }
  get pTag() {
    return this._pTag;
  }
  set pTag(value) {
    
  }
  
};

VkDebugMarkerObjectTagInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDebugMarkerObjectTagInfoEXT = memoryLayouts.VkDebugMarkerObjectTagInfoEXT;
VkDebugMarkerObjectTagInfoEXT.byteLength = $VkDebugMarkerObjectTagInfoEXT.byteLength;

VkDebugMarkerObjectTagInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDebugMarkerObjectTagInfoEXT.sType.byteOffset,
    byteLength: $VkDebugMarkerObjectTagInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDebugMarkerObjectTagInfoEXT.pNext.byteOffset,
    byteLength: $VkDebugMarkerObjectTagInfoEXT.pNext.byteLength
  }),
  objectType: Object.freeze({
    byteOffset: $VkDebugMarkerObjectTagInfoEXT.objectType.byteOffset,
    byteLength: $VkDebugMarkerObjectTagInfoEXT.objectType.byteLength
  }),
  object: Object.freeze({
    byteOffset: $VkDebugMarkerObjectTagInfoEXT.object.byteOffset,
    byteLength: $VkDebugMarkerObjectTagInfoEXT.object.byteLength
  }),
  tagName: Object.freeze({
    byteOffset: $VkDebugMarkerObjectTagInfoEXT.tagName.byteOffset,
    byteLength: $VkDebugMarkerObjectTagInfoEXT.tagName.byteLength
  }),
  tagSize: Object.freeze({
    byteOffset: $VkDebugMarkerObjectTagInfoEXT.tagSize.byteOffset,
    byteLength: $VkDebugMarkerObjectTagInfoEXT.tagSize.byteLength
  }),
  pTag: Object.freeze({
    byteOffset: $VkDebugMarkerObjectTagInfoEXT.pTag.byteOffset,
    byteLength: $VkDebugMarkerObjectTagInfoEXT.pTag.byteLength
  }),
});
class VkDebugMarkerMarkerInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._pMarkerName = null;
    this._color = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugMarkerMarkerInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pMarkerName !== void 0) this.pMarkerName = opts.pMarkerName;
      if (opts.color !== void 0) this.color = opts.color;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDebugMarkerMarkerInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get pMarkerName() {
    return this._pMarkerName;
  }
  set pMarkerName(value) {
    String
  }
  get color() {
    return this._color;
  }
  set color(value) {
    
  }
  
};

VkDebugMarkerMarkerInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.color !== null) { }
  
};

const $VkDebugMarkerMarkerInfoEXT = memoryLayouts.VkDebugMarkerMarkerInfoEXT;
VkDebugMarkerMarkerInfoEXT.byteLength = $VkDebugMarkerMarkerInfoEXT.byteLength;

VkDebugMarkerMarkerInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDebugMarkerMarkerInfoEXT.sType.byteOffset,
    byteLength: $VkDebugMarkerMarkerInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDebugMarkerMarkerInfoEXT.pNext.byteOffset,
    byteLength: $VkDebugMarkerMarkerInfoEXT.pNext.byteLength
  }),
  pMarkerName: Object.freeze({
    byteOffset: $VkDebugMarkerMarkerInfoEXT.pMarkerName.byteOffset,
    byteLength: $VkDebugMarkerMarkerInfoEXT.pMarkerName.byteLength
  }),
  color: Object.freeze({
    byteOffset: $VkDebugMarkerMarkerInfoEXT.color.byteOffset,
    byteLength: $VkDebugMarkerMarkerInfoEXT.color.byteLength
  }),
});
class VkDedicatedAllocationImageCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._dedicatedAllocation = 0;
    this.memoryBuffer = new ArrayBuffer(VkDedicatedAllocationImageCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dedicatedAllocation !== void 0) this.dedicatedAllocation = opts.dedicatedAllocation;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDedicatedAllocationImageCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get dedicatedAllocation() {
    return this._dedicatedAllocation;
  }
  set dedicatedAllocation(value) {
    
this.memoryView.setUint32($VkDedicatedAllocationImageCreateInfoNV.dedicatedAllocation.byteOffset, value);
this._dedicatedAllocation = value;
  }
  
};

VkDedicatedAllocationImageCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDedicatedAllocationImageCreateInfoNV = memoryLayouts.VkDedicatedAllocationImageCreateInfoNV;
VkDedicatedAllocationImageCreateInfoNV.byteLength = $VkDedicatedAllocationImageCreateInfoNV.byteLength;

VkDedicatedAllocationImageCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDedicatedAllocationImageCreateInfoNV.sType.byteOffset,
    byteLength: $VkDedicatedAllocationImageCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDedicatedAllocationImageCreateInfoNV.pNext.byteOffset,
    byteLength: $VkDedicatedAllocationImageCreateInfoNV.pNext.byteLength
  }),
  dedicatedAllocation: Object.freeze({
    byteOffset: $VkDedicatedAllocationImageCreateInfoNV.dedicatedAllocation.byteOffset,
    byteLength: $VkDedicatedAllocationImageCreateInfoNV.dedicatedAllocation.byteLength
  }),
});
class VkDedicatedAllocationBufferCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._dedicatedAllocation = 0;
    this.memoryBuffer = new ArrayBuffer(VkDedicatedAllocationBufferCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dedicatedAllocation !== void 0) this.dedicatedAllocation = opts.dedicatedAllocation;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDedicatedAllocationBufferCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get dedicatedAllocation() {
    return this._dedicatedAllocation;
  }
  set dedicatedAllocation(value) {
    
this.memoryView.setUint32($VkDedicatedAllocationBufferCreateInfoNV.dedicatedAllocation.byteOffset, value);
this._dedicatedAllocation = value;
  }
  
};

VkDedicatedAllocationBufferCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDedicatedAllocationBufferCreateInfoNV = memoryLayouts.VkDedicatedAllocationBufferCreateInfoNV;
VkDedicatedAllocationBufferCreateInfoNV.byteLength = $VkDedicatedAllocationBufferCreateInfoNV.byteLength;

VkDedicatedAllocationBufferCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDedicatedAllocationBufferCreateInfoNV.sType.byteOffset,
    byteLength: $VkDedicatedAllocationBufferCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDedicatedAllocationBufferCreateInfoNV.pNext.byteOffset,
    byteLength: $VkDedicatedAllocationBufferCreateInfoNV.pNext.byteLength
  }),
  dedicatedAllocation: Object.freeze({
    byteOffset: $VkDedicatedAllocationBufferCreateInfoNV.dedicatedAllocation.byteOffset,
    byteLength: $VkDedicatedAllocationBufferCreateInfoNV.dedicatedAllocation.byteLength
  }),
});
class VkDedicatedAllocationMemoryAllocateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._image = null;
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkDedicatedAllocationMemoryAllocateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDedicatedAllocationMemoryAllocateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get image() {
    return this._image;
  }
  set image(value) {
    String
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  
};

VkDedicatedAllocationMemoryAllocateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDedicatedAllocationMemoryAllocateInfoNV = memoryLayouts.VkDedicatedAllocationMemoryAllocateInfoNV;
VkDedicatedAllocationMemoryAllocateInfoNV.byteLength = $VkDedicatedAllocationMemoryAllocateInfoNV.byteLength;

VkDedicatedAllocationMemoryAllocateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDedicatedAllocationMemoryAllocateInfoNV.sType.byteOffset,
    byteLength: $VkDedicatedAllocationMemoryAllocateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDedicatedAllocationMemoryAllocateInfoNV.pNext.byteOffset,
    byteLength: $VkDedicatedAllocationMemoryAllocateInfoNV.pNext.byteLength
  }),
  image: Object.freeze({
    byteOffset: $VkDedicatedAllocationMemoryAllocateInfoNV.image.byteOffset,
    byteLength: $VkDedicatedAllocationMemoryAllocateInfoNV.image.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkDedicatedAllocationMemoryAllocateInfoNV.buffer.byteOffset,
    byteLength: $VkDedicatedAllocationMemoryAllocateInfoNV.buffer.byteLength
  }),
});
class VkExternalImageFormatPropertiesNV {
  constructor(opts) {
    this._imageFormatProperties = null;
    this._externalMemoryFeatures = 0;
    this._exportFromImportedHandleTypes = 0;
    this._compatibleHandleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExternalImageFormatPropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get imageFormatProperties() {
    return this._imageFormatProperties;
  }
  get externalMemoryFeatures() {
    return this._externalMemoryFeatures;
  }
  get exportFromImportedHandleTypes() {
    return this._exportFromImportedHandleTypes;
  }
  get compatibleHandleTypes() {
    return this._compatibleHandleTypes;
  }
  
};

VkExternalImageFormatPropertiesNV.prototype.flush = function flush() {
  
  if (this.imageFormatProperties !== null) { }
  
};

const $VkExternalImageFormatPropertiesNV = memoryLayouts.VkExternalImageFormatPropertiesNV;
VkExternalImageFormatPropertiesNV.byteLength = $VkExternalImageFormatPropertiesNV.byteLength;

VkExternalImageFormatPropertiesNV.memoryLayout = Object.freeze({
  imageFormatProperties: Object.freeze({
    byteOffset: $VkExternalImageFormatPropertiesNV.imageFormatProperties.byteOffset,
    byteLength: $VkExternalImageFormatPropertiesNV.imageFormatProperties.byteLength
  }),
  externalMemoryFeatures: Object.freeze({
    byteOffset: $VkExternalImageFormatPropertiesNV.externalMemoryFeatures.byteOffset,
    byteLength: $VkExternalImageFormatPropertiesNV.externalMemoryFeatures.byteLength
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: $VkExternalImageFormatPropertiesNV.exportFromImportedHandleTypes.byteOffset,
    byteLength: $VkExternalImageFormatPropertiesNV.exportFromImportedHandleTypes.byteLength
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: $VkExternalImageFormatPropertiesNV.compatibleHandleTypes.byteOffset,
    byteLength: $VkExternalImageFormatPropertiesNV.compatibleHandleTypes.byteLength
  }),
});
class VkExternalMemoryImageCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryImageCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExternalMemoryImageCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleTypes() {
    return this._handleTypes;
  }
  set handleTypes(value) {
    
this.memoryView.setInt32($VkExternalMemoryImageCreateInfoNV.handleTypes.byteOffset, value);
this._handleTypes = value;
  }
  
};

VkExternalMemoryImageCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExternalMemoryImageCreateInfoNV = memoryLayouts.VkExternalMemoryImageCreateInfoNV;
VkExternalMemoryImageCreateInfoNV.byteLength = $VkExternalMemoryImageCreateInfoNV.byteLength;

VkExternalMemoryImageCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExternalMemoryImageCreateInfoNV.sType.byteOffset,
    byteLength: $VkExternalMemoryImageCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExternalMemoryImageCreateInfoNV.pNext.byteOffset,
    byteLength: $VkExternalMemoryImageCreateInfoNV.pNext.byteLength
  }),
  handleTypes: Object.freeze({
    byteOffset: $VkExternalMemoryImageCreateInfoNV.handleTypes.byteOffset,
    byteLength: $VkExternalMemoryImageCreateInfoNV.handleTypes.byteLength
  }),
});
class VkExportMemoryAllocateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExportMemoryAllocateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExportMemoryAllocateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleTypes() {
    return this._handleTypes;
  }
  set handleTypes(value) {
    
this.memoryView.setInt32($VkExportMemoryAllocateInfoNV.handleTypes.byteOffset, value);
this._handleTypes = value;
  }
  
};

VkExportMemoryAllocateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExportMemoryAllocateInfoNV = memoryLayouts.VkExportMemoryAllocateInfoNV;
VkExportMemoryAllocateInfoNV.byteLength = $VkExportMemoryAllocateInfoNV.byteLength;

VkExportMemoryAllocateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExportMemoryAllocateInfoNV.sType.byteOffset,
    byteLength: $VkExportMemoryAllocateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExportMemoryAllocateInfoNV.pNext.byteOffset,
    byteLength: $VkExportMemoryAllocateInfoNV.pNext.byteLength
  }),
  handleTypes: Object.freeze({
    byteOffset: $VkExportMemoryAllocateInfoNV.handleTypes.byteOffset,
    byteLength: $VkExportMemoryAllocateInfoNV.handleTypes.byteLength
  }),
});
class VkImportMemoryWin32HandleInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleType = 0;
    this._handle = 0n;
    this.memoryBuffer = new ArrayBuffer(VkImportMemoryWin32HandleInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.handle !== void 0) this.handle = opts.handle;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImportMemoryWin32HandleInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkImportMemoryWin32HandleInfoNV.handleType.byteOffset, value);
this._handleType = value;
  }
  get handle() {
    return this._handle;
  }
  set handle(value) {
    
  }
  
};

VkImportMemoryWin32HandleInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImportMemoryWin32HandleInfoNV = memoryLayouts.VkImportMemoryWin32HandleInfoNV;
VkImportMemoryWin32HandleInfoNV.byteLength = $VkImportMemoryWin32HandleInfoNV.byteLength;

VkImportMemoryWin32HandleInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImportMemoryWin32HandleInfoNV.sType.byteOffset,
    byteLength: $VkImportMemoryWin32HandleInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImportMemoryWin32HandleInfoNV.pNext.byteOffset,
    byteLength: $VkImportMemoryWin32HandleInfoNV.pNext.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkImportMemoryWin32HandleInfoNV.handleType.byteOffset,
    byteLength: $VkImportMemoryWin32HandleInfoNV.handleType.byteLength
  }),
  handle: Object.freeze({
    byteOffset: $VkImportMemoryWin32HandleInfoNV.handle.byteOffset,
    byteLength: $VkImportMemoryWin32HandleInfoNV.handle.byteLength
  }),
});
class VkExportMemoryWin32HandleInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this.memoryBuffer = new ArrayBuffer(VkExportMemoryWin32HandleInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExportMemoryWin32HandleInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  
};

VkExportMemoryWin32HandleInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExportMemoryWin32HandleInfoNV = memoryLayouts.VkExportMemoryWin32HandleInfoNV;
VkExportMemoryWin32HandleInfoNV.byteLength = $VkExportMemoryWin32HandleInfoNV.byteLength;

VkExportMemoryWin32HandleInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExportMemoryWin32HandleInfoNV.sType.byteOffset,
    byteLength: $VkExportMemoryWin32HandleInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExportMemoryWin32HandleInfoNV.pNext.byteOffset,
    byteLength: $VkExportMemoryWin32HandleInfoNV.pNext.byteLength
  }),
});
class VkWin32KeyedMutexAcquireReleaseInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._acquireCount = 0;
    this._pAcquireSyncs = null;
    this._pAcquireKeys = null;
    this._pAcquireTimeoutMilliseconds = null;
    this._releaseCount = 0;
    this._pReleaseSyncs = null;
    this._pReleaseKeys = null;
    this.memoryBuffer = new ArrayBuffer(VkWin32KeyedMutexAcquireReleaseInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.acquireCount !== void 0) this.acquireCount = opts.acquireCount;
      if (opts.pAcquireSyncs !== void 0) this.pAcquireSyncs = opts.pAcquireSyncs;
      if (opts.pAcquireKeys !== void 0) this.pAcquireKeys = opts.pAcquireKeys;
      if (opts.pAcquireTimeoutMilliseconds !== void 0) this.pAcquireTimeoutMilliseconds = opts.pAcquireTimeoutMilliseconds;
      if (opts.releaseCount !== void 0) this.releaseCount = opts.releaseCount;
      if (opts.pReleaseSyncs !== void 0) this.pReleaseSyncs = opts.pReleaseSyncs;
      if (opts.pReleaseKeys !== void 0) this.pReleaseKeys = opts.pReleaseKeys;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkWin32KeyedMutexAcquireReleaseInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get acquireCount() {
    return this._acquireCount;
  }
  set acquireCount(value) {
    
this.memoryView.setUint32($VkWin32KeyedMutexAcquireReleaseInfoNV.acquireCount.byteOffset, value);
this._acquireCount = value;
  }
  get pAcquireSyncs() {
    return this._pAcquireSyncs;
  }
  set pAcquireSyncs(value) {
    
  }
  get pAcquireKeys() {
    return this._pAcquireKeys;
  }
  set pAcquireKeys(value) {
    
  }
  get pAcquireTimeoutMilliseconds() {
    return this._pAcquireTimeoutMilliseconds;
  }
  set pAcquireTimeoutMilliseconds(value) {
    
  }
  get releaseCount() {
    return this._releaseCount;
  }
  set releaseCount(value) {
    
this.memoryView.setUint32($VkWin32KeyedMutexAcquireReleaseInfoNV.releaseCount.byteOffset, value);
this._releaseCount = value;
  }
  get pReleaseSyncs() {
    return this._pReleaseSyncs;
  }
  set pReleaseSyncs(value) {
    
  }
  get pReleaseKeys() {
    return this._pReleaseKeys;
  }
  set pReleaseKeys(value) {
    
  }
  
};

VkWin32KeyedMutexAcquireReleaseInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pAcquireSyncs !== null) { }
  
  if (this.pReleaseSyncs !== null) { }
  
};

const $VkWin32KeyedMutexAcquireReleaseInfoNV = memoryLayouts.VkWin32KeyedMutexAcquireReleaseInfoNV;
VkWin32KeyedMutexAcquireReleaseInfoNV.byteLength = $VkWin32KeyedMutexAcquireReleaseInfoNV.byteLength;

VkWin32KeyedMutexAcquireReleaseInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoNV.sType.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoNV.pNext.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoNV.pNext.byteLength
  }),
  acquireCount: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoNV.acquireCount.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoNV.acquireCount.byteLength
  }),
  pAcquireSyncs: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireSyncs.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireSyncs.byteLength
  }),
  pAcquireKeys: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireKeys.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireKeys.byteLength
  }),
  pAcquireTimeoutMilliseconds: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireTimeoutMilliseconds.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoNV.pAcquireTimeoutMilliseconds.byteLength
  }),
  releaseCount: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoNV.releaseCount.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoNV.releaseCount.byteLength
  }),
  pReleaseSyncs: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoNV.pReleaseSyncs.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoNV.pReleaseSyncs.byteLength
  }),
  pReleaseKeys: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoNV.pReleaseKeys.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoNV.pReleaseKeys.byteLength
  }),
});
class VkDeviceGeneratedCommandsFeaturesNVX {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._computeBindingPointSupport = 0;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGeneratedCommandsFeaturesNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.computeBindingPointSupport !== void 0) this.computeBindingPointSupport = opts.computeBindingPointSupport;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGeneratedCommandsFeaturesNVX.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get computeBindingPointSupport() {
    return this._computeBindingPointSupport;
  }
  set computeBindingPointSupport(value) {
    
this.memoryView.setUint32($VkDeviceGeneratedCommandsFeaturesNVX.computeBindingPointSupport.byteOffset, value);
this._computeBindingPointSupport = value;
  }
  
};

VkDeviceGeneratedCommandsFeaturesNVX.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceGeneratedCommandsFeaturesNVX = memoryLayouts.VkDeviceGeneratedCommandsFeaturesNVX;
VkDeviceGeneratedCommandsFeaturesNVX.byteLength = $VkDeviceGeneratedCommandsFeaturesNVX.byteLength;

VkDeviceGeneratedCommandsFeaturesNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGeneratedCommandsFeaturesNVX.sType.byteOffset,
    byteLength: $VkDeviceGeneratedCommandsFeaturesNVX.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGeneratedCommandsFeaturesNVX.pNext.byteOffset,
    byteLength: $VkDeviceGeneratedCommandsFeaturesNVX.pNext.byteLength
  }),
  computeBindingPointSupport: Object.freeze({
    byteOffset: $VkDeviceGeneratedCommandsFeaturesNVX.computeBindingPointSupport.byteOffset,
    byteLength: $VkDeviceGeneratedCommandsFeaturesNVX.computeBindingPointSupport.byteLength
  }),
});
class VkDeviceGeneratedCommandsLimitsNVX {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxIndirectCommandsLayoutTokenCount = 0;
    this._maxObjectEntryCounts = 0;
    this._minSequenceCountBufferOffsetAlignment = 0;
    this._minSequenceIndexBufferOffsetAlignment = 0;
    this._minCommandsTokenBufferOffsetAlignment = 0;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGeneratedCommandsLimitsNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.maxIndirectCommandsLayoutTokenCount !== void 0) this.maxIndirectCommandsLayoutTokenCount = opts.maxIndirectCommandsLayoutTokenCount;
      if (opts.maxObjectEntryCounts !== void 0) this.maxObjectEntryCounts = opts.maxObjectEntryCounts;
      if (opts.minSequenceCountBufferOffsetAlignment !== void 0) this.minSequenceCountBufferOffsetAlignment = opts.minSequenceCountBufferOffsetAlignment;
      if (opts.minSequenceIndexBufferOffsetAlignment !== void 0) this.minSequenceIndexBufferOffsetAlignment = opts.minSequenceIndexBufferOffsetAlignment;
      if (opts.minCommandsTokenBufferOffsetAlignment !== void 0) this.minCommandsTokenBufferOffsetAlignment = opts.minCommandsTokenBufferOffsetAlignment;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGeneratedCommandsLimitsNVX.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxIndirectCommandsLayoutTokenCount() {
    return this._maxIndirectCommandsLayoutTokenCount;
  }
  set maxIndirectCommandsLayoutTokenCount(value) {
    
this.memoryView.setUint32($VkDeviceGeneratedCommandsLimitsNVX.maxIndirectCommandsLayoutTokenCount.byteOffset, value);
this._maxIndirectCommandsLayoutTokenCount = value;
  }
  get maxObjectEntryCounts() {
    return this._maxObjectEntryCounts;
  }
  set maxObjectEntryCounts(value) {
    
this.memoryView.setUint32($VkDeviceGeneratedCommandsLimitsNVX.maxObjectEntryCounts.byteOffset, value);
this._maxObjectEntryCounts = value;
  }
  get minSequenceCountBufferOffsetAlignment() {
    return this._minSequenceCountBufferOffsetAlignment;
  }
  set minSequenceCountBufferOffsetAlignment(value) {
    
this.memoryView.setUint32($VkDeviceGeneratedCommandsLimitsNVX.minSequenceCountBufferOffsetAlignment.byteOffset, value);
this._minSequenceCountBufferOffsetAlignment = value;
  }
  get minSequenceIndexBufferOffsetAlignment() {
    return this._minSequenceIndexBufferOffsetAlignment;
  }
  set minSequenceIndexBufferOffsetAlignment(value) {
    
this.memoryView.setUint32($VkDeviceGeneratedCommandsLimitsNVX.minSequenceIndexBufferOffsetAlignment.byteOffset, value);
this._minSequenceIndexBufferOffsetAlignment = value;
  }
  get minCommandsTokenBufferOffsetAlignment() {
    return this._minCommandsTokenBufferOffsetAlignment;
  }
  set minCommandsTokenBufferOffsetAlignment(value) {
    
this.memoryView.setUint32($VkDeviceGeneratedCommandsLimitsNVX.minCommandsTokenBufferOffsetAlignment.byteOffset, value);
this._minCommandsTokenBufferOffsetAlignment = value;
  }
  
};

VkDeviceGeneratedCommandsLimitsNVX.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceGeneratedCommandsLimitsNVX = memoryLayouts.VkDeviceGeneratedCommandsLimitsNVX;
VkDeviceGeneratedCommandsLimitsNVX.byteLength = $VkDeviceGeneratedCommandsLimitsNVX.byteLength;

VkDeviceGeneratedCommandsLimitsNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGeneratedCommandsLimitsNVX.sType.byteOffset,
    byteLength: $VkDeviceGeneratedCommandsLimitsNVX.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGeneratedCommandsLimitsNVX.pNext.byteOffset,
    byteLength: $VkDeviceGeneratedCommandsLimitsNVX.pNext.byteLength
  }),
  maxIndirectCommandsLayoutTokenCount: Object.freeze({
    byteOffset: $VkDeviceGeneratedCommandsLimitsNVX.maxIndirectCommandsLayoutTokenCount.byteOffset,
    byteLength: $VkDeviceGeneratedCommandsLimitsNVX.maxIndirectCommandsLayoutTokenCount.byteLength
  }),
  maxObjectEntryCounts: Object.freeze({
    byteOffset: $VkDeviceGeneratedCommandsLimitsNVX.maxObjectEntryCounts.byteOffset,
    byteLength: $VkDeviceGeneratedCommandsLimitsNVX.maxObjectEntryCounts.byteLength
  }),
  minSequenceCountBufferOffsetAlignment: Object.freeze({
    byteOffset: $VkDeviceGeneratedCommandsLimitsNVX.minSequenceCountBufferOffsetAlignment.byteOffset,
    byteLength: $VkDeviceGeneratedCommandsLimitsNVX.minSequenceCountBufferOffsetAlignment.byteLength
  }),
  minSequenceIndexBufferOffsetAlignment: Object.freeze({
    byteOffset: $VkDeviceGeneratedCommandsLimitsNVX.minSequenceIndexBufferOffsetAlignment.byteOffset,
    byteLength: $VkDeviceGeneratedCommandsLimitsNVX.minSequenceIndexBufferOffsetAlignment.byteLength
  }),
  minCommandsTokenBufferOffsetAlignment: Object.freeze({
    byteOffset: $VkDeviceGeneratedCommandsLimitsNVX.minCommandsTokenBufferOffsetAlignment.byteOffset,
    byteLength: $VkDeviceGeneratedCommandsLimitsNVX.minCommandsTokenBufferOffsetAlignment.byteLength
  }),
});
class VkIndirectCommandsTokenNVX {
  constructor(opts) {
    this._tokenType = 0;
    this._buffer = null;
    this._offset = 0;
    this.memoryBuffer = new ArrayBuffer(VkIndirectCommandsTokenNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.tokenType !== void 0) this.tokenType = opts.tokenType;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      
    }
  }
  get tokenType() {
    return this._tokenType;
  }
  set tokenType(value) {
    
this.memoryView.setInt32($VkIndirectCommandsTokenNVX.tokenType.byteOffset, value);
this._tokenType = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    
this.memoryView.setBigUint64($VkIndirectCommandsTokenNVX.offset.byteOffset, value);
this._offset = value;
  }
  
};

VkIndirectCommandsTokenNVX.prototype.flush = function flush() {
  
};

const $VkIndirectCommandsTokenNVX = memoryLayouts.VkIndirectCommandsTokenNVX;
VkIndirectCommandsTokenNVX.byteLength = $VkIndirectCommandsTokenNVX.byteLength;

VkIndirectCommandsTokenNVX.memoryLayout = Object.freeze({
  tokenType: Object.freeze({
    byteOffset: $VkIndirectCommandsTokenNVX.tokenType.byteOffset,
    byteLength: $VkIndirectCommandsTokenNVX.tokenType.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkIndirectCommandsTokenNVX.buffer.byteOffset,
    byteLength: $VkIndirectCommandsTokenNVX.buffer.byteLength
  }),
  offset: Object.freeze({
    byteOffset: $VkIndirectCommandsTokenNVX.offset.byteOffset,
    byteLength: $VkIndirectCommandsTokenNVX.offset.byteLength
  }),
});
class VkIndirectCommandsLayoutTokenNVX {
  constructor(opts) {
    this._tokenType = 0;
    this._bindingUnit = 0;
    this._dynamicCount = 0;
    this._divisor = 0;
    this.memoryBuffer = new ArrayBuffer(VkIndirectCommandsLayoutTokenNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.tokenType !== void 0) this.tokenType = opts.tokenType;
      if (opts.bindingUnit !== void 0) this.bindingUnit = opts.bindingUnit;
      if (opts.dynamicCount !== void 0) this.dynamicCount = opts.dynamicCount;
      if (opts.divisor !== void 0) this.divisor = opts.divisor;
      
    }
  }
  get tokenType() {
    return this._tokenType;
  }
  set tokenType(value) {
    
this.memoryView.setInt32($VkIndirectCommandsLayoutTokenNVX.tokenType.byteOffset, value);
this._tokenType = value;
  }
  get bindingUnit() {
    return this._bindingUnit;
  }
  set bindingUnit(value) {
    
this.memoryView.setUint32($VkIndirectCommandsLayoutTokenNVX.bindingUnit.byteOffset, value);
this._bindingUnit = value;
  }
  get dynamicCount() {
    return this._dynamicCount;
  }
  set dynamicCount(value) {
    
this.memoryView.setUint32($VkIndirectCommandsLayoutTokenNVX.dynamicCount.byteOffset, value);
this._dynamicCount = value;
  }
  get divisor() {
    return this._divisor;
  }
  set divisor(value) {
    
this.memoryView.setUint32($VkIndirectCommandsLayoutTokenNVX.divisor.byteOffset, value);
this._divisor = value;
  }
  
};

VkIndirectCommandsLayoutTokenNVX.prototype.flush = function flush() {
  
};

const $VkIndirectCommandsLayoutTokenNVX = memoryLayouts.VkIndirectCommandsLayoutTokenNVX;
VkIndirectCommandsLayoutTokenNVX.byteLength = $VkIndirectCommandsLayoutTokenNVX.byteLength;

VkIndirectCommandsLayoutTokenNVX.memoryLayout = Object.freeze({
  tokenType: Object.freeze({
    byteOffset: $VkIndirectCommandsLayoutTokenNVX.tokenType.byteOffset,
    byteLength: $VkIndirectCommandsLayoutTokenNVX.tokenType.byteLength
  }),
  bindingUnit: Object.freeze({
    byteOffset: $VkIndirectCommandsLayoutTokenNVX.bindingUnit.byteOffset,
    byteLength: $VkIndirectCommandsLayoutTokenNVX.bindingUnit.byteLength
  }),
  dynamicCount: Object.freeze({
    byteOffset: $VkIndirectCommandsLayoutTokenNVX.dynamicCount.byteOffset,
    byteLength: $VkIndirectCommandsLayoutTokenNVX.dynamicCount.byteLength
  }),
  divisor: Object.freeze({
    byteOffset: $VkIndirectCommandsLayoutTokenNVX.divisor.byteOffset,
    byteLength: $VkIndirectCommandsLayoutTokenNVX.divisor.byteLength
  }),
});
class VkIndirectCommandsLayoutCreateInfoNVX {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._pipelineBindPoint = 0;
    this._flags = 0;
    this._tokenCount = 0;
    this._pTokens = null;
    this.memoryBuffer = new ArrayBuffer(VkIndirectCommandsLayoutCreateInfoNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.tokenCount !== void 0) this.tokenCount = opts.tokenCount;
      if (opts.pTokens !== void 0) this.pTokens = opts.pTokens;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkIndirectCommandsLayoutCreateInfoNVX.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get pipelineBindPoint() {
    return this._pipelineBindPoint;
  }
  set pipelineBindPoint(value) {
    
this.memoryView.setInt32($VkIndirectCommandsLayoutCreateInfoNVX.pipelineBindPoint.byteOffset, value);
this._pipelineBindPoint = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkIndirectCommandsLayoutCreateInfoNVX.flags.byteOffset, value);
this._flags = value;
  }
  get tokenCount() {
    return this._tokenCount;
  }
  set tokenCount(value) {
    
this.memoryView.setUint32($VkIndirectCommandsLayoutCreateInfoNVX.tokenCount.byteOffset, value);
this._tokenCount = value;
  }
  get pTokens() {
    return this._pTokens;
  }
  set pTokens(value) {
    
  }
  
};

VkIndirectCommandsLayoutCreateInfoNVX.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pTokens !== null) { }
  
};

const $VkIndirectCommandsLayoutCreateInfoNVX = memoryLayouts.VkIndirectCommandsLayoutCreateInfoNVX;
VkIndirectCommandsLayoutCreateInfoNVX.byteLength = $VkIndirectCommandsLayoutCreateInfoNVX.byteLength;

VkIndirectCommandsLayoutCreateInfoNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkIndirectCommandsLayoutCreateInfoNVX.sType.byteOffset,
    byteLength: $VkIndirectCommandsLayoutCreateInfoNVX.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkIndirectCommandsLayoutCreateInfoNVX.pNext.byteOffset,
    byteLength: $VkIndirectCommandsLayoutCreateInfoNVX.pNext.byteLength
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: $VkIndirectCommandsLayoutCreateInfoNVX.pipelineBindPoint.byteOffset,
    byteLength: $VkIndirectCommandsLayoutCreateInfoNVX.pipelineBindPoint.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkIndirectCommandsLayoutCreateInfoNVX.flags.byteOffset,
    byteLength: $VkIndirectCommandsLayoutCreateInfoNVX.flags.byteLength
  }),
  tokenCount: Object.freeze({
    byteOffset: $VkIndirectCommandsLayoutCreateInfoNVX.tokenCount.byteOffset,
    byteLength: $VkIndirectCommandsLayoutCreateInfoNVX.tokenCount.byteLength
  }),
  pTokens: Object.freeze({
    byteOffset: $VkIndirectCommandsLayoutCreateInfoNVX.pTokens.byteOffset,
    byteLength: $VkIndirectCommandsLayoutCreateInfoNVX.pTokens.byteLength
  }),
});
class VkCmdProcessCommandsInfoNVX {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._objectTable = null;
    this._indirectCommandsLayout = null;
    this._indirectCommandsTokenCount = 0;
    this._pIndirectCommandsTokens = null;
    this._maxSequencesCount = 0;
    this._targetCommandBuffer = null;
    this._sequencesCountBuffer = null;
    this._sequencesCountOffset = 0;
    this._sequencesIndexBuffer = null;
    this._sequencesIndexOffset = 0;
    this.memoryBuffer = new ArrayBuffer(VkCmdProcessCommandsInfoNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectTable !== void 0) this.objectTable = opts.objectTable;
      if (opts.indirectCommandsLayout !== void 0) this.indirectCommandsLayout = opts.indirectCommandsLayout;
      if (opts.indirectCommandsTokenCount !== void 0) this.indirectCommandsTokenCount = opts.indirectCommandsTokenCount;
      if (opts.pIndirectCommandsTokens !== void 0) this.pIndirectCommandsTokens = opts.pIndirectCommandsTokens;
      if (opts.maxSequencesCount !== void 0) this.maxSequencesCount = opts.maxSequencesCount;
      if (opts.targetCommandBuffer !== void 0) this.targetCommandBuffer = opts.targetCommandBuffer;
      if (opts.sequencesCountBuffer !== void 0) this.sequencesCountBuffer = opts.sequencesCountBuffer;
      if (opts.sequencesCountOffset !== void 0) this.sequencesCountOffset = opts.sequencesCountOffset;
      if (opts.sequencesIndexBuffer !== void 0) this.sequencesIndexBuffer = opts.sequencesIndexBuffer;
      if (opts.sequencesIndexOffset !== void 0) this.sequencesIndexOffset = opts.sequencesIndexOffset;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkCmdProcessCommandsInfoNVX.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get objectTable() {
    return this._objectTable;
  }
  set objectTable(value) {
    String
  }
  get indirectCommandsLayout() {
    return this._indirectCommandsLayout;
  }
  set indirectCommandsLayout(value) {
    String
  }
  get indirectCommandsTokenCount() {
    return this._indirectCommandsTokenCount;
  }
  set indirectCommandsTokenCount(value) {
    
this.memoryView.setUint32($VkCmdProcessCommandsInfoNVX.indirectCommandsTokenCount.byteOffset, value);
this._indirectCommandsTokenCount = value;
  }
  get pIndirectCommandsTokens() {
    return this._pIndirectCommandsTokens;
  }
  set pIndirectCommandsTokens(value) {
    
  }
  get maxSequencesCount() {
    return this._maxSequencesCount;
  }
  set maxSequencesCount(value) {
    
this.memoryView.setUint32($VkCmdProcessCommandsInfoNVX.maxSequencesCount.byteOffset, value);
this._maxSequencesCount = value;
  }
  get targetCommandBuffer() {
    return this._targetCommandBuffer;
  }
  set targetCommandBuffer(value) {
    String
  }
  get sequencesCountBuffer() {
    return this._sequencesCountBuffer;
  }
  set sequencesCountBuffer(value) {
    String
  }
  get sequencesCountOffset() {
    return this._sequencesCountOffset;
  }
  set sequencesCountOffset(value) {
    
this.memoryView.setBigUint64($VkCmdProcessCommandsInfoNVX.sequencesCountOffset.byteOffset, value);
this._sequencesCountOffset = value;
  }
  get sequencesIndexBuffer() {
    return this._sequencesIndexBuffer;
  }
  set sequencesIndexBuffer(value) {
    String
  }
  get sequencesIndexOffset() {
    return this._sequencesIndexOffset;
  }
  set sequencesIndexOffset(value) {
    
this.memoryView.setBigUint64($VkCmdProcessCommandsInfoNVX.sequencesIndexOffset.byteOffset, value);
this._sequencesIndexOffset = value;
  }
  
};

VkCmdProcessCommandsInfoNVX.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pIndirectCommandsTokens !== null) { }
  
};

const $VkCmdProcessCommandsInfoNVX = memoryLayouts.VkCmdProcessCommandsInfoNVX;
VkCmdProcessCommandsInfoNVX.byteLength = $VkCmdProcessCommandsInfoNVX.byteLength;

VkCmdProcessCommandsInfoNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkCmdProcessCommandsInfoNVX.sType.byteOffset,
    byteLength: $VkCmdProcessCommandsInfoNVX.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkCmdProcessCommandsInfoNVX.pNext.byteOffset,
    byteLength: $VkCmdProcessCommandsInfoNVX.pNext.byteLength
  }),
  objectTable: Object.freeze({
    byteOffset: $VkCmdProcessCommandsInfoNVX.objectTable.byteOffset,
    byteLength: $VkCmdProcessCommandsInfoNVX.objectTable.byteLength
  }),
  indirectCommandsLayout: Object.freeze({
    byteOffset: $VkCmdProcessCommandsInfoNVX.indirectCommandsLayout.byteOffset,
    byteLength: $VkCmdProcessCommandsInfoNVX.indirectCommandsLayout.byteLength
  }),
  indirectCommandsTokenCount: Object.freeze({
    byteOffset: $VkCmdProcessCommandsInfoNVX.indirectCommandsTokenCount.byteOffset,
    byteLength: $VkCmdProcessCommandsInfoNVX.indirectCommandsTokenCount.byteLength
  }),
  pIndirectCommandsTokens: Object.freeze({
    byteOffset: $VkCmdProcessCommandsInfoNVX.pIndirectCommandsTokens.byteOffset,
    byteLength: $VkCmdProcessCommandsInfoNVX.pIndirectCommandsTokens.byteLength
  }),
  maxSequencesCount: Object.freeze({
    byteOffset: $VkCmdProcessCommandsInfoNVX.maxSequencesCount.byteOffset,
    byteLength: $VkCmdProcessCommandsInfoNVX.maxSequencesCount.byteLength
  }),
  targetCommandBuffer: Object.freeze({
    byteOffset: $VkCmdProcessCommandsInfoNVX.targetCommandBuffer.byteOffset,
    byteLength: $VkCmdProcessCommandsInfoNVX.targetCommandBuffer.byteLength
  }),
  sequencesCountBuffer: Object.freeze({
    byteOffset: $VkCmdProcessCommandsInfoNVX.sequencesCountBuffer.byteOffset,
    byteLength: $VkCmdProcessCommandsInfoNVX.sequencesCountBuffer.byteLength
  }),
  sequencesCountOffset: Object.freeze({
    byteOffset: $VkCmdProcessCommandsInfoNVX.sequencesCountOffset.byteOffset,
    byteLength: $VkCmdProcessCommandsInfoNVX.sequencesCountOffset.byteLength
  }),
  sequencesIndexBuffer: Object.freeze({
    byteOffset: $VkCmdProcessCommandsInfoNVX.sequencesIndexBuffer.byteOffset,
    byteLength: $VkCmdProcessCommandsInfoNVX.sequencesIndexBuffer.byteLength
  }),
  sequencesIndexOffset: Object.freeze({
    byteOffset: $VkCmdProcessCommandsInfoNVX.sequencesIndexOffset.byteOffset,
    byteLength: $VkCmdProcessCommandsInfoNVX.sequencesIndexOffset.byteLength
  }),
});
class VkCmdReserveSpaceForCommandsInfoNVX {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._objectTable = null;
    this._indirectCommandsLayout = null;
    this._maxSequencesCount = 0;
    this.memoryBuffer = new ArrayBuffer(VkCmdReserveSpaceForCommandsInfoNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectTable !== void 0) this.objectTable = opts.objectTable;
      if (opts.indirectCommandsLayout !== void 0) this.indirectCommandsLayout = opts.indirectCommandsLayout;
      if (opts.maxSequencesCount !== void 0) this.maxSequencesCount = opts.maxSequencesCount;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkCmdReserveSpaceForCommandsInfoNVX.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get objectTable() {
    return this._objectTable;
  }
  set objectTable(value) {
    String
  }
  get indirectCommandsLayout() {
    return this._indirectCommandsLayout;
  }
  set indirectCommandsLayout(value) {
    String
  }
  get maxSequencesCount() {
    return this._maxSequencesCount;
  }
  set maxSequencesCount(value) {
    
this.memoryView.setUint32($VkCmdReserveSpaceForCommandsInfoNVX.maxSequencesCount.byteOffset, value);
this._maxSequencesCount = value;
  }
  
};

VkCmdReserveSpaceForCommandsInfoNVX.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkCmdReserveSpaceForCommandsInfoNVX = memoryLayouts.VkCmdReserveSpaceForCommandsInfoNVX;
VkCmdReserveSpaceForCommandsInfoNVX.byteLength = $VkCmdReserveSpaceForCommandsInfoNVX.byteLength;

VkCmdReserveSpaceForCommandsInfoNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkCmdReserveSpaceForCommandsInfoNVX.sType.byteOffset,
    byteLength: $VkCmdReserveSpaceForCommandsInfoNVX.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkCmdReserveSpaceForCommandsInfoNVX.pNext.byteOffset,
    byteLength: $VkCmdReserveSpaceForCommandsInfoNVX.pNext.byteLength
  }),
  objectTable: Object.freeze({
    byteOffset: $VkCmdReserveSpaceForCommandsInfoNVX.objectTable.byteOffset,
    byteLength: $VkCmdReserveSpaceForCommandsInfoNVX.objectTable.byteLength
  }),
  indirectCommandsLayout: Object.freeze({
    byteOffset: $VkCmdReserveSpaceForCommandsInfoNVX.indirectCommandsLayout.byteOffset,
    byteLength: $VkCmdReserveSpaceForCommandsInfoNVX.indirectCommandsLayout.byteLength
  }),
  maxSequencesCount: Object.freeze({
    byteOffset: $VkCmdReserveSpaceForCommandsInfoNVX.maxSequencesCount.byteOffset,
    byteLength: $VkCmdReserveSpaceForCommandsInfoNVX.maxSequencesCount.byteLength
  }),
});
class VkObjectTableCreateInfoNVX {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._objectCount = 0;
    this._pObjectEntryTypes = null;
    this._pObjectEntryCounts = null;
    this._pObjectEntryUsageFlags = null;
    this._maxUniformBuffersPerDescriptor = 0;
    this._maxStorageBuffersPerDescriptor = 0;
    this._maxStorageImagesPerDescriptor = 0;
    this._maxSampledImagesPerDescriptor = 0;
    this._maxPipelineLayouts = 0;
    this.memoryBuffer = new ArrayBuffer(VkObjectTableCreateInfoNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectCount !== void 0) this.objectCount = opts.objectCount;
      if (opts.pObjectEntryTypes !== void 0) this.pObjectEntryTypes = opts.pObjectEntryTypes;
      if (opts.pObjectEntryCounts !== void 0) this.pObjectEntryCounts = opts.pObjectEntryCounts;
      if (opts.pObjectEntryUsageFlags !== void 0) this.pObjectEntryUsageFlags = opts.pObjectEntryUsageFlags;
      if (opts.maxUniformBuffersPerDescriptor !== void 0) this.maxUniformBuffersPerDescriptor = opts.maxUniformBuffersPerDescriptor;
      if (opts.maxStorageBuffersPerDescriptor !== void 0) this.maxStorageBuffersPerDescriptor = opts.maxStorageBuffersPerDescriptor;
      if (opts.maxStorageImagesPerDescriptor !== void 0) this.maxStorageImagesPerDescriptor = opts.maxStorageImagesPerDescriptor;
      if (opts.maxSampledImagesPerDescriptor !== void 0) this.maxSampledImagesPerDescriptor = opts.maxSampledImagesPerDescriptor;
      if (opts.maxPipelineLayouts !== void 0) this.maxPipelineLayouts = opts.maxPipelineLayouts;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkObjectTableCreateInfoNVX.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get objectCount() {
    return this._objectCount;
  }
  set objectCount(value) {
    
this.memoryView.setUint32($VkObjectTableCreateInfoNVX.objectCount.byteOffset, value);
this._objectCount = value;
  }
  get pObjectEntryTypes() {
    return this._pObjectEntryTypes;
  }
  set pObjectEntryTypes(value) {
    
  }
  get pObjectEntryCounts() {
    return this._pObjectEntryCounts;
  }
  set pObjectEntryCounts(value) {
    
  }
  get pObjectEntryUsageFlags() {
    return this._pObjectEntryUsageFlags;
  }
  set pObjectEntryUsageFlags(value) {
    
  }
  get maxUniformBuffersPerDescriptor() {
    return this._maxUniformBuffersPerDescriptor;
  }
  set maxUniformBuffersPerDescriptor(value) {
    
this.memoryView.setUint32($VkObjectTableCreateInfoNVX.maxUniformBuffersPerDescriptor.byteOffset, value);
this._maxUniformBuffersPerDescriptor = value;
  }
  get maxStorageBuffersPerDescriptor() {
    return this._maxStorageBuffersPerDescriptor;
  }
  set maxStorageBuffersPerDescriptor(value) {
    
this.memoryView.setUint32($VkObjectTableCreateInfoNVX.maxStorageBuffersPerDescriptor.byteOffset, value);
this._maxStorageBuffersPerDescriptor = value;
  }
  get maxStorageImagesPerDescriptor() {
    return this._maxStorageImagesPerDescriptor;
  }
  set maxStorageImagesPerDescriptor(value) {
    
this.memoryView.setUint32($VkObjectTableCreateInfoNVX.maxStorageImagesPerDescriptor.byteOffset, value);
this._maxStorageImagesPerDescriptor = value;
  }
  get maxSampledImagesPerDescriptor() {
    return this._maxSampledImagesPerDescriptor;
  }
  set maxSampledImagesPerDescriptor(value) {
    
this.memoryView.setUint32($VkObjectTableCreateInfoNVX.maxSampledImagesPerDescriptor.byteOffset, value);
this._maxSampledImagesPerDescriptor = value;
  }
  get maxPipelineLayouts() {
    return this._maxPipelineLayouts;
  }
  set maxPipelineLayouts(value) {
    
this.memoryView.setUint32($VkObjectTableCreateInfoNVX.maxPipelineLayouts.byteOffset, value);
this._maxPipelineLayouts = value;
  }
  
};

VkObjectTableCreateInfoNVX.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkObjectTableCreateInfoNVX = memoryLayouts.VkObjectTableCreateInfoNVX;
VkObjectTableCreateInfoNVX.byteLength = $VkObjectTableCreateInfoNVX.byteLength;

VkObjectTableCreateInfoNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkObjectTableCreateInfoNVX.sType.byteOffset,
    byteLength: $VkObjectTableCreateInfoNVX.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkObjectTableCreateInfoNVX.pNext.byteOffset,
    byteLength: $VkObjectTableCreateInfoNVX.pNext.byteLength
  }),
  objectCount: Object.freeze({
    byteOffset: $VkObjectTableCreateInfoNVX.objectCount.byteOffset,
    byteLength: $VkObjectTableCreateInfoNVX.objectCount.byteLength
  }),
  pObjectEntryTypes: Object.freeze({
    byteOffset: $VkObjectTableCreateInfoNVX.pObjectEntryTypes.byteOffset,
    byteLength: $VkObjectTableCreateInfoNVX.pObjectEntryTypes.byteLength
  }),
  pObjectEntryCounts: Object.freeze({
    byteOffset: $VkObjectTableCreateInfoNVX.pObjectEntryCounts.byteOffset,
    byteLength: $VkObjectTableCreateInfoNVX.pObjectEntryCounts.byteLength
  }),
  pObjectEntryUsageFlags: Object.freeze({
    byteOffset: $VkObjectTableCreateInfoNVX.pObjectEntryUsageFlags.byteOffset,
    byteLength: $VkObjectTableCreateInfoNVX.pObjectEntryUsageFlags.byteLength
  }),
  maxUniformBuffersPerDescriptor: Object.freeze({
    byteOffset: $VkObjectTableCreateInfoNVX.maxUniformBuffersPerDescriptor.byteOffset,
    byteLength: $VkObjectTableCreateInfoNVX.maxUniformBuffersPerDescriptor.byteLength
  }),
  maxStorageBuffersPerDescriptor: Object.freeze({
    byteOffset: $VkObjectTableCreateInfoNVX.maxStorageBuffersPerDescriptor.byteOffset,
    byteLength: $VkObjectTableCreateInfoNVX.maxStorageBuffersPerDescriptor.byteLength
  }),
  maxStorageImagesPerDescriptor: Object.freeze({
    byteOffset: $VkObjectTableCreateInfoNVX.maxStorageImagesPerDescriptor.byteOffset,
    byteLength: $VkObjectTableCreateInfoNVX.maxStorageImagesPerDescriptor.byteLength
  }),
  maxSampledImagesPerDescriptor: Object.freeze({
    byteOffset: $VkObjectTableCreateInfoNVX.maxSampledImagesPerDescriptor.byteOffset,
    byteLength: $VkObjectTableCreateInfoNVX.maxSampledImagesPerDescriptor.byteLength
  }),
  maxPipelineLayouts: Object.freeze({
    byteOffset: $VkObjectTableCreateInfoNVX.maxPipelineLayouts.byteOffset,
    byteLength: $VkObjectTableCreateInfoNVX.maxPipelineLayouts.byteLength
  }),
});
class VkObjectTableEntryNVX {
  constructor(opts) {
    this._type = 0;
    this._flags = 0;
    this.memoryBuffer = new ArrayBuffer(VkObjectTableEntryNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkObjectTableEntryNVX.type.byteOffset, value);
this._type = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkObjectTableEntryNVX.flags.byteOffset, value);
this._flags = value;
  }
  
};

VkObjectTableEntryNVX.prototype.flush = function flush() {
  
};

const $VkObjectTableEntryNVX = memoryLayouts.VkObjectTableEntryNVX;
VkObjectTableEntryNVX.byteLength = $VkObjectTableEntryNVX.byteLength;

VkObjectTableEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: $VkObjectTableEntryNVX.type.byteOffset,
    byteLength: $VkObjectTableEntryNVX.type.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkObjectTableEntryNVX.flags.byteOffset,
    byteLength: $VkObjectTableEntryNVX.flags.byteLength
  }),
});
class VkObjectTablePipelineEntryNVX {
  constructor(opts) {
    this._type = 0;
    this._flags = 0;
    this._pipeline = null;
    this.memoryBuffer = new ArrayBuffer(VkObjectTablePipelineEntryNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipeline !== void 0) this.pipeline = opts.pipeline;
      
    }
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkObjectTablePipelineEntryNVX.type.byteOffset, value);
this._type = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkObjectTablePipelineEntryNVX.flags.byteOffset, value);
this._flags = value;
  }
  get pipeline() {
    return this._pipeline;
  }
  set pipeline(value) {
    String
  }
  
};

VkObjectTablePipelineEntryNVX.prototype.flush = function flush() {
  
};

const $VkObjectTablePipelineEntryNVX = memoryLayouts.VkObjectTablePipelineEntryNVX;
VkObjectTablePipelineEntryNVX.byteLength = $VkObjectTablePipelineEntryNVX.byteLength;

VkObjectTablePipelineEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: $VkObjectTablePipelineEntryNVX.type.byteOffset,
    byteLength: $VkObjectTablePipelineEntryNVX.type.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkObjectTablePipelineEntryNVX.flags.byteOffset,
    byteLength: $VkObjectTablePipelineEntryNVX.flags.byteLength
  }),
  pipeline: Object.freeze({
    byteOffset: $VkObjectTablePipelineEntryNVX.pipeline.byteOffset,
    byteLength: $VkObjectTablePipelineEntryNVX.pipeline.byteLength
  }),
});
class VkObjectTableDescriptorSetEntryNVX {
  constructor(opts) {
    this._type = 0;
    this._flags = 0;
    this._pipelineLayout = null;
    this._descriptorSet = null;
    this.memoryBuffer = new ArrayBuffer(VkObjectTableDescriptorSetEntryNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.descriptorSet !== void 0) this.descriptorSet = opts.descriptorSet;
      
    }
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkObjectTableDescriptorSetEntryNVX.type.byteOffset, value);
this._type = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkObjectTableDescriptorSetEntryNVX.flags.byteOffset, value);
this._flags = value;
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    String
  }
  get descriptorSet() {
    return this._descriptorSet;
  }
  set descriptorSet(value) {
    String
  }
  
};

VkObjectTableDescriptorSetEntryNVX.prototype.flush = function flush() {
  
};

const $VkObjectTableDescriptorSetEntryNVX = memoryLayouts.VkObjectTableDescriptorSetEntryNVX;
VkObjectTableDescriptorSetEntryNVX.byteLength = $VkObjectTableDescriptorSetEntryNVX.byteLength;

VkObjectTableDescriptorSetEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: $VkObjectTableDescriptorSetEntryNVX.type.byteOffset,
    byteLength: $VkObjectTableDescriptorSetEntryNVX.type.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkObjectTableDescriptorSetEntryNVX.flags.byteOffset,
    byteLength: $VkObjectTableDescriptorSetEntryNVX.flags.byteLength
  }),
  pipelineLayout: Object.freeze({
    byteOffset: $VkObjectTableDescriptorSetEntryNVX.pipelineLayout.byteOffset,
    byteLength: $VkObjectTableDescriptorSetEntryNVX.pipelineLayout.byteLength
  }),
  descriptorSet: Object.freeze({
    byteOffset: $VkObjectTableDescriptorSetEntryNVX.descriptorSet.byteOffset,
    byteLength: $VkObjectTableDescriptorSetEntryNVX.descriptorSet.byteLength
  }),
});
class VkObjectTableVertexBufferEntryNVX {
  constructor(opts) {
    this._type = 0;
    this._flags = 0;
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkObjectTableVertexBufferEntryNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkObjectTableVertexBufferEntryNVX.type.byteOffset, value);
this._type = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkObjectTableVertexBufferEntryNVX.flags.byteOffset, value);
this._flags = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  
};

VkObjectTableVertexBufferEntryNVX.prototype.flush = function flush() {
  
};

const $VkObjectTableVertexBufferEntryNVX = memoryLayouts.VkObjectTableVertexBufferEntryNVX;
VkObjectTableVertexBufferEntryNVX.byteLength = $VkObjectTableVertexBufferEntryNVX.byteLength;

VkObjectTableVertexBufferEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: $VkObjectTableVertexBufferEntryNVX.type.byteOffset,
    byteLength: $VkObjectTableVertexBufferEntryNVX.type.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkObjectTableVertexBufferEntryNVX.flags.byteOffset,
    byteLength: $VkObjectTableVertexBufferEntryNVX.flags.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkObjectTableVertexBufferEntryNVX.buffer.byteOffset,
    byteLength: $VkObjectTableVertexBufferEntryNVX.buffer.byteLength
  }),
});
class VkObjectTableIndexBufferEntryNVX {
  constructor(opts) {
    this._type = 0;
    this._flags = 0;
    this._buffer = null;
    this._indexType = 0;
    this.memoryBuffer = new ArrayBuffer(VkObjectTableIndexBufferEntryNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.indexType !== void 0) this.indexType = opts.indexType;
      
    }
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkObjectTableIndexBufferEntryNVX.type.byteOffset, value);
this._type = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkObjectTableIndexBufferEntryNVX.flags.byteOffset, value);
this._flags = value;
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  get indexType() {
    return this._indexType;
  }
  set indexType(value) {
    
this.memoryView.setInt32($VkObjectTableIndexBufferEntryNVX.indexType.byteOffset, value);
this._indexType = value;
  }
  
};

VkObjectTableIndexBufferEntryNVX.prototype.flush = function flush() {
  
};

const $VkObjectTableIndexBufferEntryNVX = memoryLayouts.VkObjectTableIndexBufferEntryNVX;
VkObjectTableIndexBufferEntryNVX.byteLength = $VkObjectTableIndexBufferEntryNVX.byteLength;

VkObjectTableIndexBufferEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: $VkObjectTableIndexBufferEntryNVX.type.byteOffset,
    byteLength: $VkObjectTableIndexBufferEntryNVX.type.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkObjectTableIndexBufferEntryNVX.flags.byteOffset,
    byteLength: $VkObjectTableIndexBufferEntryNVX.flags.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkObjectTableIndexBufferEntryNVX.buffer.byteOffset,
    byteLength: $VkObjectTableIndexBufferEntryNVX.buffer.byteLength
  }),
  indexType: Object.freeze({
    byteOffset: $VkObjectTableIndexBufferEntryNVX.indexType.byteOffset,
    byteLength: $VkObjectTableIndexBufferEntryNVX.indexType.byteLength
  }),
});
class VkObjectTablePushConstantEntryNVX {
  constructor(opts) {
    this._type = 0;
    this._flags = 0;
    this._pipelineLayout = null;
    this._stageFlags = 0;
    this.memoryBuffer = new ArrayBuffer(VkObjectTablePushConstantEntryNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.stageFlags !== void 0) this.stageFlags = opts.stageFlags;
      
    }
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkObjectTablePushConstantEntryNVX.type.byteOffset, value);
this._type = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkObjectTablePushConstantEntryNVX.flags.byteOffset, value);
this._flags = value;
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    String
  }
  get stageFlags() {
    return this._stageFlags;
  }
  set stageFlags(value) {
    
this.memoryView.setInt32($VkObjectTablePushConstantEntryNVX.stageFlags.byteOffset, value);
this._stageFlags = value;
  }
  
};

VkObjectTablePushConstantEntryNVX.prototype.flush = function flush() {
  
};

const $VkObjectTablePushConstantEntryNVX = memoryLayouts.VkObjectTablePushConstantEntryNVX;
VkObjectTablePushConstantEntryNVX.byteLength = $VkObjectTablePushConstantEntryNVX.byteLength;

VkObjectTablePushConstantEntryNVX.memoryLayout = Object.freeze({
  type: Object.freeze({
    byteOffset: $VkObjectTablePushConstantEntryNVX.type.byteOffset,
    byteLength: $VkObjectTablePushConstantEntryNVX.type.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkObjectTablePushConstantEntryNVX.flags.byteOffset,
    byteLength: $VkObjectTablePushConstantEntryNVX.flags.byteLength
  }),
  pipelineLayout: Object.freeze({
    byteOffset: $VkObjectTablePushConstantEntryNVX.pipelineLayout.byteOffset,
    byteLength: $VkObjectTablePushConstantEntryNVX.pipelineLayout.byteLength
  }),
  stageFlags: Object.freeze({
    byteOffset: $VkObjectTablePushConstantEntryNVX.stageFlags.byteOffset,
    byteLength: $VkObjectTablePushConstantEntryNVX.stageFlags.byteLength
  }),
});
class VkPhysicalDeviceFeatures2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._features = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFeatures2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.features !== void 0) this.features = opts.features;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceFeatures2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get features() {
    return this._features;
  }
  set features(value) {
    String
  }
  
};

VkPhysicalDeviceFeatures2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.features !== null) { }
  
};

const $VkPhysicalDeviceFeatures2 = memoryLayouts.VkPhysicalDeviceFeatures2;
VkPhysicalDeviceFeatures2.byteLength = $VkPhysicalDeviceFeatures2.byteLength;

VkPhysicalDeviceFeatures2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures2.sType.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures2.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures2.pNext.byteLength
  }),
  features: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures2.features.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures2.features.byteLength
  }),
});
class VkPhysicalDeviceFeatures2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._features = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFeatures2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.features !== void 0) this.features = opts.features;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceFeatures2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get features() {
    return this._features;
  }
  set features(value) {
    String
  }
  
};

VkPhysicalDeviceFeatures2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.features !== null) { }
  
};

const $VkPhysicalDeviceFeatures2KHR = memoryLayouts.VkPhysicalDeviceFeatures2KHR;
VkPhysicalDeviceFeatures2KHR.byteLength = $VkPhysicalDeviceFeatures2KHR.byteLength;

VkPhysicalDeviceFeatures2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures2KHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures2KHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures2KHR.pNext.byteLength
  }),
  features: Object.freeze({
    byteOffset: $VkPhysicalDeviceFeatures2KHR.features.byteOffset,
    byteLength: $VkPhysicalDeviceFeatures2KHR.features.byteLength
  }),
});
class VkPhysicalDeviceProperties2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._properties = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceProperties2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceProperties2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get properties() {
    return this._properties;
  }
  
};

VkPhysicalDeviceProperties2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.properties !== null) { }
  
};

const $VkPhysicalDeviceProperties2 = memoryLayouts.VkPhysicalDeviceProperties2;
VkPhysicalDeviceProperties2.byteLength = $VkPhysicalDeviceProperties2.byteLength;

VkPhysicalDeviceProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties2.sType.byteOffset,
    byteLength: $VkPhysicalDeviceProperties2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties2.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceProperties2.pNext.byteLength
  }),
  properties: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties2.properties.byteOffset,
    byteLength: $VkPhysicalDeviceProperties2.properties.byteLength
  }),
});
class VkPhysicalDeviceProperties2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._properties = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceProperties2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get properties() {
    return this._properties;
  }
  
};

VkPhysicalDeviceProperties2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.properties !== null) { }
  
};

const $VkPhysicalDeviceProperties2KHR = memoryLayouts.VkPhysicalDeviceProperties2KHR;
VkPhysicalDeviceProperties2KHR.byteLength = $VkPhysicalDeviceProperties2KHR.byteLength;

VkPhysicalDeviceProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties2KHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceProperties2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties2KHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceProperties2KHR.pNext.byteLength
  }),
  properties: Object.freeze({
    byteOffset: $VkPhysicalDeviceProperties2KHR.properties.byteOffset,
    byteLength: $VkPhysicalDeviceProperties2KHR.properties.byteLength
  }),
});
class VkFormatProperties2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._formatProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkFormatProperties2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkFormatProperties2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get formatProperties() {
    return this._formatProperties;
  }
  
};

VkFormatProperties2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.formatProperties !== null) { }
  
};

const $VkFormatProperties2 = memoryLayouts.VkFormatProperties2;
VkFormatProperties2.byteLength = $VkFormatProperties2.byteLength;

VkFormatProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkFormatProperties2.sType.byteOffset,
    byteLength: $VkFormatProperties2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkFormatProperties2.pNext.byteOffset,
    byteLength: $VkFormatProperties2.pNext.byteLength
  }),
  formatProperties: Object.freeze({
    byteOffset: $VkFormatProperties2.formatProperties.byteOffset,
    byteLength: $VkFormatProperties2.formatProperties.byteLength
  }),
});
class VkFormatProperties2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._formatProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkFormatProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkFormatProperties2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get formatProperties() {
    return this._formatProperties;
  }
  
};

VkFormatProperties2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.formatProperties !== null) { }
  
};

const $VkFormatProperties2KHR = memoryLayouts.VkFormatProperties2KHR;
VkFormatProperties2KHR.byteLength = $VkFormatProperties2KHR.byteLength;

VkFormatProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkFormatProperties2KHR.sType.byteOffset,
    byteLength: $VkFormatProperties2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkFormatProperties2KHR.pNext.byteOffset,
    byteLength: $VkFormatProperties2KHR.pNext.byteLength
  }),
  formatProperties: Object.freeze({
    byteOffset: $VkFormatProperties2KHR.formatProperties.byteOffset,
    byteLength: $VkFormatProperties2KHR.formatProperties.byteLength
  }),
});
class VkImageFormatProperties2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._imageFormatProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkImageFormatProperties2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageFormatProperties2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get imageFormatProperties() {
    return this._imageFormatProperties;
  }
  
};

VkImageFormatProperties2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.imageFormatProperties !== null) { }
  
};

const $VkImageFormatProperties2 = memoryLayouts.VkImageFormatProperties2;
VkImageFormatProperties2.byteLength = $VkImageFormatProperties2.byteLength;

VkImageFormatProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageFormatProperties2.sType.byteOffset,
    byteLength: $VkImageFormatProperties2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageFormatProperties2.pNext.byteOffset,
    byteLength: $VkImageFormatProperties2.pNext.byteLength
  }),
  imageFormatProperties: Object.freeze({
    byteOffset: $VkImageFormatProperties2.imageFormatProperties.byteOffset,
    byteLength: $VkImageFormatProperties2.imageFormatProperties.byteLength
  }),
});
class VkImageFormatProperties2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._imageFormatProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkImageFormatProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageFormatProperties2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get imageFormatProperties() {
    return this._imageFormatProperties;
  }
  
};

VkImageFormatProperties2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.imageFormatProperties !== null) { }
  
};

const $VkImageFormatProperties2KHR = memoryLayouts.VkImageFormatProperties2KHR;
VkImageFormatProperties2KHR.byteLength = $VkImageFormatProperties2KHR.byteLength;

VkImageFormatProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageFormatProperties2KHR.sType.byteOffset,
    byteLength: $VkImageFormatProperties2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageFormatProperties2KHR.pNext.byteOffset,
    byteLength: $VkImageFormatProperties2KHR.pNext.byteLength
  }),
  imageFormatProperties: Object.freeze({
    byteOffset: $VkImageFormatProperties2KHR.imageFormatProperties.byteOffset,
    byteLength: $VkImageFormatProperties2KHR.imageFormatProperties.byteLength
  }),
});
class VkPhysicalDeviceImageFormatInfo2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._format = 0;
    this._type = 0;
    this._tiling = 0;
    this._usage = 0;
    this._flags = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceImageFormatInfo2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageFormatInfo2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get format() {
    return this._format;
  }
  set format(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageFormatInfo2.format.byteOffset, value);
this._format = value;
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageFormatInfo2.type.byteOffset, value);
this._type = value;
  }
  get tiling() {
    return this._tiling;
  }
  set tiling(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageFormatInfo2.tiling.byteOffset, value);
this._tiling = value;
  }
  get usage() {
    return this._usage;
  }
  set usage(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageFormatInfo2.usage.byteOffset, value);
this._usage = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageFormatInfo2.flags.byteOffset, value);
this._flags = value;
  }
  
};

VkPhysicalDeviceImageFormatInfo2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceImageFormatInfo2 = memoryLayouts.VkPhysicalDeviceImageFormatInfo2;
VkPhysicalDeviceImageFormatInfo2.byteLength = $VkPhysicalDeviceImageFormatInfo2.byteLength;

VkPhysicalDeviceImageFormatInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2.sType.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2.pNext.byteLength
  }),
  format: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2.format.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2.format.byteLength
  }),
  type: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2.type.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2.type.byteLength
  }),
  tiling: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2.tiling.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2.tiling.byteLength
  }),
  usage: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2.usage.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2.usage.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2.flags.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2.flags.byteLength
  }),
});
class VkPhysicalDeviceImageFormatInfo2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._format = 0;
    this._type = 0;
    this._tiling = 0;
    this._usage = 0;
    this._flags = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceImageFormatInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageFormatInfo2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get format() {
    return this._format;
  }
  set format(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageFormatInfo2KHR.format.byteOffset, value);
this._format = value;
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageFormatInfo2KHR.type.byteOffset, value);
this._type = value;
  }
  get tiling() {
    return this._tiling;
  }
  set tiling(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageFormatInfo2KHR.tiling.byteOffset, value);
this._tiling = value;
  }
  get usage() {
    return this._usage;
  }
  set usage(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageFormatInfo2KHR.usage.byteOffset, value);
this._usage = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageFormatInfo2KHR.flags.byteOffset, value);
this._flags = value;
  }
  
};

VkPhysicalDeviceImageFormatInfo2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceImageFormatInfo2KHR = memoryLayouts.VkPhysicalDeviceImageFormatInfo2KHR;
VkPhysicalDeviceImageFormatInfo2KHR.byteLength = $VkPhysicalDeviceImageFormatInfo2KHR.byteLength;

VkPhysicalDeviceImageFormatInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2KHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2KHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2KHR.pNext.byteLength
  }),
  format: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2KHR.format.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2KHR.format.byteLength
  }),
  type: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2KHR.type.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2KHR.type.byteLength
  }),
  tiling: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2KHR.tiling.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2KHR.tiling.byteLength
  }),
  usage: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2KHR.usage.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2KHR.usage.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageFormatInfo2KHR.flags.byteOffset,
    byteLength: $VkPhysicalDeviceImageFormatInfo2KHR.flags.byteLength
  }),
});
class VkQueueFamilyProperties2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._queueFamilyProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkQueueFamilyProperties2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkQueueFamilyProperties2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get queueFamilyProperties() {
    return this._queueFamilyProperties;
  }
  
};

VkQueueFamilyProperties2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.queueFamilyProperties !== null) { }
  
};

const $VkQueueFamilyProperties2 = memoryLayouts.VkQueueFamilyProperties2;
VkQueueFamilyProperties2.byteLength = $VkQueueFamilyProperties2.byteLength;

VkQueueFamilyProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkQueueFamilyProperties2.sType.byteOffset,
    byteLength: $VkQueueFamilyProperties2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkQueueFamilyProperties2.pNext.byteOffset,
    byteLength: $VkQueueFamilyProperties2.pNext.byteLength
  }),
  queueFamilyProperties: Object.freeze({
    byteOffset: $VkQueueFamilyProperties2.queueFamilyProperties.byteOffset,
    byteLength: $VkQueueFamilyProperties2.queueFamilyProperties.byteLength
  }),
});
class VkQueueFamilyProperties2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._queueFamilyProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkQueueFamilyProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkQueueFamilyProperties2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get queueFamilyProperties() {
    return this._queueFamilyProperties;
  }
  
};

VkQueueFamilyProperties2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.queueFamilyProperties !== null) { }
  
};

const $VkQueueFamilyProperties2KHR = memoryLayouts.VkQueueFamilyProperties2KHR;
VkQueueFamilyProperties2KHR.byteLength = $VkQueueFamilyProperties2KHR.byteLength;

VkQueueFamilyProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkQueueFamilyProperties2KHR.sType.byteOffset,
    byteLength: $VkQueueFamilyProperties2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkQueueFamilyProperties2KHR.pNext.byteOffset,
    byteLength: $VkQueueFamilyProperties2KHR.pNext.byteLength
  }),
  queueFamilyProperties: Object.freeze({
    byteOffset: $VkQueueFamilyProperties2KHR.queueFamilyProperties.byteOffset,
    byteLength: $VkQueueFamilyProperties2KHR.queueFamilyProperties.byteLength
  }),
});
class VkPhysicalDeviceMemoryProperties2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._memoryProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMemoryProperties2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceMemoryProperties2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get memoryProperties() {
    return this._memoryProperties;
  }
  
};

VkPhysicalDeviceMemoryProperties2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.memoryProperties !== null) { }
  
};

const $VkPhysicalDeviceMemoryProperties2 = memoryLayouts.VkPhysicalDeviceMemoryProperties2;
VkPhysicalDeviceMemoryProperties2.byteLength = $VkPhysicalDeviceMemoryProperties2.byteLength;

VkPhysicalDeviceMemoryProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryProperties2.sType.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryProperties2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryProperties2.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryProperties2.pNext.byteLength
  }),
  memoryProperties: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryProperties2.memoryProperties.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryProperties2.memoryProperties.byteLength
  }),
});
class VkPhysicalDeviceMemoryProperties2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._memoryProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMemoryProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceMemoryProperties2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get memoryProperties() {
    return this._memoryProperties;
  }
  
};

VkPhysicalDeviceMemoryProperties2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.memoryProperties !== null) { }
  
};

const $VkPhysicalDeviceMemoryProperties2KHR = memoryLayouts.VkPhysicalDeviceMemoryProperties2KHR;
VkPhysicalDeviceMemoryProperties2KHR.byteLength = $VkPhysicalDeviceMemoryProperties2KHR.byteLength;

VkPhysicalDeviceMemoryProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryProperties2KHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryProperties2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryProperties2KHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryProperties2KHR.pNext.byteLength
  }),
  memoryProperties: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryProperties2KHR.memoryProperties.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryProperties2KHR.memoryProperties.byteLength
  }),
});
class VkSparseImageFormatProperties2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._properties = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageFormatProperties2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSparseImageFormatProperties2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get properties() {
    return this._properties;
  }
  
};

VkSparseImageFormatProperties2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.properties !== null) { }
  
};

const $VkSparseImageFormatProperties2 = memoryLayouts.VkSparseImageFormatProperties2;
VkSparseImageFormatProperties2.byteLength = $VkSparseImageFormatProperties2.byteLength;

VkSparseImageFormatProperties2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSparseImageFormatProperties2.sType.byteOffset,
    byteLength: $VkSparseImageFormatProperties2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSparseImageFormatProperties2.pNext.byteOffset,
    byteLength: $VkSparseImageFormatProperties2.pNext.byteLength
  }),
  properties: Object.freeze({
    byteOffset: $VkSparseImageFormatProperties2.properties.byteOffset,
    byteLength: $VkSparseImageFormatProperties2.properties.byteLength
  }),
});
class VkSparseImageFormatProperties2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._properties = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageFormatProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSparseImageFormatProperties2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get properties() {
    return this._properties;
  }
  
};

VkSparseImageFormatProperties2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.properties !== null) { }
  
};

const $VkSparseImageFormatProperties2KHR = memoryLayouts.VkSparseImageFormatProperties2KHR;
VkSparseImageFormatProperties2KHR.byteLength = $VkSparseImageFormatProperties2KHR.byteLength;

VkSparseImageFormatProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSparseImageFormatProperties2KHR.sType.byteOffset,
    byteLength: $VkSparseImageFormatProperties2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSparseImageFormatProperties2KHR.pNext.byteOffset,
    byteLength: $VkSparseImageFormatProperties2KHR.pNext.byteLength
  }),
  properties: Object.freeze({
    byteOffset: $VkSparseImageFormatProperties2KHR.properties.byteOffset,
    byteLength: $VkSparseImageFormatProperties2KHR.properties.byteLength
  }),
});
class VkPhysicalDeviceSparseImageFormatInfo2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._format = 0;
    this._type = 0;
    this._samples = 0;
    this._usage = 0;
    this._tiling = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSparseImageFormatInfo2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSparseImageFormatInfo2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get format() {
    return this._format;
  }
  set format(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSparseImageFormatInfo2.format.byteOffset, value);
this._format = value;
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSparseImageFormatInfo2.type.byteOffset, value);
this._type = value;
  }
  get samples() {
    return this._samples;
  }
  set samples(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSparseImageFormatInfo2.samples.byteOffset, value);
this._samples = value;
  }
  get usage() {
    return this._usage;
  }
  set usage(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSparseImageFormatInfo2.usage.byteOffset, value);
this._usage = value;
  }
  get tiling() {
    return this._tiling;
  }
  set tiling(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSparseImageFormatInfo2.tiling.byteOffset, value);
this._tiling = value;
  }
  
};

VkPhysicalDeviceSparseImageFormatInfo2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceSparseImageFormatInfo2 = memoryLayouts.VkPhysicalDeviceSparseImageFormatInfo2;
VkPhysicalDeviceSparseImageFormatInfo2.byteLength = $VkPhysicalDeviceSparseImageFormatInfo2.byteLength;

VkPhysicalDeviceSparseImageFormatInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2.sType.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2.pNext.byteLength
  }),
  format: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2.format.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2.format.byteLength
  }),
  type: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2.type.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2.type.byteLength
  }),
  samples: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2.samples.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2.samples.byteLength
  }),
  usage: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2.usage.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2.usage.byteLength
  }),
  tiling: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2.tiling.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2.tiling.byteLength
  }),
});
class VkPhysicalDeviceSparseImageFormatInfo2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._format = 0;
    this._type = 0;
    this._samples = 0;
    this._usage = 0;
    this._tiling = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSparseImageFormatInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.tiling !== void 0) this.tiling = opts.tiling;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSparseImageFormatInfo2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get format() {
    return this._format;
  }
  set format(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSparseImageFormatInfo2KHR.format.byteOffset, value);
this._format = value;
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSparseImageFormatInfo2KHR.type.byteOffset, value);
this._type = value;
  }
  get samples() {
    return this._samples;
  }
  set samples(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSparseImageFormatInfo2KHR.samples.byteOffset, value);
this._samples = value;
  }
  get usage() {
    return this._usage;
  }
  set usage(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSparseImageFormatInfo2KHR.usage.byteOffset, value);
this._usage = value;
  }
  get tiling() {
    return this._tiling;
  }
  set tiling(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSparseImageFormatInfo2KHR.tiling.byteOffset, value);
this._tiling = value;
  }
  
};

VkPhysicalDeviceSparseImageFormatInfo2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceSparseImageFormatInfo2KHR = memoryLayouts.VkPhysicalDeviceSparseImageFormatInfo2KHR;
VkPhysicalDeviceSparseImageFormatInfo2KHR.byteLength = $VkPhysicalDeviceSparseImageFormatInfo2KHR.byteLength;

VkPhysicalDeviceSparseImageFormatInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2KHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2KHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2KHR.pNext.byteLength
  }),
  format: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2KHR.format.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2KHR.format.byteLength
  }),
  type: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2KHR.type.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2KHR.type.byteLength
  }),
  samples: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2KHR.samples.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2KHR.samples.byteLength
  }),
  usage: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2KHR.usage.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2KHR.usage.byteLength
  }),
  tiling: Object.freeze({
    byteOffset: $VkPhysicalDeviceSparseImageFormatInfo2KHR.tiling.byteOffset,
    byteLength: $VkPhysicalDeviceSparseImageFormatInfo2KHR.tiling.byteLength
  }),
});
class VkPhysicalDevicePushDescriptorPropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxPushDescriptors = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevicePushDescriptorPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDevicePushDescriptorPropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxPushDescriptors() {
    return this._maxPushDescriptors;
  }
  
};

VkPhysicalDevicePushDescriptorPropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDevicePushDescriptorPropertiesKHR = memoryLayouts.VkPhysicalDevicePushDescriptorPropertiesKHR;
VkPhysicalDevicePushDescriptorPropertiesKHR.byteLength = $VkPhysicalDevicePushDescriptorPropertiesKHR.byteLength;

VkPhysicalDevicePushDescriptorPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDevicePushDescriptorPropertiesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDevicePushDescriptorPropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDevicePushDescriptorPropertiesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDevicePushDescriptorPropertiesKHR.pNext.byteLength
  }),
  maxPushDescriptors: Object.freeze({
    byteOffset: $VkPhysicalDevicePushDescriptorPropertiesKHR.maxPushDescriptors.byteOffset,
    byteLength: $VkPhysicalDevicePushDescriptorPropertiesKHR.maxPushDescriptors.byteLength
  }),
});
class VkConformanceVersionKHR {
  constructor(opts) {
    this._major = 0;
    this._minor = 0;
    this._subminor = 0;
    this._patch = 0;
    this.memoryBuffer = new ArrayBuffer(VkConformanceVersionKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.major !== void 0) this.major = opts.major;
      if (opts.minor !== void 0) this.minor = opts.minor;
      if (opts.subminor !== void 0) this.subminor = opts.subminor;
      if (opts.patch !== void 0) this.patch = opts.patch;
      
    }
  }
  get major() {
    return this._major;
  }
  set major(value) {
    
this.memoryView.setUint8($VkConformanceVersionKHR.major.byteOffset, value);
this._major = value;
  }
  get minor() {
    return this._minor;
  }
  set minor(value) {
    
this.memoryView.setUint8($VkConformanceVersionKHR.minor.byteOffset, value);
this._minor = value;
  }
  get subminor() {
    return this._subminor;
  }
  set subminor(value) {
    
this.memoryView.setUint8($VkConformanceVersionKHR.subminor.byteOffset, value);
this._subminor = value;
  }
  get patch() {
    return this._patch;
  }
  set patch(value) {
    
this.memoryView.setUint8($VkConformanceVersionKHR.patch.byteOffset, value);
this._patch = value;
  }
  
};

VkConformanceVersionKHR.prototype.flush = function flush() {
  
};

const $VkConformanceVersionKHR = memoryLayouts.VkConformanceVersionKHR;
VkConformanceVersionKHR.byteLength = $VkConformanceVersionKHR.byteLength;

VkConformanceVersionKHR.memoryLayout = Object.freeze({
  major: Object.freeze({
    byteOffset: $VkConformanceVersionKHR.major.byteOffset,
    byteLength: $VkConformanceVersionKHR.major.byteLength
  }),
  minor: Object.freeze({
    byteOffset: $VkConformanceVersionKHR.minor.byteOffset,
    byteLength: $VkConformanceVersionKHR.minor.byteLength
  }),
  subminor: Object.freeze({
    byteOffset: $VkConformanceVersionKHR.subminor.byteOffset,
    byteLength: $VkConformanceVersionKHR.subminor.byteLength
  }),
  patch: Object.freeze({
    byteOffset: $VkConformanceVersionKHR.patch.byteOffset,
    byteLength: $VkConformanceVersionKHR.patch.byteLength
  }),
});
class VkPhysicalDeviceDriverPropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._driverID = 0;
    this._driverName = null;
    this._driverInfo = null;
    this._conformanceVersion = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDriverPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceDriverPropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get driverID() {
    return this._driverID;
  }
  get driverName() {
    return this._driverName;
  }
  get driverInfo() {
    return this._driverInfo;
  }
  get conformanceVersion() {
    return this._conformanceVersion;
  }
  
};

VkPhysicalDeviceDriverPropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.conformanceVersion !== null) { }
  
};

const $VkPhysicalDeviceDriverPropertiesKHR = memoryLayouts.VkPhysicalDeviceDriverPropertiesKHR;
VkPhysicalDeviceDriverPropertiesKHR.byteLength = $VkPhysicalDeviceDriverPropertiesKHR.byteLength;

VkPhysicalDeviceDriverPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceDriverPropertiesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceDriverPropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceDriverPropertiesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceDriverPropertiesKHR.pNext.byteLength
  }),
  driverID: Object.freeze({
    byteOffset: $VkPhysicalDeviceDriverPropertiesKHR.driverID.byteOffset,
    byteLength: $VkPhysicalDeviceDriverPropertiesKHR.driverID.byteLength
  }),
  driverName: Object.freeze({
    byteOffset: $VkPhysicalDeviceDriverPropertiesKHR.driverName.byteOffset,
    byteLength: $VkPhysicalDeviceDriverPropertiesKHR.driverName.byteLength
  }),
  driverInfo: Object.freeze({
    byteOffset: $VkPhysicalDeviceDriverPropertiesKHR.driverInfo.byteOffset,
    byteLength: $VkPhysicalDeviceDriverPropertiesKHR.driverInfo.byteLength
  }),
  conformanceVersion: Object.freeze({
    byteOffset: $VkPhysicalDeviceDriverPropertiesKHR.conformanceVersion.byteOffset,
    byteLength: $VkPhysicalDeviceDriverPropertiesKHR.conformanceVersion.byteLength
  }),
});
class VkPresentRegionsKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._swapchainCount = 0;
    this._pRegions = null;
    this.memoryBuffer = new ArrayBuffer(VkPresentRegionsKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pRegions !== void 0) this.pRegions = opts.pRegions;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPresentRegionsKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get swapchainCount() {
    return this._swapchainCount;
  }
  set swapchainCount(value) {
    
this.memoryView.setUint32($VkPresentRegionsKHR.swapchainCount.byteOffset, value);
this._swapchainCount = value;
  }
  get pRegions() {
    return this._pRegions;
  }
  set pRegions(value) {
    
  }
  
};

VkPresentRegionsKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pRegions !== null) { }
  
};

const $VkPresentRegionsKHR = memoryLayouts.VkPresentRegionsKHR;
VkPresentRegionsKHR.byteLength = $VkPresentRegionsKHR.byteLength;

VkPresentRegionsKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPresentRegionsKHR.sType.byteOffset,
    byteLength: $VkPresentRegionsKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPresentRegionsKHR.pNext.byteOffset,
    byteLength: $VkPresentRegionsKHR.pNext.byteLength
  }),
  swapchainCount: Object.freeze({
    byteOffset: $VkPresentRegionsKHR.swapchainCount.byteOffset,
    byteLength: $VkPresentRegionsKHR.swapchainCount.byteLength
  }),
  pRegions: Object.freeze({
    byteOffset: $VkPresentRegionsKHR.pRegions.byteOffset,
    byteLength: $VkPresentRegionsKHR.pRegions.byteLength
  }),
});
class VkPresentRegionKHR {
  constructor(opts) {
    this._rectangleCount = 0;
    this._pRectangles = null;
    this.memoryBuffer = new ArrayBuffer(VkPresentRegionKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.rectangleCount !== void 0) this.rectangleCount = opts.rectangleCount;
      if (opts.pRectangles !== void 0) this.pRectangles = opts.pRectangles;
      
    }
  }
  get rectangleCount() {
    return this._rectangleCount;
  }
  set rectangleCount(value) {
    
this.memoryView.setUint32($VkPresentRegionKHR.rectangleCount.byteOffset, value);
this._rectangleCount = value;
  }
  get pRectangles() {
    return this._pRectangles;
  }
  set pRectangles(value) {
    
  }
  
};

VkPresentRegionKHR.prototype.flush = function flush() {
  
  if (this.pRectangles !== null) { }
  
};

const $VkPresentRegionKHR = memoryLayouts.VkPresentRegionKHR;
VkPresentRegionKHR.byteLength = $VkPresentRegionKHR.byteLength;

VkPresentRegionKHR.memoryLayout = Object.freeze({
  rectangleCount: Object.freeze({
    byteOffset: $VkPresentRegionKHR.rectangleCount.byteOffset,
    byteLength: $VkPresentRegionKHR.rectangleCount.byteLength
  }),
  pRectangles: Object.freeze({
    byteOffset: $VkPresentRegionKHR.pRectangles.byteOffset,
    byteLength: $VkPresentRegionKHR.pRectangles.byteLength
  }),
});
class VkRectLayerKHR {
  constructor(opts) {
    this._offset = null;
    this._extent = null;
    this._layer = 0;
    this.memoryBuffer = new ArrayBuffer(VkRectLayerKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.extent !== void 0) this.extent = opts.extent;
      if (opts.layer !== void 0) this.layer = opts.layer;
      
    }
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    String
  }
  get extent() {
    return this._extent;
  }
  set extent(value) {
    String
  }
  get layer() {
    return this._layer;
  }
  set layer(value) {
    
this.memoryView.setUint32($VkRectLayerKHR.layer.byteOffset, value);
this._layer = value;
  }
  
};

VkRectLayerKHR.prototype.flush = function flush() {
  
  if (this.offset !== null) { }
  
  if (this.extent !== null) { }
  
};

const $VkRectLayerKHR = memoryLayouts.VkRectLayerKHR;
VkRectLayerKHR.byteLength = $VkRectLayerKHR.byteLength;

VkRectLayerKHR.memoryLayout = Object.freeze({
  offset: Object.freeze({
    byteOffset: $VkRectLayerKHR.offset.byteOffset,
    byteLength: $VkRectLayerKHR.offset.byteLength
  }),
  extent: Object.freeze({
    byteOffset: $VkRectLayerKHR.extent.byteOffset,
    byteLength: $VkRectLayerKHR.extent.byteLength
  }),
  layer: Object.freeze({
    byteOffset: $VkRectLayerKHR.layer.byteOffset,
    byteLength: $VkRectLayerKHR.layer.byteLength
  }),
});
class VkPhysicalDeviceVariablePointerFeatures {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._variablePointersStorageBuffer = 0;
    this._variablePointers = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceVariablePointerFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.variablePointersStorageBuffer !== void 0) this.variablePointersStorageBuffer = opts.variablePointersStorageBuffer;
      if (opts.variablePointers !== void 0) this.variablePointers = opts.variablePointers;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceVariablePointerFeatures.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get variablePointersStorageBuffer() {
    return this._variablePointersStorageBuffer;
  }
  set variablePointersStorageBuffer(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceVariablePointerFeatures.variablePointersStorageBuffer.byteOffset, value);
this._variablePointersStorageBuffer = value;
  }
  get variablePointers() {
    return this._variablePointers;
  }
  set variablePointers(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceVariablePointerFeatures.variablePointers.byteOffset, value);
this._variablePointers = value;
  }
  
};

VkPhysicalDeviceVariablePointerFeatures.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceVariablePointerFeatures = memoryLayouts.VkPhysicalDeviceVariablePointerFeatures;
VkPhysicalDeviceVariablePointerFeatures.byteLength = $VkPhysicalDeviceVariablePointerFeatures.byteLength;

VkPhysicalDeviceVariablePointerFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceVariablePointerFeatures.sType.byteOffset,
    byteLength: $VkPhysicalDeviceVariablePointerFeatures.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceVariablePointerFeatures.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceVariablePointerFeatures.pNext.byteLength
  }),
  variablePointersStorageBuffer: Object.freeze({
    byteOffset: $VkPhysicalDeviceVariablePointerFeatures.variablePointersStorageBuffer.byteOffset,
    byteLength: $VkPhysicalDeviceVariablePointerFeatures.variablePointersStorageBuffer.byteLength
  }),
  variablePointers: Object.freeze({
    byteOffset: $VkPhysicalDeviceVariablePointerFeatures.variablePointers.byteOffset,
    byteLength: $VkPhysicalDeviceVariablePointerFeatures.variablePointers.byteLength
  }),
});
class VkPhysicalDeviceVariablePointerFeaturesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._variablePointersStorageBuffer = 0;
    this._variablePointers = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceVariablePointerFeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.variablePointersStorageBuffer !== void 0) this.variablePointersStorageBuffer = opts.variablePointersStorageBuffer;
      if (opts.variablePointers !== void 0) this.variablePointers = opts.variablePointers;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceVariablePointerFeaturesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get variablePointersStorageBuffer() {
    return this._variablePointersStorageBuffer;
  }
  set variablePointersStorageBuffer(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceVariablePointerFeaturesKHR.variablePointersStorageBuffer.byteOffset, value);
this._variablePointersStorageBuffer = value;
  }
  get variablePointers() {
    return this._variablePointers;
  }
  set variablePointers(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceVariablePointerFeaturesKHR.variablePointers.byteOffset, value);
this._variablePointers = value;
  }
  
};

VkPhysicalDeviceVariablePointerFeaturesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceVariablePointerFeaturesKHR = memoryLayouts.VkPhysicalDeviceVariablePointerFeaturesKHR;
VkPhysicalDeviceVariablePointerFeaturesKHR.byteLength = $VkPhysicalDeviceVariablePointerFeaturesKHR.byteLength;

VkPhysicalDeviceVariablePointerFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceVariablePointerFeaturesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceVariablePointerFeaturesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceVariablePointerFeaturesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceVariablePointerFeaturesKHR.pNext.byteLength
  }),
  variablePointersStorageBuffer: Object.freeze({
    byteOffset: $VkPhysicalDeviceVariablePointerFeaturesKHR.variablePointersStorageBuffer.byteOffset,
    byteLength: $VkPhysicalDeviceVariablePointerFeaturesKHR.variablePointersStorageBuffer.byteLength
  }),
  variablePointers: Object.freeze({
    byteOffset: $VkPhysicalDeviceVariablePointerFeaturesKHR.variablePointers.byteOffset,
    byteLength: $VkPhysicalDeviceVariablePointerFeaturesKHR.variablePointers.byteLength
  }),
});
class VkExternalMemoryProperties {
  constructor(opts) {
    this._externalMemoryFeatures = 0;
    this._exportFromImportedHandleTypes = 0;
    this._compatibleHandleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get externalMemoryFeatures() {
    return this._externalMemoryFeatures;
  }
  get exportFromImportedHandleTypes() {
    return this._exportFromImportedHandleTypes;
  }
  get compatibleHandleTypes() {
    return this._compatibleHandleTypes;
  }
  
};

VkExternalMemoryProperties.prototype.flush = function flush() {
  
};

const $VkExternalMemoryProperties = memoryLayouts.VkExternalMemoryProperties;
VkExternalMemoryProperties.byteLength = $VkExternalMemoryProperties.byteLength;

VkExternalMemoryProperties.memoryLayout = Object.freeze({
  externalMemoryFeatures: Object.freeze({
    byteOffset: $VkExternalMemoryProperties.externalMemoryFeatures.byteOffset,
    byteLength: $VkExternalMemoryProperties.externalMemoryFeatures.byteLength
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: $VkExternalMemoryProperties.exportFromImportedHandleTypes.byteOffset,
    byteLength: $VkExternalMemoryProperties.exportFromImportedHandleTypes.byteLength
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: $VkExternalMemoryProperties.compatibleHandleTypes.byteOffset,
    byteLength: $VkExternalMemoryProperties.compatibleHandleTypes.byteLength
  }),
});
class VkExternalMemoryPropertiesKHR {
  constructor(opts) {
    this._externalMemoryFeatures = 0;
    this._exportFromImportedHandleTypes = 0;
    this._compatibleHandleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get externalMemoryFeatures() {
    return this._externalMemoryFeatures;
  }
  get exportFromImportedHandleTypes() {
    return this._exportFromImportedHandleTypes;
  }
  get compatibleHandleTypes() {
    return this._compatibleHandleTypes;
  }
  
};

VkExternalMemoryPropertiesKHR.prototype.flush = function flush() {
  
};

const $VkExternalMemoryPropertiesKHR = memoryLayouts.VkExternalMemoryPropertiesKHR;
VkExternalMemoryPropertiesKHR.byteLength = $VkExternalMemoryPropertiesKHR.byteLength;

VkExternalMemoryPropertiesKHR.memoryLayout = Object.freeze({
  externalMemoryFeatures: Object.freeze({
    byteOffset: $VkExternalMemoryPropertiesKHR.externalMemoryFeatures.byteOffset,
    byteLength: $VkExternalMemoryPropertiesKHR.externalMemoryFeatures.byteLength
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: $VkExternalMemoryPropertiesKHR.exportFromImportedHandleTypes.byteOffset,
    byteLength: $VkExternalMemoryPropertiesKHR.exportFromImportedHandleTypes.byteLength
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: $VkExternalMemoryPropertiesKHR.compatibleHandleTypes.byteOffset,
    byteLength: $VkExternalMemoryPropertiesKHR.compatibleHandleTypes.byteLength
  }),
});
class VkPhysicalDeviceExternalImageFormatInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalImageFormatInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalImageFormatInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalImageFormatInfo.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkPhysicalDeviceExternalImageFormatInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceExternalImageFormatInfo = memoryLayouts.VkPhysicalDeviceExternalImageFormatInfo;
VkPhysicalDeviceExternalImageFormatInfo.byteLength = $VkPhysicalDeviceExternalImageFormatInfo.byteLength;

VkPhysicalDeviceExternalImageFormatInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalImageFormatInfo.sType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalImageFormatInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalImageFormatInfo.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceExternalImageFormatInfo.pNext.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalImageFormatInfo.handleType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalImageFormatInfo.handleType.byteLength
  }),
});
class VkPhysicalDeviceExternalImageFormatInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalImageFormatInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalImageFormatInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalImageFormatInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkPhysicalDeviceExternalImageFormatInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceExternalImageFormatInfoKHR = memoryLayouts.VkPhysicalDeviceExternalImageFormatInfoKHR;
VkPhysicalDeviceExternalImageFormatInfoKHR.byteLength = $VkPhysicalDeviceExternalImageFormatInfoKHR.byteLength;

VkPhysicalDeviceExternalImageFormatInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalImageFormatInfoKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalImageFormatInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalImageFormatInfoKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceExternalImageFormatInfoKHR.pNext.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalImageFormatInfoKHR.handleType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalImageFormatInfoKHR.handleType.byteLength
  }),
});
class VkExternalImageFormatProperties {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._externalMemoryProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkExternalImageFormatProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExternalImageFormatProperties.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalImageFormatProperties.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.externalMemoryProperties !== null) { }
  
};

const $VkExternalImageFormatProperties = memoryLayouts.VkExternalImageFormatProperties;
VkExternalImageFormatProperties.byteLength = $VkExternalImageFormatProperties.byteLength;

VkExternalImageFormatProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExternalImageFormatProperties.sType.byteOffset,
    byteLength: $VkExternalImageFormatProperties.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExternalImageFormatProperties.pNext.byteOffset,
    byteLength: $VkExternalImageFormatProperties.pNext.byteLength
  }),
  externalMemoryProperties: Object.freeze({
    byteOffset: $VkExternalImageFormatProperties.externalMemoryProperties.byteOffset,
    byteLength: $VkExternalImageFormatProperties.externalMemoryProperties.byteLength
  }),
});
class VkExternalImageFormatPropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._externalMemoryProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkExternalImageFormatPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExternalImageFormatPropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalImageFormatPropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.externalMemoryProperties !== null) { }
  
};

const $VkExternalImageFormatPropertiesKHR = memoryLayouts.VkExternalImageFormatPropertiesKHR;
VkExternalImageFormatPropertiesKHR.byteLength = $VkExternalImageFormatPropertiesKHR.byteLength;

VkExternalImageFormatPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExternalImageFormatPropertiesKHR.sType.byteOffset,
    byteLength: $VkExternalImageFormatPropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExternalImageFormatPropertiesKHR.pNext.byteOffset,
    byteLength: $VkExternalImageFormatPropertiesKHR.pNext.byteLength
  }),
  externalMemoryProperties: Object.freeze({
    byteOffset: $VkExternalImageFormatPropertiesKHR.externalMemoryProperties.byteOffset,
    byteLength: $VkExternalImageFormatPropertiesKHR.externalMemoryProperties.byteLength
  }),
});
class VkPhysicalDeviceExternalBufferInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._usage = 0;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalBufferInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalBufferInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalBufferInfo.flags.byteOffset, value);
this._flags = value;
  }
  get usage() {
    return this._usage;
  }
  set usage(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalBufferInfo.usage.byteOffset, value);
this._usage = value;
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalBufferInfo.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkPhysicalDeviceExternalBufferInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceExternalBufferInfo = memoryLayouts.VkPhysicalDeviceExternalBufferInfo;
VkPhysicalDeviceExternalBufferInfo.byteLength = $VkPhysicalDeviceExternalBufferInfo.byteLength;

VkPhysicalDeviceExternalBufferInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalBufferInfo.sType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalBufferInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalBufferInfo.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceExternalBufferInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalBufferInfo.flags.byteOffset,
    byteLength: $VkPhysicalDeviceExternalBufferInfo.flags.byteLength
  }),
  usage: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalBufferInfo.usage.byteOffset,
    byteLength: $VkPhysicalDeviceExternalBufferInfo.usage.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalBufferInfo.handleType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalBufferInfo.handleType.byteLength
  }),
});
class VkPhysicalDeviceExternalBufferInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._usage = 0;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalBufferInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.usage !== void 0) this.usage = opts.usage;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalBufferInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalBufferInfoKHR.flags.byteOffset, value);
this._flags = value;
  }
  get usage() {
    return this._usage;
  }
  set usage(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalBufferInfoKHR.usage.byteOffset, value);
this._usage = value;
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalBufferInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkPhysicalDeviceExternalBufferInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceExternalBufferInfoKHR = memoryLayouts.VkPhysicalDeviceExternalBufferInfoKHR;
VkPhysicalDeviceExternalBufferInfoKHR.byteLength = $VkPhysicalDeviceExternalBufferInfoKHR.byteLength;

VkPhysicalDeviceExternalBufferInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalBufferInfoKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalBufferInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalBufferInfoKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceExternalBufferInfoKHR.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalBufferInfoKHR.flags.byteOffset,
    byteLength: $VkPhysicalDeviceExternalBufferInfoKHR.flags.byteLength
  }),
  usage: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalBufferInfoKHR.usage.byteOffset,
    byteLength: $VkPhysicalDeviceExternalBufferInfoKHR.usage.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalBufferInfoKHR.handleType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalBufferInfoKHR.handleType.byteLength
  }),
});
class VkExternalBufferProperties {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._externalMemoryProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkExternalBufferProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExternalBufferProperties.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalBufferProperties.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.externalMemoryProperties !== null) { }
  
};

const $VkExternalBufferProperties = memoryLayouts.VkExternalBufferProperties;
VkExternalBufferProperties.byteLength = $VkExternalBufferProperties.byteLength;

VkExternalBufferProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExternalBufferProperties.sType.byteOffset,
    byteLength: $VkExternalBufferProperties.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExternalBufferProperties.pNext.byteOffset,
    byteLength: $VkExternalBufferProperties.pNext.byteLength
  }),
  externalMemoryProperties: Object.freeze({
    byteOffset: $VkExternalBufferProperties.externalMemoryProperties.byteOffset,
    byteLength: $VkExternalBufferProperties.externalMemoryProperties.byteLength
  }),
});
class VkExternalBufferPropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._externalMemoryProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkExternalBufferPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExternalBufferPropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get externalMemoryProperties() {
    return this._externalMemoryProperties;
  }
  
};

VkExternalBufferPropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.externalMemoryProperties !== null) { }
  
};

const $VkExternalBufferPropertiesKHR = memoryLayouts.VkExternalBufferPropertiesKHR;
VkExternalBufferPropertiesKHR.byteLength = $VkExternalBufferPropertiesKHR.byteLength;

VkExternalBufferPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExternalBufferPropertiesKHR.sType.byteOffset,
    byteLength: $VkExternalBufferPropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExternalBufferPropertiesKHR.pNext.byteOffset,
    byteLength: $VkExternalBufferPropertiesKHR.pNext.byteLength
  }),
  externalMemoryProperties: Object.freeze({
    byteOffset: $VkExternalBufferPropertiesKHR.externalMemoryProperties.byteOffset,
    byteLength: $VkExternalBufferPropertiesKHR.externalMemoryProperties.byteLength
  }),
});
class VkPhysicalDeviceIDProperties {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._deviceUUID = null;
    this._driverUUID = null;
    this._deviceLUID = null;
    this._deviceNodeMask = 0;
    this._deviceLUIDValid = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceIDProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceIDProperties.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get deviceUUID() {
    return this._deviceUUID;
  }
  get driverUUID() {
    return this._driverUUID;
  }
  get deviceLUID() {
    return this._deviceLUID;
  }
  get deviceNodeMask() {
    return this._deviceNodeMask;
  }
  get deviceLUIDValid() {
    return this._deviceLUIDValid;
  }
  
};

VkPhysicalDeviceIDProperties.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.deviceUUID !== null) { }
  
  if (this.driverUUID !== null) { }
  
  if (this.deviceLUID !== null) { }
  
};

const $VkPhysicalDeviceIDProperties = memoryLayouts.VkPhysicalDeviceIDProperties;
VkPhysicalDeviceIDProperties.byteLength = $VkPhysicalDeviceIDProperties.byteLength;

VkPhysicalDeviceIDProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDProperties.sType.byteOffset,
    byteLength: $VkPhysicalDeviceIDProperties.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDProperties.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceIDProperties.pNext.byteLength
  }),
  deviceUUID: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDProperties.deviceUUID.byteOffset,
    byteLength: $VkPhysicalDeviceIDProperties.deviceUUID.byteLength
  }),
  driverUUID: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDProperties.driverUUID.byteOffset,
    byteLength: $VkPhysicalDeviceIDProperties.driverUUID.byteLength
  }),
  deviceLUID: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDProperties.deviceLUID.byteOffset,
    byteLength: $VkPhysicalDeviceIDProperties.deviceLUID.byteLength
  }),
  deviceNodeMask: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDProperties.deviceNodeMask.byteOffset,
    byteLength: $VkPhysicalDeviceIDProperties.deviceNodeMask.byteLength
  }),
  deviceLUIDValid: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDProperties.deviceLUIDValid.byteOffset,
    byteLength: $VkPhysicalDeviceIDProperties.deviceLUIDValid.byteLength
  }),
});
class VkPhysicalDeviceIDPropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._deviceUUID = null;
    this._driverUUID = null;
    this._deviceLUID = null;
    this._deviceNodeMask = 0;
    this._deviceLUIDValid = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceIDPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceIDPropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get deviceUUID() {
    return this._deviceUUID;
  }
  get driverUUID() {
    return this._driverUUID;
  }
  get deviceLUID() {
    return this._deviceLUID;
  }
  get deviceNodeMask() {
    return this._deviceNodeMask;
  }
  get deviceLUIDValid() {
    return this._deviceLUIDValid;
  }
  
};

VkPhysicalDeviceIDPropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.deviceUUID !== null) { }
  
  if (this.driverUUID !== null) { }
  
  if (this.deviceLUID !== null) { }
  
};

const $VkPhysicalDeviceIDPropertiesKHR = memoryLayouts.VkPhysicalDeviceIDPropertiesKHR;
VkPhysicalDeviceIDPropertiesKHR.byteLength = $VkPhysicalDeviceIDPropertiesKHR.byteLength;

VkPhysicalDeviceIDPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDPropertiesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceIDPropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDPropertiesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceIDPropertiesKHR.pNext.byteLength
  }),
  deviceUUID: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDPropertiesKHR.deviceUUID.byteOffset,
    byteLength: $VkPhysicalDeviceIDPropertiesKHR.deviceUUID.byteLength
  }),
  driverUUID: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDPropertiesKHR.driverUUID.byteOffset,
    byteLength: $VkPhysicalDeviceIDPropertiesKHR.driverUUID.byteLength
  }),
  deviceLUID: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDPropertiesKHR.deviceLUID.byteOffset,
    byteLength: $VkPhysicalDeviceIDPropertiesKHR.deviceLUID.byteLength
  }),
  deviceNodeMask: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDPropertiesKHR.deviceNodeMask.byteOffset,
    byteLength: $VkPhysicalDeviceIDPropertiesKHR.deviceNodeMask.byteLength
  }),
  deviceLUIDValid: Object.freeze({
    byteOffset: $VkPhysicalDeviceIDPropertiesKHR.deviceLUIDValid.byteOffset,
    byteLength: $VkPhysicalDeviceIDPropertiesKHR.deviceLUIDValid.byteLength
  }),
});
class VkExternalMemoryImageCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryImageCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExternalMemoryImageCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleTypes() {
    return this._handleTypes;
  }
  set handleTypes(value) {
    
this.memoryView.setInt32($VkExternalMemoryImageCreateInfo.handleTypes.byteOffset, value);
this._handleTypes = value;
  }
  
};

VkExternalMemoryImageCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExternalMemoryImageCreateInfo = memoryLayouts.VkExternalMemoryImageCreateInfo;
VkExternalMemoryImageCreateInfo.byteLength = $VkExternalMemoryImageCreateInfo.byteLength;

VkExternalMemoryImageCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExternalMemoryImageCreateInfo.sType.byteOffset,
    byteLength: $VkExternalMemoryImageCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExternalMemoryImageCreateInfo.pNext.byteOffset,
    byteLength: $VkExternalMemoryImageCreateInfo.pNext.byteLength
  }),
  handleTypes: Object.freeze({
    byteOffset: $VkExternalMemoryImageCreateInfo.handleTypes.byteOffset,
    byteLength: $VkExternalMemoryImageCreateInfo.handleTypes.byteLength
  }),
});
class VkExternalMemoryImageCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryImageCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExternalMemoryImageCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleTypes() {
    return this._handleTypes;
  }
  set handleTypes(value) {
    
this.memoryView.setInt32($VkExternalMemoryImageCreateInfoKHR.handleTypes.byteOffset, value);
this._handleTypes = value;
  }
  
};

VkExternalMemoryImageCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExternalMemoryImageCreateInfoKHR = memoryLayouts.VkExternalMemoryImageCreateInfoKHR;
VkExternalMemoryImageCreateInfoKHR.byteLength = $VkExternalMemoryImageCreateInfoKHR.byteLength;

VkExternalMemoryImageCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExternalMemoryImageCreateInfoKHR.sType.byteOffset,
    byteLength: $VkExternalMemoryImageCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExternalMemoryImageCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkExternalMemoryImageCreateInfoKHR.pNext.byteLength
  }),
  handleTypes: Object.freeze({
    byteOffset: $VkExternalMemoryImageCreateInfoKHR.handleTypes.byteOffset,
    byteLength: $VkExternalMemoryImageCreateInfoKHR.handleTypes.byteLength
  }),
});
class VkExternalMemoryBufferCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryBufferCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExternalMemoryBufferCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleTypes() {
    return this._handleTypes;
  }
  set handleTypes(value) {
    
this.memoryView.setInt32($VkExternalMemoryBufferCreateInfo.handleTypes.byteOffset, value);
this._handleTypes = value;
  }
  
};

VkExternalMemoryBufferCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExternalMemoryBufferCreateInfo = memoryLayouts.VkExternalMemoryBufferCreateInfo;
VkExternalMemoryBufferCreateInfo.byteLength = $VkExternalMemoryBufferCreateInfo.byteLength;

VkExternalMemoryBufferCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExternalMemoryBufferCreateInfo.sType.byteOffset,
    byteLength: $VkExternalMemoryBufferCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExternalMemoryBufferCreateInfo.pNext.byteOffset,
    byteLength: $VkExternalMemoryBufferCreateInfo.pNext.byteLength
  }),
  handleTypes: Object.freeze({
    byteOffset: $VkExternalMemoryBufferCreateInfo.handleTypes.byteOffset,
    byteLength: $VkExternalMemoryBufferCreateInfo.handleTypes.byteLength
  }),
});
class VkExternalMemoryBufferCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExternalMemoryBufferCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExternalMemoryBufferCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleTypes() {
    return this._handleTypes;
  }
  set handleTypes(value) {
    
this.memoryView.setInt32($VkExternalMemoryBufferCreateInfoKHR.handleTypes.byteOffset, value);
this._handleTypes = value;
  }
  
};

VkExternalMemoryBufferCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExternalMemoryBufferCreateInfoKHR = memoryLayouts.VkExternalMemoryBufferCreateInfoKHR;
VkExternalMemoryBufferCreateInfoKHR.byteLength = $VkExternalMemoryBufferCreateInfoKHR.byteLength;

VkExternalMemoryBufferCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExternalMemoryBufferCreateInfoKHR.sType.byteOffset,
    byteLength: $VkExternalMemoryBufferCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExternalMemoryBufferCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkExternalMemoryBufferCreateInfoKHR.pNext.byteLength
  }),
  handleTypes: Object.freeze({
    byteOffset: $VkExternalMemoryBufferCreateInfoKHR.handleTypes.byteOffset,
    byteLength: $VkExternalMemoryBufferCreateInfoKHR.handleTypes.byteLength
  }),
});
class VkExportMemoryAllocateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExportMemoryAllocateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExportMemoryAllocateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleTypes() {
    return this._handleTypes;
  }
  set handleTypes(value) {
    
this.memoryView.setInt32($VkExportMemoryAllocateInfo.handleTypes.byteOffset, value);
this._handleTypes = value;
  }
  
};

VkExportMemoryAllocateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExportMemoryAllocateInfo = memoryLayouts.VkExportMemoryAllocateInfo;
VkExportMemoryAllocateInfo.byteLength = $VkExportMemoryAllocateInfo.byteLength;

VkExportMemoryAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExportMemoryAllocateInfo.sType.byteOffset,
    byteLength: $VkExportMemoryAllocateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExportMemoryAllocateInfo.pNext.byteOffset,
    byteLength: $VkExportMemoryAllocateInfo.pNext.byteLength
  }),
  handleTypes: Object.freeze({
    byteOffset: $VkExportMemoryAllocateInfo.handleTypes.byteOffset,
    byteLength: $VkExportMemoryAllocateInfo.handleTypes.byteLength
  }),
});
class VkExportMemoryAllocateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExportMemoryAllocateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExportMemoryAllocateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleTypes() {
    return this._handleTypes;
  }
  set handleTypes(value) {
    
this.memoryView.setInt32($VkExportMemoryAllocateInfoKHR.handleTypes.byteOffset, value);
this._handleTypes = value;
  }
  
};

VkExportMemoryAllocateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExportMemoryAllocateInfoKHR = memoryLayouts.VkExportMemoryAllocateInfoKHR;
VkExportMemoryAllocateInfoKHR.byteLength = $VkExportMemoryAllocateInfoKHR.byteLength;

VkExportMemoryAllocateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExportMemoryAllocateInfoKHR.sType.byteOffset,
    byteLength: $VkExportMemoryAllocateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExportMemoryAllocateInfoKHR.pNext.byteOffset,
    byteLength: $VkExportMemoryAllocateInfoKHR.pNext.byteLength
  }),
  handleTypes: Object.freeze({
    byteOffset: $VkExportMemoryAllocateInfoKHR.handleTypes.byteOffset,
    byteLength: $VkExportMemoryAllocateInfoKHR.handleTypes.byteLength
  }),
});
class VkImportMemoryWin32HandleInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleType = 0;
    this._handle = 0n;
    this._name = null;
    this.memoryBuffer = new ArrayBuffer(VkImportMemoryWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.handle !== void 0) this.handle = opts.handle;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImportMemoryWin32HandleInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkImportMemoryWin32HandleInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  get handle() {
    return this._handle;
  }
  set handle(value) {
    
  }
  get name() {
    return this._name;
  }
  set name(value) {
    String
  }
  
};

VkImportMemoryWin32HandleInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImportMemoryWin32HandleInfoKHR = memoryLayouts.VkImportMemoryWin32HandleInfoKHR;
VkImportMemoryWin32HandleInfoKHR.byteLength = $VkImportMemoryWin32HandleInfoKHR.byteLength;

VkImportMemoryWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImportMemoryWin32HandleInfoKHR.sType.byteOffset,
    byteLength: $VkImportMemoryWin32HandleInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImportMemoryWin32HandleInfoKHR.pNext.byteOffset,
    byteLength: $VkImportMemoryWin32HandleInfoKHR.pNext.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkImportMemoryWin32HandleInfoKHR.handleType.byteOffset,
    byteLength: $VkImportMemoryWin32HandleInfoKHR.handleType.byteLength
  }),
  handle: Object.freeze({
    byteOffset: $VkImportMemoryWin32HandleInfoKHR.handle.byteOffset,
    byteLength: $VkImportMemoryWin32HandleInfoKHR.handle.byteLength
  }),
  name: Object.freeze({
    byteOffset: $VkImportMemoryWin32HandleInfoKHR.name.byteOffset,
    byteLength: $VkImportMemoryWin32HandleInfoKHR.name.byteLength
  }),
});
class VkExportMemoryWin32HandleInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._name = null;
    this.memoryBuffer = new ArrayBuffer(VkExportMemoryWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExportMemoryWin32HandleInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get name() {
    return this._name;
  }
  set name(value) {
    String
  }
  
};

VkExportMemoryWin32HandleInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExportMemoryWin32HandleInfoKHR = memoryLayouts.VkExportMemoryWin32HandleInfoKHR;
VkExportMemoryWin32HandleInfoKHR.byteLength = $VkExportMemoryWin32HandleInfoKHR.byteLength;

VkExportMemoryWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExportMemoryWin32HandleInfoKHR.sType.byteOffset,
    byteLength: $VkExportMemoryWin32HandleInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExportMemoryWin32HandleInfoKHR.pNext.byteOffset,
    byteLength: $VkExportMemoryWin32HandleInfoKHR.pNext.byteLength
  }),
  name: Object.freeze({
    byteOffset: $VkExportMemoryWin32HandleInfoKHR.name.byteOffset,
    byteLength: $VkExportMemoryWin32HandleInfoKHR.name.byteLength
  }),
});
class VkMemoryWin32HandlePropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._memoryTypeBits = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryWin32HandlePropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryWin32HandlePropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get memoryTypeBits() {
    return this._memoryTypeBits;
  }
  
};

VkMemoryWin32HandlePropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryWin32HandlePropertiesKHR = memoryLayouts.VkMemoryWin32HandlePropertiesKHR;
VkMemoryWin32HandlePropertiesKHR.byteLength = $VkMemoryWin32HandlePropertiesKHR.byteLength;

VkMemoryWin32HandlePropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryWin32HandlePropertiesKHR.sType.byteOffset,
    byteLength: $VkMemoryWin32HandlePropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryWin32HandlePropertiesKHR.pNext.byteOffset,
    byteLength: $VkMemoryWin32HandlePropertiesKHR.pNext.byteLength
  }),
  memoryTypeBits: Object.freeze({
    byteOffset: $VkMemoryWin32HandlePropertiesKHR.memoryTypeBits.byteOffset,
    byteLength: $VkMemoryWin32HandlePropertiesKHR.memoryTypeBits.byteLength
  }),
});
class VkMemoryGetWin32HandleInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._memory = null;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryGetWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryGetWin32HandleInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    String
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkMemoryGetWin32HandleInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkMemoryGetWin32HandleInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryGetWin32HandleInfoKHR = memoryLayouts.VkMemoryGetWin32HandleInfoKHR;
VkMemoryGetWin32HandleInfoKHR.byteLength = $VkMemoryGetWin32HandleInfoKHR.byteLength;

VkMemoryGetWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryGetWin32HandleInfoKHR.sType.byteOffset,
    byteLength: $VkMemoryGetWin32HandleInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryGetWin32HandleInfoKHR.pNext.byteOffset,
    byteLength: $VkMemoryGetWin32HandleInfoKHR.pNext.byteLength
  }),
  memory: Object.freeze({
    byteOffset: $VkMemoryGetWin32HandleInfoKHR.memory.byteOffset,
    byteLength: $VkMemoryGetWin32HandleInfoKHR.memory.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkMemoryGetWin32HandleInfoKHR.handleType.byteOffset,
    byteLength: $VkMemoryGetWin32HandleInfoKHR.handleType.byteLength
  }),
});
class VkImportMemoryFdInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleType = 0;
    this._fd = 0;
    this.memoryBuffer = new ArrayBuffer(VkImportMemoryFdInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.fd !== void 0) this.fd = opts.fd;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImportMemoryFdInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkImportMemoryFdInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  get fd() {
    return this._fd;
  }
  set fd(value) {
    
this.memoryView.setInt32($VkImportMemoryFdInfoKHR.fd.byteOffset, value);
this._fd = value;
  }
  
};

VkImportMemoryFdInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImportMemoryFdInfoKHR = memoryLayouts.VkImportMemoryFdInfoKHR;
VkImportMemoryFdInfoKHR.byteLength = $VkImportMemoryFdInfoKHR.byteLength;

VkImportMemoryFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImportMemoryFdInfoKHR.sType.byteOffset,
    byteLength: $VkImportMemoryFdInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImportMemoryFdInfoKHR.pNext.byteOffset,
    byteLength: $VkImportMemoryFdInfoKHR.pNext.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkImportMemoryFdInfoKHR.handleType.byteOffset,
    byteLength: $VkImportMemoryFdInfoKHR.handleType.byteLength
  }),
  fd: Object.freeze({
    byteOffset: $VkImportMemoryFdInfoKHR.fd.byteOffset,
    byteLength: $VkImportMemoryFdInfoKHR.fd.byteLength
  }),
});
class VkMemoryFdPropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._memoryTypeBits = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryFdPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryFdPropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get memoryTypeBits() {
    return this._memoryTypeBits;
  }
  
};

VkMemoryFdPropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryFdPropertiesKHR = memoryLayouts.VkMemoryFdPropertiesKHR;
VkMemoryFdPropertiesKHR.byteLength = $VkMemoryFdPropertiesKHR.byteLength;

VkMemoryFdPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryFdPropertiesKHR.sType.byteOffset,
    byteLength: $VkMemoryFdPropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryFdPropertiesKHR.pNext.byteOffset,
    byteLength: $VkMemoryFdPropertiesKHR.pNext.byteLength
  }),
  memoryTypeBits: Object.freeze({
    byteOffset: $VkMemoryFdPropertiesKHR.memoryTypeBits.byteOffset,
    byteLength: $VkMemoryFdPropertiesKHR.memoryTypeBits.byteLength
  }),
});
class VkMemoryGetFdInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._memory = null;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryGetFdInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryGetFdInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    String
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkMemoryGetFdInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkMemoryGetFdInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryGetFdInfoKHR = memoryLayouts.VkMemoryGetFdInfoKHR;
VkMemoryGetFdInfoKHR.byteLength = $VkMemoryGetFdInfoKHR.byteLength;

VkMemoryGetFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryGetFdInfoKHR.sType.byteOffset,
    byteLength: $VkMemoryGetFdInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryGetFdInfoKHR.pNext.byteOffset,
    byteLength: $VkMemoryGetFdInfoKHR.pNext.byteLength
  }),
  memory: Object.freeze({
    byteOffset: $VkMemoryGetFdInfoKHR.memory.byteOffset,
    byteLength: $VkMemoryGetFdInfoKHR.memory.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkMemoryGetFdInfoKHR.handleType.byteOffset,
    byteLength: $VkMemoryGetFdInfoKHR.handleType.byteLength
  }),
});
class VkWin32KeyedMutexAcquireReleaseInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._acquireCount = 0;
    this._pAcquireSyncs = null;
    this._pAcquireKeys = null;
    this._pAcquireTimeouts = null;
    this._releaseCount = 0;
    this._pReleaseSyncs = null;
    this._pReleaseKeys = null;
    this.memoryBuffer = new ArrayBuffer(VkWin32KeyedMutexAcquireReleaseInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.acquireCount !== void 0) this.acquireCount = opts.acquireCount;
      if (opts.pAcquireSyncs !== void 0) this.pAcquireSyncs = opts.pAcquireSyncs;
      if (opts.pAcquireKeys !== void 0) this.pAcquireKeys = opts.pAcquireKeys;
      if (opts.pAcquireTimeouts !== void 0) this.pAcquireTimeouts = opts.pAcquireTimeouts;
      if (opts.releaseCount !== void 0) this.releaseCount = opts.releaseCount;
      if (opts.pReleaseSyncs !== void 0) this.pReleaseSyncs = opts.pReleaseSyncs;
      if (opts.pReleaseKeys !== void 0) this.pReleaseKeys = opts.pReleaseKeys;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkWin32KeyedMutexAcquireReleaseInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get acquireCount() {
    return this._acquireCount;
  }
  set acquireCount(value) {
    
this.memoryView.setUint32($VkWin32KeyedMutexAcquireReleaseInfoKHR.acquireCount.byteOffset, value);
this._acquireCount = value;
  }
  get pAcquireSyncs() {
    return this._pAcquireSyncs;
  }
  set pAcquireSyncs(value) {
    
  }
  get pAcquireKeys() {
    return this._pAcquireKeys;
  }
  set pAcquireKeys(value) {
    
  }
  get pAcquireTimeouts() {
    return this._pAcquireTimeouts;
  }
  set pAcquireTimeouts(value) {
    
  }
  get releaseCount() {
    return this._releaseCount;
  }
  set releaseCount(value) {
    
this.memoryView.setUint32($VkWin32KeyedMutexAcquireReleaseInfoKHR.releaseCount.byteOffset, value);
this._releaseCount = value;
  }
  get pReleaseSyncs() {
    return this._pReleaseSyncs;
  }
  set pReleaseSyncs(value) {
    
  }
  get pReleaseKeys() {
    return this._pReleaseKeys;
  }
  set pReleaseKeys(value) {
    
  }
  
};

VkWin32KeyedMutexAcquireReleaseInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pAcquireSyncs !== null) { }
  
  if (this.pReleaseSyncs !== null) { }
  
};

const $VkWin32KeyedMutexAcquireReleaseInfoKHR = memoryLayouts.VkWin32KeyedMutexAcquireReleaseInfoKHR;
VkWin32KeyedMutexAcquireReleaseInfoKHR.byteLength = $VkWin32KeyedMutexAcquireReleaseInfoKHR.byteLength;

VkWin32KeyedMutexAcquireReleaseInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoKHR.sType.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoKHR.pNext.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoKHR.pNext.byteLength
  }),
  acquireCount: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoKHR.acquireCount.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoKHR.acquireCount.byteLength
  }),
  pAcquireSyncs: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireSyncs.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireSyncs.byteLength
  }),
  pAcquireKeys: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireKeys.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireKeys.byteLength
  }),
  pAcquireTimeouts: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireTimeouts.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoKHR.pAcquireTimeouts.byteLength
  }),
  releaseCount: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoKHR.releaseCount.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoKHR.releaseCount.byteLength
  }),
  pReleaseSyncs: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoKHR.pReleaseSyncs.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoKHR.pReleaseSyncs.byteLength
  }),
  pReleaseKeys: Object.freeze({
    byteOffset: $VkWin32KeyedMutexAcquireReleaseInfoKHR.pReleaseKeys.byteOffset,
    byteLength: $VkWin32KeyedMutexAcquireReleaseInfoKHR.pReleaseKeys.byteLength
  }),
});
class VkPhysicalDeviceExternalSemaphoreInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalSemaphoreInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalSemaphoreInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalSemaphoreInfo.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkPhysicalDeviceExternalSemaphoreInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceExternalSemaphoreInfo = memoryLayouts.VkPhysicalDeviceExternalSemaphoreInfo;
VkPhysicalDeviceExternalSemaphoreInfo.byteLength = $VkPhysicalDeviceExternalSemaphoreInfo.byteLength;

VkPhysicalDeviceExternalSemaphoreInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalSemaphoreInfo.sType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalSemaphoreInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalSemaphoreInfo.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceExternalSemaphoreInfo.pNext.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalSemaphoreInfo.handleType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalSemaphoreInfo.handleType.byteLength
  }),
});
class VkPhysicalDeviceExternalSemaphoreInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalSemaphoreInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalSemaphoreInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalSemaphoreInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkPhysicalDeviceExternalSemaphoreInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceExternalSemaphoreInfoKHR = memoryLayouts.VkPhysicalDeviceExternalSemaphoreInfoKHR;
VkPhysicalDeviceExternalSemaphoreInfoKHR.byteLength = $VkPhysicalDeviceExternalSemaphoreInfoKHR.byteLength;

VkPhysicalDeviceExternalSemaphoreInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalSemaphoreInfoKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalSemaphoreInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalSemaphoreInfoKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceExternalSemaphoreInfoKHR.pNext.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalSemaphoreInfoKHR.handleType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalSemaphoreInfoKHR.handleType.byteLength
  }),
});
class VkExternalSemaphoreProperties {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._exportFromImportedHandleTypes = 0;
    this._compatibleHandleTypes = 0;
    this._externalSemaphoreFeatures = 0;
    this.memoryBuffer = new ArrayBuffer(VkExternalSemaphoreProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExternalSemaphoreProperties.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get exportFromImportedHandleTypes() {
    return this._exportFromImportedHandleTypes;
  }
  get compatibleHandleTypes() {
    return this._compatibleHandleTypes;
  }
  get externalSemaphoreFeatures() {
    return this._externalSemaphoreFeatures;
  }
  
};

VkExternalSemaphoreProperties.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExternalSemaphoreProperties = memoryLayouts.VkExternalSemaphoreProperties;
VkExternalSemaphoreProperties.byteLength = $VkExternalSemaphoreProperties.byteLength;

VkExternalSemaphoreProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExternalSemaphoreProperties.sType.byteOffset,
    byteLength: $VkExternalSemaphoreProperties.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExternalSemaphoreProperties.pNext.byteOffset,
    byteLength: $VkExternalSemaphoreProperties.pNext.byteLength
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: $VkExternalSemaphoreProperties.exportFromImportedHandleTypes.byteOffset,
    byteLength: $VkExternalSemaphoreProperties.exportFromImportedHandleTypes.byteLength
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: $VkExternalSemaphoreProperties.compatibleHandleTypes.byteOffset,
    byteLength: $VkExternalSemaphoreProperties.compatibleHandleTypes.byteLength
  }),
  externalSemaphoreFeatures: Object.freeze({
    byteOffset: $VkExternalSemaphoreProperties.externalSemaphoreFeatures.byteOffset,
    byteLength: $VkExternalSemaphoreProperties.externalSemaphoreFeatures.byteLength
  }),
});
class VkExternalSemaphorePropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._exportFromImportedHandleTypes = 0;
    this._compatibleHandleTypes = 0;
    this._externalSemaphoreFeatures = 0;
    this.memoryBuffer = new ArrayBuffer(VkExternalSemaphorePropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExternalSemaphorePropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get exportFromImportedHandleTypes() {
    return this._exportFromImportedHandleTypes;
  }
  get compatibleHandleTypes() {
    return this._compatibleHandleTypes;
  }
  get externalSemaphoreFeatures() {
    return this._externalSemaphoreFeatures;
  }
  
};

VkExternalSemaphorePropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExternalSemaphorePropertiesKHR = memoryLayouts.VkExternalSemaphorePropertiesKHR;
VkExternalSemaphorePropertiesKHR.byteLength = $VkExternalSemaphorePropertiesKHR.byteLength;

VkExternalSemaphorePropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExternalSemaphorePropertiesKHR.sType.byteOffset,
    byteLength: $VkExternalSemaphorePropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExternalSemaphorePropertiesKHR.pNext.byteOffset,
    byteLength: $VkExternalSemaphorePropertiesKHR.pNext.byteLength
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: $VkExternalSemaphorePropertiesKHR.exportFromImportedHandleTypes.byteOffset,
    byteLength: $VkExternalSemaphorePropertiesKHR.exportFromImportedHandleTypes.byteLength
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: $VkExternalSemaphorePropertiesKHR.compatibleHandleTypes.byteOffset,
    byteLength: $VkExternalSemaphorePropertiesKHR.compatibleHandleTypes.byteLength
  }),
  externalSemaphoreFeatures: Object.freeze({
    byteOffset: $VkExternalSemaphorePropertiesKHR.externalSemaphoreFeatures.byteOffset,
    byteLength: $VkExternalSemaphorePropertiesKHR.externalSemaphoreFeatures.byteLength
  }),
});
class VkExportSemaphoreCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExportSemaphoreCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExportSemaphoreCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleTypes() {
    return this._handleTypes;
  }
  set handleTypes(value) {
    
this.memoryView.setInt32($VkExportSemaphoreCreateInfo.handleTypes.byteOffset, value);
this._handleTypes = value;
  }
  
};

VkExportSemaphoreCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExportSemaphoreCreateInfo = memoryLayouts.VkExportSemaphoreCreateInfo;
VkExportSemaphoreCreateInfo.byteLength = $VkExportSemaphoreCreateInfo.byteLength;

VkExportSemaphoreCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExportSemaphoreCreateInfo.sType.byteOffset,
    byteLength: $VkExportSemaphoreCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExportSemaphoreCreateInfo.pNext.byteOffset,
    byteLength: $VkExportSemaphoreCreateInfo.pNext.byteLength
  }),
  handleTypes: Object.freeze({
    byteOffset: $VkExportSemaphoreCreateInfo.handleTypes.byteOffset,
    byteLength: $VkExportSemaphoreCreateInfo.handleTypes.byteLength
  }),
});
class VkExportSemaphoreCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExportSemaphoreCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExportSemaphoreCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleTypes() {
    return this._handleTypes;
  }
  set handleTypes(value) {
    
this.memoryView.setInt32($VkExportSemaphoreCreateInfoKHR.handleTypes.byteOffset, value);
this._handleTypes = value;
  }
  
};

VkExportSemaphoreCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExportSemaphoreCreateInfoKHR = memoryLayouts.VkExportSemaphoreCreateInfoKHR;
VkExportSemaphoreCreateInfoKHR.byteLength = $VkExportSemaphoreCreateInfoKHR.byteLength;

VkExportSemaphoreCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExportSemaphoreCreateInfoKHR.sType.byteOffset,
    byteLength: $VkExportSemaphoreCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExportSemaphoreCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkExportSemaphoreCreateInfoKHR.pNext.byteLength
  }),
  handleTypes: Object.freeze({
    byteOffset: $VkExportSemaphoreCreateInfoKHR.handleTypes.byteOffset,
    byteLength: $VkExportSemaphoreCreateInfoKHR.handleTypes.byteLength
  }),
});
class VkImportSemaphoreWin32HandleInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._semaphore = null;
    this._flags = 0;
    this._handleType = 0;
    this._handle = 0n;
    this._name = null;
    this.memoryBuffer = new ArrayBuffer(VkImportSemaphoreWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.handle !== void 0) this.handle = opts.handle;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImportSemaphoreWin32HandleInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    String
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkImportSemaphoreWin32HandleInfoKHR.flags.byteOffset, value);
this._flags = value;
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkImportSemaphoreWin32HandleInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  get handle() {
    return this._handle;
  }
  set handle(value) {
    
  }
  get name() {
    return this._name;
  }
  set name(value) {
    String
  }
  
};

VkImportSemaphoreWin32HandleInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImportSemaphoreWin32HandleInfoKHR = memoryLayouts.VkImportSemaphoreWin32HandleInfoKHR;
VkImportSemaphoreWin32HandleInfoKHR.byteLength = $VkImportSemaphoreWin32HandleInfoKHR.byteLength;

VkImportSemaphoreWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImportSemaphoreWin32HandleInfoKHR.sType.byteOffset,
    byteLength: $VkImportSemaphoreWin32HandleInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImportSemaphoreWin32HandleInfoKHR.pNext.byteOffset,
    byteLength: $VkImportSemaphoreWin32HandleInfoKHR.pNext.byteLength
  }),
  semaphore: Object.freeze({
    byteOffset: $VkImportSemaphoreWin32HandleInfoKHR.semaphore.byteOffset,
    byteLength: $VkImportSemaphoreWin32HandleInfoKHR.semaphore.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkImportSemaphoreWin32HandleInfoKHR.flags.byteOffset,
    byteLength: $VkImportSemaphoreWin32HandleInfoKHR.flags.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkImportSemaphoreWin32HandleInfoKHR.handleType.byteOffset,
    byteLength: $VkImportSemaphoreWin32HandleInfoKHR.handleType.byteLength
  }),
  handle: Object.freeze({
    byteOffset: $VkImportSemaphoreWin32HandleInfoKHR.handle.byteOffset,
    byteLength: $VkImportSemaphoreWin32HandleInfoKHR.handle.byteLength
  }),
  name: Object.freeze({
    byteOffset: $VkImportSemaphoreWin32HandleInfoKHR.name.byteOffset,
    byteLength: $VkImportSemaphoreWin32HandleInfoKHR.name.byteLength
  }),
});
class VkExportSemaphoreWin32HandleInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._name = null;
    this.memoryBuffer = new ArrayBuffer(VkExportSemaphoreWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExportSemaphoreWin32HandleInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get name() {
    return this._name;
  }
  set name(value) {
    String
  }
  
};

VkExportSemaphoreWin32HandleInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExportSemaphoreWin32HandleInfoKHR = memoryLayouts.VkExportSemaphoreWin32HandleInfoKHR;
VkExportSemaphoreWin32HandleInfoKHR.byteLength = $VkExportSemaphoreWin32HandleInfoKHR.byteLength;

VkExportSemaphoreWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExportSemaphoreWin32HandleInfoKHR.sType.byteOffset,
    byteLength: $VkExportSemaphoreWin32HandleInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExportSemaphoreWin32HandleInfoKHR.pNext.byteOffset,
    byteLength: $VkExportSemaphoreWin32HandleInfoKHR.pNext.byteLength
  }),
  name: Object.freeze({
    byteOffset: $VkExportSemaphoreWin32HandleInfoKHR.name.byteOffset,
    byteLength: $VkExportSemaphoreWin32HandleInfoKHR.name.byteLength
  }),
});
class VkD3D12FenceSubmitInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._waitSemaphoreValuesCount = 0;
    this._pWaitSemaphoreValues = null;
    this._signalSemaphoreValuesCount = 0;
    this._pSignalSemaphoreValues = null;
    this.memoryBuffer = new ArrayBuffer(VkD3D12FenceSubmitInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreValuesCount !== void 0) this.waitSemaphoreValuesCount = opts.waitSemaphoreValuesCount;
      if (opts.pWaitSemaphoreValues !== void 0) this.pWaitSemaphoreValues = opts.pWaitSemaphoreValues;
      if (opts.signalSemaphoreValuesCount !== void 0) this.signalSemaphoreValuesCount = opts.signalSemaphoreValuesCount;
      if (opts.pSignalSemaphoreValues !== void 0) this.pSignalSemaphoreValues = opts.pSignalSemaphoreValues;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkD3D12FenceSubmitInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get waitSemaphoreValuesCount() {
    return this._waitSemaphoreValuesCount;
  }
  set waitSemaphoreValuesCount(value) {
    
this.memoryView.setUint32($VkD3D12FenceSubmitInfoKHR.waitSemaphoreValuesCount.byteOffset, value);
this._waitSemaphoreValuesCount = value;
  }
  get pWaitSemaphoreValues() {
    return this._pWaitSemaphoreValues;
  }
  set pWaitSemaphoreValues(value) {
    
  }
  get signalSemaphoreValuesCount() {
    return this._signalSemaphoreValuesCount;
  }
  set signalSemaphoreValuesCount(value) {
    
this.memoryView.setUint32($VkD3D12FenceSubmitInfoKHR.signalSemaphoreValuesCount.byteOffset, value);
this._signalSemaphoreValuesCount = value;
  }
  get pSignalSemaphoreValues() {
    return this._pSignalSemaphoreValues;
  }
  set pSignalSemaphoreValues(value) {
    
  }
  
};

VkD3D12FenceSubmitInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkD3D12FenceSubmitInfoKHR = memoryLayouts.VkD3D12FenceSubmitInfoKHR;
VkD3D12FenceSubmitInfoKHR.byteLength = $VkD3D12FenceSubmitInfoKHR.byteLength;

VkD3D12FenceSubmitInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkD3D12FenceSubmitInfoKHR.sType.byteOffset,
    byteLength: $VkD3D12FenceSubmitInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkD3D12FenceSubmitInfoKHR.pNext.byteOffset,
    byteLength: $VkD3D12FenceSubmitInfoKHR.pNext.byteLength
  }),
  waitSemaphoreValuesCount: Object.freeze({
    byteOffset: $VkD3D12FenceSubmitInfoKHR.waitSemaphoreValuesCount.byteOffset,
    byteLength: $VkD3D12FenceSubmitInfoKHR.waitSemaphoreValuesCount.byteLength
  }),
  pWaitSemaphoreValues: Object.freeze({
    byteOffset: $VkD3D12FenceSubmitInfoKHR.pWaitSemaphoreValues.byteOffset,
    byteLength: $VkD3D12FenceSubmitInfoKHR.pWaitSemaphoreValues.byteLength
  }),
  signalSemaphoreValuesCount: Object.freeze({
    byteOffset: $VkD3D12FenceSubmitInfoKHR.signalSemaphoreValuesCount.byteOffset,
    byteLength: $VkD3D12FenceSubmitInfoKHR.signalSemaphoreValuesCount.byteLength
  }),
  pSignalSemaphoreValues: Object.freeze({
    byteOffset: $VkD3D12FenceSubmitInfoKHR.pSignalSemaphoreValues.byteOffset,
    byteLength: $VkD3D12FenceSubmitInfoKHR.pSignalSemaphoreValues.byteLength
  }),
});
class VkSemaphoreGetWin32HandleInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._semaphore = null;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkSemaphoreGetWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSemaphoreGetWin32HandleInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    String
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkSemaphoreGetWin32HandleInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkSemaphoreGetWin32HandleInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSemaphoreGetWin32HandleInfoKHR = memoryLayouts.VkSemaphoreGetWin32HandleInfoKHR;
VkSemaphoreGetWin32HandleInfoKHR.byteLength = $VkSemaphoreGetWin32HandleInfoKHR.byteLength;

VkSemaphoreGetWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSemaphoreGetWin32HandleInfoKHR.sType.byteOffset,
    byteLength: $VkSemaphoreGetWin32HandleInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSemaphoreGetWin32HandleInfoKHR.pNext.byteOffset,
    byteLength: $VkSemaphoreGetWin32HandleInfoKHR.pNext.byteLength
  }),
  semaphore: Object.freeze({
    byteOffset: $VkSemaphoreGetWin32HandleInfoKHR.semaphore.byteOffset,
    byteLength: $VkSemaphoreGetWin32HandleInfoKHR.semaphore.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkSemaphoreGetWin32HandleInfoKHR.handleType.byteOffset,
    byteLength: $VkSemaphoreGetWin32HandleInfoKHR.handleType.byteLength
  }),
});
class VkImportSemaphoreFdInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._semaphore = null;
    this._flags = 0;
    this._handleType = 0;
    this._fd = 0;
    this.memoryBuffer = new ArrayBuffer(VkImportSemaphoreFdInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.fd !== void 0) this.fd = opts.fd;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImportSemaphoreFdInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    String
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkImportSemaphoreFdInfoKHR.flags.byteOffset, value);
this._flags = value;
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkImportSemaphoreFdInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  get fd() {
    return this._fd;
  }
  set fd(value) {
    
this.memoryView.setInt32($VkImportSemaphoreFdInfoKHR.fd.byteOffset, value);
this._fd = value;
  }
  
};

VkImportSemaphoreFdInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImportSemaphoreFdInfoKHR = memoryLayouts.VkImportSemaphoreFdInfoKHR;
VkImportSemaphoreFdInfoKHR.byteLength = $VkImportSemaphoreFdInfoKHR.byteLength;

VkImportSemaphoreFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImportSemaphoreFdInfoKHR.sType.byteOffset,
    byteLength: $VkImportSemaphoreFdInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImportSemaphoreFdInfoKHR.pNext.byteOffset,
    byteLength: $VkImportSemaphoreFdInfoKHR.pNext.byteLength
  }),
  semaphore: Object.freeze({
    byteOffset: $VkImportSemaphoreFdInfoKHR.semaphore.byteOffset,
    byteLength: $VkImportSemaphoreFdInfoKHR.semaphore.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkImportSemaphoreFdInfoKHR.flags.byteOffset,
    byteLength: $VkImportSemaphoreFdInfoKHR.flags.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkImportSemaphoreFdInfoKHR.handleType.byteOffset,
    byteLength: $VkImportSemaphoreFdInfoKHR.handleType.byteLength
  }),
  fd: Object.freeze({
    byteOffset: $VkImportSemaphoreFdInfoKHR.fd.byteOffset,
    byteLength: $VkImportSemaphoreFdInfoKHR.fd.byteLength
  }),
});
class VkSemaphoreGetFdInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._semaphore = null;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkSemaphoreGetFdInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSemaphoreGetFdInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    String
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkSemaphoreGetFdInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkSemaphoreGetFdInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSemaphoreGetFdInfoKHR = memoryLayouts.VkSemaphoreGetFdInfoKHR;
VkSemaphoreGetFdInfoKHR.byteLength = $VkSemaphoreGetFdInfoKHR.byteLength;

VkSemaphoreGetFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSemaphoreGetFdInfoKHR.sType.byteOffset,
    byteLength: $VkSemaphoreGetFdInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSemaphoreGetFdInfoKHR.pNext.byteOffset,
    byteLength: $VkSemaphoreGetFdInfoKHR.pNext.byteLength
  }),
  semaphore: Object.freeze({
    byteOffset: $VkSemaphoreGetFdInfoKHR.semaphore.byteOffset,
    byteLength: $VkSemaphoreGetFdInfoKHR.semaphore.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkSemaphoreGetFdInfoKHR.handleType.byteOffset,
    byteLength: $VkSemaphoreGetFdInfoKHR.handleType.byteLength
  }),
});
class VkPhysicalDeviceExternalFenceInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalFenceInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalFenceInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalFenceInfo.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkPhysicalDeviceExternalFenceInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceExternalFenceInfo = memoryLayouts.VkPhysicalDeviceExternalFenceInfo;
VkPhysicalDeviceExternalFenceInfo.byteLength = $VkPhysicalDeviceExternalFenceInfo.byteLength;

VkPhysicalDeviceExternalFenceInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalFenceInfo.sType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalFenceInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalFenceInfo.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceExternalFenceInfo.pNext.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalFenceInfo.handleType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalFenceInfo.handleType.byteLength
  }),
});
class VkPhysicalDeviceExternalFenceInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalFenceInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalFenceInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalFenceInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkPhysicalDeviceExternalFenceInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceExternalFenceInfoKHR = memoryLayouts.VkPhysicalDeviceExternalFenceInfoKHR;
VkPhysicalDeviceExternalFenceInfoKHR.byteLength = $VkPhysicalDeviceExternalFenceInfoKHR.byteLength;

VkPhysicalDeviceExternalFenceInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalFenceInfoKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalFenceInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalFenceInfoKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceExternalFenceInfoKHR.pNext.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalFenceInfoKHR.handleType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalFenceInfoKHR.handleType.byteLength
  }),
});
class VkExternalFenceProperties {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._exportFromImportedHandleTypes = 0;
    this._compatibleHandleTypes = 0;
    this._externalFenceFeatures = 0;
    this.memoryBuffer = new ArrayBuffer(VkExternalFenceProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExternalFenceProperties.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get exportFromImportedHandleTypes() {
    return this._exportFromImportedHandleTypes;
  }
  get compatibleHandleTypes() {
    return this._compatibleHandleTypes;
  }
  get externalFenceFeatures() {
    return this._externalFenceFeatures;
  }
  
};

VkExternalFenceProperties.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExternalFenceProperties = memoryLayouts.VkExternalFenceProperties;
VkExternalFenceProperties.byteLength = $VkExternalFenceProperties.byteLength;

VkExternalFenceProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExternalFenceProperties.sType.byteOffset,
    byteLength: $VkExternalFenceProperties.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExternalFenceProperties.pNext.byteOffset,
    byteLength: $VkExternalFenceProperties.pNext.byteLength
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: $VkExternalFenceProperties.exportFromImportedHandleTypes.byteOffset,
    byteLength: $VkExternalFenceProperties.exportFromImportedHandleTypes.byteLength
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: $VkExternalFenceProperties.compatibleHandleTypes.byteOffset,
    byteLength: $VkExternalFenceProperties.compatibleHandleTypes.byteLength
  }),
  externalFenceFeatures: Object.freeze({
    byteOffset: $VkExternalFenceProperties.externalFenceFeatures.byteOffset,
    byteLength: $VkExternalFenceProperties.externalFenceFeatures.byteLength
  }),
});
class VkExternalFencePropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._exportFromImportedHandleTypes = 0;
    this._compatibleHandleTypes = 0;
    this._externalFenceFeatures = 0;
    this.memoryBuffer = new ArrayBuffer(VkExternalFencePropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExternalFencePropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get exportFromImportedHandleTypes() {
    return this._exportFromImportedHandleTypes;
  }
  get compatibleHandleTypes() {
    return this._compatibleHandleTypes;
  }
  get externalFenceFeatures() {
    return this._externalFenceFeatures;
  }
  
};

VkExternalFencePropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExternalFencePropertiesKHR = memoryLayouts.VkExternalFencePropertiesKHR;
VkExternalFencePropertiesKHR.byteLength = $VkExternalFencePropertiesKHR.byteLength;

VkExternalFencePropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExternalFencePropertiesKHR.sType.byteOffset,
    byteLength: $VkExternalFencePropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExternalFencePropertiesKHR.pNext.byteOffset,
    byteLength: $VkExternalFencePropertiesKHR.pNext.byteLength
  }),
  exportFromImportedHandleTypes: Object.freeze({
    byteOffset: $VkExternalFencePropertiesKHR.exportFromImportedHandleTypes.byteOffset,
    byteLength: $VkExternalFencePropertiesKHR.exportFromImportedHandleTypes.byteLength
  }),
  compatibleHandleTypes: Object.freeze({
    byteOffset: $VkExternalFencePropertiesKHR.compatibleHandleTypes.byteOffset,
    byteLength: $VkExternalFencePropertiesKHR.compatibleHandleTypes.byteLength
  }),
  externalFenceFeatures: Object.freeze({
    byteOffset: $VkExternalFencePropertiesKHR.externalFenceFeatures.byteOffset,
    byteLength: $VkExternalFencePropertiesKHR.externalFenceFeatures.byteLength
  }),
});
class VkExportFenceCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExportFenceCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExportFenceCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleTypes() {
    return this._handleTypes;
  }
  set handleTypes(value) {
    
this.memoryView.setInt32($VkExportFenceCreateInfo.handleTypes.byteOffset, value);
this._handleTypes = value;
  }
  
};

VkExportFenceCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExportFenceCreateInfo = memoryLayouts.VkExportFenceCreateInfo;
VkExportFenceCreateInfo.byteLength = $VkExportFenceCreateInfo.byteLength;

VkExportFenceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExportFenceCreateInfo.sType.byteOffset,
    byteLength: $VkExportFenceCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExportFenceCreateInfo.pNext.byteOffset,
    byteLength: $VkExportFenceCreateInfo.pNext.byteLength
  }),
  handleTypes: Object.freeze({
    byteOffset: $VkExportFenceCreateInfo.handleTypes.byteOffset,
    byteLength: $VkExportFenceCreateInfo.handleTypes.byteLength
  }),
});
class VkExportFenceCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleTypes = 0;
    this.memoryBuffer = new ArrayBuffer(VkExportFenceCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleTypes !== void 0) this.handleTypes = opts.handleTypes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExportFenceCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleTypes() {
    return this._handleTypes;
  }
  set handleTypes(value) {
    
this.memoryView.setInt32($VkExportFenceCreateInfoKHR.handleTypes.byteOffset, value);
this._handleTypes = value;
  }
  
};

VkExportFenceCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExportFenceCreateInfoKHR = memoryLayouts.VkExportFenceCreateInfoKHR;
VkExportFenceCreateInfoKHR.byteLength = $VkExportFenceCreateInfoKHR.byteLength;

VkExportFenceCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExportFenceCreateInfoKHR.sType.byteOffset,
    byteLength: $VkExportFenceCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExportFenceCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkExportFenceCreateInfoKHR.pNext.byteLength
  }),
  handleTypes: Object.freeze({
    byteOffset: $VkExportFenceCreateInfoKHR.handleTypes.byteOffset,
    byteLength: $VkExportFenceCreateInfoKHR.handleTypes.byteLength
  }),
});
class VkImportFenceWin32HandleInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._fence = null;
    this._flags = 0;
    this._handleType = 0;
    this._handle = 0n;
    this._name = null;
    this.memoryBuffer = new ArrayBuffer(VkImportFenceWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.handle !== void 0) this.handle = opts.handle;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImportFenceWin32HandleInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    String
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkImportFenceWin32HandleInfoKHR.flags.byteOffset, value);
this._flags = value;
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkImportFenceWin32HandleInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  get handle() {
    return this._handle;
  }
  set handle(value) {
    
  }
  get name() {
    return this._name;
  }
  set name(value) {
    String
  }
  
};

VkImportFenceWin32HandleInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImportFenceWin32HandleInfoKHR = memoryLayouts.VkImportFenceWin32HandleInfoKHR;
VkImportFenceWin32HandleInfoKHR.byteLength = $VkImportFenceWin32HandleInfoKHR.byteLength;

VkImportFenceWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImportFenceWin32HandleInfoKHR.sType.byteOffset,
    byteLength: $VkImportFenceWin32HandleInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImportFenceWin32HandleInfoKHR.pNext.byteOffset,
    byteLength: $VkImportFenceWin32HandleInfoKHR.pNext.byteLength
  }),
  fence: Object.freeze({
    byteOffset: $VkImportFenceWin32HandleInfoKHR.fence.byteOffset,
    byteLength: $VkImportFenceWin32HandleInfoKHR.fence.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkImportFenceWin32HandleInfoKHR.flags.byteOffset,
    byteLength: $VkImportFenceWin32HandleInfoKHR.flags.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkImportFenceWin32HandleInfoKHR.handleType.byteOffset,
    byteLength: $VkImportFenceWin32HandleInfoKHR.handleType.byteLength
  }),
  handle: Object.freeze({
    byteOffset: $VkImportFenceWin32HandleInfoKHR.handle.byteOffset,
    byteLength: $VkImportFenceWin32HandleInfoKHR.handle.byteLength
  }),
  name: Object.freeze({
    byteOffset: $VkImportFenceWin32HandleInfoKHR.name.byteOffset,
    byteLength: $VkImportFenceWin32HandleInfoKHR.name.byteLength
  }),
});
class VkExportFenceWin32HandleInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._name = null;
    this.memoryBuffer = new ArrayBuffer(VkExportFenceWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.name !== void 0) this.name = opts.name;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkExportFenceWin32HandleInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get name() {
    return this._name;
  }
  set name(value) {
    String
  }
  
};

VkExportFenceWin32HandleInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkExportFenceWin32HandleInfoKHR = memoryLayouts.VkExportFenceWin32HandleInfoKHR;
VkExportFenceWin32HandleInfoKHR.byteLength = $VkExportFenceWin32HandleInfoKHR.byteLength;

VkExportFenceWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkExportFenceWin32HandleInfoKHR.sType.byteOffset,
    byteLength: $VkExportFenceWin32HandleInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkExportFenceWin32HandleInfoKHR.pNext.byteOffset,
    byteLength: $VkExportFenceWin32HandleInfoKHR.pNext.byteLength
  }),
  name: Object.freeze({
    byteOffset: $VkExportFenceWin32HandleInfoKHR.name.byteOffset,
    byteLength: $VkExportFenceWin32HandleInfoKHR.name.byteLength
  }),
});
class VkFenceGetWin32HandleInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._fence = null;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkFenceGetWin32HandleInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkFenceGetWin32HandleInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    String
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkFenceGetWin32HandleInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkFenceGetWin32HandleInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkFenceGetWin32HandleInfoKHR = memoryLayouts.VkFenceGetWin32HandleInfoKHR;
VkFenceGetWin32HandleInfoKHR.byteLength = $VkFenceGetWin32HandleInfoKHR.byteLength;

VkFenceGetWin32HandleInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkFenceGetWin32HandleInfoKHR.sType.byteOffset,
    byteLength: $VkFenceGetWin32HandleInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkFenceGetWin32HandleInfoKHR.pNext.byteOffset,
    byteLength: $VkFenceGetWin32HandleInfoKHR.pNext.byteLength
  }),
  fence: Object.freeze({
    byteOffset: $VkFenceGetWin32HandleInfoKHR.fence.byteOffset,
    byteLength: $VkFenceGetWin32HandleInfoKHR.fence.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkFenceGetWin32HandleInfoKHR.handleType.byteOffset,
    byteLength: $VkFenceGetWin32HandleInfoKHR.handleType.byteLength
  }),
});
class VkImportFenceFdInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._fence = null;
    this._flags = 0;
    this._handleType = 0;
    this._fd = 0;
    this.memoryBuffer = new ArrayBuffer(VkImportFenceFdInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.fd !== void 0) this.fd = opts.fd;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImportFenceFdInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    String
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkImportFenceFdInfoKHR.flags.byteOffset, value);
this._flags = value;
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkImportFenceFdInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  get fd() {
    return this._fd;
  }
  set fd(value) {
    
this.memoryView.setInt32($VkImportFenceFdInfoKHR.fd.byteOffset, value);
this._fd = value;
  }
  
};

VkImportFenceFdInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImportFenceFdInfoKHR = memoryLayouts.VkImportFenceFdInfoKHR;
VkImportFenceFdInfoKHR.byteLength = $VkImportFenceFdInfoKHR.byteLength;

VkImportFenceFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImportFenceFdInfoKHR.sType.byteOffset,
    byteLength: $VkImportFenceFdInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImportFenceFdInfoKHR.pNext.byteOffset,
    byteLength: $VkImportFenceFdInfoKHR.pNext.byteLength
  }),
  fence: Object.freeze({
    byteOffset: $VkImportFenceFdInfoKHR.fence.byteOffset,
    byteLength: $VkImportFenceFdInfoKHR.fence.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkImportFenceFdInfoKHR.flags.byteOffset,
    byteLength: $VkImportFenceFdInfoKHR.flags.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkImportFenceFdInfoKHR.handleType.byteOffset,
    byteLength: $VkImportFenceFdInfoKHR.handleType.byteLength
  }),
  fd: Object.freeze({
    byteOffset: $VkImportFenceFdInfoKHR.fd.byteOffset,
    byteLength: $VkImportFenceFdInfoKHR.fd.byteLength
  }),
});
class VkFenceGetFdInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._fence = null;
    this._handleType = 0;
    this.memoryBuffer = new ArrayBuffer(VkFenceGetFdInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkFenceGetFdInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    String
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkFenceGetFdInfoKHR.handleType.byteOffset, value);
this._handleType = value;
  }
  
};

VkFenceGetFdInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkFenceGetFdInfoKHR = memoryLayouts.VkFenceGetFdInfoKHR;
VkFenceGetFdInfoKHR.byteLength = $VkFenceGetFdInfoKHR.byteLength;

VkFenceGetFdInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkFenceGetFdInfoKHR.sType.byteOffset,
    byteLength: $VkFenceGetFdInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkFenceGetFdInfoKHR.pNext.byteOffset,
    byteLength: $VkFenceGetFdInfoKHR.pNext.byteLength
  }),
  fence: Object.freeze({
    byteOffset: $VkFenceGetFdInfoKHR.fence.byteOffset,
    byteLength: $VkFenceGetFdInfoKHR.fence.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkFenceGetFdInfoKHR.handleType.byteOffset,
    byteLength: $VkFenceGetFdInfoKHR.handleType.byteLength
  }),
});
class VkPhysicalDeviceMultiviewFeatures {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._multiview = 0;
    this._multiviewGeometryShader = 0;
    this._multiviewTessellationShader = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMultiviewFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.multiview !== void 0) this.multiview = opts.multiview;
      if (opts.multiviewGeometryShader !== void 0) this.multiviewGeometryShader = opts.multiviewGeometryShader;
      if (opts.multiviewTessellationShader !== void 0) this.multiviewTessellationShader = opts.multiviewTessellationShader;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceMultiviewFeatures.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get multiview() {
    return this._multiview;
  }
  set multiview(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceMultiviewFeatures.multiview.byteOffset, value);
this._multiview = value;
  }
  get multiviewGeometryShader() {
    return this._multiviewGeometryShader;
  }
  set multiviewGeometryShader(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceMultiviewFeatures.multiviewGeometryShader.byteOffset, value);
this._multiviewGeometryShader = value;
  }
  get multiviewTessellationShader() {
    return this._multiviewTessellationShader;
  }
  set multiviewTessellationShader(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceMultiviewFeatures.multiviewTessellationShader.byteOffset, value);
this._multiviewTessellationShader = value;
  }
  
};

VkPhysicalDeviceMultiviewFeatures.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceMultiviewFeatures = memoryLayouts.VkPhysicalDeviceMultiviewFeatures;
VkPhysicalDeviceMultiviewFeatures.byteLength = $VkPhysicalDeviceMultiviewFeatures.byteLength;

VkPhysicalDeviceMultiviewFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewFeatures.sType.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewFeatures.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewFeatures.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewFeatures.pNext.byteLength
  }),
  multiview: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewFeatures.multiview.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewFeatures.multiview.byteLength
  }),
  multiviewGeometryShader: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewFeatures.multiviewGeometryShader.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewFeatures.multiviewGeometryShader.byteLength
  }),
  multiviewTessellationShader: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewFeatures.multiviewTessellationShader.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewFeatures.multiviewTessellationShader.byteLength
  }),
});
class VkPhysicalDeviceMultiviewFeaturesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._multiview = 0;
    this._multiviewGeometryShader = 0;
    this._multiviewTessellationShader = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMultiviewFeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.multiview !== void 0) this.multiview = opts.multiview;
      if (opts.multiviewGeometryShader !== void 0) this.multiviewGeometryShader = opts.multiviewGeometryShader;
      if (opts.multiviewTessellationShader !== void 0) this.multiviewTessellationShader = opts.multiviewTessellationShader;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceMultiviewFeaturesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get multiview() {
    return this._multiview;
  }
  set multiview(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceMultiviewFeaturesKHR.multiview.byteOffset, value);
this._multiview = value;
  }
  get multiviewGeometryShader() {
    return this._multiviewGeometryShader;
  }
  set multiviewGeometryShader(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceMultiviewFeaturesKHR.multiviewGeometryShader.byteOffset, value);
this._multiviewGeometryShader = value;
  }
  get multiviewTessellationShader() {
    return this._multiviewTessellationShader;
  }
  set multiviewTessellationShader(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceMultiviewFeaturesKHR.multiviewTessellationShader.byteOffset, value);
this._multiviewTessellationShader = value;
  }
  
};

VkPhysicalDeviceMultiviewFeaturesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceMultiviewFeaturesKHR = memoryLayouts.VkPhysicalDeviceMultiviewFeaturesKHR;
VkPhysicalDeviceMultiviewFeaturesKHR.byteLength = $VkPhysicalDeviceMultiviewFeaturesKHR.byteLength;

VkPhysicalDeviceMultiviewFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewFeaturesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewFeaturesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewFeaturesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewFeaturesKHR.pNext.byteLength
  }),
  multiview: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewFeaturesKHR.multiview.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewFeaturesKHR.multiview.byteLength
  }),
  multiviewGeometryShader: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewFeaturesKHR.multiviewGeometryShader.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewFeaturesKHR.multiviewGeometryShader.byteLength
  }),
  multiviewTessellationShader: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewFeaturesKHR.multiviewTessellationShader.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewFeaturesKHR.multiviewTessellationShader.byteLength
  }),
});
class VkPhysicalDeviceMultiviewProperties {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxMultiviewViewCount = 0;
    this._maxMultiviewInstanceIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMultiviewProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceMultiviewProperties.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxMultiviewViewCount() {
    return this._maxMultiviewViewCount;
  }
  get maxMultiviewInstanceIndex() {
    return this._maxMultiviewInstanceIndex;
  }
  
};

VkPhysicalDeviceMultiviewProperties.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceMultiviewProperties = memoryLayouts.VkPhysicalDeviceMultiviewProperties;
VkPhysicalDeviceMultiviewProperties.byteLength = $VkPhysicalDeviceMultiviewProperties.byteLength;

VkPhysicalDeviceMultiviewProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewProperties.sType.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewProperties.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewProperties.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewProperties.pNext.byteLength
  }),
  maxMultiviewViewCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewProperties.maxMultiviewViewCount.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewProperties.maxMultiviewViewCount.byteLength
  }),
  maxMultiviewInstanceIndex: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewProperties.maxMultiviewInstanceIndex.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewProperties.maxMultiviewInstanceIndex.byteLength
  }),
});
class VkPhysicalDeviceMultiviewPropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxMultiviewViewCount = 0;
    this._maxMultiviewInstanceIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMultiviewPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceMultiviewPropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxMultiviewViewCount() {
    return this._maxMultiviewViewCount;
  }
  get maxMultiviewInstanceIndex() {
    return this._maxMultiviewInstanceIndex;
  }
  
};

VkPhysicalDeviceMultiviewPropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceMultiviewPropertiesKHR = memoryLayouts.VkPhysicalDeviceMultiviewPropertiesKHR;
VkPhysicalDeviceMultiviewPropertiesKHR.byteLength = $VkPhysicalDeviceMultiviewPropertiesKHR.byteLength;

VkPhysicalDeviceMultiviewPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewPropertiesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewPropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewPropertiesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewPropertiesKHR.pNext.byteLength
  }),
  maxMultiviewViewCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewPropertiesKHR.maxMultiviewViewCount.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewPropertiesKHR.maxMultiviewViewCount.byteLength
  }),
  maxMultiviewInstanceIndex: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewPropertiesKHR.maxMultiviewInstanceIndex.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewPropertiesKHR.maxMultiviewInstanceIndex.byteLength
  }),
});
class VkRenderPassMultiviewCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._subpassCount = 0;
    this._pViewMasks = null;
    this._dependencyCount = 0;
    this._pViewOffsets = null;
    this._correlationMaskCount = 0;
    this._pCorrelationMasks = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassMultiviewCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pViewMasks !== void 0) this.pViewMasks = opts.pViewMasks;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pViewOffsets !== void 0) this.pViewOffsets = opts.pViewOffsets;
      if (opts.correlationMaskCount !== void 0) this.correlationMaskCount = opts.correlationMaskCount;
      if (opts.pCorrelationMasks !== void 0) this.pCorrelationMasks = opts.pCorrelationMasks;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkRenderPassMultiviewCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get subpassCount() {
    return this._subpassCount;
  }
  set subpassCount(value) {
    
this.memoryView.setUint32($VkRenderPassMultiviewCreateInfo.subpassCount.byteOffset, value);
this._subpassCount = value;
  }
  get pViewMasks() {
    return this._pViewMasks;
  }
  set pViewMasks(value) {
    
  }
  get dependencyCount() {
    return this._dependencyCount;
  }
  set dependencyCount(value) {
    
this.memoryView.setUint32($VkRenderPassMultiviewCreateInfo.dependencyCount.byteOffset, value);
this._dependencyCount = value;
  }
  get pViewOffsets() {
    return this._pViewOffsets;
  }
  set pViewOffsets(value) {
    
  }
  get correlationMaskCount() {
    return this._correlationMaskCount;
  }
  set correlationMaskCount(value) {
    
this.memoryView.setUint32($VkRenderPassMultiviewCreateInfo.correlationMaskCount.byteOffset, value);
this._correlationMaskCount = value;
  }
  get pCorrelationMasks() {
    return this._pCorrelationMasks;
  }
  set pCorrelationMasks(value) {
    
  }
  
};

VkRenderPassMultiviewCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkRenderPassMultiviewCreateInfo = memoryLayouts.VkRenderPassMultiviewCreateInfo;
VkRenderPassMultiviewCreateInfo.byteLength = $VkRenderPassMultiviewCreateInfo.byteLength;

VkRenderPassMultiviewCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfo.sType.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfo.pNext.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfo.pNext.byteLength
  }),
  subpassCount: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfo.subpassCount.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfo.subpassCount.byteLength
  }),
  pViewMasks: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfo.pViewMasks.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfo.pViewMasks.byteLength
  }),
  dependencyCount: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfo.dependencyCount.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfo.dependencyCount.byteLength
  }),
  pViewOffsets: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfo.pViewOffsets.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfo.pViewOffsets.byteLength
  }),
  correlationMaskCount: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfo.correlationMaskCount.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfo.correlationMaskCount.byteLength
  }),
  pCorrelationMasks: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfo.pCorrelationMasks.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfo.pCorrelationMasks.byteLength
  }),
});
class VkRenderPassMultiviewCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._subpassCount = 0;
    this._pViewMasks = null;
    this._dependencyCount = 0;
    this._pViewOffsets = null;
    this._correlationMaskCount = 0;
    this._pCorrelationMasks = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassMultiviewCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pViewMasks !== void 0) this.pViewMasks = opts.pViewMasks;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pViewOffsets !== void 0) this.pViewOffsets = opts.pViewOffsets;
      if (opts.correlationMaskCount !== void 0) this.correlationMaskCount = opts.correlationMaskCount;
      if (opts.pCorrelationMasks !== void 0) this.pCorrelationMasks = opts.pCorrelationMasks;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkRenderPassMultiviewCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get subpassCount() {
    return this._subpassCount;
  }
  set subpassCount(value) {
    
this.memoryView.setUint32($VkRenderPassMultiviewCreateInfoKHR.subpassCount.byteOffset, value);
this._subpassCount = value;
  }
  get pViewMasks() {
    return this._pViewMasks;
  }
  set pViewMasks(value) {
    
  }
  get dependencyCount() {
    return this._dependencyCount;
  }
  set dependencyCount(value) {
    
this.memoryView.setUint32($VkRenderPassMultiviewCreateInfoKHR.dependencyCount.byteOffset, value);
this._dependencyCount = value;
  }
  get pViewOffsets() {
    return this._pViewOffsets;
  }
  set pViewOffsets(value) {
    
  }
  get correlationMaskCount() {
    return this._correlationMaskCount;
  }
  set correlationMaskCount(value) {
    
this.memoryView.setUint32($VkRenderPassMultiviewCreateInfoKHR.correlationMaskCount.byteOffset, value);
this._correlationMaskCount = value;
  }
  get pCorrelationMasks() {
    return this._pCorrelationMasks;
  }
  set pCorrelationMasks(value) {
    
  }
  
};

VkRenderPassMultiviewCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkRenderPassMultiviewCreateInfoKHR = memoryLayouts.VkRenderPassMultiviewCreateInfoKHR;
VkRenderPassMultiviewCreateInfoKHR.byteLength = $VkRenderPassMultiviewCreateInfoKHR.byteLength;

VkRenderPassMultiviewCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfoKHR.sType.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfoKHR.pNext.byteLength
  }),
  subpassCount: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfoKHR.subpassCount.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfoKHR.subpassCount.byteLength
  }),
  pViewMasks: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfoKHR.pViewMasks.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfoKHR.pViewMasks.byteLength
  }),
  dependencyCount: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfoKHR.dependencyCount.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfoKHR.dependencyCount.byteLength
  }),
  pViewOffsets: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfoKHR.pViewOffsets.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfoKHR.pViewOffsets.byteLength
  }),
  correlationMaskCount: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfoKHR.correlationMaskCount.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfoKHR.correlationMaskCount.byteLength
  }),
  pCorrelationMasks: Object.freeze({
    byteOffset: $VkRenderPassMultiviewCreateInfoKHR.pCorrelationMasks.byteOffset,
    byteLength: $VkRenderPassMultiviewCreateInfoKHR.pCorrelationMasks.byteLength
  }),
});
class VkSurfaceCapabilities2EXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._minImageCount = 0;
    this._maxImageCount = 0;
    this._currentExtent = null;
    this._minImageExtent = null;
    this._maxImageExtent = null;
    this._maxImageArrayLayers = 0;
    this._supportedTransforms = 0;
    this._currentTransform = 0;
    this._supportedCompositeAlpha = 0;
    this._supportedUsageFlags = 0;
    this._supportedSurfaceCounters = 0;
    this.memoryBuffer = new ArrayBuffer(VkSurfaceCapabilities2EXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSurfaceCapabilities2EXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get minImageCount() {
    return this._minImageCount;
  }
  get maxImageCount() {
    return this._maxImageCount;
  }
  get currentExtent() {
    return this._currentExtent;
  }
  get minImageExtent() {
    return this._minImageExtent;
  }
  get maxImageExtent() {
    return this._maxImageExtent;
  }
  get maxImageArrayLayers() {
    return this._maxImageArrayLayers;
  }
  get supportedTransforms() {
    return this._supportedTransforms;
  }
  get currentTransform() {
    return this._currentTransform;
  }
  get supportedCompositeAlpha() {
    return this._supportedCompositeAlpha;
  }
  get supportedUsageFlags() {
    return this._supportedUsageFlags;
  }
  get supportedSurfaceCounters() {
    return this._supportedSurfaceCounters;
  }
  
};

VkSurfaceCapabilities2EXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.currentExtent !== null) { }
  
  if (this.minImageExtent !== null) { }
  
  if (this.maxImageExtent !== null) { }
  
};

const $VkSurfaceCapabilities2EXT = memoryLayouts.VkSurfaceCapabilities2EXT;
VkSurfaceCapabilities2EXT.byteLength = $VkSurfaceCapabilities2EXT.byteLength;

VkSurfaceCapabilities2EXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2EXT.sType.byteOffset,
    byteLength: $VkSurfaceCapabilities2EXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2EXT.pNext.byteOffset,
    byteLength: $VkSurfaceCapabilities2EXT.pNext.byteLength
  }),
  minImageCount: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2EXT.minImageCount.byteOffset,
    byteLength: $VkSurfaceCapabilities2EXT.minImageCount.byteLength
  }),
  maxImageCount: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2EXT.maxImageCount.byteOffset,
    byteLength: $VkSurfaceCapabilities2EXT.maxImageCount.byteLength
  }),
  currentExtent: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2EXT.currentExtent.byteOffset,
    byteLength: $VkSurfaceCapabilities2EXT.currentExtent.byteLength
  }),
  minImageExtent: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2EXT.minImageExtent.byteOffset,
    byteLength: $VkSurfaceCapabilities2EXT.minImageExtent.byteLength
  }),
  maxImageExtent: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2EXT.maxImageExtent.byteOffset,
    byteLength: $VkSurfaceCapabilities2EXT.maxImageExtent.byteLength
  }),
  maxImageArrayLayers: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2EXT.maxImageArrayLayers.byteOffset,
    byteLength: $VkSurfaceCapabilities2EXT.maxImageArrayLayers.byteLength
  }),
  supportedTransforms: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2EXT.supportedTransforms.byteOffset,
    byteLength: $VkSurfaceCapabilities2EXT.supportedTransforms.byteLength
  }),
  currentTransform: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2EXT.currentTransform.byteOffset,
    byteLength: $VkSurfaceCapabilities2EXT.currentTransform.byteLength
  }),
  supportedCompositeAlpha: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2EXT.supportedCompositeAlpha.byteOffset,
    byteLength: $VkSurfaceCapabilities2EXT.supportedCompositeAlpha.byteLength
  }),
  supportedUsageFlags: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2EXT.supportedUsageFlags.byteOffset,
    byteLength: $VkSurfaceCapabilities2EXT.supportedUsageFlags.byteLength
  }),
  supportedSurfaceCounters: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2EXT.supportedSurfaceCounters.byteOffset,
    byteLength: $VkSurfaceCapabilities2EXT.supportedSurfaceCounters.byteLength
  }),
});
class VkDisplayPowerInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._powerState = 0;
    this.memoryBuffer = new ArrayBuffer(VkDisplayPowerInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.powerState !== void 0) this.powerState = opts.powerState;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDisplayPowerInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get powerState() {
    return this._powerState;
  }
  set powerState(value) {
    
this.memoryView.setInt32($VkDisplayPowerInfoEXT.powerState.byteOffset, value);
this._powerState = value;
  }
  
};

VkDisplayPowerInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDisplayPowerInfoEXT = memoryLayouts.VkDisplayPowerInfoEXT;
VkDisplayPowerInfoEXT.byteLength = $VkDisplayPowerInfoEXT.byteLength;

VkDisplayPowerInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDisplayPowerInfoEXT.sType.byteOffset,
    byteLength: $VkDisplayPowerInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDisplayPowerInfoEXT.pNext.byteOffset,
    byteLength: $VkDisplayPowerInfoEXT.pNext.byteLength
  }),
  powerState: Object.freeze({
    byteOffset: $VkDisplayPowerInfoEXT.powerState.byteOffset,
    byteLength: $VkDisplayPowerInfoEXT.powerState.byteLength
  }),
});
class VkDeviceEventInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._deviceEvent = 0;
    this.memoryBuffer = new ArrayBuffer(VkDeviceEventInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceEvent !== void 0) this.deviceEvent = opts.deviceEvent;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceEventInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get deviceEvent() {
    return this._deviceEvent;
  }
  set deviceEvent(value) {
    
this.memoryView.setInt32($VkDeviceEventInfoEXT.deviceEvent.byteOffset, value);
this._deviceEvent = value;
  }
  
};

VkDeviceEventInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceEventInfoEXT = memoryLayouts.VkDeviceEventInfoEXT;
VkDeviceEventInfoEXT.byteLength = $VkDeviceEventInfoEXT.byteLength;

VkDeviceEventInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceEventInfoEXT.sType.byteOffset,
    byteLength: $VkDeviceEventInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceEventInfoEXT.pNext.byteOffset,
    byteLength: $VkDeviceEventInfoEXT.pNext.byteLength
  }),
  deviceEvent: Object.freeze({
    byteOffset: $VkDeviceEventInfoEXT.deviceEvent.byteOffset,
    byteLength: $VkDeviceEventInfoEXT.deviceEvent.byteLength
  }),
});
class VkDisplayEventInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._displayEvent = 0;
    this.memoryBuffer = new ArrayBuffer(VkDisplayEventInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.displayEvent !== void 0) this.displayEvent = opts.displayEvent;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDisplayEventInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get displayEvent() {
    return this._displayEvent;
  }
  set displayEvent(value) {
    
this.memoryView.setInt32($VkDisplayEventInfoEXT.displayEvent.byteOffset, value);
this._displayEvent = value;
  }
  
};

VkDisplayEventInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDisplayEventInfoEXT = memoryLayouts.VkDisplayEventInfoEXT;
VkDisplayEventInfoEXT.byteLength = $VkDisplayEventInfoEXT.byteLength;

VkDisplayEventInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDisplayEventInfoEXT.sType.byteOffset,
    byteLength: $VkDisplayEventInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDisplayEventInfoEXT.pNext.byteOffset,
    byteLength: $VkDisplayEventInfoEXT.pNext.byteLength
  }),
  displayEvent: Object.freeze({
    byteOffset: $VkDisplayEventInfoEXT.displayEvent.byteOffset,
    byteLength: $VkDisplayEventInfoEXT.displayEvent.byteLength
  }),
});
class VkSwapchainCounterCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._surfaceCounters = 0;
    this.memoryBuffer = new ArrayBuffer(VkSwapchainCounterCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.surfaceCounters !== void 0) this.surfaceCounters = opts.surfaceCounters;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSwapchainCounterCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get surfaceCounters() {
    return this._surfaceCounters;
  }
  set surfaceCounters(value) {
    
this.memoryView.setInt32($VkSwapchainCounterCreateInfoEXT.surfaceCounters.byteOffset, value);
this._surfaceCounters = value;
  }
  
};

VkSwapchainCounterCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSwapchainCounterCreateInfoEXT = memoryLayouts.VkSwapchainCounterCreateInfoEXT;
VkSwapchainCounterCreateInfoEXT.byteLength = $VkSwapchainCounterCreateInfoEXT.byteLength;

VkSwapchainCounterCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSwapchainCounterCreateInfoEXT.sType.byteOffset,
    byteLength: $VkSwapchainCounterCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSwapchainCounterCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkSwapchainCounterCreateInfoEXT.pNext.byteLength
  }),
  surfaceCounters: Object.freeze({
    byteOffset: $VkSwapchainCounterCreateInfoEXT.surfaceCounters.byteOffset,
    byteLength: $VkSwapchainCounterCreateInfoEXT.surfaceCounters.byteLength
  }),
});
class VkPhysicalDeviceGroupProperties {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._physicalDeviceCount = 0;
    this._physicalDevices = null;
    this._subsetAllocation = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceGroupProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceGroupProperties.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get physicalDeviceCount() {
    return this._physicalDeviceCount;
  }
  get physicalDevices() {
    return this._physicalDevices;
  }
  get subsetAllocation() {
    return this._subsetAllocation;
  }
  
};

VkPhysicalDeviceGroupProperties.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.physicalDevices !== null) { }
  
};

const $VkPhysicalDeviceGroupProperties = memoryLayouts.VkPhysicalDeviceGroupProperties;
VkPhysicalDeviceGroupProperties.byteLength = $VkPhysicalDeviceGroupProperties.byteLength;

VkPhysicalDeviceGroupProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceGroupProperties.sType.byteOffset,
    byteLength: $VkPhysicalDeviceGroupProperties.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceGroupProperties.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceGroupProperties.pNext.byteLength
  }),
  physicalDeviceCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceGroupProperties.physicalDeviceCount.byteOffset,
    byteLength: $VkPhysicalDeviceGroupProperties.physicalDeviceCount.byteLength
  }),
  physicalDevices: Object.freeze({
    byteOffset: $VkPhysicalDeviceGroupProperties.physicalDevices.byteOffset,
    byteLength: $VkPhysicalDeviceGroupProperties.physicalDevices.byteLength
  }),
  subsetAllocation: Object.freeze({
    byteOffset: $VkPhysicalDeviceGroupProperties.subsetAllocation.byteOffset,
    byteLength: $VkPhysicalDeviceGroupProperties.subsetAllocation.byteLength
  }),
});
class VkPhysicalDeviceGroupPropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._physicalDeviceCount = 0;
    this._physicalDevices = null;
    this._subsetAllocation = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceGroupPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceGroupPropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get physicalDeviceCount() {
    return this._physicalDeviceCount;
  }
  get physicalDevices() {
    return this._physicalDevices;
  }
  get subsetAllocation() {
    return this._subsetAllocation;
  }
  
};

VkPhysicalDeviceGroupPropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.physicalDevices !== null) { }
  
};

const $VkPhysicalDeviceGroupPropertiesKHR = memoryLayouts.VkPhysicalDeviceGroupPropertiesKHR;
VkPhysicalDeviceGroupPropertiesKHR.byteLength = $VkPhysicalDeviceGroupPropertiesKHR.byteLength;

VkPhysicalDeviceGroupPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceGroupPropertiesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceGroupPropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceGroupPropertiesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceGroupPropertiesKHR.pNext.byteLength
  }),
  physicalDeviceCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceGroupPropertiesKHR.physicalDeviceCount.byteOffset,
    byteLength: $VkPhysicalDeviceGroupPropertiesKHR.physicalDeviceCount.byteLength
  }),
  physicalDevices: Object.freeze({
    byteOffset: $VkPhysicalDeviceGroupPropertiesKHR.physicalDevices.byteOffset,
    byteLength: $VkPhysicalDeviceGroupPropertiesKHR.physicalDevices.byteLength
  }),
  subsetAllocation: Object.freeze({
    byteOffset: $VkPhysicalDeviceGroupPropertiesKHR.subsetAllocation.byteOffset,
    byteLength: $VkPhysicalDeviceGroupPropertiesKHR.subsetAllocation.byteLength
  }),
});
class VkMemoryAllocateFlagsInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._deviceMask = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryAllocateFlagsInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryAllocateFlagsInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkMemoryAllocateFlagsInfo.flags.byteOffset, value);
this._flags = value;
  }
  get deviceMask() {
    return this._deviceMask;
  }
  set deviceMask(value) {
    
this.memoryView.setUint32($VkMemoryAllocateFlagsInfo.deviceMask.byteOffset, value);
this._deviceMask = value;
  }
  
};

VkMemoryAllocateFlagsInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryAllocateFlagsInfo = memoryLayouts.VkMemoryAllocateFlagsInfo;
VkMemoryAllocateFlagsInfo.byteLength = $VkMemoryAllocateFlagsInfo.byteLength;

VkMemoryAllocateFlagsInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryAllocateFlagsInfo.sType.byteOffset,
    byteLength: $VkMemoryAllocateFlagsInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryAllocateFlagsInfo.pNext.byteOffset,
    byteLength: $VkMemoryAllocateFlagsInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkMemoryAllocateFlagsInfo.flags.byteOffset,
    byteLength: $VkMemoryAllocateFlagsInfo.flags.byteLength
  }),
  deviceMask: Object.freeze({
    byteOffset: $VkMemoryAllocateFlagsInfo.deviceMask.byteOffset,
    byteLength: $VkMemoryAllocateFlagsInfo.deviceMask.byteLength
  }),
});
class VkMemoryAllocateFlagsInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._deviceMask = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryAllocateFlagsInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryAllocateFlagsInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkMemoryAllocateFlagsInfoKHR.flags.byteOffset, value);
this._flags = value;
  }
  get deviceMask() {
    return this._deviceMask;
  }
  set deviceMask(value) {
    
this.memoryView.setUint32($VkMemoryAllocateFlagsInfoKHR.deviceMask.byteOffset, value);
this._deviceMask = value;
  }
  
};

VkMemoryAllocateFlagsInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryAllocateFlagsInfoKHR = memoryLayouts.VkMemoryAllocateFlagsInfoKHR;
VkMemoryAllocateFlagsInfoKHR.byteLength = $VkMemoryAllocateFlagsInfoKHR.byteLength;

VkMemoryAllocateFlagsInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryAllocateFlagsInfoKHR.sType.byteOffset,
    byteLength: $VkMemoryAllocateFlagsInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryAllocateFlagsInfoKHR.pNext.byteOffset,
    byteLength: $VkMemoryAllocateFlagsInfoKHR.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkMemoryAllocateFlagsInfoKHR.flags.byteOffset,
    byteLength: $VkMemoryAllocateFlagsInfoKHR.flags.byteLength
  }),
  deviceMask: Object.freeze({
    byteOffset: $VkMemoryAllocateFlagsInfoKHR.deviceMask.byteOffset,
    byteLength: $VkMemoryAllocateFlagsInfoKHR.deviceMask.byteLength
  }),
});
class VkBindBufferMemoryInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._buffer = null;
    this._memory = null;
    this._memoryOffset = 0;
    this.memoryBuffer = new ArrayBuffer(VkBindBufferMemoryInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBindBufferMemoryInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    String
  }
  get memoryOffset() {
    return this._memoryOffset;
  }
  set memoryOffset(value) {
    
this.memoryView.setBigUint64($VkBindBufferMemoryInfo.memoryOffset.byteOffset, value);
this._memoryOffset = value;
  }
  
};

VkBindBufferMemoryInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBindBufferMemoryInfo = memoryLayouts.VkBindBufferMemoryInfo;
VkBindBufferMemoryInfo.byteLength = $VkBindBufferMemoryInfo.byteLength;

VkBindBufferMemoryInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBindBufferMemoryInfo.sType.byteOffset,
    byteLength: $VkBindBufferMemoryInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBindBufferMemoryInfo.pNext.byteOffset,
    byteLength: $VkBindBufferMemoryInfo.pNext.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkBindBufferMemoryInfo.buffer.byteOffset,
    byteLength: $VkBindBufferMemoryInfo.buffer.byteLength
  }),
  memory: Object.freeze({
    byteOffset: $VkBindBufferMemoryInfo.memory.byteOffset,
    byteLength: $VkBindBufferMemoryInfo.memory.byteLength
  }),
  memoryOffset: Object.freeze({
    byteOffset: $VkBindBufferMemoryInfo.memoryOffset.byteOffset,
    byteLength: $VkBindBufferMemoryInfo.memoryOffset.byteLength
  }),
});
class VkBindBufferMemoryInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._buffer = null;
    this._memory = null;
    this._memoryOffset = 0;
    this.memoryBuffer = new ArrayBuffer(VkBindBufferMemoryInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBindBufferMemoryInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    String
  }
  get memoryOffset() {
    return this._memoryOffset;
  }
  set memoryOffset(value) {
    
this.memoryView.setBigUint64($VkBindBufferMemoryInfoKHR.memoryOffset.byteOffset, value);
this._memoryOffset = value;
  }
  
};

VkBindBufferMemoryInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBindBufferMemoryInfoKHR = memoryLayouts.VkBindBufferMemoryInfoKHR;
VkBindBufferMemoryInfoKHR.byteLength = $VkBindBufferMemoryInfoKHR.byteLength;

VkBindBufferMemoryInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBindBufferMemoryInfoKHR.sType.byteOffset,
    byteLength: $VkBindBufferMemoryInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBindBufferMemoryInfoKHR.pNext.byteOffset,
    byteLength: $VkBindBufferMemoryInfoKHR.pNext.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkBindBufferMemoryInfoKHR.buffer.byteOffset,
    byteLength: $VkBindBufferMemoryInfoKHR.buffer.byteLength
  }),
  memory: Object.freeze({
    byteOffset: $VkBindBufferMemoryInfoKHR.memory.byteOffset,
    byteLength: $VkBindBufferMemoryInfoKHR.memory.byteLength
  }),
  memoryOffset: Object.freeze({
    byteOffset: $VkBindBufferMemoryInfoKHR.memoryOffset.byteOffset,
    byteLength: $VkBindBufferMemoryInfoKHR.memoryOffset.byteLength
  }),
});
class VkBindBufferMemoryDeviceGroupInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._deviceIndexCount = 0;
    this._pDeviceIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkBindBufferMemoryDeviceGroupInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBindBufferMemoryDeviceGroupInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get deviceIndexCount() {
    return this._deviceIndexCount;
  }
  set deviceIndexCount(value) {
    
this.memoryView.setUint32($VkBindBufferMemoryDeviceGroupInfo.deviceIndexCount.byteOffset, value);
this._deviceIndexCount = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    
  }
  
};

VkBindBufferMemoryDeviceGroupInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBindBufferMemoryDeviceGroupInfo = memoryLayouts.VkBindBufferMemoryDeviceGroupInfo;
VkBindBufferMemoryDeviceGroupInfo.byteLength = $VkBindBufferMemoryDeviceGroupInfo.byteLength;

VkBindBufferMemoryDeviceGroupInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBindBufferMemoryDeviceGroupInfo.sType.byteOffset,
    byteLength: $VkBindBufferMemoryDeviceGroupInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBindBufferMemoryDeviceGroupInfo.pNext.byteOffset,
    byteLength: $VkBindBufferMemoryDeviceGroupInfo.pNext.byteLength
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: $VkBindBufferMemoryDeviceGroupInfo.deviceIndexCount.byteOffset,
    byteLength: $VkBindBufferMemoryDeviceGroupInfo.deviceIndexCount.byteLength
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: $VkBindBufferMemoryDeviceGroupInfo.pDeviceIndices.byteOffset,
    byteLength: $VkBindBufferMemoryDeviceGroupInfo.pDeviceIndices.byteLength
  }),
});
class VkBindBufferMemoryDeviceGroupInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._deviceIndexCount = 0;
    this._pDeviceIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkBindBufferMemoryDeviceGroupInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBindBufferMemoryDeviceGroupInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get deviceIndexCount() {
    return this._deviceIndexCount;
  }
  set deviceIndexCount(value) {
    
this.memoryView.setUint32($VkBindBufferMemoryDeviceGroupInfoKHR.deviceIndexCount.byteOffset, value);
this._deviceIndexCount = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    
  }
  
};

VkBindBufferMemoryDeviceGroupInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBindBufferMemoryDeviceGroupInfoKHR = memoryLayouts.VkBindBufferMemoryDeviceGroupInfoKHR;
VkBindBufferMemoryDeviceGroupInfoKHR.byteLength = $VkBindBufferMemoryDeviceGroupInfoKHR.byteLength;

VkBindBufferMemoryDeviceGroupInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBindBufferMemoryDeviceGroupInfoKHR.sType.byteOffset,
    byteLength: $VkBindBufferMemoryDeviceGroupInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBindBufferMemoryDeviceGroupInfoKHR.pNext.byteOffset,
    byteLength: $VkBindBufferMemoryDeviceGroupInfoKHR.pNext.byteLength
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: $VkBindBufferMemoryDeviceGroupInfoKHR.deviceIndexCount.byteOffset,
    byteLength: $VkBindBufferMemoryDeviceGroupInfoKHR.deviceIndexCount.byteLength
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: $VkBindBufferMemoryDeviceGroupInfoKHR.pDeviceIndices.byteOffset,
    byteLength: $VkBindBufferMemoryDeviceGroupInfoKHR.pDeviceIndices.byteLength
  }),
});
class VkBindImageMemoryInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._image = null;
    this._memory = null;
    this._memoryOffset = 0;
    this.memoryBuffer = new ArrayBuffer(VkBindImageMemoryInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBindImageMemoryInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get image() {
    return this._image;
  }
  set image(value) {
    String
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    String
  }
  get memoryOffset() {
    return this._memoryOffset;
  }
  set memoryOffset(value) {
    
this.memoryView.setBigUint64($VkBindImageMemoryInfo.memoryOffset.byteOffset, value);
this._memoryOffset = value;
  }
  
};

VkBindImageMemoryInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBindImageMemoryInfo = memoryLayouts.VkBindImageMemoryInfo;
VkBindImageMemoryInfo.byteLength = $VkBindImageMemoryInfo.byteLength;

VkBindImageMemoryInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBindImageMemoryInfo.sType.byteOffset,
    byteLength: $VkBindImageMemoryInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBindImageMemoryInfo.pNext.byteOffset,
    byteLength: $VkBindImageMemoryInfo.pNext.byteLength
  }),
  image: Object.freeze({
    byteOffset: $VkBindImageMemoryInfo.image.byteOffset,
    byteLength: $VkBindImageMemoryInfo.image.byteLength
  }),
  memory: Object.freeze({
    byteOffset: $VkBindImageMemoryInfo.memory.byteOffset,
    byteLength: $VkBindImageMemoryInfo.memory.byteLength
  }),
  memoryOffset: Object.freeze({
    byteOffset: $VkBindImageMemoryInfo.memoryOffset.byteOffset,
    byteLength: $VkBindImageMemoryInfo.memoryOffset.byteLength
  }),
});
class VkBindImageMemoryInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._image = null;
    this._memory = null;
    this._memoryOffset = 0;
    this.memoryBuffer = new ArrayBuffer(VkBindImageMemoryInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBindImageMemoryInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get image() {
    return this._image;
  }
  set image(value) {
    String
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    String
  }
  get memoryOffset() {
    return this._memoryOffset;
  }
  set memoryOffset(value) {
    
this.memoryView.setBigUint64($VkBindImageMemoryInfoKHR.memoryOffset.byteOffset, value);
this._memoryOffset = value;
  }
  
};

VkBindImageMemoryInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBindImageMemoryInfoKHR = memoryLayouts.VkBindImageMemoryInfoKHR;
VkBindImageMemoryInfoKHR.byteLength = $VkBindImageMemoryInfoKHR.byteLength;

VkBindImageMemoryInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBindImageMemoryInfoKHR.sType.byteOffset,
    byteLength: $VkBindImageMemoryInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBindImageMemoryInfoKHR.pNext.byteOffset,
    byteLength: $VkBindImageMemoryInfoKHR.pNext.byteLength
  }),
  image: Object.freeze({
    byteOffset: $VkBindImageMemoryInfoKHR.image.byteOffset,
    byteLength: $VkBindImageMemoryInfoKHR.image.byteLength
  }),
  memory: Object.freeze({
    byteOffset: $VkBindImageMemoryInfoKHR.memory.byteOffset,
    byteLength: $VkBindImageMemoryInfoKHR.memory.byteLength
  }),
  memoryOffset: Object.freeze({
    byteOffset: $VkBindImageMemoryInfoKHR.memoryOffset.byteOffset,
    byteLength: $VkBindImageMemoryInfoKHR.memoryOffset.byteLength
  }),
});
class VkBindImageMemoryDeviceGroupInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._deviceIndexCount = 0;
    this._pDeviceIndices = null;
    this._splitInstanceBindRegionCount = 0;
    this._pSplitInstanceBindRegions = null;
    this.memoryBuffer = new ArrayBuffer(VkBindImageMemoryDeviceGroupInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      if (opts.splitInstanceBindRegionCount !== void 0) this.splitInstanceBindRegionCount = opts.splitInstanceBindRegionCount;
      if (opts.pSplitInstanceBindRegions !== void 0) this.pSplitInstanceBindRegions = opts.pSplitInstanceBindRegions;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBindImageMemoryDeviceGroupInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get deviceIndexCount() {
    return this._deviceIndexCount;
  }
  set deviceIndexCount(value) {
    
this.memoryView.setUint32($VkBindImageMemoryDeviceGroupInfo.deviceIndexCount.byteOffset, value);
this._deviceIndexCount = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    
  }
  get splitInstanceBindRegionCount() {
    return this._splitInstanceBindRegionCount;
  }
  set splitInstanceBindRegionCount(value) {
    
this.memoryView.setUint32($VkBindImageMemoryDeviceGroupInfo.splitInstanceBindRegionCount.byteOffset, value);
this._splitInstanceBindRegionCount = value;
  }
  get pSplitInstanceBindRegions() {
    return this._pSplitInstanceBindRegions;
  }
  set pSplitInstanceBindRegions(value) {
    
  }
  
};

VkBindImageMemoryDeviceGroupInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pSplitInstanceBindRegions !== null) { }
  
};

const $VkBindImageMemoryDeviceGroupInfo = memoryLayouts.VkBindImageMemoryDeviceGroupInfo;
VkBindImageMemoryDeviceGroupInfo.byteLength = $VkBindImageMemoryDeviceGroupInfo.byteLength;

VkBindImageMemoryDeviceGroupInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBindImageMemoryDeviceGroupInfo.sType.byteOffset,
    byteLength: $VkBindImageMemoryDeviceGroupInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBindImageMemoryDeviceGroupInfo.pNext.byteOffset,
    byteLength: $VkBindImageMemoryDeviceGroupInfo.pNext.byteLength
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: $VkBindImageMemoryDeviceGroupInfo.deviceIndexCount.byteOffset,
    byteLength: $VkBindImageMemoryDeviceGroupInfo.deviceIndexCount.byteLength
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: $VkBindImageMemoryDeviceGroupInfo.pDeviceIndices.byteOffset,
    byteLength: $VkBindImageMemoryDeviceGroupInfo.pDeviceIndices.byteLength
  }),
  splitInstanceBindRegionCount: Object.freeze({
    byteOffset: $VkBindImageMemoryDeviceGroupInfo.splitInstanceBindRegionCount.byteOffset,
    byteLength: $VkBindImageMemoryDeviceGroupInfo.splitInstanceBindRegionCount.byteLength
  }),
  pSplitInstanceBindRegions: Object.freeze({
    byteOffset: $VkBindImageMemoryDeviceGroupInfo.pSplitInstanceBindRegions.byteOffset,
    byteLength: $VkBindImageMemoryDeviceGroupInfo.pSplitInstanceBindRegions.byteLength
  }),
});
class VkBindImageMemoryDeviceGroupInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._deviceIndexCount = 0;
    this._pDeviceIndices = null;
    this._splitInstanceBindRegionCount = 0;
    this._pSplitInstanceBindRegions = null;
    this.memoryBuffer = new ArrayBuffer(VkBindImageMemoryDeviceGroupInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      if (opts.splitInstanceBindRegionCount !== void 0) this.splitInstanceBindRegionCount = opts.splitInstanceBindRegionCount;
      if (opts.pSplitInstanceBindRegions !== void 0) this.pSplitInstanceBindRegions = opts.pSplitInstanceBindRegions;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBindImageMemoryDeviceGroupInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get deviceIndexCount() {
    return this._deviceIndexCount;
  }
  set deviceIndexCount(value) {
    
this.memoryView.setUint32($VkBindImageMemoryDeviceGroupInfoKHR.deviceIndexCount.byteOffset, value);
this._deviceIndexCount = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    
  }
  get splitInstanceBindRegionCount() {
    return this._splitInstanceBindRegionCount;
  }
  set splitInstanceBindRegionCount(value) {
    
this.memoryView.setUint32($VkBindImageMemoryDeviceGroupInfoKHR.splitInstanceBindRegionCount.byteOffset, value);
this._splitInstanceBindRegionCount = value;
  }
  get pSplitInstanceBindRegions() {
    return this._pSplitInstanceBindRegions;
  }
  set pSplitInstanceBindRegions(value) {
    
  }
  
};

VkBindImageMemoryDeviceGroupInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pSplitInstanceBindRegions !== null) { }
  
};

const $VkBindImageMemoryDeviceGroupInfoKHR = memoryLayouts.VkBindImageMemoryDeviceGroupInfoKHR;
VkBindImageMemoryDeviceGroupInfoKHR.byteLength = $VkBindImageMemoryDeviceGroupInfoKHR.byteLength;

VkBindImageMemoryDeviceGroupInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBindImageMemoryDeviceGroupInfoKHR.sType.byteOffset,
    byteLength: $VkBindImageMemoryDeviceGroupInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBindImageMemoryDeviceGroupInfoKHR.pNext.byteOffset,
    byteLength: $VkBindImageMemoryDeviceGroupInfoKHR.pNext.byteLength
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: $VkBindImageMemoryDeviceGroupInfoKHR.deviceIndexCount.byteOffset,
    byteLength: $VkBindImageMemoryDeviceGroupInfoKHR.deviceIndexCount.byteLength
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: $VkBindImageMemoryDeviceGroupInfoKHR.pDeviceIndices.byteOffset,
    byteLength: $VkBindImageMemoryDeviceGroupInfoKHR.pDeviceIndices.byteLength
  }),
  splitInstanceBindRegionCount: Object.freeze({
    byteOffset: $VkBindImageMemoryDeviceGroupInfoKHR.splitInstanceBindRegionCount.byteOffset,
    byteLength: $VkBindImageMemoryDeviceGroupInfoKHR.splitInstanceBindRegionCount.byteLength
  }),
  pSplitInstanceBindRegions: Object.freeze({
    byteOffset: $VkBindImageMemoryDeviceGroupInfoKHR.pSplitInstanceBindRegions.byteOffset,
    byteLength: $VkBindImageMemoryDeviceGroupInfoKHR.pSplitInstanceBindRegions.byteLength
  }),
});
class VkDeviceGroupRenderPassBeginInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._deviceMask = 0;
    this._deviceRenderAreaCount = 0;
    this._pDeviceRenderAreas = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupRenderPassBeginInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      if (opts.deviceRenderAreaCount !== void 0) this.deviceRenderAreaCount = opts.deviceRenderAreaCount;
      if (opts.pDeviceRenderAreas !== void 0) this.pDeviceRenderAreas = opts.pDeviceRenderAreas;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGroupRenderPassBeginInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get deviceMask() {
    return this._deviceMask;
  }
  set deviceMask(value) {
    
this.memoryView.setUint32($VkDeviceGroupRenderPassBeginInfo.deviceMask.byteOffset, value);
this._deviceMask = value;
  }
  get deviceRenderAreaCount() {
    return this._deviceRenderAreaCount;
  }
  set deviceRenderAreaCount(value) {
    
this.memoryView.setUint32($VkDeviceGroupRenderPassBeginInfo.deviceRenderAreaCount.byteOffset, value);
this._deviceRenderAreaCount = value;
  }
  get pDeviceRenderAreas() {
    return this._pDeviceRenderAreas;
  }
  set pDeviceRenderAreas(value) {
    
  }
  
};

VkDeviceGroupRenderPassBeginInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pDeviceRenderAreas !== null) { }
  
};

const $VkDeviceGroupRenderPassBeginInfo = memoryLayouts.VkDeviceGroupRenderPassBeginInfo;
VkDeviceGroupRenderPassBeginInfo.byteLength = $VkDeviceGroupRenderPassBeginInfo.byteLength;

VkDeviceGroupRenderPassBeginInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGroupRenderPassBeginInfo.sType.byteOffset,
    byteLength: $VkDeviceGroupRenderPassBeginInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGroupRenderPassBeginInfo.pNext.byteOffset,
    byteLength: $VkDeviceGroupRenderPassBeginInfo.pNext.byteLength
  }),
  deviceMask: Object.freeze({
    byteOffset: $VkDeviceGroupRenderPassBeginInfo.deviceMask.byteOffset,
    byteLength: $VkDeviceGroupRenderPassBeginInfo.deviceMask.byteLength
  }),
  deviceRenderAreaCount: Object.freeze({
    byteOffset: $VkDeviceGroupRenderPassBeginInfo.deviceRenderAreaCount.byteOffset,
    byteLength: $VkDeviceGroupRenderPassBeginInfo.deviceRenderAreaCount.byteLength
  }),
  pDeviceRenderAreas: Object.freeze({
    byteOffset: $VkDeviceGroupRenderPassBeginInfo.pDeviceRenderAreas.byteOffset,
    byteLength: $VkDeviceGroupRenderPassBeginInfo.pDeviceRenderAreas.byteLength
  }),
});
class VkDeviceGroupRenderPassBeginInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._deviceMask = 0;
    this._deviceRenderAreaCount = 0;
    this._pDeviceRenderAreas = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupRenderPassBeginInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      if (opts.deviceRenderAreaCount !== void 0) this.deviceRenderAreaCount = opts.deviceRenderAreaCount;
      if (opts.pDeviceRenderAreas !== void 0) this.pDeviceRenderAreas = opts.pDeviceRenderAreas;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGroupRenderPassBeginInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get deviceMask() {
    return this._deviceMask;
  }
  set deviceMask(value) {
    
this.memoryView.setUint32($VkDeviceGroupRenderPassBeginInfoKHR.deviceMask.byteOffset, value);
this._deviceMask = value;
  }
  get deviceRenderAreaCount() {
    return this._deviceRenderAreaCount;
  }
  set deviceRenderAreaCount(value) {
    
this.memoryView.setUint32($VkDeviceGroupRenderPassBeginInfoKHR.deviceRenderAreaCount.byteOffset, value);
this._deviceRenderAreaCount = value;
  }
  get pDeviceRenderAreas() {
    return this._pDeviceRenderAreas;
  }
  set pDeviceRenderAreas(value) {
    
  }
  
};

VkDeviceGroupRenderPassBeginInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pDeviceRenderAreas !== null) { }
  
};

const $VkDeviceGroupRenderPassBeginInfoKHR = memoryLayouts.VkDeviceGroupRenderPassBeginInfoKHR;
VkDeviceGroupRenderPassBeginInfoKHR.byteLength = $VkDeviceGroupRenderPassBeginInfoKHR.byteLength;

VkDeviceGroupRenderPassBeginInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGroupRenderPassBeginInfoKHR.sType.byteOffset,
    byteLength: $VkDeviceGroupRenderPassBeginInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGroupRenderPassBeginInfoKHR.pNext.byteOffset,
    byteLength: $VkDeviceGroupRenderPassBeginInfoKHR.pNext.byteLength
  }),
  deviceMask: Object.freeze({
    byteOffset: $VkDeviceGroupRenderPassBeginInfoKHR.deviceMask.byteOffset,
    byteLength: $VkDeviceGroupRenderPassBeginInfoKHR.deviceMask.byteLength
  }),
  deviceRenderAreaCount: Object.freeze({
    byteOffset: $VkDeviceGroupRenderPassBeginInfoKHR.deviceRenderAreaCount.byteOffset,
    byteLength: $VkDeviceGroupRenderPassBeginInfoKHR.deviceRenderAreaCount.byteLength
  }),
  pDeviceRenderAreas: Object.freeze({
    byteOffset: $VkDeviceGroupRenderPassBeginInfoKHR.pDeviceRenderAreas.byteOffset,
    byteLength: $VkDeviceGroupRenderPassBeginInfoKHR.pDeviceRenderAreas.byteLength
  }),
});
class VkDeviceGroupCommandBufferBeginInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._deviceMask = 0;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupCommandBufferBeginInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGroupCommandBufferBeginInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get deviceMask() {
    return this._deviceMask;
  }
  set deviceMask(value) {
    
this.memoryView.setUint32($VkDeviceGroupCommandBufferBeginInfo.deviceMask.byteOffset, value);
this._deviceMask = value;
  }
  
};

VkDeviceGroupCommandBufferBeginInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceGroupCommandBufferBeginInfo = memoryLayouts.VkDeviceGroupCommandBufferBeginInfo;
VkDeviceGroupCommandBufferBeginInfo.byteLength = $VkDeviceGroupCommandBufferBeginInfo.byteLength;

VkDeviceGroupCommandBufferBeginInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGroupCommandBufferBeginInfo.sType.byteOffset,
    byteLength: $VkDeviceGroupCommandBufferBeginInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGroupCommandBufferBeginInfo.pNext.byteOffset,
    byteLength: $VkDeviceGroupCommandBufferBeginInfo.pNext.byteLength
  }),
  deviceMask: Object.freeze({
    byteOffset: $VkDeviceGroupCommandBufferBeginInfo.deviceMask.byteOffset,
    byteLength: $VkDeviceGroupCommandBufferBeginInfo.deviceMask.byteLength
  }),
});
class VkDeviceGroupCommandBufferBeginInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._deviceMask = 0;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupCommandBufferBeginInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGroupCommandBufferBeginInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get deviceMask() {
    return this._deviceMask;
  }
  set deviceMask(value) {
    
this.memoryView.setUint32($VkDeviceGroupCommandBufferBeginInfoKHR.deviceMask.byteOffset, value);
this._deviceMask = value;
  }
  
};

VkDeviceGroupCommandBufferBeginInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceGroupCommandBufferBeginInfoKHR = memoryLayouts.VkDeviceGroupCommandBufferBeginInfoKHR;
VkDeviceGroupCommandBufferBeginInfoKHR.byteLength = $VkDeviceGroupCommandBufferBeginInfoKHR.byteLength;

VkDeviceGroupCommandBufferBeginInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGroupCommandBufferBeginInfoKHR.sType.byteOffset,
    byteLength: $VkDeviceGroupCommandBufferBeginInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGroupCommandBufferBeginInfoKHR.pNext.byteOffset,
    byteLength: $VkDeviceGroupCommandBufferBeginInfoKHR.pNext.byteLength
  }),
  deviceMask: Object.freeze({
    byteOffset: $VkDeviceGroupCommandBufferBeginInfoKHR.deviceMask.byteOffset,
    byteLength: $VkDeviceGroupCommandBufferBeginInfoKHR.deviceMask.byteLength
  }),
});
class VkDeviceGroupSubmitInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._waitSemaphoreCount = 0;
    this._pWaitSemaphoreDeviceIndices = null;
    this._commandBufferCount = 0;
    this._pCommandBufferDeviceMasks = null;
    this._signalSemaphoreCount = 0;
    this._pSignalSemaphoreDeviceIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupSubmitInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphoreDeviceIndices !== void 0) this.pWaitSemaphoreDeviceIndices = opts.pWaitSemaphoreDeviceIndices;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      if (opts.pCommandBufferDeviceMasks !== void 0) this.pCommandBufferDeviceMasks = opts.pCommandBufferDeviceMasks;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphoreDeviceIndices !== void 0) this.pSignalSemaphoreDeviceIndices = opts.pSignalSemaphoreDeviceIndices;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGroupSubmitInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get waitSemaphoreCount() {
    return this._waitSemaphoreCount;
  }
  set waitSemaphoreCount(value) {
    
this.memoryView.setUint32($VkDeviceGroupSubmitInfo.waitSemaphoreCount.byteOffset, value);
this._waitSemaphoreCount = value;
  }
  get pWaitSemaphoreDeviceIndices() {
    return this._pWaitSemaphoreDeviceIndices;
  }
  set pWaitSemaphoreDeviceIndices(value) {
    
  }
  get commandBufferCount() {
    return this._commandBufferCount;
  }
  set commandBufferCount(value) {
    
this.memoryView.setUint32($VkDeviceGroupSubmitInfo.commandBufferCount.byteOffset, value);
this._commandBufferCount = value;
  }
  get pCommandBufferDeviceMasks() {
    return this._pCommandBufferDeviceMasks;
  }
  set pCommandBufferDeviceMasks(value) {
    
  }
  get signalSemaphoreCount() {
    return this._signalSemaphoreCount;
  }
  set signalSemaphoreCount(value) {
    
this.memoryView.setUint32($VkDeviceGroupSubmitInfo.signalSemaphoreCount.byteOffset, value);
this._signalSemaphoreCount = value;
  }
  get pSignalSemaphoreDeviceIndices() {
    return this._pSignalSemaphoreDeviceIndices;
  }
  set pSignalSemaphoreDeviceIndices(value) {
    
  }
  
};

VkDeviceGroupSubmitInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceGroupSubmitInfo = memoryLayouts.VkDeviceGroupSubmitInfo;
VkDeviceGroupSubmitInfo.byteLength = $VkDeviceGroupSubmitInfo.byteLength;

VkDeviceGroupSubmitInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfo.sType.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfo.pNext.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfo.pNext.byteLength
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfo.waitSemaphoreCount.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfo.waitSemaphoreCount.byteLength
  }),
  pWaitSemaphoreDeviceIndices: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfo.pWaitSemaphoreDeviceIndices.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfo.pWaitSemaphoreDeviceIndices.byteLength
  }),
  commandBufferCount: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfo.commandBufferCount.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfo.commandBufferCount.byteLength
  }),
  pCommandBufferDeviceMasks: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfo.pCommandBufferDeviceMasks.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfo.pCommandBufferDeviceMasks.byteLength
  }),
  signalSemaphoreCount: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfo.signalSemaphoreCount.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfo.signalSemaphoreCount.byteLength
  }),
  pSignalSemaphoreDeviceIndices: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfo.pSignalSemaphoreDeviceIndices.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfo.pSignalSemaphoreDeviceIndices.byteLength
  }),
});
class VkDeviceGroupSubmitInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._waitSemaphoreCount = 0;
    this._pWaitSemaphoreDeviceIndices = null;
    this._commandBufferCount = 0;
    this._pCommandBufferDeviceMasks = null;
    this._signalSemaphoreCount = 0;
    this._pSignalSemaphoreDeviceIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupSubmitInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.waitSemaphoreCount !== void 0) this.waitSemaphoreCount = opts.waitSemaphoreCount;
      if (opts.pWaitSemaphoreDeviceIndices !== void 0) this.pWaitSemaphoreDeviceIndices = opts.pWaitSemaphoreDeviceIndices;
      if (opts.commandBufferCount !== void 0) this.commandBufferCount = opts.commandBufferCount;
      if (opts.pCommandBufferDeviceMasks !== void 0) this.pCommandBufferDeviceMasks = opts.pCommandBufferDeviceMasks;
      if (opts.signalSemaphoreCount !== void 0) this.signalSemaphoreCount = opts.signalSemaphoreCount;
      if (opts.pSignalSemaphoreDeviceIndices !== void 0) this.pSignalSemaphoreDeviceIndices = opts.pSignalSemaphoreDeviceIndices;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGroupSubmitInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get waitSemaphoreCount() {
    return this._waitSemaphoreCount;
  }
  set waitSemaphoreCount(value) {
    
this.memoryView.setUint32($VkDeviceGroupSubmitInfoKHR.waitSemaphoreCount.byteOffset, value);
this._waitSemaphoreCount = value;
  }
  get pWaitSemaphoreDeviceIndices() {
    return this._pWaitSemaphoreDeviceIndices;
  }
  set pWaitSemaphoreDeviceIndices(value) {
    
  }
  get commandBufferCount() {
    return this._commandBufferCount;
  }
  set commandBufferCount(value) {
    
this.memoryView.setUint32($VkDeviceGroupSubmitInfoKHR.commandBufferCount.byteOffset, value);
this._commandBufferCount = value;
  }
  get pCommandBufferDeviceMasks() {
    return this._pCommandBufferDeviceMasks;
  }
  set pCommandBufferDeviceMasks(value) {
    
  }
  get signalSemaphoreCount() {
    return this._signalSemaphoreCount;
  }
  set signalSemaphoreCount(value) {
    
this.memoryView.setUint32($VkDeviceGroupSubmitInfoKHR.signalSemaphoreCount.byteOffset, value);
this._signalSemaphoreCount = value;
  }
  get pSignalSemaphoreDeviceIndices() {
    return this._pSignalSemaphoreDeviceIndices;
  }
  set pSignalSemaphoreDeviceIndices(value) {
    
  }
  
};

VkDeviceGroupSubmitInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceGroupSubmitInfoKHR = memoryLayouts.VkDeviceGroupSubmitInfoKHR;
VkDeviceGroupSubmitInfoKHR.byteLength = $VkDeviceGroupSubmitInfoKHR.byteLength;

VkDeviceGroupSubmitInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfoKHR.sType.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfoKHR.pNext.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfoKHR.pNext.byteLength
  }),
  waitSemaphoreCount: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfoKHR.waitSemaphoreCount.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfoKHR.waitSemaphoreCount.byteLength
  }),
  pWaitSemaphoreDeviceIndices: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfoKHR.pWaitSemaphoreDeviceIndices.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfoKHR.pWaitSemaphoreDeviceIndices.byteLength
  }),
  commandBufferCount: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfoKHR.commandBufferCount.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfoKHR.commandBufferCount.byteLength
  }),
  pCommandBufferDeviceMasks: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfoKHR.pCommandBufferDeviceMasks.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfoKHR.pCommandBufferDeviceMasks.byteLength
  }),
  signalSemaphoreCount: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfoKHR.signalSemaphoreCount.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfoKHR.signalSemaphoreCount.byteLength
  }),
  pSignalSemaphoreDeviceIndices: Object.freeze({
    byteOffset: $VkDeviceGroupSubmitInfoKHR.pSignalSemaphoreDeviceIndices.byteOffset,
    byteLength: $VkDeviceGroupSubmitInfoKHR.pSignalSemaphoreDeviceIndices.byteLength
  }),
});
class VkDeviceGroupBindSparseInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._resourceDeviceIndex = 0;
    this._memoryDeviceIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupBindSparseInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.resourceDeviceIndex !== void 0) this.resourceDeviceIndex = opts.resourceDeviceIndex;
      if (opts.memoryDeviceIndex !== void 0) this.memoryDeviceIndex = opts.memoryDeviceIndex;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGroupBindSparseInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get resourceDeviceIndex() {
    return this._resourceDeviceIndex;
  }
  set resourceDeviceIndex(value) {
    
this.memoryView.setUint32($VkDeviceGroupBindSparseInfo.resourceDeviceIndex.byteOffset, value);
this._resourceDeviceIndex = value;
  }
  get memoryDeviceIndex() {
    return this._memoryDeviceIndex;
  }
  set memoryDeviceIndex(value) {
    
this.memoryView.setUint32($VkDeviceGroupBindSparseInfo.memoryDeviceIndex.byteOffset, value);
this._memoryDeviceIndex = value;
  }
  
};

VkDeviceGroupBindSparseInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceGroupBindSparseInfo = memoryLayouts.VkDeviceGroupBindSparseInfo;
VkDeviceGroupBindSparseInfo.byteLength = $VkDeviceGroupBindSparseInfo.byteLength;

VkDeviceGroupBindSparseInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGroupBindSparseInfo.sType.byteOffset,
    byteLength: $VkDeviceGroupBindSparseInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGroupBindSparseInfo.pNext.byteOffset,
    byteLength: $VkDeviceGroupBindSparseInfo.pNext.byteLength
  }),
  resourceDeviceIndex: Object.freeze({
    byteOffset: $VkDeviceGroupBindSparseInfo.resourceDeviceIndex.byteOffset,
    byteLength: $VkDeviceGroupBindSparseInfo.resourceDeviceIndex.byteLength
  }),
  memoryDeviceIndex: Object.freeze({
    byteOffset: $VkDeviceGroupBindSparseInfo.memoryDeviceIndex.byteOffset,
    byteLength: $VkDeviceGroupBindSparseInfo.memoryDeviceIndex.byteLength
  }),
});
class VkDeviceGroupBindSparseInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._resourceDeviceIndex = 0;
    this._memoryDeviceIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupBindSparseInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.resourceDeviceIndex !== void 0) this.resourceDeviceIndex = opts.resourceDeviceIndex;
      if (opts.memoryDeviceIndex !== void 0) this.memoryDeviceIndex = opts.memoryDeviceIndex;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGroupBindSparseInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get resourceDeviceIndex() {
    return this._resourceDeviceIndex;
  }
  set resourceDeviceIndex(value) {
    
this.memoryView.setUint32($VkDeviceGroupBindSparseInfoKHR.resourceDeviceIndex.byteOffset, value);
this._resourceDeviceIndex = value;
  }
  get memoryDeviceIndex() {
    return this._memoryDeviceIndex;
  }
  set memoryDeviceIndex(value) {
    
this.memoryView.setUint32($VkDeviceGroupBindSparseInfoKHR.memoryDeviceIndex.byteOffset, value);
this._memoryDeviceIndex = value;
  }
  
};

VkDeviceGroupBindSparseInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceGroupBindSparseInfoKHR = memoryLayouts.VkDeviceGroupBindSparseInfoKHR;
VkDeviceGroupBindSparseInfoKHR.byteLength = $VkDeviceGroupBindSparseInfoKHR.byteLength;

VkDeviceGroupBindSparseInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGroupBindSparseInfoKHR.sType.byteOffset,
    byteLength: $VkDeviceGroupBindSparseInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGroupBindSparseInfoKHR.pNext.byteOffset,
    byteLength: $VkDeviceGroupBindSparseInfoKHR.pNext.byteLength
  }),
  resourceDeviceIndex: Object.freeze({
    byteOffset: $VkDeviceGroupBindSparseInfoKHR.resourceDeviceIndex.byteOffset,
    byteLength: $VkDeviceGroupBindSparseInfoKHR.resourceDeviceIndex.byteLength
  }),
  memoryDeviceIndex: Object.freeze({
    byteOffset: $VkDeviceGroupBindSparseInfoKHR.memoryDeviceIndex.byteOffset,
    byteLength: $VkDeviceGroupBindSparseInfoKHR.memoryDeviceIndex.byteLength
  }),
});
class VkDeviceGroupPresentCapabilitiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._presentMask = null;
    this._modes = 0;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupPresentCapabilitiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGroupPresentCapabilitiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get presentMask() {
    return this._presentMask;
  }
  get modes() {
    return this._modes;
  }
  
};

VkDeviceGroupPresentCapabilitiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.presentMask !== null) { }
  
};

const $VkDeviceGroupPresentCapabilitiesKHR = memoryLayouts.VkDeviceGroupPresentCapabilitiesKHR;
VkDeviceGroupPresentCapabilitiesKHR.byteLength = $VkDeviceGroupPresentCapabilitiesKHR.byteLength;

VkDeviceGroupPresentCapabilitiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGroupPresentCapabilitiesKHR.sType.byteOffset,
    byteLength: $VkDeviceGroupPresentCapabilitiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGroupPresentCapabilitiesKHR.pNext.byteOffset,
    byteLength: $VkDeviceGroupPresentCapabilitiesKHR.pNext.byteLength
  }),
  presentMask: Object.freeze({
    byteOffset: $VkDeviceGroupPresentCapabilitiesKHR.presentMask.byteOffset,
    byteLength: $VkDeviceGroupPresentCapabilitiesKHR.presentMask.byteLength
  }),
  modes: Object.freeze({
    byteOffset: $VkDeviceGroupPresentCapabilitiesKHR.modes.byteOffset,
    byteLength: $VkDeviceGroupPresentCapabilitiesKHR.modes.byteLength
  }),
});
class VkImageSwapchainCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._swapchain = null;
    this.memoryBuffer = new ArrayBuffer(VkImageSwapchainCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchain !== void 0) this.swapchain = opts.swapchain;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageSwapchainCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get swapchain() {
    return this._swapchain;
  }
  set swapchain(value) {
    String
  }
  
};

VkImageSwapchainCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImageSwapchainCreateInfoKHR = memoryLayouts.VkImageSwapchainCreateInfoKHR;
VkImageSwapchainCreateInfoKHR.byteLength = $VkImageSwapchainCreateInfoKHR.byteLength;

VkImageSwapchainCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageSwapchainCreateInfoKHR.sType.byteOffset,
    byteLength: $VkImageSwapchainCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageSwapchainCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkImageSwapchainCreateInfoKHR.pNext.byteLength
  }),
  swapchain: Object.freeze({
    byteOffset: $VkImageSwapchainCreateInfoKHR.swapchain.byteOffset,
    byteLength: $VkImageSwapchainCreateInfoKHR.swapchain.byteLength
  }),
});
class VkBindImageMemorySwapchainInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._swapchain = null;
    this._imageIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkBindImageMemorySwapchainInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchain !== void 0) this.swapchain = opts.swapchain;
      if (opts.imageIndex !== void 0) this.imageIndex = opts.imageIndex;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBindImageMemorySwapchainInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get swapchain() {
    return this._swapchain;
  }
  set swapchain(value) {
    String
  }
  get imageIndex() {
    return this._imageIndex;
  }
  set imageIndex(value) {
    
this.memoryView.setUint32($VkBindImageMemorySwapchainInfoKHR.imageIndex.byteOffset, value);
this._imageIndex = value;
  }
  
};

VkBindImageMemorySwapchainInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBindImageMemorySwapchainInfoKHR = memoryLayouts.VkBindImageMemorySwapchainInfoKHR;
VkBindImageMemorySwapchainInfoKHR.byteLength = $VkBindImageMemorySwapchainInfoKHR.byteLength;

VkBindImageMemorySwapchainInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBindImageMemorySwapchainInfoKHR.sType.byteOffset,
    byteLength: $VkBindImageMemorySwapchainInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBindImageMemorySwapchainInfoKHR.pNext.byteOffset,
    byteLength: $VkBindImageMemorySwapchainInfoKHR.pNext.byteLength
  }),
  swapchain: Object.freeze({
    byteOffset: $VkBindImageMemorySwapchainInfoKHR.swapchain.byteOffset,
    byteLength: $VkBindImageMemorySwapchainInfoKHR.swapchain.byteLength
  }),
  imageIndex: Object.freeze({
    byteOffset: $VkBindImageMemorySwapchainInfoKHR.imageIndex.byteOffset,
    byteLength: $VkBindImageMemorySwapchainInfoKHR.imageIndex.byteLength
  }),
});
class VkAcquireNextImageInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._swapchain = null;
    this._timeout = 0;
    this._semaphore = null;
    this._fence = null;
    this._deviceMask = 0;
    this.memoryBuffer = new ArrayBuffer(VkAcquireNextImageInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchain !== void 0) this.swapchain = opts.swapchain;
      if (opts.timeout !== void 0) this.timeout = opts.timeout;
      if (opts.semaphore !== void 0) this.semaphore = opts.semaphore;
      if (opts.fence !== void 0) this.fence = opts.fence;
      if (opts.deviceMask !== void 0) this.deviceMask = opts.deviceMask;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkAcquireNextImageInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get swapchain() {
    return this._swapchain;
  }
  set swapchain(value) {
    String
  }
  get timeout() {
    return this._timeout;
  }
  set timeout(value) {
    
this.memoryView.setBigUint64($VkAcquireNextImageInfoKHR.timeout.byteOffset, value);
this._timeout = value;
  }
  get semaphore() {
    return this._semaphore;
  }
  set semaphore(value) {
    String
  }
  get fence() {
    return this._fence;
  }
  set fence(value) {
    String
  }
  get deviceMask() {
    return this._deviceMask;
  }
  set deviceMask(value) {
    
this.memoryView.setUint32($VkAcquireNextImageInfoKHR.deviceMask.byteOffset, value);
this._deviceMask = value;
  }
  
};

VkAcquireNextImageInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkAcquireNextImageInfoKHR = memoryLayouts.VkAcquireNextImageInfoKHR;
VkAcquireNextImageInfoKHR.byteLength = $VkAcquireNextImageInfoKHR.byteLength;

VkAcquireNextImageInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkAcquireNextImageInfoKHR.sType.byteOffset,
    byteLength: $VkAcquireNextImageInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkAcquireNextImageInfoKHR.pNext.byteOffset,
    byteLength: $VkAcquireNextImageInfoKHR.pNext.byteLength
  }),
  swapchain: Object.freeze({
    byteOffset: $VkAcquireNextImageInfoKHR.swapchain.byteOffset,
    byteLength: $VkAcquireNextImageInfoKHR.swapchain.byteLength
  }),
  timeout: Object.freeze({
    byteOffset: $VkAcquireNextImageInfoKHR.timeout.byteOffset,
    byteLength: $VkAcquireNextImageInfoKHR.timeout.byteLength
  }),
  semaphore: Object.freeze({
    byteOffset: $VkAcquireNextImageInfoKHR.semaphore.byteOffset,
    byteLength: $VkAcquireNextImageInfoKHR.semaphore.byteLength
  }),
  fence: Object.freeze({
    byteOffset: $VkAcquireNextImageInfoKHR.fence.byteOffset,
    byteLength: $VkAcquireNextImageInfoKHR.fence.byteLength
  }),
  deviceMask: Object.freeze({
    byteOffset: $VkAcquireNextImageInfoKHR.deviceMask.byteOffset,
    byteLength: $VkAcquireNextImageInfoKHR.deviceMask.byteLength
  }),
});
class VkDeviceGroupPresentInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._swapchainCount = 0;
    this._pDeviceMasks = null;
    this._mode = 0;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupPresentInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pDeviceMasks !== void 0) this.pDeviceMasks = opts.pDeviceMasks;
      if (opts.mode !== void 0) this.mode = opts.mode;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGroupPresentInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get swapchainCount() {
    return this._swapchainCount;
  }
  set swapchainCount(value) {
    
this.memoryView.setUint32($VkDeviceGroupPresentInfoKHR.swapchainCount.byteOffset, value);
this._swapchainCount = value;
  }
  get pDeviceMasks() {
    return this._pDeviceMasks;
  }
  set pDeviceMasks(value) {
    
  }
  get mode() {
    return this._mode;
  }
  set mode(value) {
    
this.memoryView.setInt32($VkDeviceGroupPresentInfoKHR.mode.byteOffset, value);
this._mode = value;
  }
  
};

VkDeviceGroupPresentInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceGroupPresentInfoKHR = memoryLayouts.VkDeviceGroupPresentInfoKHR;
VkDeviceGroupPresentInfoKHR.byteLength = $VkDeviceGroupPresentInfoKHR.byteLength;

VkDeviceGroupPresentInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGroupPresentInfoKHR.sType.byteOffset,
    byteLength: $VkDeviceGroupPresentInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGroupPresentInfoKHR.pNext.byteOffset,
    byteLength: $VkDeviceGroupPresentInfoKHR.pNext.byteLength
  }),
  swapchainCount: Object.freeze({
    byteOffset: $VkDeviceGroupPresentInfoKHR.swapchainCount.byteOffset,
    byteLength: $VkDeviceGroupPresentInfoKHR.swapchainCount.byteLength
  }),
  pDeviceMasks: Object.freeze({
    byteOffset: $VkDeviceGroupPresentInfoKHR.pDeviceMasks.byteOffset,
    byteLength: $VkDeviceGroupPresentInfoKHR.pDeviceMasks.byteLength
  }),
  mode: Object.freeze({
    byteOffset: $VkDeviceGroupPresentInfoKHR.mode.byteOffset,
    byteLength: $VkDeviceGroupPresentInfoKHR.mode.byteLength
  }),
});
class VkDeviceGroupDeviceCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._physicalDeviceCount = 0;
    this._pPhysicalDevices = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupDeviceCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.physicalDeviceCount !== void 0) this.physicalDeviceCount = opts.physicalDeviceCount;
      if (opts.pPhysicalDevices !== void 0) this.pPhysicalDevices = opts.pPhysicalDevices;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGroupDeviceCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get physicalDeviceCount() {
    return this._physicalDeviceCount;
  }
  set physicalDeviceCount(value) {
    
this.memoryView.setUint32($VkDeviceGroupDeviceCreateInfo.physicalDeviceCount.byteOffset, value);
this._physicalDeviceCount = value;
  }
  get pPhysicalDevices() {
    return this._pPhysicalDevices;
  }
  set pPhysicalDevices(value) {
    
  }
  
};

VkDeviceGroupDeviceCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pPhysicalDevices !== null) { }
  
};

const $VkDeviceGroupDeviceCreateInfo = memoryLayouts.VkDeviceGroupDeviceCreateInfo;
VkDeviceGroupDeviceCreateInfo.byteLength = $VkDeviceGroupDeviceCreateInfo.byteLength;

VkDeviceGroupDeviceCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGroupDeviceCreateInfo.sType.byteOffset,
    byteLength: $VkDeviceGroupDeviceCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGroupDeviceCreateInfo.pNext.byteOffset,
    byteLength: $VkDeviceGroupDeviceCreateInfo.pNext.byteLength
  }),
  physicalDeviceCount: Object.freeze({
    byteOffset: $VkDeviceGroupDeviceCreateInfo.physicalDeviceCount.byteOffset,
    byteLength: $VkDeviceGroupDeviceCreateInfo.physicalDeviceCount.byteLength
  }),
  pPhysicalDevices: Object.freeze({
    byteOffset: $VkDeviceGroupDeviceCreateInfo.pPhysicalDevices.byteOffset,
    byteLength: $VkDeviceGroupDeviceCreateInfo.pPhysicalDevices.byteLength
  }),
});
class VkDeviceGroupDeviceCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._physicalDeviceCount = 0;
    this._pPhysicalDevices = null;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupDeviceCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.physicalDeviceCount !== void 0) this.physicalDeviceCount = opts.physicalDeviceCount;
      if (opts.pPhysicalDevices !== void 0) this.pPhysicalDevices = opts.pPhysicalDevices;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGroupDeviceCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get physicalDeviceCount() {
    return this._physicalDeviceCount;
  }
  set physicalDeviceCount(value) {
    
this.memoryView.setUint32($VkDeviceGroupDeviceCreateInfoKHR.physicalDeviceCount.byteOffset, value);
this._physicalDeviceCount = value;
  }
  get pPhysicalDevices() {
    return this._pPhysicalDevices;
  }
  set pPhysicalDevices(value) {
    
  }
  
};

VkDeviceGroupDeviceCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pPhysicalDevices !== null) { }
  
};

const $VkDeviceGroupDeviceCreateInfoKHR = memoryLayouts.VkDeviceGroupDeviceCreateInfoKHR;
VkDeviceGroupDeviceCreateInfoKHR.byteLength = $VkDeviceGroupDeviceCreateInfoKHR.byteLength;

VkDeviceGroupDeviceCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGroupDeviceCreateInfoKHR.sType.byteOffset,
    byteLength: $VkDeviceGroupDeviceCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGroupDeviceCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkDeviceGroupDeviceCreateInfoKHR.pNext.byteLength
  }),
  physicalDeviceCount: Object.freeze({
    byteOffset: $VkDeviceGroupDeviceCreateInfoKHR.physicalDeviceCount.byteOffset,
    byteLength: $VkDeviceGroupDeviceCreateInfoKHR.physicalDeviceCount.byteLength
  }),
  pPhysicalDevices: Object.freeze({
    byteOffset: $VkDeviceGroupDeviceCreateInfoKHR.pPhysicalDevices.byteOffset,
    byteLength: $VkDeviceGroupDeviceCreateInfoKHR.pPhysicalDevices.byteLength
  }),
});
class VkDeviceGroupSwapchainCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._modes = 0;
    this.memoryBuffer = new ArrayBuffer(VkDeviceGroupSwapchainCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.modes !== void 0) this.modes = opts.modes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceGroupSwapchainCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get modes() {
    return this._modes;
  }
  set modes(value) {
    
this.memoryView.setInt32($VkDeviceGroupSwapchainCreateInfoKHR.modes.byteOffset, value);
this._modes = value;
  }
  
};

VkDeviceGroupSwapchainCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceGroupSwapchainCreateInfoKHR = memoryLayouts.VkDeviceGroupSwapchainCreateInfoKHR;
VkDeviceGroupSwapchainCreateInfoKHR.byteLength = $VkDeviceGroupSwapchainCreateInfoKHR.byteLength;

VkDeviceGroupSwapchainCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceGroupSwapchainCreateInfoKHR.sType.byteOffset,
    byteLength: $VkDeviceGroupSwapchainCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceGroupSwapchainCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkDeviceGroupSwapchainCreateInfoKHR.pNext.byteLength
  }),
  modes: Object.freeze({
    byteOffset: $VkDeviceGroupSwapchainCreateInfoKHR.modes.byteOffset,
    byteLength: $VkDeviceGroupSwapchainCreateInfoKHR.modes.byteLength
  }),
});
class VkDescriptorUpdateTemplateEntry {
  constructor(opts) {
    this._dstBinding = 0;
    this._dstArrayElement = 0;
    this._descriptorCount = 0;
    this._descriptorType = 0;
    this._offset = 0;
    this._stride = 0;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorUpdateTemplateEntry.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.stride !== void 0) this.stride = opts.stride;
      
    }
  }
  get dstBinding() {
    return this._dstBinding;
  }
  set dstBinding(value) {
    
this.memoryView.setUint32($VkDescriptorUpdateTemplateEntry.dstBinding.byteOffset, value);
this._dstBinding = value;
  }
  get dstArrayElement() {
    return this._dstArrayElement;
  }
  set dstArrayElement(value) {
    
this.memoryView.setUint32($VkDescriptorUpdateTemplateEntry.dstArrayElement.byteOffset, value);
this._dstArrayElement = value;
  }
  get descriptorCount() {
    return this._descriptorCount;
  }
  set descriptorCount(value) {
    
this.memoryView.setUint32($VkDescriptorUpdateTemplateEntry.descriptorCount.byteOffset, value);
this._descriptorCount = value;
  }
  get descriptorType() {
    return this._descriptorType;
  }
  set descriptorType(value) {
    
this.memoryView.setInt32($VkDescriptorUpdateTemplateEntry.descriptorType.byteOffset, value);
this._descriptorType = value;
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    
this.memoryView.setBigInt64($VkDescriptorUpdateTemplateEntry.offset.byteOffset, value);
this._offset = value;
  }
  get stride() {
    return this._stride;
  }
  set stride(value) {
    
this.memoryView.setBigInt64($VkDescriptorUpdateTemplateEntry.stride.byteOffset, value);
this._stride = value;
  }
  
};

VkDescriptorUpdateTemplateEntry.prototype.flush = function flush() {
  
};

const $VkDescriptorUpdateTemplateEntry = memoryLayouts.VkDescriptorUpdateTemplateEntry;
VkDescriptorUpdateTemplateEntry.byteLength = $VkDescriptorUpdateTemplateEntry.byteLength;

VkDescriptorUpdateTemplateEntry.memoryLayout = Object.freeze({
  dstBinding: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateEntry.dstBinding.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateEntry.dstBinding.byteLength
  }),
  dstArrayElement: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateEntry.dstArrayElement.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateEntry.dstArrayElement.byteLength
  }),
  descriptorCount: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateEntry.descriptorCount.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateEntry.descriptorCount.byteLength
  }),
  descriptorType: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateEntry.descriptorType.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateEntry.descriptorType.byteLength
  }),
  offset: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateEntry.offset.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateEntry.offset.byteLength
  }),
  stride: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateEntry.stride.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateEntry.stride.byteLength
  }),
});
class VkDescriptorUpdateTemplateEntryKHR {
  constructor(opts) {
    this._dstBinding = 0;
    this._dstArrayElement = 0;
    this._descriptorCount = 0;
    this._descriptorType = 0;
    this._offset = 0;
    this._stride = 0;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorUpdateTemplateEntryKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.dstBinding !== void 0) this.dstBinding = opts.dstBinding;
      if (opts.dstArrayElement !== void 0) this.dstArrayElement = opts.dstArrayElement;
      if (opts.descriptorCount !== void 0) this.descriptorCount = opts.descriptorCount;
      if (opts.descriptorType !== void 0) this.descriptorType = opts.descriptorType;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.stride !== void 0) this.stride = opts.stride;
      
    }
  }
  get dstBinding() {
    return this._dstBinding;
  }
  set dstBinding(value) {
    
this.memoryView.setUint32($VkDescriptorUpdateTemplateEntryKHR.dstBinding.byteOffset, value);
this._dstBinding = value;
  }
  get dstArrayElement() {
    return this._dstArrayElement;
  }
  set dstArrayElement(value) {
    
this.memoryView.setUint32($VkDescriptorUpdateTemplateEntryKHR.dstArrayElement.byteOffset, value);
this._dstArrayElement = value;
  }
  get descriptorCount() {
    return this._descriptorCount;
  }
  set descriptorCount(value) {
    
this.memoryView.setUint32($VkDescriptorUpdateTemplateEntryKHR.descriptorCount.byteOffset, value);
this._descriptorCount = value;
  }
  get descriptorType() {
    return this._descriptorType;
  }
  set descriptorType(value) {
    
this.memoryView.setInt32($VkDescriptorUpdateTemplateEntryKHR.descriptorType.byteOffset, value);
this._descriptorType = value;
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    
this.memoryView.setBigInt64($VkDescriptorUpdateTemplateEntryKHR.offset.byteOffset, value);
this._offset = value;
  }
  get stride() {
    return this._stride;
  }
  set stride(value) {
    
this.memoryView.setBigInt64($VkDescriptorUpdateTemplateEntryKHR.stride.byteOffset, value);
this._stride = value;
  }
  
};

VkDescriptorUpdateTemplateEntryKHR.prototype.flush = function flush() {
  
};

const $VkDescriptorUpdateTemplateEntryKHR = memoryLayouts.VkDescriptorUpdateTemplateEntryKHR;
VkDescriptorUpdateTemplateEntryKHR.byteLength = $VkDescriptorUpdateTemplateEntryKHR.byteLength;

VkDescriptorUpdateTemplateEntryKHR.memoryLayout = Object.freeze({
  dstBinding: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateEntryKHR.dstBinding.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateEntryKHR.dstBinding.byteLength
  }),
  dstArrayElement: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateEntryKHR.dstArrayElement.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateEntryKHR.dstArrayElement.byteLength
  }),
  descriptorCount: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateEntryKHR.descriptorCount.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateEntryKHR.descriptorCount.byteLength
  }),
  descriptorType: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateEntryKHR.descriptorType.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateEntryKHR.descriptorType.byteLength
  }),
  offset: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateEntryKHR.offset.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateEntryKHR.offset.byteLength
  }),
  stride: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateEntryKHR.stride.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateEntryKHR.stride.byteLength
  }),
});
class VkDescriptorUpdateTemplateCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._descriptorUpdateEntryCount = 0;
    this._pDescriptorUpdateEntries = null;
    this._templateType = 0;
    this._descriptorSetLayout = null;
    this._pipelineBindPoint = 0;
    this._pipelineLayout = null;
    this._set = 0;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorUpdateTemplateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.descriptorUpdateEntryCount !== void 0) this.descriptorUpdateEntryCount = opts.descriptorUpdateEntryCount;
      if (opts.pDescriptorUpdateEntries !== void 0) this.pDescriptorUpdateEntries = opts.pDescriptorUpdateEntries;
      if (opts.templateType !== void 0) this.templateType = opts.templateType;
      if (opts.descriptorSetLayout !== void 0) this.descriptorSetLayout = opts.descriptorSetLayout;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.set !== void 0) this.set = opts.set;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDescriptorUpdateTemplateCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkDescriptorUpdateTemplateCreateInfo.flags.byteOffset, value);
this._flags = value;
  }
  get descriptorUpdateEntryCount() {
    return this._descriptorUpdateEntryCount;
  }
  set descriptorUpdateEntryCount(value) {
    
this.memoryView.setUint32($VkDescriptorUpdateTemplateCreateInfo.descriptorUpdateEntryCount.byteOffset, value);
this._descriptorUpdateEntryCount = value;
  }
  get pDescriptorUpdateEntries() {
    return this._pDescriptorUpdateEntries;
  }
  set pDescriptorUpdateEntries(value) {
    
  }
  get templateType() {
    return this._templateType;
  }
  set templateType(value) {
    
this.memoryView.setInt32($VkDescriptorUpdateTemplateCreateInfo.templateType.byteOffset, value);
this._templateType = value;
  }
  get descriptorSetLayout() {
    return this._descriptorSetLayout;
  }
  set descriptorSetLayout(value) {
    String
  }
  get pipelineBindPoint() {
    return this._pipelineBindPoint;
  }
  set pipelineBindPoint(value) {
    
this.memoryView.setInt32($VkDescriptorUpdateTemplateCreateInfo.pipelineBindPoint.byteOffset, value);
this._pipelineBindPoint = value;
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    String
  }
  get set() {
    return this._set;
  }
  set set(value) {
    
this.memoryView.setUint32($VkDescriptorUpdateTemplateCreateInfo.set.byteOffset, value);
this._set = value;
  }
  
};

VkDescriptorUpdateTemplateCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pDescriptorUpdateEntries !== null) { }
  
};

const $VkDescriptorUpdateTemplateCreateInfo = memoryLayouts.VkDescriptorUpdateTemplateCreateInfo;
VkDescriptorUpdateTemplateCreateInfo.byteLength = $VkDescriptorUpdateTemplateCreateInfo.byteLength;

VkDescriptorUpdateTemplateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfo.sType.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfo.pNext.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfo.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfo.flags.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfo.flags.byteLength
  }),
  descriptorUpdateEntryCount: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfo.descriptorUpdateEntryCount.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfo.descriptorUpdateEntryCount.byteLength
  }),
  pDescriptorUpdateEntries: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfo.pDescriptorUpdateEntries.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfo.pDescriptorUpdateEntries.byteLength
  }),
  templateType: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfo.templateType.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfo.templateType.byteLength
  }),
  descriptorSetLayout: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfo.descriptorSetLayout.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfo.descriptorSetLayout.byteLength
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfo.pipelineBindPoint.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfo.pipelineBindPoint.byteLength
  }),
  pipelineLayout: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfo.pipelineLayout.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfo.pipelineLayout.byteLength
  }),
  set: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfo.set.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfo.set.byteLength
  }),
});
class VkDescriptorUpdateTemplateCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._descriptorUpdateEntryCount = 0;
    this._pDescriptorUpdateEntries = null;
    this._templateType = 0;
    this._descriptorSetLayout = null;
    this._pipelineBindPoint = 0;
    this._pipelineLayout = null;
    this._set = 0;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorUpdateTemplateCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.descriptorUpdateEntryCount !== void 0) this.descriptorUpdateEntryCount = opts.descriptorUpdateEntryCount;
      if (opts.pDescriptorUpdateEntries !== void 0) this.pDescriptorUpdateEntries = opts.pDescriptorUpdateEntries;
      if (opts.templateType !== void 0) this.templateType = opts.templateType;
      if (opts.descriptorSetLayout !== void 0) this.descriptorSetLayout = opts.descriptorSetLayout;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.pipelineLayout !== void 0) this.pipelineLayout = opts.pipelineLayout;
      if (opts.set !== void 0) this.set = opts.set;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDescriptorUpdateTemplateCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkDescriptorUpdateTemplateCreateInfoKHR.flags.byteOffset, value);
this._flags = value;
  }
  get descriptorUpdateEntryCount() {
    return this._descriptorUpdateEntryCount;
  }
  set descriptorUpdateEntryCount(value) {
    
this.memoryView.setUint32($VkDescriptorUpdateTemplateCreateInfoKHR.descriptorUpdateEntryCount.byteOffset, value);
this._descriptorUpdateEntryCount = value;
  }
  get pDescriptorUpdateEntries() {
    return this._pDescriptorUpdateEntries;
  }
  set pDescriptorUpdateEntries(value) {
    
  }
  get templateType() {
    return this._templateType;
  }
  set templateType(value) {
    
this.memoryView.setInt32($VkDescriptorUpdateTemplateCreateInfoKHR.templateType.byteOffset, value);
this._templateType = value;
  }
  get descriptorSetLayout() {
    return this._descriptorSetLayout;
  }
  set descriptorSetLayout(value) {
    String
  }
  get pipelineBindPoint() {
    return this._pipelineBindPoint;
  }
  set pipelineBindPoint(value) {
    
this.memoryView.setInt32($VkDescriptorUpdateTemplateCreateInfoKHR.pipelineBindPoint.byteOffset, value);
this._pipelineBindPoint = value;
  }
  get pipelineLayout() {
    return this._pipelineLayout;
  }
  set pipelineLayout(value) {
    String
  }
  get set() {
    return this._set;
  }
  set set(value) {
    
this.memoryView.setUint32($VkDescriptorUpdateTemplateCreateInfoKHR.set.byteOffset, value);
this._set = value;
  }
  
};

VkDescriptorUpdateTemplateCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pDescriptorUpdateEntries !== null) { }
  
};

const $VkDescriptorUpdateTemplateCreateInfoKHR = memoryLayouts.VkDescriptorUpdateTemplateCreateInfoKHR;
VkDescriptorUpdateTemplateCreateInfoKHR.byteLength = $VkDescriptorUpdateTemplateCreateInfoKHR.byteLength;

VkDescriptorUpdateTemplateCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfoKHR.sType.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfoKHR.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfoKHR.flags.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfoKHR.flags.byteLength
  }),
  descriptorUpdateEntryCount: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfoKHR.descriptorUpdateEntryCount.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfoKHR.descriptorUpdateEntryCount.byteLength
  }),
  pDescriptorUpdateEntries: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfoKHR.pDescriptorUpdateEntries.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfoKHR.pDescriptorUpdateEntries.byteLength
  }),
  templateType: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfoKHR.templateType.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfoKHR.templateType.byteLength
  }),
  descriptorSetLayout: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfoKHR.descriptorSetLayout.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfoKHR.descriptorSetLayout.byteLength
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfoKHR.pipelineBindPoint.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfoKHR.pipelineBindPoint.byteLength
  }),
  pipelineLayout: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfoKHR.pipelineLayout.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfoKHR.pipelineLayout.byteLength
  }),
  set: Object.freeze({
    byteOffset: $VkDescriptorUpdateTemplateCreateInfoKHR.set.byteOffset,
    byteLength: $VkDescriptorUpdateTemplateCreateInfoKHR.set.byteLength
  }),
});
class VkXYColorEXT {
  constructor(opts) {
    this._x = 0;
    this._y = 0;
    this.memoryBuffer = new ArrayBuffer(VkXYColorEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      
    }
  }
  get x() {
    return this._x;
  }
  set x(value) {
    
this.memoryView.setFloat32($VkXYColorEXT.x.byteOffset, value);
this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    
this.memoryView.setFloat32($VkXYColorEXT.y.byteOffset, value);
this._y = value;
  }
  
};

VkXYColorEXT.prototype.flush = function flush() {
  
};

const $VkXYColorEXT = memoryLayouts.VkXYColorEXT;
VkXYColorEXT.byteLength = $VkXYColorEXT.byteLength;

VkXYColorEXT.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: $VkXYColorEXT.x.byteOffset,
    byteLength: $VkXYColorEXT.x.byteLength
  }),
  y: Object.freeze({
    byteOffset: $VkXYColorEXT.y.byteOffset,
    byteLength: $VkXYColorEXT.y.byteLength
  }),
});
class VkHdrMetadataEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._displayPrimaryRed = null;
    this._displayPrimaryGreen = null;
    this._displayPrimaryBlue = null;
    this._whitePoint = null;
    this._maxLuminance = 0;
    this._minLuminance = 0;
    this._maxContentLightLevel = 0;
    this._maxFrameAverageLightLevel = 0;
    this.memoryBuffer = new ArrayBuffer(VkHdrMetadataEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.displayPrimaryRed !== void 0) this.displayPrimaryRed = opts.displayPrimaryRed;
      if (opts.displayPrimaryGreen !== void 0) this.displayPrimaryGreen = opts.displayPrimaryGreen;
      if (opts.displayPrimaryBlue !== void 0) this.displayPrimaryBlue = opts.displayPrimaryBlue;
      if (opts.whitePoint !== void 0) this.whitePoint = opts.whitePoint;
      if (opts.maxLuminance !== void 0) this.maxLuminance = opts.maxLuminance;
      if (opts.minLuminance !== void 0) this.minLuminance = opts.minLuminance;
      if (opts.maxContentLightLevel !== void 0) this.maxContentLightLevel = opts.maxContentLightLevel;
      if (opts.maxFrameAverageLightLevel !== void 0) this.maxFrameAverageLightLevel = opts.maxFrameAverageLightLevel;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkHdrMetadataEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get displayPrimaryRed() {
    return this._displayPrimaryRed;
  }
  set displayPrimaryRed(value) {
    String
  }
  get displayPrimaryGreen() {
    return this._displayPrimaryGreen;
  }
  set displayPrimaryGreen(value) {
    String
  }
  get displayPrimaryBlue() {
    return this._displayPrimaryBlue;
  }
  set displayPrimaryBlue(value) {
    String
  }
  get whitePoint() {
    return this._whitePoint;
  }
  set whitePoint(value) {
    String
  }
  get maxLuminance() {
    return this._maxLuminance;
  }
  set maxLuminance(value) {
    
this.memoryView.setFloat32($VkHdrMetadataEXT.maxLuminance.byteOffset, value);
this._maxLuminance = value;
  }
  get minLuminance() {
    return this._minLuminance;
  }
  set minLuminance(value) {
    
this.memoryView.setFloat32($VkHdrMetadataEXT.minLuminance.byteOffset, value);
this._minLuminance = value;
  }
  get maxContentLightLevel() {
    return this._maxContentLightLevel;
  }
  set maxContentLightLevel(value) {
    
this.memoryView.setFloat32($VkHdrMetadataEXT.maxContentLightLevel.byteOffset, value);
this._maxContentLightLevel = value;
  }
  get maxFrameAverageLightLevel() {
    return this._maxFrameAverageLightLevel;
  }
  set maxFrameAverageLightLevel(value) {
    
this.memoryView.setFloat32($VkHdrMetadataEXT.maxFrameAverageLightLevel.byteOffset, value);
this._maxFrameAverageLightLevel = value;
  }
  
};

VkHdrMetadataEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.displayPrimaryRed !== null) { }
  
  if (this.displayPrimaryGreen !== null) { }
  
  if (this.displayPrimaryBlue !== null) { }
  
  if (this.whitePoint !== null) { }
  
};

const $VkHdrMetadataEXT = memoryLayouts.VkHdrMetadataEXT;
VkHdrMetadataEXT.byteLength = $VkHdrMetadataEXT.byteLength;

VkHdrMetadataEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkHdrMetadataEXT.sType.byteOffset,
    byteLength: $VkHdrMetadataEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkHdrMetadataEXT.pNext.byteOffset,
    byteLength: $VkHdrMetadataEXT.pNext.byteLength
  }),
  displayPrimaryRed: Object.freeze({
    byteOffset: $VkHdrMetadataEXT.displayPrimaryRed.byteOffset,
    byteLength: $VkHdrMetadataEXT.displayPrimaryRed.byteLength
  }),
  displayPrimaryGreen: Object.freeze({
    byteOffset: $VkHdrMetadataEXT.displayPrimaryGreen.byteOffset,
    byteLength: $VkHdrMetadataEXT.displayPrimaryGreen.byteLength
  }),
  displayPrimaryBlue: Object.freeze({
    byteOffset: $VkHdrMetadataEXT.displayPrimaryBlue.byteOffset,
    byteLength: $VkHdrMetadataEXT.displayPrimaryBlue.byteLength
  }),
  whitePoint: Object.freeze({
    byteOffset: $VkHdrMetadataEXT.whitePoint.byteOffset,
    byteLength: $VkHdrMetadataEXT.whitePoint.byteLength
  }),
  maxLuminance: Object.freeze({
    byteOffset: $VkHdrMetadataEXT.maxLuminance.byteOffset,
    byteLength: $VkHdrMetadataEXT.maxLuminance.byteLength
  }),
  minLuminance: Object.freeze({
    byteOffset: $VkHdrMetadataEXT.minLuminance.byteOffset,
    byteLength: $VkHdrMetadataEXT.minLuminance.byteLength
  }),
  maxContentLightLevel: Object.freeze({
    byteOffset: $VkHdrMetadataEXT.maxContentLightLevel.byteOffset,
    byteLength: $VkHdrMetadataEXT.maxContentLightLevel.byteLength
  }),
  maxFrameAverageLightLevel: Object.freeze({
    byteOffset: $VkHdrMetadataEXT.maxFrameAverageLightLevel.byteOffset,
    byteLength: $VkHdrMetadataEXT.maxFrameAverageLightLevel.byteLength
  }),
});
class VkRefreshCycleDurationGOOGLE {
  constructor(opts) {
    this._refreshDuration = 0;
    this.memoryBuffer = new ArrayBuffer(VkRefreshCycleDurationGOOGLE.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get refreshDuration() {
    return this._refreshDuration;
  }
  
};

VkRefreshCycleDurationGOOGLE.prototype.flush = function flush() {
  
};

const $VkRefreshCycleDurationGOOGLE = memoryLayouts.VkRefreshCycleDurationGOOGLE;
VkRefreshCycleDurationGOOGLE.byteLength = $VkRefreshCycleDurationGOOGLE.byteLength;

VkRefreshCycleDurationGOOGLE.memoryLayout = Object.freeze({
  refreshDuration: Object.freeze({
    byteOffset: $VkRefreshCycleDurationGOOGLE.refreshDuration.byteOffset,
    byteLength: $VkRefreshCycleDurationGOOGLE.refreshDuration.byteLength
  }),
});
class VkPastPresentationTimingGOOGLE {
  constructor(opts) {
    this._presentID = 0;
    this._desiredPresentTime = 0;
    this._actualPresentTime = 0;
    this._earliestPresentTime = 0;
    this._presentMargin = 0;
    this.memoryBuffer = new ArrayBuffer(VkPastPresentationTimingGOOGLE.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get presentID() {
    return this._presentID;
  }
  get desiredPresentTime() {
    return this._desiredPresentTime;
  }
  get actualPresentTime() {
    return this._actualPresentTime;
  }
  get earliestPresentTime() {
    return this._earliestPresentTime;
  }
  get presentMargin() {
    return this._presentMargin;
  }
  
};

VkPastPresentationTimingGOOGLE.prototype.flush = function flush() {
  
};

const $VkPastPresentationTimingGOOGLE = memoryLayouts.VkPastPresentationTimingGOOGLE;
VkPastPresentationTimingGOOGLE.byteLength = $VkPastPresentationTimingGOOGLE.byteLength;

VkPastPresentationTimingGOOGLE.memoryLayout = Object.freeze({
  presentID: Object.freeze({
    byteOffset: $VkPastPresentationTimingGOOGLE.presentID.byteOffset,
    byteLength: $VkPastPresentationTimingGOOGLE.presentID.byteLength
  }),
  desiredPresentTime: Object.freeze({
    byteOffset: $VkPastPresentationTimingGOOGLE.desiredPresentTime.byteOffset,
    byteLength: $VkPastPresentationTimingGOOGLE.desiredPresentTime.byteLength
  }),
  actualPresentTime: Object.freeze({
    byteOffset: $VkPastPresentationTimingGOOGLE.actualPresentTime.byteOffset,
    byteLength: $VkPastPresentationTimingGOOGLE.actualPresentTime.byteLength
  }),
  earliestPresentTime: Object.freeze({
    byteOffset: $VkPastPresentationTimingGOOGLE.earliestPresentTime.byteOffset,
    byteLength: $VkPastPresentationTimingGOOGLE.earliestPresentTime.byteLength
  }),
  presentMargin: Object.freeze({
    byteOffset: $VkPastPresentationTimingGOOGLE.presentMargin.byteOffset,
    byteLength: $VkPastPresentationTimingGOOGLE.presentMargin.byteLength
  }),
});
class VkPresentTimesInfoGOOGLE {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._swapchainCount = 0;
    this._pTimes = null;
    this.memoryBuffer = new ArrayBuffer(VkPresentTimesInfoGOOGLE.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.swapchainCount !== void 0) this.swapchainCount = opts.swapchainCount;
      if (opts.pTimes !== void 0) this.pTimes = opts.pTimes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPresentTimesInfoGOOGLE.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get swapchainCount() {
    return this._swapchainCount;
  }
  set swapchainCount(value) {
    
this.memoryView.setUint32($VkPresentTimesInfoGOOGLE.swapchainCount.byteOffset, value);
this._swapchainCount = value;
  }
  get pTimes() {
    return this._pTimes;
  }
  set pTimes(value) {
    
  }
  
};

VkPresentTimesInfoGOOGLE.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pTimes !== null) { }
  
};

const $VkPresentTimesInfoGOOGLE = memoryLayouts.VkPresentTimesInfoGOOGLE;
VkPresentTimesInfoGOOGLE.byteLength = $VkPresentTimesInfoGOOGLE.byteLength;

VkPresentTimesInfoGOOGLE.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPresentTimesInfoGOOGLE.sType.byteOffset,
    byteLength: $VkPresentTimesInfoGOOGLE.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPresentTimesInfoGOOGLE.pNext.byteOffset,
    byteLength: $VkPresentTimesInfoGOOGLE.pNext.byteLength
  }),
  swapchainCount: Object.freeze({
    byteOffset: $VkPresentTimesInfoGOOGLE.swapchainCount.byteOffset,
    byteLength: $VkPresentTimesInfoGOOGLE.swapchainCount.byteLength
  }),
  pTimes: Object.freeze({
    byteOffset: $VkPresentTimesInfoGOOGLE.pTimes.byteOffset,
    byteLength: $VkPresentTimesInfoGOOGLE.pTimes.byteLength
  }),
});
class VkPresentTimeGOOGLE {
  constructor(opts) {
    this._presentID = 0;
    this._desiredPresentTime = 0;
    this.memoryBuffer = new ArrayBuffer(VkPresentTimeGOOGLE.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.presentID !== void 0) this.presentID = opts.presentID;
      if (opts.desiredPresentTime !== void 0) this.desiredPresentTime = opts.desiredPresentTime;
      
    }
  }
  get presentID() {
    return this._presentID;
  }
  set presentID(value) {
    
this.memoryView.setUint32($VkPresentTimeGOOGLE.presentID.byteOffset, value);
this._presentID = value;
  }
  get desiredPresentTime() {
    return this._desiredPresentTime;
  }
  set desiredPresentTime(value) {
    
this.memoryView.setBigUint64($VkPresentTimeGOOGLE.desiredPresentTime.byteOffset, value);
this._desiredPresentTime = value;
  }
  
};

VkPresentTimeGOOGLE.prototype.flush = function flush() {
  
};

const $VkPresentTimeGOOGLE = memoryLayouts.VkPresentTimeGOOGLE;
VkPresentTimeGOOGLE.byteLength = $VkPresentTimeGOOGLE.byteLength;

VkPresentTimeGOOGLE.memoryLayout = Object.freeze({
  presentID: Object.freeze({
    byteOffset: $VkPresentTimeGOOGLE.presentID.byteOffset,
    byteLength: $VkPresentTimeGOOGLE.presentID.byteLength
  }),
  desiredPresentTime: Object.freeze({
    byteOffset: $VkPresentTimeGOOGLE.desiredPresentTime.byteOffset,
    byteLength: $VkPresentTimeGOOGLE.desiredPresentTime.byteLength
  }),
});
class VkViewportWScalingNV {
  constructor(opts) {
    this._xcoeff = 0;
    this._ycoeff = 0;
    this.memoryBuffer = new ArrayBuffer(VkViewportWScalingNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.xcoeff !== void 0) this.xcoeff = opts.xcoeff;
      if (opts.ycoeff !== void 0) this.ycoeff = opts.ycoeff;
      
    }
  }
  get xcoeff() {
    return this._xcoeff;
  }
  set xcoeff(value) {
    
this.memoryView.setFloat32($VkViewportWScalingNV.xcoeff.byteOffset, value);
this._xcoeff = value;
  }
  get ycoeff() {
    return this._ycoeff;
  }
  set ycoeff(value) {
    
this.memoryView.setFloat32($VkViewportWScalingNV.ycoeff.byteOffset, value);
this._ycoeff = value;
  }
  
};

VkViewportWScalingNV.prototype.flush = function flush() {
  
};

const $VkViewportWScalingNV = memoryLayouts.VkViewportWScalingNV;
VkViewportWScalingNV.byteLength = $VkViewportWScalingNV.byteLength;

VkViewportWScalingNV.memoryLayout = Object.freeze({
  xcoeff: Object.freeze({
    byteOffset: $VkViewportWScalingNV.xcoeff.byteOffset,
    byteLength: $VkViewportWScalingNV.xcoeff.byteLength
  }),
  ycoeff: Object.freeze({
    byteOffset: $VkViewportWScalingNV.ycoeff.byteOffset,
    byteLength: $VkViewportWScalingNV.ycoeff.byteLength
  }),
});
class VkPipelineViewportWScalingStateCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._viewportWScalingEnable = 0;
    this._viewportCount = 0;
    this._pViewportWScalings = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineViewportWScalingStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.viewportWScalingEnable !== void 0) this.viewportWScalingEnable = opts.viewportWScalingEnable;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pViewportWScalings !== void 0) this.pViewportWScalings = opts.pViewportWScalings;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineViewportWScalingStateCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get viewportWScalingEnable() {
    return this._viewportWScalingEnable;
  }
  set viewportWScalingEnable(value) {
    
this.memoryView.setUint32($VkPipelineViewportWScalingStateCreateInfoNV.viewportWScalingEnable.byteOffset, value);
this._viewportWScalingEnable = value;
  }
  get viewportCount() {
    return this._viewportCount;
  }
  set viewportCount(value) {
    
this.memoryView.setUint32($VkPipelineViewportWScalingStateCreateInfoNV.viewportCount.byteOffset, value);
this._viewportCount = value;
  }
  get pViewportWScalings() {
    return this._pViewportWScalings;
  }
  set pViewportWScalings(value) {
    
  }
  
};

VkPipelineViewportWScalingStateCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pViewportWScalings !== null) { }
  
};

const $VkPipelineViewportWScalingStateCreateInfoNV = memoryLayouts.VkPipelineViewportWScalingStateCreateInfoNV;
VkPipelineViewportWScalingStateCreateInfoNV.byteLength = $VkPipelineViewportWScalingStateCreateInfoNV.byteLength;

VkPipelineViewportWScalingStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineViewportWScalingStateCreateInfoNV.sType.byteOffset,
    byteLength: $VkPipelineViewportWScalingStateCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineViewportWScalingStateCreateInfoNV.pNext.byteOffset,
    byteLength: $VkPipelineViewportWScalingStateCreateInfoNV.pNext.byteLength
  }),
  viewportWScalingEnable: Object.freeze({
    byteOffset: $VkPipelineViewportWScalingStateCreateInfoNV.viewportWScalingEnable.byteOffset,
    byteLength: $VkPipelineViewportWScalingStateCreateInfoNV.viewportWScalingEnable.byteLength
  }),
  viewportCount: Object.freeze({
    byteOffset: $VkPipelineViewportWScalingStateCreateInfoNV.viewportCount.byteOffset,
    byteLength: $VkPipelineViewportWScalingStateCreateInfoNV.viewportCount.byteLength
  }),
  pViewportWScalings: Object.freeze({
    byteOffset: $VkPipelineViewportWScalingStateCreateInfoNV.pViewportWScalings.byteOffset,
    byteLength: $VkPipelineViewportWScalingStateCreateInfoNV.pViewportWScalings.byteLength
  }),
});
class VkViewportSwizzleNV {
  constructor(opts) {
    this._x = 0;
    this._y = 0;
    this._z = 0;
    this._w = 0;
    this.memoryBuffer = new ArrayBuffer(VkViewportSwizzleNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      if (opts.z !== void 0) this.z = opts.z;
      if (opts.w !== void 0) this.w = opts.w;
      
    }
  }
  get x() {
    return this._x;
  }
  set x(value) {
    
this.memoryView.setInt32($VkViewportSwizzleNV.x.byteOffset, value);
this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    
this.memoryView.setInt32($VkViewportSwizzleNV.y.byteOffset, value);
this._y = value;
  }
  get z() {
    return this._z;
  }
  set z(value) {
    
this.memoryView.setInt32($VkViewportSwizzleNV.z.byteOffset, value);
this._z = value;
  }
  get w() {
    return this._w;
  }
  set w(value) {
    
this.memoryView.setInt32($VkViewportSwizzleNV.w.byteOffset, value);
this._w = value;
  }
  
};

VkViewportSwizzleNV.prototype.flush = function flush() {
  
};

const $VkViewportSwizzleNV = memoryLayouts.VkViewportSwizzleNV;
VkViewportSwizzleNV.byteLength = $VkViewportSwizzleNV.byteLength;

VkViewportSwizzleNV.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: $VkViewportSwizzleNV.x.byteOffset,
    byteLength: $VkViewportSwizzleNV.x.byteLength
  }),
  y: Object.freeze({
    byteOffset: $VkViewportSwizzleNV.y.byteOffset,
    byteLength: $VkViewportSwizzleNV.y.byteLength
  }),
  z: Object.freeze({
    byteOffset: $VkViewportSwizzleNV.z.byteOffset,
    byteLength: $VkViewportSwizzleNV.z.byteLength
  }),
  w: Object.freeze({
    byteOffset: $VkViewportSwizzleNV.w.byteOffset,
    byteLength: $VkViewportSwizzleNV.w.byteLength
  }),
});
class VkPipelineViewportSwizzleStateCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._viewportCount = 0;
    this._pViewportSwizzles = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineViewportSwizzleStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pViewportSwizzles !== void 0) this.pViewportSwizzles = opts.pViewportSwizzles;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineViewportSwizzleStateCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineViewportSwizzleStateCreateInfoNV.flags.byteOffset, value);
this._flags = value;
  }
  get viewportCount() {
    return this._viewportCount;
  }
  set viewportCount(value) {
    
this.memoryView.setUint32($VkPipelineViewportSwizzleStateCreateInfoNV.viewportCount.byteOffset, value);
this._viewportCount = value;
  }
  get pViewportSwizzles() {
    return this._pViewportSwizzles;
  }
  set pViewportSwizzles(value) {
    
  }
  
};

VkPipelineViewportSwizzleStateCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pViewportSwizzles !== null) { }
  
};

const $VkPipelineViewportSwizzleStateCreateInfoNV = memoryLayouts.VkPipelineViewportSwizzleStateCreateInfoNV;
VkPipelineViewportSwizzleStateCreateInfoNV.byteLength = $VkPipelineViewportSwizzleStateCreateInfoNV.byteLength;

VkPipelineViewportSwizzleStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineViewportSwizzleStateCreateInfoNV.sType.byteOffset,
    byteLength: $VkPipelineViewportSwizzleStateCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineViewportSwizzleStateCreateInfoNV.pNext.byteOffset,
    byteLength: $VkPipelineViewportSwizzleStateCreateInfoNV.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineViewportSwizzleStateCreateInfoNV.flags.byteOffset,
    byteLength: $VkPipelineViewportSwizzleStateCreateInfoNV.flags.byteLength
  }),
  viewportCount: Object.freeze({
    byteOffset: $VkPipelineViewportSwizzleStateCreateInfoNV.viewportCount.byteOffset,
    byteLength: $VkPipelineViewportSwizzleStateCreateInfoNV.viewportCount.byteLength
  }),
  pViewportSwizzles: Object.freeze({
    byteOffset: $VkPipelineViewportSwizzleStateCreateInfoNV.pViewportSwizzles.byteOffset,
    byteLength: $VkPipelineViewportSwizzleStateCreateInfoNV.pViewportSwizzles.byteLength
  }),
});
class VkPhysicalDeviceDiscardRectanglePropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxDiscardRectangles = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDiscardRectanglePropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceDiscardRectanglePropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxDiscardRectangles() {
    return this._maxDiscardRectangles;
  }
  
};

VkPhysicalDeviceDiscardRectanglePropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceDiscardRectanglePropertiesEXT = memoryLayouts.VkPhysicalDeviceDiscardRectanglePropertiesEXT;
VkPhysicalDeviceDiscardRectanglePropertiesEXT.byteLength = $VkPhysicalDeviceDiscardRectanglePropertiesEXT.byteLength;

VkPhysicalDeviceDiscardRectanglePropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceDiscardRectanglePropertiesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceDiscardRectanglePropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceDiscardRectanglePropertiesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceDiscardRectanglePropertiesEXT.pNext.byteLength
  }),
  maxDiscardRectangles: Object.freeze({
    byteOffset: $VkPhysicalDeviceDiscardRectanglePropertiesEXT.maxDiscardRectangles.byteOffset,
    byteLength: $VkPhysicalDeviceDiscardRectanglePropertiesEXT.maxDiscardRectangles.byteLength
  }),
});
class VkPipelineDiscardRectangleStateCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._discardRectangleMode = 0;
    this._discardRectangleCount = 0;
    this._pDiscardRectangles = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineDiscardRectangleStateCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.discardRectangleMode !== void 0) this.discardRectangleMode = opts.discardRectangleMode;
      if (opts.discardRectangleCount !== void 0) this.discardRectangleCount = opts.discardRectangleCount;
      if (opts.pDiscardRectangles !== void 0) this.pDiscardRectangles = opts.pDiscardRectangles;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineDiscardRectangleStateCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineDiscardRectangleStateCreateInfoEXT.flags.byteOffset, value);
this._flags = value;
  }
  get discardRectangleMode() {
    return this._discardRectangleMode;
  }
  set discardRectangleMode(value) {
    
this.memoryView.setInt32($VkPipelineDiscardRectangleStateCreateInfoEXT.discardRectangleMode.byteOffset, value);
this._discardRectangleMode = value;
  }
  get discardRectangleCount() {
    return this._discardRectangleCount;
  }
  set discardRectangleCount(value) {
    
this.memoryView.setUint32($VkPipelineDiscardRectangleStateCreateInfoEXT.discardRectangleCount.byteOffset, value);
this._discardRectangleCount = value;
  }
  get pDiscardRectangles() {
    return this._pDiscardRectangles;
  }
  set pDiscardRectangles(value) {
    
  }
  
};

VkPipelineDiscardRectangleStateCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pDiscardRectangles !== null) { }
  
};

const $VkPipelineDiscardRectangleStateCreateInfoEXT = memoryLayouts.VkPipelineDiscardRectangleStateCreateInfoEXT;
VkPipelineDiscardRectangleStateCreateInfoEXT.byteLength = $VkPipelineDiscardRectangleStateCreateInfoEXT.byteLength;

VkPipelineDiscardRectangleStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineDiscardRectangleStateCreateInfoEXT.sType.byteOffset,
    byteLength: $VkPipelineDiscardRectangleStateCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineDiscardRectangleStateCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkPipelineDiscardRectangleStateCreateInfoEXT.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineDiscardRectangleStateCreateInfoEXT.flags.byteOffset,
    byteLength: $VkPipelineDiscardRectangleStateCreateInfoEXT.flags.byteLength
  }),
  discardRectangleMode: Object.freeze({
    byteOffset: $VkPipelineDiscardRectangleStateCreateInfoEXT.discardRectangleMode.byteOffset,
    byteLength: $VkPipelineDiscardRectangleStateCreateInfoEXT.discardRectangleMode.byteLength
  }),
  discardRectangleCount: Object.freeze({
    byteOffset: $VkPipelineDiscardRectangleStateCreateInfoEXT.discardRectangleCount.byteOffset,
    byteLength: $VkPipelineDiscardRectangleStateCreateInfoEXT.discardRectangleCount.byteLength
  }),
  pDiscardRectangles: Object.freeze({
    byteOffset: $VkPipelineDiscardRectangleStateCreateInfoEXT.pDiscardRectangles.byteOffset,
    byteLength: $VkPipelineDiscardRectangleStateCreateInfoEXT.pDiscardRectangles.byteLength
  }),
});
class VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._perViewPositionAllComponents = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get perViewPositionAllComponents() {
    return this._perViewPositionAllComponents;
  }
  
};

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = memoryLayouts.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.byteLength = $VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.byteLength;

VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.sType.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.pNext.byteLength
  }),
  perViewPositionAllComponents: Object.freeze({
    byteOffset: $VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.perViewPositionAllComponents.byteOffset,
    byteLength: $VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.perViewPositionAllComponents.byteLength
  }),
});
class VkInputAttachmentAspectReference {
  constructor(opts) {
    this._subpass = 0;
    this._inputAttachmentIndex = 0;
    this._aspectMask = 0;
    this.memoryBuffer = new ArrayBuffer(VkInputAttachmentAspectReference.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.inputAttachmentIndex !== void 0) this.inputAttachmentIndex = opts.inputAttachmentIndex;
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      
    }
  }
  get subpass() {
    return this._subpass;
  }
  set subpass(value) {
    
this.memoryView.setUint32($VkInputAttachmentAspectReference.subpass.byteOffset, value);
this._subpass = value;
  }
  get inputAttachmentIndex() {
    return this._inputAttachmentIndex;
  }
  set inputAttachmentIndex(value) {
    
this.memoryView.setUint32($VkInputAttachmentAspectReference.inputAttachmentIndex.byteOffset, value);
this._inputAttachmentIndex = value;
  }
  get aspectMask() {
    return this._aspectMask;
  }
  set aspectMask(value) {
    
this.memoryView.setInt32($VkInputAttachmentAspectReference.aspectMask.byteOffset, value);
this._aspectMask = value;
  }
  
};

VkInputAttachmentAspectReference.prototype.flush = function flush() {
  
};

const $VkInputAttachmentAspectReference = memoryLayouts.VkInputAttachmentAspectReference;
VkInputAttachmentAspectReference.byteLength = $VkInputAttachmentAspectReference.byteLength;

VkInputAttachmentAspectReference.memoryLayout = Object.freeze({
  subpass: Object.freeze({
    byteOffset: $VkInputAttachmentAspectReference.subpass.byteOffset,
    byteLength: $VkInputAttachmentAspectReference.subpass.byteLength
  }),
  inputAttachmentIndex: Object.freeze({
    byteOffset: $VkInputAttachmentAspectReference.inputAttachmentIndex.byteOffset,
    byteLength: $VkInputAttachmentAspectReference.inputAttachmentIndex.byteLength
  }),
  aspectMask: Object.freeze({
    byteOffset: $VkInputAttachmentAspectReference.aspectMask.byteOffset,
    byteLength: $VkInputAttachmentAspectReference.aspectMask.byteLength
  }),
});
class VkInputAttachmentAspectReferenceKHR {
  constructor(opts) {
    this._subpass = 0;
    this._inputAttachmentIndex = 0;
    this._aspectMask = 0;
    this.memoryBuffer = new ArrayBuffer(VkInputAttachmentAspectReferenceKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.subpass !== void 0) this.subpass = opts.subpass;
      if (opts.inputAttachmentIndex !== void 0) this.inputAttachmentIndex = opts.inputAttachmentIndex;
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      
    }
  }
  get subpass() {
    return this._subpass;
  }
  set subpass(value) {
    
this.memoryView.setUint32($VkInputAttachmentAspectReferenceKHR.subpass.byteOffset, value);
this._subpass = value;
  }
  get inputAttachmentIndex() {
    return this._inputAttachmentIndex;
  }
  set inputAttachmentIndex(value) {
    
this.memoryView.setUint32($VkInputAttachmentAspectReferenceKHR.inputAttachmentIndex.byteOffset, value);
this._inputAttachmentIndex = value;
  }
  get aspectMask() {
    return this._aspectMask;
  }
  set aspectMask(value) {
    
this.memoryView.setInt32($VkInputAttachmentAspectReferenceKHR.aspectMask.byteOffset, value);
this._aspectMask = value;
  }
  
};

VkInputAttachmentAspectReferenceKHR.prototype.flush = function flush() {
  
};

const $VkInputAttachmentAspectReferenceKHR = memoryLayouts.VkInputAttachmentAspectReferenceKHR;
VkInputAttachmentAspectReferenceKHR.byteLength = $VkInputAttachmentAspectReferenceKHR.byteLength;

VkInputAttachmentAspectReferenceKHR.memoryLayout = Object.freeze({
  subpass: Object.freeze({
    byteOffset: $VkInputAttachmentAspectReferenceKHR.subpass.byteOffset,
    byteLength: $VkInputAttachmentAspectReferenceKHR.subpass.byteLength
  }),
  inputAttachmentIndex: Object.freeze({
    byteOffset: $VkInputAttachmentAspectReferenceKHR.inputAttachmentIndex.byteOffset,
    byteLength: $VkInputAttachmentAspectReferenceKHR.inputAttachmentIndex.byteLength
  }),
  aspectMask: Object.freeze({
    byteOffset: $VkInputAttachmentAspectReferenceKHR.aspectMask.byteOffset,
    byteLength: $VkInputAttachmentAspectReferenceKHR.aspectMask.byteLength
  }),
});
class VkRenderPassInputAttachmentAspectCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._aspectReferenceCount = 0;
    this._pAspectReferences = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassInputAttachmentAspectCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.aspectReferenceCount !== void 0) this.aspectReferenceCount = opts.aspectReferenceCount;
      if (opts.pAspectReferences !== void 0) this.pAspectReferences = opts.pAspectReferences;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkRenderPassInputAttachmentAspectCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get aspectReferenceCount() {
    return this._aspectReferenceCount;
  }
  set aspectReferenceCount(value) {
    
this.memoryView.setUint32($VkRenderPassInputAttachmentAspectCreateInfo.aspectReferenceCount.byteOffset, value);
this._aspectReferenceCount = value;
  }
  get pAspectReferences() {
    return this._pAspectReferences;
  }
  set pAspectReferences(value) {
    
  }
  
};

VkRenderPassInputAttachmentAspectCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pAspectReferences !== null) { }
  
};

const $VkRenderPassInputAttachmentAspectCreateInfo = memoryLayouts.VkRenderPassInputAttachmentAspectCreateInfo;
VkRenderPassInputAttachmentAspectCreateInfo.byteLength = $VkRenderPassInputAttachmentAspectCreateInfo.byteLength;

VkRenderPassInputAttachmentAspectCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkRenderPassInputAttachmentAspectCreateInfo.sType.byteOffset,
    byteLength: $VkRenderPassInputAttachmentAspectCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkRenderPassInputAttachmentAspectCreateInfo.pNext.byteOffset,
    byteLength: $VkRenderPassInputAttachmentAspectCreateInfo.pNext.byteLength
  }),
  aspectReferenceCount: Object.freeze({
    byteOffset: $VkRenderPassInputAttachmentAspectCreateInfo.aspectReferenceCount.byteOffset,
    byteLength: $VkRenderPassInputAttachmentAspectCreateInfo.aspectReferenceCount.byteLength
  }),
  pAspectReferences: Object.freeze({
    byteOffset: $VkRenderPassInputAttachmentAspectCreateInfo.pAspectReferences.byteOffset,
    byteLength: $VkRenderPassInputAttachmentAspectCreateInfo.pAspectReferences.byteLength
  }),
});
class VkRenderPassInputAttachmentAspectCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._aspectReferenceCount = 0;
    this._pAspectReferences = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassInputAttachmentAspectCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.aspectReferenceCount !== void 0) this.aspectReferenceCount = opts.aspectReferenceCount;
      if (opts.pAspectReferences !== void 0) this.pAspectReferences = opts.pAspectReferences;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkRenderPassInputAttachmentAspectCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get aspectReferenceCount() {
    return this._aspectReferenceCount;
  }
  set aspectReferenceCount(value) {
    
this.memoryView.setUint32($VkRenderPassInputAttachmentAspectCreateInfoKHR.aspectReferenceCount.byteOffset, value);
this._aspectReferenceCount = value;
  }
  get pAspectReferences() {
    return this._pAspectReferences;
  }
  set pAspectReferences(value) {
    
  }
  
};

VkRenderPassInputAttachmentAspectCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pAspectReferences !== null) { }
  
};

const $VkRenderPassInputAttachmentAspectCreateInfoKHR = memoryLayouts.VkRenderPassInputAttachmentAspectCreateInfoKHR;
VkRenderPassInputAttachmentAspectCreateInfoKHR.byteLength = $VkRenderPassInputAttachmentAspectCreateInfoKHR.byteLength;

VkRenderPassInputAttachmentAspectCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkRenderPassInputAttachmentAspectCreateInfoKHR.sType.byteOffset,
    byteLength: $VkRenderPassInputAttachmentAspectCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkRenderPassInputAttachmentAspectCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkRenderPassInputAttachmentAspectCreateInfoKHR.pNext.byteLength
  }),
  aspectReferenceCount: Object.freeze({
    byteOffset: $VkRenderPassInputAttachmentAspectCreateInfoKHR.aspectReferenceCount.byteOffset,
    byteLength: $VkRenderPassInputAttachmentAspectCreateInfoKHR.aspectReferenceCount.byteLength
  }),
  pAspectReferences: Object.freeze({
    byteOffset: $VkRenderPassInputAttachmentAspectCreateInfoKHR.pAspectReferences.byteOffset,
    byteLength: $VkRenderPassInputAttachmentAspectCreateInfoKHR.pAspectReferences.byteLength
  }),
});
class VkPhysicalDeviceSurfaceInfo2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._surface = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSurfaceInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.surface !== void 0) this.surface = opts.surface;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSurfaceInfo2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get surface() {
    return this._surface;
  }
  set surface(value) {
    String
  }
  
};

VkPhysicalDeviceSurfaceInfo2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceSurfaceInfo2KHR = memoryLayouts.VkPhysicalDeviceSurfaceInfo2KHR;
VkPhysicalDeviceSurfaceInfo2KHR.byteLength = $VkPhysicalDeviceSurfaceInfo2KHR.byteLength;

VkPhysicalDeviceSurfaceInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceSurfaceInfo2KHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceSurfaceInfo2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceSurfaceInfo2KHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceSurfaceInfo2KHR.pNext.byteLength
  }),
  surface: Object.freeze({
    byteOffset: $VkPhysicalDeviceSurfaceInfo2KHR.surface.byteOffset,
    byteLength: $VkPhysicalDeviceSurfaceInfo2KHR.surface.byteLength
  }),
});
class VkSurfaceCapabilities2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._surfaceCapabilities = null;
    this.memoryBuffer = new ArrayBuffer(VkSurfaceCapabilities2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSurfaceCapabilities2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get surfaceCapabilities() {
    return this._surfaceCapabilities;
  }
  
};

VkSurfaceCapabilities2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.surfaceCapabilities !== null) { }
  
};

const $VkSurfaceCapabilities2KHR = memoryLayouts.VkSurfaceCapabilities2KHR;
VkSurfaceCapabilities2KHR.byteLength = $VkSurfaceCapabilities2KHR.byteLength;

VkSurfaceCapabilities2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2KHR.sType.byteOffset,
    byteLength: $VkSurfaceCapabilities2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2KHR.pNext.byteOffset,
    byteLength: $VkSurfaceCapabilities2KHR.pNext.byteLength
  }),
  surfaceCapabilities: Object.freeze({
    byteOffset: $VkSurfaceCapabilities2KHR.surfaceCapabilities.byteOffset,
    byteLength: $VkSurfaceCapabilities2KHR.surfaceCapabilities.byteLength
  }),
});
class VkSurfaceFormat2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._surfaceFormat = null;
    this.memoryBuffer = new ArrayBuffer(VkSurfaceFormat2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSurfaceFormat2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get surfaceFormat() {
    return this._surfaceFormat;
  }
  
};

VkSurfaceFormat2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.surfaceFormat !== null) { }
  
};

const $VkSurfaceFormat2KHR = memoryLayouts.VkSurfaceFormat2KHR;
VkSurfaceFormat2KHR.byteLength = $VkSurfaceFormat2KHR.byteLength;

VkSurfaceFormat2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSurfaceFormat2KHR.sType.byteOffset,
    byteLength: $VkSurfaceFormat2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSurfaceFormat2KHR.pNext.byteOffset,
    byteLength: $VkSurfaceFormat2KHR.pNext.byteLength
  }),
  surfaceFormat: Object.freeze({
    byteOffset: $VkSurfaceFormat2KHR.surfaceFormat.byteOffset,
    byteLength: $VkSurfaceFormat2KHR.surfaceFormat.byteLength
  }),
});
class VkDisplayProperties2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._displayProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDisplayProperties2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get displayProperties() {
    return this._displayProperties;
  }
  
};

VkDisplayProperties2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.displayProperties !== null) { }
  
};

const $VkDisplayProperties2KHR = memoryLayouts.VkDisplayProperties2KHR;
VkDisplayProperties2KHR.byteLength = $VkDisplayProperties2KHR.byteLength;

VkDisplayProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDisplayProperties2KHR.sType.byteOffset,
    byteLength: $VkDisplayProperties2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDisplayProperties2KHR.pNext.byteOffset,
    byteLength: $VkDisplayProperties2KHR.pNext.byteLength
  }),
  displayProperties: Object.freeze({
    byteOffset: $VkDisplayProperties2KHR.displayProperties.byteOffset,
    byteLength: $VkDisplayProperties2KHR.displayProperties.byteLength
  }),
});
class VkDisplayPlaneProperties2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._displayPlaneProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayPlaneProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDisplayPlaneProperties2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get displayPlaneProperties() {
    return this._displayPlaneProperties;
  }
  
};

VkDisplayPlaneProperties2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.displayPlaneProperties !== null) { }
  
};

const $VkDisplayPlaneProperties2KHR = memoryLayouts.VkDisplayPlaneProperties2KHR;
VkDisplayPlaneProperties2KHR.byteLength = $VkDisplayPlaneProperties2KHR.byteLength;

VkDisplayPlaneProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDisplayPlaneProperties2KHR.sType.byteOffset,
    byteLength: $VkDisplayPlaneProperties2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDisplayPlaneProperties2KHR.pNext.byteOffset,
    byteLength: $VkDisplayPlaneProperties2KHR.pNext.byteLength
  }),
  displayPlaneProperties: Object.freeze({
    byteOffset: $VkDisplayPlaneProperties2KHR.displayPlaneProperties.byteOffset,
    byteLength: $VkDisplayPlaneProperties2KHR.displayPlaneProperties.byteLength
  }),
});
class VkDisplayModeProperties2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._displayModeProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayModeProperties2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDisplayModeProperties2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get displayModeProperties() {
    return this._displayModeProperties;
  }
  
};

VkDisplayModeProperties2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.displayModeProperties !== null) { }
  
};

const $VkDisplayModeProperties2KHR = memoryLayouts.VkDisplayModeProperties2KHR;
VkDisplayModeProperties2KHR.byteLength = $VkDisplayModeProperties2KHR.byteLength;

VkDisplayModeProperties2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDisplayModeProperties2KHR.sType.byteOffset,
    byteLength: $VkDisplayModeProperties2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDisplayModeProperties2KHR.pNext.byteOffset,
    byteLength: $VkDisplayModeProperties2KHR.pNext.byteLength
  }),
  displayModeProperties: Object.freeze({
    byteOffset: $VkDisplayModeProperties2KHR.displayModeProperties.byteOffset,
    byteLength: $VkDisplayModeProperties2KHR.displayModeProperties.byteLength
  }),
});
class VkDisplayPlaneInfo2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._mode = null;
    this._planeIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkDisplayPlaneInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.mode !== void 0) this.mode = opts.mode;
      if (opts.planeIndex !== void 0) this.planeIndex = opts.planeIndex;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDisplayPlaneInfo2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get mode() {
    return this._mode;
  }
  set mode(value) {
    String
  }
  get planeIndex() {
    return this._planeIndex;
  }
  set planeIndex(value) {
    
this.memoryView.setUint32($VkDisplayPlaneInfo2KHR.planeIndex.byteOffset, value);
this._planeIndex = value;
  }
  
};

VkDisplayPlaneInfo2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDisplayPlaneInfo2KHR = memoryLayouts.VkDisplayPlaneInfo2KHR;
VkDisplayPlaneInfo2KHR.byteLength = $VkDisplayPlaneInfo2KHR.byteLength;

VkDisplayPlaneInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDisplayPlaneInfo2KHR.sType.byteOffset,
    byteLength: $VkDisplayPlaneInfo2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDisplayPlaneInfo2KHR.pNext.byteOffset,
    byteLength: $VkDisplayPlaneInfo2KHR.pNext.byteLength
  }),
  mode: Object.freeze({
    byteOffset: $VkDisplayPlaneInfo2KHR.mode.byteOffset,
    byteLength: $VkDisplayPlaneInfo2KHR.mode.byteLength
  }),
  planeIndex: Object.freeze({
    byteOffset: $VkDisplayPlaneInfo2KHR.planeIndex.byteOffset,
    byteLength: $VkDisplayPlaneInfo2KHR.planeIndex.byteLength
  }),
});
class VkDisplayPlaneCapabilities2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._capabilities = null;
    this.memoryBuffer = new ArrayBuffer(VkDisplayPlaneCapabilities2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDisplayPlaneCapabilities2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get capabilities() {
    return this._capabilities;
  }
  
};

VkDisplayPlaneCapabilities2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.capabilities !== null) { }
  
};

const $VkDisplayPlaneCapabilities2KHR = memoryLayouts.VkDisplayPlaneCapabilities2KHR;
VkDisplayPlaneCapabilities2KHR.byteLength = $VkDisplayPlaneCapabilities2KHR.byteLength;

VkDisplayPlaneCapabilities2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDisplayPlaneCapabilities2KHR.sType.byteOffset,
    byteLength: $VkDisplayPlaneCapabilities2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDisplayPlaneCapabilities2KHR.pNext.byteOffset,
    byteLength: $VkDisplayPlaneCapabilities2KHR.pNext.byteLength
  }),
  capabilities: Object.freeze({
    byteOffset: $VkDisplayPlaneCapabilities2KHR.capabilities.byteOffset,
    byteLength: $VkDisplayPlaneCapabilities2KHR.capabilities.byteLength
  }),
});
class VkSharedPresentSurfaceCapabilitiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._sharedPresentSupportedUsageFlags = 0;
    this.memoryBuffer = new ArrayBuffer(VkSharedPresentSurfaceCapabilitiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSharedPresentSurfaceCapabilitiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get sharedPresentSupportedUsageFlags() {
    return this._sharedPresentSupportedUsageFlags;
  }
  
};

VkSharedPresentSurfaceCapabilitiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSharedPresentSurfaceCapabilitiesKHR = memoryLayouts.VkSharedPresentSurfaceCapabilitiesKHR;
VkSharedPresentSurfaceCapabilitiesKHR.byteLength = $VkSharedPresentSurfaceCapabilitiesKHR.byteLength;

VkSharedPresentSurfaceCapabilitiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSharedPresentSurfaceCapabilitiesKHR.sType.byteOffset,
    byteLength: $VkSharedPresentSurfaceCapabilitiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSharedPresentSurfaceCapabilitiesKHR.pNext.byteOffset,
    byteLength: $VkSharedPresentSurfaceCapabilitiesKHR.pNext.byteLength
  }),
  sharedPresentSupportedUsageFlags: Object.freeze({
    byteOffset: $VkSharedPresentSurfaceCapabilitiesKHR.sharedPresentSupportedUsageFlags.byteOffset,
    byteLength: $VkSharedPresentSurfaceCapabilitiesKHR.sharedPresentSupportedUsageFlags.byteLength
  }),
});
class VkPhysicalDevice16BitStorageFeatures {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._storageBuffer16BitAccess = 0;
    this._uniformAndStorageBuffer16BitAccess = 0;
    this._storagePushConstant16 = 0;
    this._storageInputOutput16 = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevice16BitStorageFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.storageBuffer16BitAccess !== void 0) this.storageBuffer16BitAccess = opts.storageBuffer16BitAccess;
      if (opts.uniformAndStorageBuffer16BitAccess !== void 0) this.uniformAndStorageBuffer16BitAccess = opts.uniformAndStorageBuffer16BitAccess;
      if (opts.storagePushConstant16 !== void 0) this.storagePushConstant16 = opts.storagePushConstant16;
      if (opts.storageInputOutput16 !== void 0) this.storageInputOutput16 = opts.storageInputOutput16;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDevice16BitStorageFeatures.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get storageBuffer16BitAccess() {
    return this._storageBuffer16BitAccess;
  }
  set storageBuffer16BitAccess(value) {
    
this.memoryView.setUint32($VkPhysicalDevice16BitStorageFeatures.storageBuffer16BitAccess.byteOffset, value);
this._storageBuffer16BitAccess = value;
  }
  get uniformAndStorageBuffer16BitAccess() {
    return this._uniformAndStorageBuffer16BitAccess;
  }
  set uniformAndStorageBuffer16BitAccess(value) {
    
this.memoryView.setUint32($VkPhysicalDevice16BitStorageFeatures.uniformAndStorageBuffer16BitAccess.byteOffset, value);
this._uniformAndStorageBuffer16BitAccess = value;
  }
  get storagePushConstant16() {
    return this._storagePushConstant16;
  }
  set storagePushConstant16(value) {
    
this.memoryView.setUint32($VkPhysicalDevice16BitStorageFeatures.storagePushConstant16.byteOffset, value);
this._storagePushConstant16 = value;
  }
  get storageInputOutput16() {
    return this._storageInputOutput16;
  }
  set storageInputOutput16(value) {
    
this.memoryView.setUint32($VkPhysicalDevice16BitStorageFeatures.storageInputOutput16.byteOffset, value);
this._storageInputOutput16 = value;
  }
  
};

VkPhysicalDevice16BitStorageFeatures.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDevice16BitStorageFeatures = memoryLayouts.VkPhysicalDevice16BitStorageFeatures;
VkPhysicalDevice16BitStorageFeatures.byteLength = $VkPhysicalDevice16BitStorageFeatures.byteLength;

VkPhysicalDevice16BitStorageFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDevice16BitStorageFeatures.sType.byteOffset,
    byteLength: $VkPhysicalDevice16BitStorageFeatures.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDevice16BitStorageFeatures.pNext.byteOffset,
    byteLength: $VkPhysicalDevice16BitStorageFeatures.pNext.byteLength
  }),
  storageBuffer16BitAccess: Object.freeze({
    byteOffset: $VkPhysicalDevice16BitStorageFeatures.storageBuffer16BitAccess.byteOffset,
    byteLength: $VkPhysicalDevice16BitStorageFeatures.storageBuffer16BitAccess.byteLength
  }),
  uniformAndStorageBuffer16BitAccess: Object.freeze({
    byteOffset: $VkPhysicalDevice16BitStorageFeatures.uniformAndStorageBuffer16BitAccess.byteOffset,
    byteLength: $VkPhysicalDevice16BitStorageFeatures.uniformAndStorageBuffer16BitAccess.byteLength
  }),
  storagePushConstant16: Object.freeze({
    byteOffset: $VkPhysicalDevice16BitStorageFeatures.storagePushConstant16.byteOffset,
    byteLength: $VkPhysicalDevice16BitStorageFeatures.storagePushConstant16.byteLength
  }),
  storageInputOutput16: Object.freeze({
    byteOffset: $VkPhysicalDevice16BitStorageFeatures.storageInputOutput16.byteOffset,
    byteLength: $VkPhysicalDevice16BitStorageFeatures.storageInputOutput16.byteLength
  }),
});
class VkPhysicalDevice16BitStorageFeaturesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._storageBuffer16BitAccess = 0;
    this._uniformAndStorageBuffer16BitAccess = 0;
    this._storagePushConstant16 = 0;
    this._storageInputOutput16 = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevice16BitStorageFeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.storageBuffer16BitAccess !== void 0) this.storageBuffer16BitAccess = opts.storageBuffer16BitAccess;
      if (opts.uniformAndStorageBuffer16BitAccess !== void 0) this.uniformAndStorageBuffer16BitAccess = opts.uniformAndStorageBuffer16BitAccess;
      if (opts.storagePushConstant16 !== void 0) this.storagePushConstant16 = opts.storagePushConstant16;
      if (opts.storageInputOutput16 !== void 0) this.storageInputOutput16 = opts.storageInputOutput16;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDevice16BitStorageFeaturesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get storageBuffer16BitAccess() {
    return this._storageBuffer16BitAccess;
  }
  set storageBuffer16BitAccess(value) {
    
this.memoryView.setUint32($VkPhysicalDevice16BitStorageFeaturesKHR.storageBuffer16BitAccess.byteOffset, value);
this._storageBuffer16BitAccess = value;
  }
  get uniformAndStorageBuffer16BitAccess() {
    return this._uniformAndStorageBuffer16BitAccess;
  }
  set uniformAndStorageBuffer16BitAccess(value) {
    
this.memoryView.setUint32($VkPhysicalDevice16BitStorageFeaturesKHR.uniformAndStorageBuffer16BitAccess.byteOffset, value);
this._uniformAndStorageBuffer16BitAccess = value;
  }
  get storagePushConstant16() {
    return this._storagePushConstant16;
  }
  set storagePushConstant16(value) {
    
this.memoryView.setUint32($VkPhysicalDevice16BitStorageFeaturesKHR.storagePushConstant16.byteOffset, value);
this._storagePushConstant16 = value;
  }
  get storageInputOutput16() {
    return this._storageInputOutput16;
  }
  set storageInputOutput16(value) {
    
this.memoryView.setUint32($VkPhysicalDevice16BitStorageFeaturesKHR.storageInputOutput16.byteOffset, value);
this._storageInputOutput16 = value;
  }
  
};

VkPhysicalDevice16BitStorageFeaturesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDevice16BitStorageFeaturesKHR = memoryLayouts.VkPhysicalDevice16BitStorageFeaturesKHR;
VkPhysicalDevice16BitStorageFeaturesKHR.byteLength = $VkPhysicalDevice16BitStorageFeaturesKHR.byteLength;

VkPhysicalDevice16BitStorageFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDevice16BitStorageFeaturesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDevice16BitStorageFeaturesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDevice16BitStorageFeaturesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDevice16BitStorageFeaturesKHR.pNext.byteLength
  }),
  storageBuffer16BitAccess: Object.freeze({
    byteOffset: $VkPhysicalDevice16BitStorageFeaturesKHR.storageBuffer16BitAccess.byteOffset,
    byteLength: $VkPhysicalDevice16BitStorageFeaturesKHR.storageBuffer16BitAccess.byteLength
  }),
  uniformAndStorageBuffer16BitAccess: Object.freeze({
    byteOffset: $VkPhysicalDevice16BitStorageFeaturesKHR.uniformAndStorageBuffer16BitAccess.byteOffset,
    byteLength: $VkPhysicalDevice16BitStorageFeaturesKHR.uniformAndStorageBuffer16BitAccess.byteLength
  }),
  storagePushConstant16: Object.freeze({
    byteOffset: $VkPhysicalDevice16BitStorageFeaturesKHR.storagePushConstant16.byteOffset,
    byteLength: $VkPhysicalDevice16BitStorageFeaturesKHR.storagePushConstant16.byteLength
  }),
  storageInputOutput16: Object.freeze({
    byteOffset: $VkPhysicalDevice16BitStorageFeaturesKHR.storageInputOutput16.byteOffset,
    byteLength: $VkPhysicalDevice16BitStorageFeaturesKHR.storageInputOutput16.byteLength
  }),
});
class VkPhysicalDeviceSubgroupProperties {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._subgroupSize = 0;
    this._supportedStages = 0;
    this._supportedOperations = 0;
    this._quadOperationsInAllStages = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSubgroupProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSubgroupProperties.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get subgroupSize() {
    return this._subgroupSize;
  }
  get supportedStages() {
    return this._supportedStages;
  }
  get supportedOperations() {
    return this._supportedOperations;
  }
  get quadOperationsInAllStages() {
    return this._quadOperationsInAllStages;
  }
  
};

VkPhysicalDeviceSubgroupProperties.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceSubgroupProperties = memoryLayouts.VkPhysicalDeviceSubgroupProperties;
VkPhysicalDeviceSubgroupProperties.byteLength = $VkPhysicalDeviceSubgroupProperties.byteLength;

VkPhysicalDeviceSubgroupProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceSubgroupProperties.sType.byteOffset,
    byteLength: $VkPhysicalDeviceSubgroupProperties.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceSubgroupProperties.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceSubgroupProperties.pNext.byteLength
  }),
  subgroupSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceSubgroupProperties.subgroupSize.byteOffset,
    byteLength: $VkPhysicalDeviceSubgroupProperties.subgroupSize.byteLength
  }),
  supportedStages: Object.freeze({
    byteOffset: $VkPhysicalDeviceSubgroupProperties.supportedStages.byteOffset,
    byteLength: $VkPhysicalDeviceSubgroupProperties.supportedStages.byteLength
  }),
  supportedOperations: Object.freeze({
    byteOffset: $VkPhysicalDeviceSubgroupProperties.supportedOperations.byteOffset,
    byteLength: $VkPhysicalDeviceSubgroupProperties.supportedOperations.byteLength
  }),
  quadOperationsInAllStages: Object.freeze({
    byteOffset: $VkPhysicalDeviceSubgroupProperties.quadOperationsInAllStages.byteOffset,
    byteLength: $VkPhysicalDeviceSubgroupProperties.quadOperationsInAllStages.byteLength
  }),
});
class VkBufferMemoryRequirementsInfo2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkBufferMemoryRequirementsInfo2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBufferMemoryRequirementsInfo2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  
};

VkBufferMemoryRequirementsInfo2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBufferMemoryRequirementsInfo2 = memoryLayouts.VkBufferMemoryRequirementsInfo2;
VkBufferMemoryRequirementsInfo2.byteLength = $VkBufferMemoryRequirementsInfo2.byteLength;

VkBufferMemoryRequirementsInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBufferMemoryRequirementsInfo2.sType.byteOffset,
    byteLength: $VkBufferMemoryRequirementsInfo2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBufferMemoryRequirementsInfo2.pNext.byteOffset,
    byteLength: $VkBufferMemoryRequirementsInfo2.pNext.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkBufferMemoryRequirementsInfo2.buffer.byteOffset,
    byteLength: $VkBufferMemoryRequirementsInfo2.buffer.byteLength
  }),
});
class VkBufferMemoryRequirementsInfo2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkBufferMemoryRequirementsInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBufferMemoryRequirementsInfo2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  
};

VkBufferMemoryRequirementsInfo2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBufferMemoryRequirementsInfo2KHR = memoryLayouts.VkBufferMemoryRequirementsInfo2KHR;
VkBufferMemoryRequirementsInfo2KHR.byteLength = $VkBufferMemoryRequirementsInfo2KHR.byteLength;

VkBufferMemoryRequirementsInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBufferMemoryRequirementsInfo2KHR.sType.byteOffset,
    byteLength: $VkBufferMemoryRequirementsInfo2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBufferMemoryRequirementsInfo2KHR.pNext.byteOffset,
    byteLength: $VkBufferMemoryRequirementsInfo2KHR.pNext.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkBufferMemoryRequirementsInfo2KHR.buffer.byteOffset,
    byteLength: $VkBufferMemoryRequirementsInfo2KHR.buffer.byteLength
  }),
});
class VkImageMemoryRequirementsInfo2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._image = null;
    this.memoryBuffer = new ArrayBuffer(VkImageMemoryRequirementsInfo2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageMemoryRequirementsInfo2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get image() {
    return this._image;
  }
  set image(value) {
    String
  }
  
};

VkImageMemoryRequirementsInfo2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImageMemoryRequirementsInfo2 = memoryLayouts.VkImageMemoryRequirementsInfo2;
VkImageMemoryRequirementsInfo2.byteLength = $VkImageMemoryRequirementsInfo2.byteLength;

VkImageMemoryRequirementsInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageMemoryRequirementsInfo2.sType.byteOffset,
    byteLength: $VkImageMemoryRequirementsInfo2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageMemoryRequirementsInfo2.pNext.byteOffset,
    byteLength: $VkImageMemoryRequirementsInfo2.pNext.byteLength
  }),
  image: Object.freeze({
    byteOffset: $VkImageMemoryRequirementsInfo2.image.byteOffset,
    byteLength: $VkImageMemoryRequirementsInfo2.image.byteLength
  }),
});
class VkImageMemoryRequirementsInfo2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._image = null;
    this.memoryBuffer = new ArrayBuffer(VkImageMemoryRequirementsInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageMemoryRequirementsInfo2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get image() {
    return this._image;
  }
  set image(value) {
    String
  }
  
};

VkImageMemoryRequirementsInfo2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImageMemoryRequirementsInfo2KHR = memoryLayouts.VkImageMemoryRequirementsInfo2KHR;
VkImageMemoryRequirementsInfo2KHR.byteLength = $VkImageMemoryRequirementsInfo2KHR.byteLength;

VkImageMemoryRequirementsInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageMemoryRequirementsInfo2KHR.sType.byteOffset,
    byteLength: $VkImageMemoryRequirementsInfo2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageMemoryRequirementsInfo2KHR.pNext.byteOffset,
    byteLength: $VkImageMemoryRequirementsInfo2KHR.pNext.byteLength
  }),
  image: Object.freeze({
    byteOffset: $VkImageMemoryRequirementsInfo2KHR.image.byteOffset,
    byteLength: $VkImageMemoryRequirementsInfo2KHR.image.byteLength
  }),
});
class VkImageSparseMemoryRequirementsInfo2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._image = null;
    this.memoryBuffer = new ArrayBuffer(VkImageSparseMemoryRequirementsInfo2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageSparseMemoryRequirementsInfo2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get image() {
    return this._image;
  }
  set image(value) {
    String
  }
  
};

VkImageSparseMemoryRequirementsInfo2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImageSparseMemoryRequirementsInfo2 = memoryLayouts.VkImageSparseMemoryRequirementsInfo2;
VkImageSparseMemoryRequirementsInfo2.byteLength = $VkImageSparseMemoryRequirementsInfo2.byteLength;

VkImageSparseMemoryRequirementsInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageSparseMemoryRequirementsInfo2.sType.byteOffset,
    byteLength: $VkImageSparseMemoryRequirementsInfo2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageSparseMemoryRequirementsInfo2.pNext.byteOffset,
    byteLength: $VkImageSparseMemoryRequirementsInfo2.pNext.byteLength
  }),
  image: Object.freeze({
    byteOffset: $VkImageSparseMemoryRequirementsInfo2.image.byteOffset,
    byteLength: $VkImageSparseMemoryRequirementsInfo2.image.byteLength
  }),
});
class VkImageSparseMemoryRequirementsInfo2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._image = null;
    this.memoryBuffer = new ArrayBuffer(VkImageSparseMemoryRequirementsInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageSparseMemoryRequirementsInfo2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get image() {
    return this._image;
  }
  set image(value) {
    String
  }
  
};

VkImageSparseMemoryRequirementsInfo2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImageSparseMemoryRequirementsInfo2KHR = memoryLayouts.VkImageSparseMemoryRequirementsInfo2KHR;
VkImageSparseMemoryRequirementsInfo2KHR.byteLength = $VkImageSparseMemoryRequirementsInfo2KHR.byteLength;

VkImageSparseMemoryRequirementsInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageSparseMemoryRequirementsInfo2KHR.sType.byteOffset,
    byteLength: $VkImageSparseMemoryRequirementsInfo2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageSparseMemoryRequirementsInfo2KHR.pNext.byteOffset,
    byteLength: $VkImageSparseMemoryRequirementsInfo2KHR.pNext.byteLength
  }),
  image: Object.freeze({
    byteOffset: $VkImageSparseMemoryRequirementsInfo2KHR.image.byteOffset,
    byteLength: $VkImageSparseMemoryRequirementsInfo2KHR.image.byteLength
  }),
});
class VkMemoryRequirements2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._memoryRequirements = null;
    this.memoryBuffer = new ArrayBuffer(VkMemoryRequirements2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryRequirements2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkMemoryRequirements2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.memoryRequirements !== null) { }
  
};

const $VkMemoryRequirements2 = memoryLayouts.VkMemoryRequirements2;
VkMemoryRequirements2.byteLength = $VkMemoryRequirements2.byteLength;

VkMemoryRequirements2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryRequirements2.sType.byteOffset,
    byteLength: $VkMemoryRequirements2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryRequirements2.pNext.byteOffset,
    byteLength: $VkMemoryRequirements2.pNext.byteLength
  }),
  memoryRequirements: Object.freeze({
    byteOffset: $VkMemoryRequirements2.memoryRequirements.byteOffset,
    byteLength: $VkMemoryRequirements2.memoryRequirements.byteLength
  }),
});
class VkMemoryRequirements2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._memoryRequirements = null;
    this.memoryBuffer = new ArrayBuffer(VkMemoryRequirements2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryRequirements2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkMemoryRequirements2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.memoryRequirements !== null) { }
  
};

const $VkMemoryRequirements2KHR = memoryLayouts.VkMemoryRequirements2KHR;
VkMemoryRequirements2KHR.byteLength = $VkMemoryRequirements2KHR.byteLength;

VkMemoryRequirements2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryRequirements2KHR.sType.byteOffset,
    byteLength: $VkMemoryRequirements2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryRequirements2KHR.pNext.byteOffset,
    byteLength: $VkMemoryRequirements2KHR.pNext.byteLength
  }),
  memoryRequirements: Object.freeze({
    byteOffset: $VkMemoryRequirements2KHR.memoryRequirements.byteOffset,
    byteLength: $VkMemoryRequirements2KHR.memoryRequirements.byteLength
  }),
});
class VkSparseImageMemoryRequirements2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._memoryRequirements = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageMemoryRequirements2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSparseImageMemoryRequirements2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkSparseImageMemoryRequirements2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.memoryRequirements !== null) { }
  
};

const $VkSparseImageMemoryRequirements2 = memoryLayouts.VkSparseImageMemoryRequirements2;
VkSparseImageMemoryRequirements2.byteLength = $VkSparseImageMemoryRequirements2.byteLength;

VkSparseImageMemoryRequirements2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSparseImageMemoryRequirements2.sType.byteOffset,
    byteLength: $VkSparseImageMemoryRequirements2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSparseImageMemoryRequirements2.pNext.byteOffset,
    byteLength: $VkSparseImageMemoryRequirements2.pNext.byteLength
  }),
  memoryRequirements: Object.freeze({
    byteOffset: $VkSparseImageMemoryRequirements2.memoryRequirements.byteOffset,
    byteLength: $VkSparseImageMemoryRequirements2.memoryRequirements.byteLength
  }),
});
class VkSparseImageMemoryRequirements2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._memoryRequirements = null;
    this.memoryBuffer = new ArrayBuffer(VkSparseImageMemoryRequirements2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSparseImageMemoryRequirements2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get memoryRequirements() {
    return this._memoryRequirements;
  }
  
};

VkSparseImageMemoryRequirements2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.memoryRequirements !== null) { }
  
};

const $VkSparseImageMemoryRequirements2KHR = memoryLayouts.VkSparseImageMemoryRequirements2KHR;
VkSparseImageMemoryRequirements2KHR.byteLength = $VkSparseImageMemoryRequirements2KHR.byteLength;

VkSparseImageMemoryRequirements2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSparseImageMemoryRequirements2KHR.sType.byteOffset,
    byteLength: $VkSparseImageMemoryRequirements2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSparseImageMemoryRequirements2KHR.pNext.byteOffset,
    byteLength: $VkSparseImageMemoryRequirements2KHR.pNext.byteLength
  }),
  memoryRequirements: Object.freeze({
    byteOffset: $VkSparseImageMemoryRequirements2KHR.memoryRequirements.byteOffset,
    byteLength: $VkSparseImageMemoryRequirements2KHR.memoryRequirements.byteLength
  }),
});
class VkPhysicalDevicePointClippingProperties {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._pointClippingBehavior = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevicePointClippingProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDevicePointClippingProperties.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get pointClippingBehavior() {
    return this._pointClippingBehavior;
  }
  
};

VkPhysicalDevicePointClippingProperties.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDevicePointClippingProperties = memoryLayouts.VkPhysicalDevicePointClippingProperties;
VkPhysicalDevicePointClippingProperties.byteLength = $VkPhysicalDevicePointClippingProperties.byteLength;

VkPhysicalDevicePointClippingProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDevicePointClippingProperties.sType.byteOffset,
    byteLength: $VkPhysicalDevicePointClippingProperties.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDevicePointClippingProperties.pNext.byteOffset,
    byteLength: $VkPhysicalDevicePointClippingProperties.pNext.byteLength
  }),
  pointClippingBehavior: Object.freeze({
    byteOffset: $VkPhysicalDevicePointClippingProperties.pointClippingBehavior.byteOffset,
    byteLength: $VkPhysicalDevicePointClippingProperties.pointClippingBehavior.byteLength
  }),
});
class VkPhysicalDevicePointClippingPropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._pointClippingBehavior = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevicePointClippingPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDevicePointClippingPropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get pointClippingBehavior() {
    return this._pointClippingBehavior;
  }
  
};

VkPhysicalDevicePointClippingPropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDevicePointClippingPropertiesKHR = memoryLayouts.VkPhysicalDevicePointClippingPropertiesKHR;
VkPhysicalDevicePointClippingPropertiesKHR.byteLength = $VkPhysicalDevicePointClippingPropertiesKHR.byteLength;

VkPhysicalDevicePointClippingPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDevicePointClippingPropertiesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDevicePointClippingPropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDevicePointClippingPropertiesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDevicePointClippingPropertiesKHR.pNext.byteLength
  }),
  pointClippingBehavior: Object.freeze({
    byteOffset: $VkPhysicalDevicePointClippingPropertiesKHR.pointClippingBehavior.byteOffset,
    byteLength: $VkPhysicalDevicePointClippingPropertiesKHR.pointClippingBehavior.byteLength
  }),
});
class VkMemoryDedicatedRequirements {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._prefersDedicatedAllocation = 0;
    this._requiresDedicatedAllocation = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryDedicatedRequirements.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryDedicatedRequirements.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get prefersDedicatedAllocation() {
    return this._prefersDedicatedAllocation;
  }
  get requiresDedicatedAllocation() {
    return this._requiresDedicatedAllocation;
  }
  
};

VkMemoryDedicatedRequirements.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryDedicatedRequirements = memoryLayouts.VkMemoryDedicatedRequirements;
VkMemoryDedicatedRequirements.byteLength = $VkMemoryDedicatedRequirements.byteLength;

VkMemoryDedicatedRequirements.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryDedicatedRequirements.sType.byteOffset,
    byteLength: $VkMemoryDedicatedRequirements.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryDedicatedRequirements.pNext.byteOffset,
    byteLength: $VkMemoryDedicatedRequirements.pNext.byteLength
  }),
  prefersDedicatedAllocation: Object.freeze({
    byteOffset: $VkMemoryDedicatedRequirements.prefersDedicatedAllocation.byteOffset,
    byteLength: $VkMemoryDedicatedRequirements.prefersDedicatedAllocation.byteLength
  }),
  requiresDedicatedAllocation: Object.freeze({
    byteOffset: $VkMemoryDedicatedRequirements.requiresDedicatedAllocation.byteOffset,
    byteLength: $VkMemoryDedicatedRequirements.requiresDedicatedAllocation.byteLength
  }),
});
class VkMemoryDedicatedRequirementsKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._prefersDedicatedAllocation = 0;
    this._requiresDedicatedAllocation = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryDedicatedRequirementsKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryDedicatedRequirementsKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get prefersDedicatedAllocation() {
    return this._prefersDedicatedAllocation;
  }
  get requiresDedicatedAllocation() {
    return this._requiresDedicatedAllocation;
  }
  
};

VkMemoryDedicatedRequirementsKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryDedicatedRequirementsKHR = memoryLayouts.VkMemoryDedicatedRequirementsKHR;
VkMemoryDedicatedRequirementsKHR.byteLength = $VkMemoryDedicatedRequirementsKHR.byteLength;

VkMemoryDedicatedRequirementsKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryDedicatedRequirementsKHR.sType.byteOffset,
    byteLength: $VkMemoryDedicatedRequirementsKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryDedicatedRequirementsKHR.pNext.byteOffset,
    byteLength: $VkMemoryDedicatedRequirementsKHR.pNext.byteLength
  }),
  prefersDedicatedAllocation: Object.freeze({
    byteOffset: $VkMemoryDedicatedRequirementsKHR.prefersDedicatedAllocation.byteOffset,
    byteLength: $VkMemoryDedicatedRequirementsKHR.prefersDedicatedAllocation.byteLength
  }),
  requiresDedicatedAllocation: Object.freeze({
    byteOffset: $VkMemoryDedicatedRequirementsKHR.requiresDedicatedAllocation.byteOffset,
    byteLength: $VkMemoryDedicatedRequirementsKHR.requiresDedicatedAllocation.byteLength
  }),
});
class VkMemoryDedicatedAllocateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._image = null;
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkMemoryDedicatedAllocateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryDedicatedAllocateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get image() {
    return this._image;
  }
  set image(value) {
    String
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  
};

VkMemoryDedicatedAllocateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryDedicatedAllocateInfo = memoryLayouts.VkMemoryDedicatedAllocateInfo;
VkMemoryDedicatedAllocateInfo.byteLength = $VkMemoryDedicatedAllocateInfo.byteLength;

VkMemoryDedicatedAllocateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryDedicatedAllocateInfo.sType.byteOffset,
    byteLength: $VkMemoryDedicatedAllocateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryDedicatedAllocateInfo.pNext.byteOffset,
    byteLength: $VkMemoryDedicatedAllocateInfo.pNext.byteLength
  }),
  image: Object.freeze({
    byteOffset: $VkMemoryDedicatedAllocateInfo.image.byteOffset,
    byteLength: $VkMemoryDedicatedAllocateInfo.image.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkMemoryDedicatedAllocateInfo.buffer.byteOffset,
    byteLength: $VkMemoryDedicatedAllocateInfo.buffer.byteLength
  }),
});
class VkMemoryDedicatedAllocateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._image = null;
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkMemoryDedicatedAllocateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.image !== void 0) this.image = opts.image;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryDedicatedAllocateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get image() {
    return this._image;
  }
  set image(value) {
    String
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  
};

VkMemoryDedicatedAllocateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryDedicatedAllocateInfoKHR = memoryLayouts.VkMemoryDedicatedAllocateInfoKHR;
VkMemoryDedicatedAllocateInfoKHR.byteLength = $VkMemoryDedicatedAllocateInfoKHR.byteLength;

VkMemoryDedicatedAllocateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryDedicatedAllocateInfoKHR.sType.byteOffset,
    byteLength: $VkMemoryDedicatedAllocateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryDedicatedAllocateInfoKHR.pNext.byteOffset,
    byteLength: $VkMemoryDedicatedAllocateInfoKHR.pNext.byteLength
  }),
  image: Object.freeze({
    byteOffset: $VkMemoryDedicatedAllocateInfoKHR.image.byteOffset,
    byteLength: $VkMemoryDedicatedAllocateInfoKHR.image.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkMemoryDedicatedAllocateInfoKHR.buffer.byteOffset,
    byteLength: $VkMemoryDedicatedAllocateInfoKHR.buffer.byteLength
  }),
});
class VkImageViewUsageCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._usage = 0;
    this.memoryBuffer = new ArrayBuffer(VkImageViewUsageCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.usage !== void 0) this.usage = opts.usage;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageViewUsageCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get usage() {
    return this._usage;
  }
  set usage(value) {
    
this.memoryView.setInt32($VkImageViewUsageCreateInfo.usage.byteOffset, value);
this._usage = value;
  }
  
};

VkImageViewUsageCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImageViewUsageCreateInfo = memoryLayouts.VkImageViewUsageCreateInfo;
VkImageViewUsageCreateInfo.byteLength = $VkImageViewUsageCreateInfo.byteLength;

VkImageViewUsageCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageViewUsageCreateInfo.sType.byteOffset,
    byteLength: $VkImageViewUsageCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageViewUsageCreateInfo.pNext.byteOffset,
    byteLength: $VkImageViewUsageCreateInfo.pNext.byteLength
  }),
  usage: Object.freeze({
    byteOffset: $VkImageViewUsageCreateInfo.usage.byteOffset,
    byteLength: $VkImageViewUsageCreateInfo.usage.byteLength
  }),
});
class VkImageViewUsageCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._usage = 0;
    this.memoryBuffer = new ArrayBuffer(VkImageViewUsageCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.usage !== void 0) this.usage = opts.usage;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageViewUsageCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get usage() {
    return this._usage;
  }
  set usage(value) {
    
this.memoryView.setInt32($VkImageViewUsageCreateInfoKHR.usage.byteOffset, value);
this._usage = value;
  }
  
};

VkImageViewUsageCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImageViewUsageCreateInfoKHR = memoryLayouts.VkImageViewUsageCreateInfoKHR;
VkImageViewUsageCreateInfoKHR.byteLength = $VkImageViewUsageCreateInfoKHR.byteLength;

VkImageViewUsageCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageViewUsageCreateInfoKHR.sType.byteOffset,
    byteLength: $VkImageViewUsageCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageViewUsageCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkImageViewUsageCreateInfoKHR.pNext.byteLength
  }),
  usage: Object.freeze({
    byteOffset: $VkImageViewUsageCreateInfoKHR.usage.byteOffset,
    byteLength: $VkImageViewUsageCreateInfoKHR.usage.byteLength
  }),
});
class VkPipelineTessellationDomainOriginStateCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._domainOrigin = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineTessellationDomainOriginStateCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.domainOrigin !== void 0) this.domainOrigin = opts.domainOrigin;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineTessellationDomainOriginStateCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get domainOrigin() {
    return this._domainOrigin;
  }
  set domainOrigin(value) {
    
this.memoryView.setInt32($VkPipelineTessellationDomainOriginStateCreateInfo.domainOrigin.byteOffset, value);
this._domainOrigin = value;
  }
  
};

VkPipelineTessellationDomainOriginStateCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineTessellationDomainOriginStateCreateInfo = memoryLayouts.VkPipelineTessellationDomainOriginStateCreateInfo;
VkPipelineTessellationDomainOriginStateCreateInfo.byteLength = $VkPipelineTessellationDomainOriginStateCreateInfo.byteLength;

VkPipelineTessellationDomainOriginStateCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineTessellationDomainOriginStateCreateInfo.sType.byteOffset,
    byteLength: $VkPipelineTessellationDomainOriginStateCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineTessellationDomainOriginStateCreateInfo.pNext.byteOffset,
    byteLength: $VkPipelineTessellationDomainOriginStateCreateInfo.pNext.byteLength
  }),
  domainOrigin: Object.freeze({
    byteOffset: $VkPipelineTessellationDomainOriginStateCreateInfo.domainOrigin.byteOffset,
    byteLength: $VkPipelineTessellationDomainOriginStateCreateInfo.domainOrigin.byteLength
  }),
});
class VkPipelineTessellationDomainOriginStateCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._domainOrigin = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineTessellationDomainOriginStateCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.domainOrigin !== void 0) this.domainOrigin = opts.domainOrigin;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineTessellationDomainOriginStateCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get domainOrigin() {
    return this._domainOrigin;
  }
  set domainOrigin(value) {
    
this.memoryView.setInt32($VkPipelineTessellationDomainOriginStateCreateInfoKHR.domainOrigin.byteOffset, value);
this._domainOrigin = value;
  }
  
};

VkPipelineTessellationDomainOriginStateCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineTessellationDomainOriginStateCreateInfoKHR = memoryLayouts.VkPipelineTessellationDomainOriginStateCreateInfoKHR;
VkPipelineTessellationDomainOriginStateCreateInfoKHR.byteLength = $VkPipelineTessellationDomainOriginStateCreateInfoKHR.byteLength;

VkPipelineTessellationDomainOriginStateCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineTessellationDomainOriginStateCreateInfoKHR.sType.byteOffset,
    byteLength: $VkPipelineTessellationDomainOriginStateCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineTessellationDomainOriginStateCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkPipelineTessellationDomainOriginStateCreateInfoKHR.pNext.byteLength
  }),
  domainOrigin: Object.freeze({
    byteOffset: $VkPipelineTessellationDomainOriginStateCreateInfoKHR.domainOrigin.byteOffset,
    byteLength: $VkPipelineTessellationDomainOriginStateCreateInfoKHR.domainOrigin.byteLength
  }),
});
class VkSamplerYcbcrConversionInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._conversion = null;
    this.memoryBuffer = new ArrayBuffer(VkSamplerYcbcrConversionInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conversion !== void 0) this.conversion = opts.conversion;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get conversion() {
    return this._conversion;
  }
  set conversion(value) {
    String
  }
  
};

VkSamplerYcbcrConversionInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSamplerYcbcrConversionInfo = memoryLayouts.VkSamplerYcbcrConversionInfo;
VkSamplerYcbcrConversionInfo.byteLength = $VkSamplerYcbcrConversionInfo.byteLength;

VkSamplerYcbcrConversionInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionInfo.sType.byteOffset,
    byteLength: $VkSamplerYcbcrConversionInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionInfo.pNext.byteOffset,
    byteLength: $VkSamplerYcbcrConversionInfo.pNext.byteLength
  }),
  conversion: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionInfo.conversion.byteOffset,
    byteLength: $VkSamplerYcbcrConversionInfo.conversion.byteLength
  }),
});
class VkSamplerYcbcrConversionInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._conversion = null;
    this.memoryBuffer = new ArrayBuffer(VkSamplerYcbcrConversionInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conversion !== void 0) this.conversion = opts.conversion;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get conversion() {
    return this._conversion;
  }
  set conversion(value) {
    String
  }
  
};

VkSamplerYcbcrConversionInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSamplerYcbcrConversionInfoKHR = memoryLayouts.VkSamplerYcbcrConversionInfoKHR;
VkSamplerYcbcrConversionInfoKHR.byteLength = $VkSamplerYcbcrConversionInfoKHR.byteLength;

VkSamplerYcbcrConversionInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionInfoKHR.sType.byteOffset,
    byteLength: $VkSamplerYcbcrConversionInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionInfoKHR.pNext.byteOffset,
    byteLength: $VkSamplerYcbcrConversionInfoKHR.pNext.byteLength
  }),
  conversion: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionInfoKHR.conversion.byteOffset,
    byteLength: $VkSamplerYcbcrConversionInfoKHR.conversion.byteLength
  }),
});
class VkSamplerYcbcrConversionCreateInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._format = 0;
    this._ycbcrModel = 0;
    this._ycbcrRange = 0;
    this._components = null;
    this._xChromaOffset = 0;
    this._yChromaOffset = 0;
    this._chromaFilter = 0;
    this._forceExplicitReconstruction = 0;
    this.memoryBuffer = new ArrayBuffer(VkSamplerYcbcrConversionCreateInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.ycbcrModel !== void 0) this.ycbcrModel = opts.ycbcrModel;
      if (opts.ycbcrRange !== void 0) this.ycbcrRange = opts.ycbcrRange;
      if (opts.components !== void 0) this.components = opts.components;
      if (opts.xChromaOffset !== void 0) this.xChromaOffset = opts.xChromaOffset;
      if (opts.yChromaOffset !== void 0) this.yChromaOffset = opts.yChromaOffset;
      if (opts.chromaFilter !== void 0) this.chromaFilter = opts.chromaFilter;
      if (opts.forceExplicitReconstruction !== void 0) this.forceExplicitReconstruction = opts.forceExplicitReconstruction;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get format() {
    return this._format;
  }
  set format(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfo.format.byteOffset, value);
this._format = value;
  }
  get ycbcrModel() {
    return this._ycbcrModel;
  }
  set ycbcrModel(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfo.ycbcrModel.byteOffset, value);
this._ycbcrModel = value;
  }
  get ycbcrRange() {
    return this._ycbcrRange;
  }
  set ycbcrRange(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfo.ycbcrRange.byteOffset, value);
this._ycbcrRange = value;
  }
  get components() {
    return this._components;
  }
  set components(value) {
    String
  }
  get xChromaOffset() {
    return this._xChromaOffset;
  }
  set xChromaOffset(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfo.xChromaOffset.byteOffset, value);
this._xChromaOffset = value;
  }
  get yChromaOffset() {
    return this._yChromaOffset;
  }
  set yChromaOffset(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfo.yChromaOffset.byteOffset, value);
this._yChromaOffset = value;
  }
  get chromaFilter() {
    return this._chromaFilter;
  }
  set chromaFilter(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfo.chromaFilter.byteOffset, value);
this._chromaFilter = value;
  }
  get forceExplicitReconstruction() {
    return this._forceExplicitReconstruction;
  }
  set forceExplicitReconstruction(value) {
    
this.memoryView.setUint32($VkSamplerYcbcrConversionCreateInfo.forceExplicitReconstruction.byteOffset, value);
this._forceExplicitReconstruction = value;
  }
  
};

VkSamplerYcbcrConversionCreateInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.components !== null) { }
  
};

const $VkSamplerYcbcrConversionCreateInfo = memoryLayouts.VkSamplerYcbcrConversionCreateInfo;
VkSamplerYcbcrConversionCreateInfo.byteLength = $VkSamplerYcbcrConversionCreateInfo.byteLength;

VkSamplerYcbcrConversionCreateInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfo.sType.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfo.pNext.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfo.pNext.byteLength
  }),
  format: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfo.format.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfo.format.byteLength
  }),
  ycbcrModel: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfo.ycbcrModel.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfo.ycbcrModel.byteLength
  }),
  ycbcrRange: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfo.ycbcrRange.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfo.ycbcrRange.byteLength
  }),
  components: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfo.components.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfo.components.byteLength
  }),
  xChromaOffset: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfo.xChromaOffset.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfo.xChromaOffset.byteLength
  }),
  yChromaOffset: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfo.yChromaOffset.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfo.yChromaOffset.byteLength
  }),
  chromaFilter: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfo.chromaFilter.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfo.chromaFilter.byteLength
  }),
  forceExplicitReconstruction: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfo.forceExplicitReconstruction.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfo.forceExplicitReconstruction.byteLength
  }),
});
class VkSamplerYcbcrConversionCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._format = 0;
    this._ycbcrModel = 0;
    this._ycbcrRange = 0;
    this._components = null;
    this._xChromaOffset = 0;
    this._yChromaOffset = 0;
    this._chromaFilter = 0;
    this._forceExplicitReconstruction = 0;
    this.memoryBuffer = new ArrayBuffer(VkSamplerYcbcrConversionCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.ycbcrModel !== void 0) this.ycbcrModel = opts.ycbcrModel;
      if (opts.ycbcrRange !== void 0) this.ycbcrRange = opts.ycbcrRange;
      if (opts.components !== void 0) this.components = opts.components;
      if (opts.xChromaOffset !== void 0) this.xChromaOffset = opts.xChromaOffset;
      if (opts.yChromaOffset !== void 0) this.yChromaOffset = opts.yChromaOffset;
      if (opts.chromaFilter !== void 0) this.chromaFilter = opts.chromaFilter;
      if (opts.forceExplicitReconstruction !== void 0) this.forceExplicitReconstruction = opts.forceExplicitReconstruction;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get format() {
    return this._format;
  }
  set format(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfoKHR.format.byteOffset, value);
this._format = value;
  }
  get ycbcrModel() {
    return this._ycbcrModel;
  }
  set ycbcrModel(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfoKHR.ycbcrModel.byteOffset, value);
this._ycbcrModel = value;
  }
  get ycbcrRange() {
    return this._ycbcrRange;
  }
  set ycbcrRange(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfoKHR.ycbcrRange.byteOffset, value);
this._ycbcrRange = value;
  }
  get components() {
    return this._components;
  }
  set components(value) {
    String
  }
  get xChromaOffset() {
    return this._xChromaOffset;
  }
  set xChromaOffset(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfoKHR.xChromaOffset.byteOffset, value);
this._xChromaOffset = value;
  }
  get yChromaOffset() {
    return this._yChromaOffset;
  }
  set yChromaOffset(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfoKHR.yChromaOffset.byteOffset, value);
this._yChromaOffset = value;
  }
  get chromaFilter() {
    return this._chromaFilter;
  }
  set chromaFilter(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionCreateInfoKHR.chromaFilter.byteOffset, value);
this._chromaFilter = value;
  }
  get forceExplicitReconstruction() {
    return this._forceExplicitReconstruction;
  }
  set forceExplicitReconstruction(value) {
    
this.memoryView.setUint32($VkSamplerYcbcrConversionCreateInfoKHR.forceExplicitReconstruction.byteOffset, value);
this._forceExplicitReconstruction = value;
  }
  
};

VkSamplerYcbcrConversionCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.components !== null) { }
  
};

const $VkSamplerYcbcrConversionCreateInfoKHR = memoryLayouts.VkSamplerYcbcrConversionCreateInfoKHR;
VkSamplerYcbcrConversionCreateInfoKHR.byteLength = $VkSamplerYcbcrConversionCreateInfoKHR.byteLength;

VkSamplerYcbcrConversionCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfoKHR.sType.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfoKHR.pNext.byteLength
  }),
  format: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfoKHR.format.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfoKHR.format.byteLength
  }),
  ycbcrModel: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfoKHR.ycbcrModel.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfoKHR.ycbcrModel.byteLength
  }),
  ycbcrRange: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfoKHR.ycbcrRange.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfoKHR.ycbcrRange.byteLength
  }),
  components: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfoKHR.components.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfoKHR.components.byteLength
  }),
  xChromaOffset: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfoKHR.xChromaOffset.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfoKHR.xChromaOffset.byteLength
  }),
  yChromaOffset: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfoKHR.yChromaOffset.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfoKHR.yChromaOffset.byteLength
  }),
  chromaFilter: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfoKHR.chromaFilter.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfoKHR.chromaFilter.byteLength
  }),
  forceExplicitReconstruction: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionCreateInfoKHR.forceExplicitReconstruction.byteOffset,
    byteLength: $VkSamplerYcbcrConversionCreateInfoKHR.forceExplicitReconstruction.byteLength
  }),
});
class VkBindImagePlaneMemoryInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._planeAspect = 0;
    this.memoryBuffer = new ArrayBuffer(VkBindImagePlaneMemoryInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBindImagePlaneMemoryInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get planeAspect() {
    return this._planeAspect;
  }
  set planeAspect(value) {
    
this.memoryView.setInt32($VkBindImagePlaneMemoryInfo.planeAspect.byteOffset, value);
this._planeAspect = value;
  }
  
};

VkBindImagePlaneMemoryInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBindImagePlaneMemoryInfo = memoryLayouts.VkBindImagePlaneMemoryInfo;
VkBindImagePlaneMemoryInfo.byteLength = $VkBindImagePlaneMemoryInfo.byteLength;

VkBindImagePlaneMemoryInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBindImagePlaneMemoryInfo.sType.byteOffset,
    byteLength: $VkBindImagePlaneMemoryInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBindImagePlaneMemoryInfo.pNext.byteOffset,
    byteLength: $VkBindImagePlaneMemoryInfo.pNext.byteLength
  }),
  planeAspect: Object.freeze({
    byteOffset: $VkBindImagePlaneMemoryInfo.planeAspect.byteOffset,
    byteLength: $VkBindImagePlaneMemoryInfo.planeAspect.byteLength
  }),
});
class VkBindImagePlaneMemoryInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._planeAspect = 0;
    this.memoryBuffer = new ArrayBuffer(VkBindImagePlaneMemoryInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBindImagePlaneMemoryInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get planeAspect() {
    return this._planeAspect;
  }
  set planeAspect(value) {
    
this.memoryView.setInt32($VkBindImagePlaneMemoryInfoKHR.planeAspect.byteOffset, value);
this._planeAspect = value;
  }
  
};

VkBindImagePlaneMemoryInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBindImagePlaneMemoryInfoKHR = memoryLayouts.VkBindImagePlaneMemoryInfoKHR;
VkBindImagePlaneMemoryInfoKHR.byteLength = $VkBindImagePlaneMemoryInfoKHR.byteLength;

VkBindImagePlaneMemoryInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBindImagePlaneMemoryInfoKHR.sType.byteOffset,
    byteLength: $VkBindImagePlaneMemoryInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBindImagePlaneMemoryInfoKHR.pNext.byteOffset,
    byteLength: $VkBindImagePlaneMemoryInfoKHR.pNext.byteLength
  }),
  planeAspect: Object.freeze({
    byteOffset: $VkBindImagePlaneMemoryInfoKHR.planeAspect.byteOffset,
    byteLength: $VkBindImagePlaneMemoryInfoKHR.planeAspect.byteLength
  }),
});
class VkImagePlaneMemoryRequirementsInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._planeAspect = 0;
    this.memoryBuffer = new ArrayBuffer(VkImagePlaneMemoryRequirementsInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImagePlaneMemoryRequirementsInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get planeAspect() {
    return this._planeAspect;
  }
  set planeAspect(value) {
    
this.memoryView.setInt32($VkImagePlaneMemoryRequirementsInfo.planeAspect.byteOffset, value);
this._planeAspect = value;
  }
  
};

VkImagePlaneMemoryRequirementsInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImagePlaneMemoryRequirementsInfo = memoryLayouts.VkImagePlaneMemoryRequirementsInfo;
VkImagePlaneMemoryRequirementsInfo.byteLength = $VkImagePlaneMemoryRequirementsInfo.byteLength;

VkImagePlaneMemoryRequirementsInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImagePlaneMemoryRequirementsInfo.sType.byteOffset,
    byteLength: $VkImagePlaneMemoryRequirementsInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImagePlaneMemoryRequirementsInfo.pNext.byteOffset,
    byteLength: $VkImagePlaneMemoryRequirementsInfo.pNext.byteLength
  }),
  planeAspect: Object.freeze({
    byteOffset: $VkImagePlaneMemoryRequirementsInfo.planeAspect.byteOffset,
    byteLength: $VkImagePlaneMemoryRequirementsInfo.planeAspect.byteLength
  }),
});
class VkImagePlaneMemoryRequirementsInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._planeAspect = 0;
    this.memoryBuffer = new ArrayBuffer(VkImagePlaneMemoryRequirementsInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.planeAspect !== void 0) this.planeAspect = opts.planeAspect;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImagePlaneMemoryRequirementsInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get planeAspect() {
    return this._planeAspect;
  }
  set planeAspect(value) {
    
this.memoryView.setInt32($VkImagePlaneMemoryRequirementsInfoKHR.planeAspect.byteOffset, value);
this._planeAspect = value;
  }
  
};

VkImagePlaneMemoryRequirementsInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImagePlaneMemoryRequirementsInfoKHR = memoryLayouts.VkImagePlaneMemoryRequirementsInfoKHR;
VkImagePlaneMemoryRequirementsInfoKHR.byteLength = $VkImagePlaneMemoryRequirementsInfoKHR.byteLength;

VkImagePlaneMemoryRequirementsInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImagePlaneMemoryRequirementsInfoKHR.sType.byteOffset,
    byteLength: $VkImagePlaneMemoryRequirementsInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImagePlaneMemoryRequirementsInfoKHR.pNext.byteOffset,
    byteLength: $VkImagePlaneMemoryRequirementsInfoKHR.pNext.byteLength
  }),
  planeAspect: Object.freeze({
    byteOffset: $VkImagePlaneMemoryRequirementsInfoKHR.planeAspect.byteOffset,
    byteLength: $VkImagePlaneMemoryRequirementsInfoKHR.planeAspect.byteLength
  }),
});
class VkPhysicalDeviceSamplerYcbcrConversionFeatures {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._samplerYcbcrConversion = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSamplerYcbcrConversionFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.samplerYcbcrConversion !== void 0) this.samplerYcbcrConversion = opts.samplerYcbcrConversion;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSamplerYcbcrConversionFeatures.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get samplerYcbcrConversion() {
    return this._samplerYcbcrConversion;
  }
  set samplerYcbcrConversion(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceSamplerYcbcrConversionFeatures.samplerYcbcrConversion.byteOffset, value);
this._samplerYcbcrConversion = value;
  }
  
};

VkPhysicalDeviceSamplerYcbcrConversionFeatures.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceSamplerYcbcrConversionFeatures = memoryLayouts.VkPhysicalDeviceSamplerYcbcrConversionFeatures;
VkPhysicalDeviceSamplerYcbcrConversionFeatures.byteLength = $VkPhysicalDeviceSamplerYcbcrConversionFeatures.byteLength;

VkPhysicalDeviceSamplerYcbcrConversionFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceSamplerYcbcrConversionFeatures.sType.byteOffset,
    byteLength: $VkPhysicalDeviceSamplerYcbcrConversionFeatures.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceSamplerYcbcrConversionFeatures.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceSamplerYcbcrConversionFeatures.pNext.byteLength
  }),
  samplerYcbcrConversion: Object.freeze({
    byteOffset: $VkPhysicalDeviceSamplerYcbcrConversionFeatures.samplerYcbcrConversion.byteOffset,
    byteLength: $VkPhysicalDeviceSamplerYcbcrConversionFeatures.samplerYcbcrConversion.byteLength
  }),
});
class VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._samplerYcbcrConversion = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.samplerYcbcrConversion !== void 0) this.samplerYcbcrConversion = opts.samplerYcbcrConversion;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get samplerYcbcrConversion() {
    return this._samplerYcbcrConversion;
  }
  set samplerYcbcrConversion(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.samplerYcbcrConversion.byteOffset, value);
this._samplerYcbcrConversion = value;
  }
  
};

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = memoryLayouts.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;
VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.byteLength = $VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.byteLength;

VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.pNext.byteLength
  }),
  samplerYcbcrConversion: Object.freeze({
    byteOffset: $VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.samplerYcbcrConversion.byteOffset,
    byteLength: $VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.samplerYcbcrConversion.byteLength
  }),
});
class VkSamplerYcbcrConversionImageFormatProperties {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._combinedImageSamplerDescriptorCount = 0;
    this.memoryBuffer = new ArrayBuffer(VkSamplerYcbcrConversionImageFormatProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionImageFormatProperties.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get combinedImageSamplerDescriptorCount() {
    return this._combinedImageSamplerDescriptorCount;
  }
  
};

VkSamplerYcbcrConversionImageFormatProperties.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSamplerYcbcrConversionImageFormatProperties = memoryLayouts.VkSamplerYcbcrConversionImageFormatProperties;
VkSamplerYcbcrConversionImageFormatProperties.byteLength = $VkSamplerYcbcrConversionImageFormatProperties.byteLength;

VkSamplerYcbcrConversionImageFormatProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionImageFormatProperties.sType.byteOffset,
    byteLength: $VkSamplerYcbcrConversionImageFormatProperties.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionImageFormatProperties.pNext.byteOffset,
    byteLength: $VkSamplerYcbcrConversionImageFormatProperties.pNext.byteLength
  }),
  combinedImageSamplerDescriptorCount: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionImageFormatProperties.combinedImageSamplerDescriptorCount.byteOffset,
    byteLength: $VkSamplerYcbcrConversionImageFormatProperties.combinedImageSamplerDescriptorCount.byteLength
  }),
});
class VkSamplerYcbcrConversionImageFormatPropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._combinedImageSamplerDescriptorCount = 0;
    this.memoryBuffer = new ArrayBuffer(VkSamplerYcbcrConversionImageFormatPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSamplerYcbcrConversionImageFormatPropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get combinedImageSamplerDescriptorCount() {
    return this._combinedImageSamplerDescriptorCount;
  }
  
};

VkSamplerYcbcrConversionImageFormatPropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSamplerYcbcrConversionImageFormatPropertiesKHR = memoryLayouts.VkSamplerYcbcrConversionImageFormatPropertiesKHR;
VkSamplerYcbcrConversionImageFormatPropertiesKHR.byteLength = $VkSamplerYcbcrConversionImageFormatPropertiesKHR.byteLength;

VkSamplerYcbcrConversionImageFormatPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionImageFormatPropertiesKHR.sType.byteOffset,
    byteLength: $VkSamplerYcbcrConversionImageFormatPropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionImageFormatPropertiesKHR.pNext.byteOffset,
    byteLength: $VkSamplerYcbcrConversionImageFormatPropertiesKHR.pNext.byteLength
  }),
  combinedImageSamplerDescriptorCount: Object.freeze({
    byteOffset: $VkSamplerYcbcrConversionImageFormatPropertiesKHR.combinedImageSamplerDescriptorCount.byteOffset,
    byteLength: $VkSamplerYcbcrConversionImageFormatPropertiesKHR.combinedImageSamplerDescriptorCount.byteLength
  }),
});
class VkTextureLODGatherFormatPropertiesAMD {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._supportsTextureGatherLODBiasAMD = 0;
    this.memoryBuffer = new ArrayBuffer(VkTextureLODGatherFormatPropertiesAMD.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkTextureLODGatherFormatPropertiesAMD.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get supportsTextureGatherLODBiasAMD() {
    return this._supportsTextureGatherLODBiasAMD;
  }
  
};

VkTextureLODGatherFormatPropertiesAMD.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkTextureLODGatherFormatPropertiesAMD = memoryLayouts.VkTextureLODGatherFormatPropertiesAMD;
VkTextureLODGatherFormatPropertiesAMD.byteLength = $VkTextureLODGatherFormatPropertiesAMD.byteLength;

VkTextureLODGatherFormatPropertiesAMD.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkTextureLODGatherFormatPropertiesAMD.sType.byteOffset,
    byteLength: $VkTextureLODGatherFormatPropertiesAMD.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkTextureLODGatherFormatPropertiesAMD.pNext.byteOffset,
    byteLength: $VkTextureLODGatherFormatPropertiesAMD.pNext.byteLength
  }),
  supportsTextureGatherLODBiasAMD: Object.freeze({
    byteOffset: $VkTextureLODGatherFormatPropertiesAMD.supportsTextureGatherLODBiasAMD.byteOffset,
    byteLength: $VkTextureLODGatherFormatPropertiesAMD.supportsTextureGatherLODBiasAMD.byteLength
  }),
});
class VkConditionalRenderingBeginInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._buffer = null;
    this._offset = 0;
    this._flags = 0;
    this.memoryBuffer = new ArrayBuffer(VkConditionalRenderingBeginInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      if (opts.offset !== void 0) this.offset = opts.offset;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkConditionalRenderingBeginInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    
this.memoryView.setBigUint64($VkConditionalRenderingBeginInfoEXT.offset.byteOffset, value);
this._offset = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkConditionalRenderingBeginInfoEXT.flags.byteOffset, value);
this._flags = value;
  }
  
};

VkConditionalRenderingBeginInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkConditionalRenderingBeginInfoEXT = memoryLayouts.VkConditionalRenderingBeginInfoEXT;
VkConditionalRenderingBeginInfoEXT.byteLength = $VkConditionalRenderingBeginInfoEXT.byteLength;

VkConditionalRenderingBeginInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkConditionalRenderingBeginInfoEXT.sType.byteOffset,
    byteLength: $VkConditionalRenderingBeginInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkConditionalRenderingBeginInfoEXT.pNext.byteOffset,
    byteLength: $VkConditionalRenderingBeginInfoEXT.pNext.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkConditionalRenderingBeginInfoEXT.buffer.byteOffset,
    byteLength: $VkConditionalRenderingBeginInfoEXT.buffer.byteLength
  }),
  offset: Object.freeze({
    byteOffset: $VkConditionalRenderingBeginInfoEXT.offset.byteOffset,
    byteLength: $VkConditionalRenderingBeginInfoEXT.offset.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkConditionalRenderingBeginInfoEXT.flags.byteOffset,
    byteLength: $VkConditionalRenderingBeginInfoEXT.flags.byteLength
  }),
});
class VkProtectedSubmitInfo {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._protectedSubmit = 0;
    this.memoryBuffer = new ArrayBuffer(VkProtectedSubmitInfo.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.protectedSubmit !== void 0) this.protectedSubmit = opts.protectedSubmit;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkProtectedSubmitInfo.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get protectedSubmit() {
    return this._protectedSubmit;
  }
  set protectedSubmit(value) {
    
this.memoryView.setUint32($VkProtectedSubmitInfo.protectedSubmit.byteOffset, value);
this._protectedSubmit = value;
  }
  
};

VkProtectedSubmitInfo.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkProtectedSubmitInfo = memoryLayouts.VkProtectedSubmitInfo;
VkProtectedSubmitInfo.byteLength = $VkProtectedSubmitInfo.byteLength;

VkProtectedSubmitInfo.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkProtectedSubmitInfo.sType.byteOffset,
    byteLength: $VkProtectedSubmitInfo.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkProtectedSubmitInfo.pNext.byteOffset,
    byteLength: $VkProtectedSubmitInfo.pNext.byteLength
  }),
  protectedSubmit: Object.freeze({
    byteOffset: $VkProtectedSubmitInfo.protectedSubmit.byteOffset,
    byteLength: $VkProtectedSubmitInfo.protectedSubmit.byteLength
  }),
});
class VkPhysicalDeviceProtectedMemoryFeatures {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._protectedMemory = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceProtectedMemoryFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.protectedMemory !== void 0) this.protectedMemory = opts.protectedMemory;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceProtectedMemoryFeatures.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get protectedMemory() {
    return this._protectedMemory;
  }
  set protectedMemory(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceProtectedMemoryFeatures.protectedMemory.byteOffset, value);
this._protectedMemory = value;
  }
  
};

VkPhysicalDeviceProtectedMemoryFeatures.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceProtectedMemoryFeatures = memoryLayouts.VkPhysicalDeviceProtectedMemoryFeatures;
VkPhysicalDeviceProtectedMemoryFeatures.byteLength = $VkPhysicalDeviceProtectedMemoryFeatures.byteLength;

VkPhysicalDeviceProtectedMemoryFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceProtectedMemoryFeatures.sType.byteOffset,
    byteLength: $VkPhysicalDeviceProtectedMemoryFeatures.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceProtectedMemoryFeatures.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceProtectedMemoryFeatures.pNext.byteLength
  }),
  protectedMemory: Object.freeze({
    byteOffset: $VkPhysicalDeviceProtectedMemoryFeatures.protectedMemory.byteOffset,
    byteLength: $VkPhysicalDeviceProtectedMemoryFeatures.protectedMemory.byteLength
  }),
});
class VkPhysicalDeviceProtectedMemoryProperties {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._protectedNoFault = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceProtectedMemoryProperties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceProtectedMemoryProperties.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get protectedNoFault() {
    return this._protectedNoFault;
  }
  
};

VkPhysicalDeviceProtectedMemoryProperties.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceProtectedMemoryProperties = memoryLayouts.VkPhysicalDeviceProtectedMemoryProperties;
VkPhysicalDeviceProtectedMemoryProperties.byteLength = $VkPhysicalDeviceProtectedMemoryProperties.byteLength;

VkPhysicalDeviceProtectedMemoryProperties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceProtectedMemoryProperties.sType.byteOffset,
    byteLength: $VkPhysicalDeviceProtectedMemoryProperties.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceProtectedMemoryProperties.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceProtectedMemoryProperties.pNext.byteLength
  }),
  protectedNoFault: Object.freeze({
    byteOffset: $VkPhysicalDeviceProtectedMemoryProperties.protectedNoFault.byteOffset,
    byteLength: $VkPhysicalDeviceProtectedMemoryProperties.protectedNoFault.byteLength
  }),
});
class VkDeviceQueueInfo2 {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._queueFamilyIndex = 0;
    this._queueIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkDeviceQueueInfo2.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.queueFamilyIndex !== void 0) this.queueFamilyIndex = opts.queueFamilyIndex;
      if (opts.queueIndex !== void 0) this.queueIndex = opts.queueIndex;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceQueueInfo2.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkDeviceQueueInfo2.flags.byteOffset, value);
this._flags = value;
  }
  get queueFamilyIndex() {
    return this._queueFamilyIndex;
  }
  set queueFamilyIndex(value) {
    
this.memoryView.setUint32($VkDeviceQueueInfo2.queueFamilyIndex.byteOffset, value);
this._queueFamilyIndex = value;
  }
  get queueIndex() {
    return this._queueIndex;
  }
  set queueIndex(value) {
    
this.memoryView.setUint32($VkDeviceQueueInfo2.queueIndex.byteOffset, value);
this._queueIndex = value;
  }
  
};

VkDeviceQueueInfo2.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceQueueInfo2 = memoryLayouts.VkDeviceQueueInfo2;
VkDeviceQueueInfo2.byteLength = $VkDeviceQueueInfo2.byteLength;

VkDeviceQueueInfo2.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceQueueInfo2.sType.byteOffset,
    byteLength: $VkDeviceQueueInfo2.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceQueueInfo2.pNext.byteOffset,
    byteLength: $VkDeviceQueueInfo2.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkDeviceQueueInfo2.flags.byteOffset,
    byteLength: $VkDeviceQueueInfo2.flags.byteLength
  }),
  queueFamilyIndex: Object.freeze({
    byteOffset: $VkDeviceQueueInfo2.queueFamilyIndex.byteOffset,
    byteLength: $VkDeviceQueueInfo2.queueFamilyIndex.byteLength
  }),
  queueIndex: Object.freeze({
    byteOffset: $VkDeviceQueueInfo2.queueIndex.byteOffset,
    byteLength: $VkDeviceQueueInfo2.queueIndex.byteLength
  }),
});
class VkPipelineCoverageToColorStateCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._coverageToColorEnable = 0;
    this._coverageToColorLocation = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineCoverageToColorStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.coverageToColorEnable !== void 0) this.coverageToColorEnable = opts.coverageToColorEnable;
      if (opts.coverageToColorLocation !== void 0) this.coverageToColorLocation = opts.coverageToColorLocation;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineCoverageToColorStateCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineCoverageToColorStateCreateInfoNV.flags.byteOffset, value);
this._flags = value;
  }
  get coverageToColorEnable() {
    return this._coverageToColorEnable;
  }
  set coverageToColorEnable(value) {
    
this.memoryView.setUint32($VkPipelineCoverageToColorStateCreateInfoNV.coverageToColorEnable.byteOffset, value);
this._coverageToColorEnable = value;
  }
  get coverageToColorLocation() {
    return this._coverageToColorLocation;
  }
  set coverageToColorLocation(value) {
    
this.memoryView.setUint32($VkPipelineCoverageToColorStateCreateInfoNV.coverageToColorLocation.byteOffset, value);
this._coverageToColorLocation = value;
  }
  
};

VkPipelineCoverageToColorStateCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineCoverageToColorStateCreateInfoNV = memoryLayouts.VkPipelineCoverageToColorStateCreateInfoNV;
VkPipelineCoverageToColorStateCreateInfoNV.byteLength = $VkPipelineCoverageToColorStateCreateInfoNV.byteLength;

VkPipelineCoverageToColorStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineCoverageToColorStateCreateInfoNV.sType.byteOffset,
    byteLength: $VkPipelineCoverageToColorStateCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineCoverageToColorStateCreateInfoNV.pNext.byteOffset,
    byteLength: $VkPipelineCoverageToColorStateCreateInfoNV.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineCoverageToColorStateCreateInfoNV.flags.byteOffset,
    byteLength: $VkPipelineCoverageToColorStateCreateInfoNV.flags.byteLength
  }),
  coverageToColorEnable: Object.freeze({
    byteOffset: $VkPipelineCoverageToColorStateCreateInfoNV.coverageToColorEnable.byteOffset,
    byteLength: $VkPipelineCoverageToColorStateCreateInfoNV.coverageToColorEnable.byteLength
  }),
  coverageToColorLocation: Object.freeze({
    byteOffset: $VkPipelineCoverageToColorStateCreateInfoNV.coverageToColorLocation.byteOffset,
    byteLength: $VkPipelineCoverageToColorStateCreateInfoNV.coverageToColorLocation.byteLength
  }),
});
class VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._filterMinmaxSingleComponentFormats = 0;
    this._filterMinmaxImageComponentMapping = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get filterMinmaxSingleComponentFormats() {
    return this._filterMinmaxSingleComponentFormats;
  }
  get filterMinmaxImageComponentMapping() {
    return this._filterMinmaxImageComponentMapping;
  }
  
};

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = memoryLayouts.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;
VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.byteLength = $VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.byteLength;

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.pNext.byteLength
  }),
  filterMinmaxSingleComponentFormats: Object.freeze({
    byteOffset: $VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.filterMinmaxSingleComponentFormats.byteOffset,
    byteLength: $VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.filterMinmaxSingleComponentFormats.byteLength
  }),
  filterMinmaxImageComponentMapping: Object.freeze({
    byteOffset: $VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.filterMinmaxImageComponentMapping.byteOffset,
    byteLength: $VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.filterMinmaxImageComponentMapping.byteLength
  }),
});
class VkSampleLocationEXT {
  constructor(opts) {
    this._x = 0;
    this._y = 0;
    this.memoryBuffer = new ArrayBuffer(VkSampleLocationEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.x !== void 0) this.x = opts.x;
      if (opts.y !== void 0) this.y = opts.y;
      
    }
  }
  get x() {
    return this._x;
  }
  set x(value) {
    
this.memoryView.setFloat32($VkSampleLocationEXT.x.byteOffset, value);
this._x = value;
  }
  get y() {
    return this._y;
  }
  set y(value) {
    
this.memoryView.setFloat32($VkSampleLocationEXT.y.byteOffset, value);
this._y = value;
  }
  
};

VkSampleLocationEXT.prototype.flush = function flush() {
  
};

const $VkSampleLocationEXT = memoryLayouts.VkSampleLocationEXT;
VkSampleLocationEXT.byteLength = $VkSampleLocationEXT.byteLength;

VkSampleLocationEXT.memoryLayout = Object.freeze({
  x: Object.freeze({
    byteOffset: $VkSampleLocationEXT.x.byteOffset,
    byteLength: $VkSampleLocationEXT.x.byteLength
  }),
  y: Object.freeze({
    byteOffset: $VkSampleLocationEXT.y.byteOffset,
    byteLength: $VkSampleLocationEXT.y.byteLength
  }),
});
class VkSampleLocationsInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._sampleLocationsPerPixel = 0;
    this._sampleLocationGridSize = null;
    this._sampleLocationsCount = 0;
    this._pSampleLocations = null;
    this.memoryBuffer = new ArrayBuffer(VkSampleLocationsInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.sampleLocationsPerPixel !== void 0) this.sampleLocationsPerPixel = opts.sampleLocationsPerPixel;
      if (opts.sampleLocationGridSize !== void 0) this.sampleLocationGridSize = opts.sampleLocationGridSize;
      if (opts.sampleLocationsCount !== void 0) this.sampleLocationsCount = opts.sampleLocationsCount;
      if (opts.pSampleLocations !== void 0) this.pSampleLocations = opts.pSampleLocations;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSampleLocationsInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get sampleLocationsPerPixel() {
    return this._sampleLocationsPerPixel;
  }
  set sampleLocationsPerPixel(value) {
    
this.memoryView.setInt32($VkSampleLocationsInfoEXT.sampleLocationsPerPixel.byteOffset, value);
this._sampleLocationsPerPixel = value;
  }
  get sampleLocationGridSize() {
    return this._sampleLocationGridSize;
  }
  set sampleLocationGridSize(value) {
    String
  }
  get sampleLocationsCount() {
    return this._sampleLocationsCount;
  }
  set sampleLocationsCount(value) {
    
this.memoryView.setUint32($VkSampleLocationsInfoEXT.sampleLocationsCount.byteOffset, value);
this._sampleLocationsCount = value;
  }
  get pSampleLocations() {
    return this._pSampleLocations;
  }
  set pSampleLocations(value) {
    
  }
  
};

VkSampleLocationsInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.sampleLocationGridSize !== null) { }
  
  if (this.pSampleLocations !== null) { }
  
};

const $VkSampleLocationsInfoEXT = memoryLayouts.VkSampleLocationsInfoEXT;
VkSampleLocationsInfoEXT.byteLength = $VkSampleLocationsInfoEXT.byteLength;

VkSampleLocationsInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSampleLocationsInfoEXT.sType.byteOffset,
    byteLength: $VkSampleLocationsInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSampleLocationsInfoEXT.pNext.byteOffset,
    byteLength: $VkSampleLocationsInfoEXT.pNext.byteLength
  }),
  sampleLocationsPerPixel: Object.freeze({
    byteOffset: $VkSampleLocationsInfoEXT.sampleLocationsPerPixel.byteOffset,
    byteLength: $VkSampleLocationsInfoEXT.sampleLocationsPerPixel.byteLength
  }),
  sampleLocationGridSize: Object.freeze({
    byteOffset: $VkSampleLocationsInfoEXT.sampleLocationGridSize.byteOffset,
    byteLength: $VkSampleLocationsInfoEXT.sampleLocationGridSize.byteLength
  }),
  sampleLocationsCount: Object.freeze({
    byteOffset: $VkSampleLocationsInfoEXT.sampleLocationsCount.byteOffset,
    byteLength: $VkSampleLocationsInfoEXT.sampleLocationsCount.byteLength
  }),
  pSampleLocations: Object.freeze({
    byteOffset: $VkSampleLocationsInfoEXT.pSampleLocations.byteOffset,
    byteLength: $VkSampleLocationsInfoEXT.pSampleLocations.byteLength
  }),
});
class VkAttachmentSampleLocationsEXT {
  constructor(opts) {
    this._attachmentIndex = 0;
    this._sampleLocationsInfo = null;
    this.memoryBuffer = new ArrayBuffer(VkAttachmentSampleLocationsEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.attachmentIndex !== void 0) this.attachmentIndex = opts.attachmentIndex;
      if (opts.sampleLocationsInfo !== void 0) this.sampleLocationsInfo = opts.sampleLocationsInfo;
      
    }
  }
  get attachmentIndex() {
    return this._attachmentIndex;
  }
  set attachmentIndex(value) {
    
this.memoryView.setUint32($VkAttachmentSampleLocationsEXT.attachmentIndex.byteOffset, value);
this._attachmentIndex = value;
  }
  get sampleLocationsInfo() {
    return this._sampleLocationsInfo;
  }
  set sampleLocationsInfo(value) {
    String
  }
  
};

VkAttachmentSampleLocationsEXT.prototype.flush = function flush() {
  
  if (this.sampleLocationsInfo !== null) { }
  
};

const $VkAttachmentSampleLocationsEXT = memoryLayouts.VkAttachmentSampleLocationsEXT;
VkAttachmentSampleLocationsEXT.byteLength = $VkAttachmentSampleLocationsEXT.byteLength;

VkAttachmentSampleLocationsEXT.memoryLayout = Object.freeze({
  attachmentIndex: Object.freeze({
    byteOffset: $VkAttachmentSampleLocationsEXT.attachmentIndex.byteOffset,
    byteLength: $VkAttachmentSampleLocationsEXT.attachmentIndex.byteLength
  }),
  sampleLocationsInfo: Object.freeze({
    byteOffset: $VkAttachmentSampleLocationsEXT.sampleLocationsInfo.byteOffset,
    byteLength: $VkAttachmentSampleLocationsEXT.sampleLocationsInfo.byteLength
  }),
});
class VkSubpassSampleLocationsEXT {
  constructor(opts) {
    this._subpassIndex = 0;
    this._sampleLocationsInfo = null;
    this.memoryBuffer = new ArrayBuffer(VkSubpassSampleLocationsEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.subpassIndex !== void 0) this.subpassIndex = opts.subpassIndex;
      if (opts.sampleLocationsInfo !== void 0) this.sampleLocationsInfo = opts.sampleLocationsInfo;
      
    }
  }
  get subpassIndex() {
    return this._subpassIndex;
  }
  set subpassIndex(value) {
    
this.memoryView.setUint32($VkSubpassSampleLocationsEXT.subpassIndex.byteOffset, value);
this._subpassIndex = value;
  }
  get sampleLocationsInfo() {
    return this._sampleLocationsInfo;
  }
  set sampleLocationsInfo(value) {
    String
  }
  
};

VkSubpassSampleLocationsEXT.prototype.flush = function flush() {
  
  if (this.sampleLocationsInfo !== null) { }
  
};

const $VkSubpassSampleLocationsEXT = memoryLayouts.VkSubpassSampleLocationsEXT;
VkSubpassSampleLocationsEXT.byteLength = $VkSubpassSampleLocationsEXT.byteLength;

VkSubpassSampleLocationsEXT.memoryLayout = Object.freeze({
  subpassIndex: Object.freeze({
    byteOffset: $VkSubpassSampleLocationsEXT.subpassIndex.byteOffset,
    byteLength: $VkSubpassSampleLocationsEXT.subpassIndex.byteLength
  }),
  sampleLocationsInfo: Object.freeze({
    byteOffset: $VkSubpassSampleLocationsEXT.sampleLocationsInfo.byteOffset,
    byteLength: $VkSubpassSampleLocationsEXT.sampleLocationsInfo.byteLength
  }),
});
class VkRenderPassSampleLocationsBeginInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._attachmentInitialSampleLocationsCount = 0;
    this._pAttachmentInitialSampleLocations = null;
    this._postSubpassSampleLocationsCount = 0;
    this._pPostSubpassSampleLocations = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassSampleLocationsBeginInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.attachmentInitialSampleLocationsCount !== void 0) this.attachmentInitialSampleLocationsCount = opts.attachmentInitialSampleLocationsCount;
      if (opts.pAttachmentInitialSampleLocations !== void 0) this.pAttachmentInitialSampleLocations = opts.pAttachmentInitialSampleLocations;
      if (opts.postSubpassSampleLocationsCount !== void 0) this.postSubpassSampleLocationsCount = opts.postSubpassSampleLocationsCount;
      if (opts.pPostSubpassSampleLocations !== void 0) this.pPostSubpassSampleLocations = opts.pPostSubpassSampleLocations;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkRenderPassSampleLocationsBeginInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get attachmentInitialSampleLocationsCount() {
    return this._attachmentInitialSampleLocationsCount;
  }
  set attachmentInitialSampleLocationsCount(value) {
    
this.memoryView.setUint32($VkRenderPassSampleLocationsBeginInfoEXT.attachmentInitialSampleLocationsCount.byteOffset, value);
this._attachmentInitialSampleLocationsCount = value;
  }
  get pAttachmentInitialSampleLocations() {
    return this._pAttachmentInitialSampleLocations;
  }
  set pAttachmentInitialSampleLocations(value) {
    
  }
  get postSubpassSampleLocationsCount() {
    return this._postSubpassSampleLocationsCount;
  }
  set postSubpassSampleLocationsCount(value) {
    
this.memoryView.setUint32($VkRenderPassSampleLocationsBeginInfoEXT.postSubpassSampleLocationsCount.byteOffset, value);
this._postSubpassSampleLocationsCount = value;
  }
  get pPostSubpassSampleLocations() {
    return this._pPostSubpassSampleLocations;
  }
  set pPostSubpassSampleLocations(value) {
    
  }
  
};

VkRenderPassSampleLocationsBeginInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pAttachmentInitialSampleLocations !== null) { }
  
  if (this.pPostSubpassSampleLocations !== null) { }
  
};

const $VkRenderPassSampleLocationsBeginInfoEXT = memoryLayouts.VkRenderPassSampleLocationsBeginInfoEXT;
VkRenderPassSampleLocationsBeginInfoEXT.byteLength = $VkRenderPassSampleLocationsBeginInfoEXT.byteLength;

VkRenderPassSampleLocationsBeginInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkRenderPassSampleLocationsBeginInfoEXT.sType.byteOffset,
    byteLength: $VkRenderPassSampleLocationsBeginInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkRenderPassSampleLocationsBeginInfoEXT.pNext.byteOffset,
    byteLength: $VkRenderPassSampleLocationsBeginInfoEXT.pNext.byteLength
  }),
  attachmentInitialSampleLocationsCount: Object.freeze({
    byteOffset: $VkRenderPassSampleLocationsBeginInfoEXT.attachmentInitialSampleLocationsCount.byteOffset,
    byteLength: $VkRenderPassSampleLocationsBeginInfoEXT.attachmentInitialSampleLocationsCount.byteLength
  }),
  pAttachmentInitialSampleLocations: Object.freeze({
    byteOffset: $VkRenderPassSampleLocationsBeginInfoEXT.pAttachmentInitialSampleLocations.byteOffset,
    byteLength: $VkRenderPassSampleLocationsBeginInfoEXT.pAttachmentInitialSampleLocations.byteLength
  }),
  postSubpassSampleLocationsCount: Object.freeze({
    byteOffset: $VkRenderPassSampleLocationsBeginInfoEXT.postSubpassSampleLocationsCount.byteOffset,
    byteLength: $VkRenderPassSampleLocationsBeginInfoEXT.postSubpassSampleLocationsCount.byteLength
  }),
  pPostSubpassSampleLocations: Object.freeze({
    byteOffset: $VkRenderPassSampleLocationsBeginInfoEXT.pPostSubpassSampleLocations.byteOffset,
    byteLength: $VkRenderPassSampleLocationsBeginInfoEXT.pPostSubpassSampleLocations.byteLength
  }),
});
class VkPipelineSampleLocationsStateCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._sampleLocationsEnable = 0;
    this._sampleLocationsInfo = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineSampleLocationsStateCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.sampleLocationsEnable !== void 0) this.sampleLocationsEnable = opts.sampleLocationsEnable;
      if (opts.sampleLocationsInfo !== void 0) this.sampleLocationsInfo = opts.sampleLocationsInfo;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineSampleLocationsStateCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get sampleLocationsEnable() {
    return this._sampleLocationsEnable;
  }
  set sampleLocationsEnable(value) {
    
this.memoryView.setUint32($VkPipelineSampleLocationsStateCreateInfoEXT.sampleLocationsEnable.byteOffset, value);
this._sampleLocationsEnable = value;
  }
  get sampleLocationsInfo() {
    return this._sampleLocationsInfo;
  }
  set sampleLocationsInfo(value) {
    String
  }
  
};

VkPipelineSampleLocationsStateCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.sampleLocationsInfo !== null) { }
  
};

const $VkPipelineSampleLocationsStateCreateInfoEXT = memoryLayouts.VkPipelineSampleLocationsStateCreateInfoEXT;
VkPipelineSampleLocationsStateCreateInfoEXT.byteLength = $VkPipelineSampleLocationsStateCreateInfoEXT.byteLength;

VkPipelineSampleLocationsStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineSampleLocationsStateCreateInfoEXT.sType.byteOffset,
    byteLength: $VkPipelineSampleLocationsStateCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineSampleLocationsStateCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkPipelineSampleLocationsStateCreateInfoEXT.pNext.byteLength
  }),
  sampleLocationsEnable: Object.freeze({
    byteOffset: $VkPipelineSampleLocationsStateCreateInfoEXT.sampleLocationsEnable.byteOffset,
    byteLength: $VkPipelineSampleLocationsStateCreateInfoEXT.sampleLocationsEnable.byteLength
  }),
  sampleLocationsInfo: Object.freeze({
    byteOffset: $VkPipelineSampleLocationsStateCreateInfoEXT.sampleLocationsInfo.byteOffset,
    byteLength: $VkPipelineSampleLocationsStateCreateInfoEXT.sampleLocationsInfo.byteLength
  }),
});
class VkPhysicalDeviceSampleLocationsPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._sampleLocationSampleCounts = 0;
    this._maxSampleLocationGridSize = null;
    this._sampleLocationCoordinateRange = null;
    this._sampleLocationSubPixelBits = 0;
    this._variableSampleLocations = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceSampleLocationsPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceSampleLocationsPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get sampleLocationSampleCounts() {
    return this._sampleLocationSampleCounts;
  }
  get maxSampleLocationGridSize() {
    return this._maxSampleLocationGridSize;
  }
  get sampleLocationCoordinateRange() {
    return this._sampleLocationCoordinateRange;
  }
  get sampleLocationSubPixelBits() {
    return this._sampleLocationSubPixelBits;
  }
  get variableSampleLocations() {
    return this._variableSampleLocations;
  }
  
};

VkPhysicalDeviceSampleLocationsPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.maxSampleLocationGridSize !== null) { }
  
  if (this.sampleLocationCoordinateRange !== null) { }
  
};

const $VkPhysicalDeviceSampleLocationsPropertiesEXT = memoryLayouts.VkPhysicalDeviceSampleLocationsPropertiesEXT;
VkPhysicalDeviceSampleLocationsPropertiesEXT.byteLength = $VkPhysicalDeviceSampleLocationsPropertiesEXT.byteLength;

VkPhysicalDeviceSampleLocationsPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceSampleLocationsPropertiesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceSampleLocationsPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceSampleLocationsPropertiesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceSampleLocationsPropertiesEXT.pNext.byteLength
  }),
  sampleLocationSampleCounts: Object.freeze({
    byteOffset: $VkPhysicalDeviceSampleLocationsPropertiesEXT.sampleLocationSampleCounts.byteOffset,
    byteLength: $VkPhysicalDeviceSampleLocationsPropertiesEXT.sampleLocationSampleCounts.byteLength
  }),
  maxSampleLocationGridSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceSampleLocationsPropertiesEXT.maxSampleLocationGridSize.byteOffset,
    byteLength: $VkPhysicalDeviceSampleLocationsPropertiesEXT.maxSampleLocationGridSize.byteLength
  }),
  sampleLocationCoordinateRange: Object.freeze({
    byteOffset: $VkPhysicalDeviceSampleLocationsPropertiesEXT.sampleLocationCoordinateRange.byteOffset,
    byteLength: $VkPhysicalDeviceSampleLocationsPropertiesEXT.sampleLocationCoordinateRange.byteLength
  }),
  sampleLocationSubPixelBits: Object.freeze({
    byteOffset: $VkPhysicalDeviceSampleLocationsPropertiesEXT.sampleLocationSubPixelBits.byteOffset,
    byteLength: $VkPhysicalDeviceSampleLocationsPropertiesEXT.sampleLocationSubPixelBits.byteLength
  }),
  variableSampleLocations: Object.freeze({
    byteOffset: $VkPhysicalDeviceSampleLocationsPropertiesEXT.variableSampleLocations.byteOffset,
    byteLength: $VkPhysicalDeviceSampleLocationsPropertiesEXT.variableSampleLocations.byteLength
  }),
});
class VkMultisamplePropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxSampleLocationGridSize = null;
    this.memoryBuffer = new ArrayBuffer(VkMultisamplePropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMultisamplePropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxSampleLocationGridSize() {
    return this._maxSampleLocationGridSize;
  }
  
};

VkMultisamplePropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.maxSampleLocationGridSize !== null) { }
  
};

const $VkMultisamplePropertiesEXT = memoryLayouts.VkMultisamplePropertiesEXT;
VkMultisamplePropertiesEXT.byteLength = $VkMultisamplePropertiesEXT.byteLength;

VkMultisamplePropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMultisamplePropertiesEXT.sType.byteOffset,
    byteLength: $VkMultisamplePropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMultisamplePropertiesEXT.pNext.byteOffset,
    byteLength: $VkMultisamplePropertiesEXT.pNext.byteLength
  }),
  maxSampleLocationGridSize: Object.freeze({
    byteOffset: $VkMultisamplePropertiesEXT.maxSampleLocationGridSize.byteOffset,
    byteLength: $VkMultisamplePropertiesEXT.maxSampleLocationGridSize.byteLength
  }),
});
class VkSamplerReductionModeCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._reductionMode = 0;
    this.memoryBuffer = new ArrayBuffer(VkSamplerReductionModeCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.reductionMode !== void 0) this.reductionMode = opts.reductionMode;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSamplerReductionModeCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get reductionMode() {
    return this._reductionMode;
  }
  set reductionMode(value) {
    
this.memoryView.setInt32($VkSamplerReductionModeCreateInfoEXT.reductionMode.byteOffset, value);
this._reductionMode = value;
  }
  
};

VkSamplerReductionModeCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSamplerReductionModeCreateInfoEXT = memoryLayouts.VkSamplerReductionModeCreateInfoEXT;
VkSamplerReductionModeCreateInfoEXT.byteLength = $VkSamplerReductionModeCreateInfoEXT.byteLength;

VkSamplerReductionModeCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSamplerReductionModeCreateInfoEXT.sType.byteOffset,
    byteLength: $VkSamplerReductionModeCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSamplerReductionModeCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkSamplerReductionModeCreateInfoEXT.pNext.byteLength
  }),
  reductionMode: Object.freeze({
    byteOffset: $VkSamplerReductionModeCreateInfoEXT.reductionMode.byteOffset,
    byteLength: $VkSamplerReductionModeCreateInfoEXT.reductionMode.byteLength
  }),
});
class VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._advancedBlendCoherentOperations = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.advancedBlendCoherentOperations !== void 0) this.advancedBlendCoherentOperations = opts.advancedBlendCoherentOperations;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get advancedBlendCoherentOperations() {
    return this._advancedBlendCoherentOperations;
  }
  set advancedBlendCoherentOperations(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.advancedBlendCoherentOperations.byteOffset, value);
this._advancedBlendCoherentOperations = value;
  }
  
};

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = memoryLayouts.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.byteLength = $VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.byteLength;

VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.pNext.byteLength
  }),
  advancedBlendCoherentOperations: Object.freeze({
    byteOffset: $VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.advancedBlendCoherentOperations.byteOffset,
    byteLength: $VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.advancedBlendCoherentOperations.byteLength
  }),
});
class VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._advancedBlendMaxColorAttachments = 0;
    this._advancedBlendIndependentBlend = 0;
    this._advancedBlendNonPremultipliedSrcColor = 0;
    this._advancedBlendNonPremultipliedDstColor = 0;
    this._advancedBlendCorrelatedOverlap = 0;
    this._advancedBlendAllOperations = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get advancedBlendMaxColorAttachments() {
    return this._advancedBlendMaxColorAttachments;
  }
  get advancedBlendIndependentBlend() {
    return this._advancedBlendIndependentBlend;
  }
  get advancedBlendNonPremultipliedSrcColor() {
    return this._advancedBlendNonPremultipliedSrcColor;
  }
  get advancedBlendNonPremultipliedDstColor() {
    return this._advancedBlendNonPremultipliedDstColor;
  }
  get advancedBlendCorrelatedOverlap() {
    return this._advancedBlendCorrelatedOverlap;
  }
  get advancedBlendAllOperations() {
    return this._advancedBlendAllOperations;
  }
  
};

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = memoryLayouts.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.byteLength = $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.byteLength;

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.pNext.byteLength
  }),
  advancedBlendMaxColorAttachments: Object.freeze({
    byteOffset: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.advancedBlendMaxColorAttachments.byteOffset,
    byteLength: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.advancedBlendMaxColorAttachments.byteLength
  }),
  advancedBlendIndependentBlend: Object.freeze({
    byteOffset: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.advancedBlendIndependentBlend.byteOffset,
    byteLength: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.advancedBlendIndependentBlend.byteLength
  }),
  advancedBlendNonPremultipliedSrcColor: Object.freeze({
    byteOffset: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.advancedBlendNonPremultipliedSrcColor.byteOffset,
    byteLength: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.advancedBlendNonPremultipliedSrcColor.byteLength
  }),
  advancedBlendNonPremultipliedDstColor: Object.freeze({
    byteOffset: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.advancedBlendNonPremultipliedDstColor.byteOffset,
    byteLength: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.advancedBlendNonPremultipliedDstColor.byteLength
  }),
  advancedBlendCorrelatedOverlap: Object.freeze({
    byteOffset: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.advancedBlendCorrelatedOverlap.byteOffset,
    byteLength: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.advancedBlendCorrelatedOverlap.byteLength
  }),
  advancedBlendAllOperations: Object.freeze({
    byteOffset: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.advancedBlendAllOperations.byteOffset,
    byteLength: $VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.advancedBlendAllOperations.byteLength
  }),
});
class VkPipelineColorBlendAdvancedStateCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._srcPremultiplied = 0;
    this._dstPremultiplied = 0;
    this._blendOverlap = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineColorBlendAdvancedStateCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcPremultiplied !== void 0) this.srcPremultiplied = opts.srcPremultiplied;
      if (opts.dstPremultiplied !== void 0) this.dstPremultiplied = opts.dstPremultiplied;
      if (opts.blendOverlap !== void 0) this.blendOverlap = opts.blendOverlap;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineColorBlendAdvancedStateCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get srcPremultiplied() {
    return this._srcPremultiplied;
  }
  set srcPremultiplied(value) {
    
this.memoryView.setUint32($VkPipelineColorBlendAdvancedStateCreateInfoEXT.srcPremultiplied.byteOffset, value);
this._srcPremultiplied = value;
  }
  get dstPremultiplied() {
    return this._dstPremultiplied;
  }
  set dstPremultiplied(value) {
    
this.memoryView.setUint32($VkPipelineColorBlendAdvancedStateCreateInfoEXT.dstPremultiplied.byteOffset, value);
this._dstPremultiplied = value;
  }
  get blendOverlap() {
    return this._blendOverlap;
  }
  set blendOverlap(value) {
    
this.memoryView.setInt32($VkPipelineColorBlendAdvancedStateCreateInfoEXT.blendOverlap.byteOffset, value);
this._blendOverlap = value;
  }
  
};

VkPipelineColorBlendAdvancedStateCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineColorBlendAdvancedStateCreateInfoEXT = memoryLayouts.VkPipelineColorBlendAdvancedStateCreateInfoEXT;
VkPipelineColorBlendAdvancedStateCreateInfoEXT.byteLength = $VkPipelineColorBlendAdvancedStateCreateInfoEXT.byteLength;

VkPipelineColorBlendAdvancedStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineColorBlendAdvancedStateCreateInfoEXT.sType.byteOffset,
    byteLength: $VkPipelineColorBlendAdvancedStateCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineColorBlendAdvancedStateCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkPipelineColorBlendAdvancedStateCreateInfoEXT.pNext.byteLength
  }),
  srcPremultiplied: Object.freeze({
    byteOffset: $VkPipelineColorBlendAdvancedStateCreateInfoEXT.srcPremultiplied.byteOffset,
    byteLength: $VkPipelineColorBlendAdvancedStateCreateInfoEXT.srcPremultiplied.byteLength
  }),
  dstPremultiplied: Object.freeze({
    byteOffset: $VkPipelineColorBlendAdvancedStateCreateInfoEXT.dstPremultiplied.byteOffset,
    byteLength: $VkPipelineColorBlendAdvancedStateCreateInfoEXT.dstPremultiplied.byteLength
  }),
  blendOverlap: Object.freeze({
    byteOffset: $VkPipelineColorBlendAdvancedStateCreateInfoEXT.blendOverlap.byteOffset,
    byteLength: $VkPipelineColorBlendAdvancedStateCreateInfoEXT.blendOverlap.byteLength
  }),
});
class VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._inlineUniformBlock = 0;
    this._descriptorBindingInlineUniformBlockUpdateAfterBind = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceInlineUniformBlockFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.inlineUniformBlock !== void 0) this.inlineUniformBlock = opts.inlineUniformBlock;
      if (opts.descriptorBindingInlineUniformBlockUpdateAfterBind !== void 0) this.descriptorBindingInlineUniformBlockUpdateAfterBind = opts.descriptorBindingInlineUniformBlockUpdateAfterBind;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceInlineUniformBlockFeaturesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get inlineUniformBlock() {
    return this._inlineUniformBlock;
  }
  set inlineUniformBlock(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceInlineUniformBlockFeaturesEXT.inlineUniformBlock.byteOffset, value);
this._inlineUniformBlock = value;
  }
  get descriptorBindingInlineUniformBlockUpdateAfterBind() {
    return this._descriptorBindingInlineUniformBlockUpdateAfterBind;
  }
  set descriptorBindingInlineUniformBlockUpdateAfterBind(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceInlineUniformBlockFeaturesEXT.descriptorBindingInlineUniformBlockUpdateAfterBind.byteOffset, value);
this._descriptorBindingInlineUniformBlockUpdateAfterBind = value;
  }
  
};

VkPhysicalDeviceInlineUniformBlockFeaturesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceInlineUniformBlockFeaturesEXT = memoryLayouts.VkPhysicalDeviceInlineUniformBlockFeaturesEXT;
VkPhysicalDeviceInlineUniformBlockFeaturesEXT.byteLength = $VkPhysicalDeviceInlineUniformBlockFeaturesEXT.byteLength;

VkPhysicalDeviceInlineUniformBlockFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceInlineUniformBlockFeaturesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceInlineUniformBlockFeaturesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceInlineUniformBlockFeaturesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceInlineUniformBlockFeaturesEXT.pNext.byteLength
  }),
  inlineUniformBlock: Object.freeze({
    byteOffset: $VkPhysicalDeviceInlineUniformBlockFeaturesEXT.inlineUniformBlock.byteOffset,
    byteLength: $VkPhysicalDeviceInlineUniformBlockFeaturesEXT.inlineUniformBlock.byteLength
  }),
  descriptorBindingInlineUniformBlockUpdateAfterBind: Object.freeze({
    byteOffset: $VkPhysicalDeviceInlineUniformBlockFeaturesEXT.descriptorBindingInlineUniformBlockUpdateAfterBind.byteOffset,
    byteLength: $VkPhysicalDeviceInlineUniformBlockFeaturesEXT.descriptorBindingInlineUniformBlockUpdateAfterBind.byteLength
  }),
});
class VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxInlineUniformBlockSize = 0;
    this._maxPerStageDescriptorInlineUniformBlocks = 0;
    this._maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = 0;
    this._maxDescriptorSetInlineUniformBlocks = 0;
    this._maxDescriptorSetUpdateAfterBindInlineUniformBlocks = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceInlineUniformBlockPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceInlineUniformBlockPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxInlineUniformBlockSize() {
    return this._maxInlineUniformBlockSize;
  }
  get maxPerStageDescriptorInlineUniformBlocks() {
    return this._maxPerStageDescriptorInlineUniformBlocks;
  }
  get maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks() {
    return this._maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
  }
  get maxDescriptorSetInlineUniformBlocks() {
    return this._maxDescriptorSetInlineUniformBlocks;
  }
  get maxDescriptorSetUpdateAfterBindInlineUniformBlocks() {
    return this._maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
  }
  
};

VkPhysicalDeviceInlineUniformBlockPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceInlineUniformBlockPropertiesEXT = memoryLayouts.VkPhysicalDeviceInlineUniformBlockPropertiesEXT;
VkPhysicalDeviceInlineUniformBlockPropertiesEXT.byteLength = $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.byteLength;

VkPhysicalDeviceInlineUniformBlockPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.pNext.byteLength
  }),
  maxInlineUniformBlockSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.maxInlineUniformBlockSize.byteOffset,
    byteLength: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.maxInlineUniformBlockSize.byteLength
  }),
  maxPerStageDescriptorInlineUniformBlocks: Object.freeze({
    byteOffset: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.maxPerStageDescriptorInlineUniformBlocks.byteOffset,
    byteLength: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.maxPerStageDescriptorInlineUniformBlocks.byteLength
  }),
  maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: Object.freeze({
    byteOffset: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks.byteOffset,
    byteLength: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks.byteLength
  }),
  maxDescriptorSetInlineUniformBlocks: Object.freeze({
    byteOffset: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.maxDescriptorSetInlineUniformBlocks.byteOffset,
    byteLength: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.maxDescriptorSetInlineUniformBlocks.byteLength
  }),
  maxDescriptorSetUpdateAfterBindInlineUniformBlocks: Object.freeze({
    byteOffset: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.maxDescriptorSetUpdateAfterBindInlineUniformBlocks.byteOffset,
    byteLength: $VkPhysicalDeviceInlineUniformBlockPropertiesEXT.maxDescriptorSetUpdateAfterBindInlineUniformBlocks.byteLength
  }),
});
class VkWriteDescriptorSetInlineUniformBlockEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._dataSize = 0;
    this._pData = null;
    this.memoryBuffer = new ArrayBuffer(VkWriteDescriptorSetInlineUniformBlockEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dataSize !== void 0) this.dataSize = opts.dataSize;
      if (opts.pData !== void 0) this.pData = opts.pData;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkWriteDescriptorSetInlineUniformBlockEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get dataSize() {
    return this._dataSize;
  }
  set dataSize(value) {
    
this.memoryView.setUint32($VkWriteDescriptorSetInlineUniformBlockEXT.dataSize.byteOffset, value);
this._dataSize = value;
  }
  get pData() {
    return this._pData;
  }
  set pData(value) {
    
  }
  
};

VkWriteDescriptorSetInlineUniformBlockEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkWriteDescriptorSetInlineUniformBlockEXT = memoryLayouts.VkWriteDescriptorSetInlineUniformBlockEXT;
VkWriteDescriptorSetInlineUniformBlockEXT.byteLength = $VkWriteDescriptorSetInlineUniformBlockEXT.byteLength;

VkWriteDescriptorSetInlineUniformBlockEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkWriteDescriptorSetInlineUniformBlockEXT.sType.byteOffset,
    byteLength: $VkWriteDescriptorSetInlineUniformBlockEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkWriteDescriptorSetInlineUniformBlockEXT.pNext.byteOffset,
    byteLength: $VkWriteDescriptorSetInlineUniformBlockEXT.pNext.byteLength
  }),
  dataSize: Object.freeze({
    byteOffset: $VkWriteDescriptorSetInlineUniformBlockEXT.dataSize.byteOffset,
    byteLength: $VkWriteDescriptorSetInlineUniformBlockEXT.dataSize.byteLength
  }),
  pData: Object.freeze({
    byteOffset: $VkWriteDescriptorSetInlineUniformBlockEXT.pData.byteOffset,
    byteLength: $VkWriteDescriptorSetInlineUniformBlockEXT.pData.byteLength
  }),
});
class VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxInlineUniformBlockBindings = 0;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorPoolInlineUniformBlockCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.maxInlineUniformBlockBindings !== void 0) this.maxInlineUniformBlockBindings = opts.maxInlineUniformBlockBindings;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDescriptorPoolInlineUniformBlockCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxInlineUniformBlockBindings() {
    return this._maxInlineUniformBlockBindings;
  }
  set maxInlineUniformBlockBindings(value) {
    
this.memoryView.setUint32($VkDescriptorPoolInlineUniformBlockCreateInfoEXT.maxInlineUniformBlockBindings.byteOffset, value);
this._maxInlineUniformBlockBindings = value;
  }
  
};

VkDescriptorPoolInlineUniformBlockCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDescriptorPoolInlineUniformBlockCreateInfoEXT = memoryLayouts.VkDescriptorPoolInlineUniformBlockCreateInfoEXT;
VkDescriptorPoolInlineUniformBlockCreateInfoEXT.byteLength = $VkDescriptorPoolInlineUniformBlockCreateInfoEXT.byteLength;

VkDescriptorPoolInlineUniformBlockCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDescriptorPoolInlineUniformBlockCreateInfoEXT.sType.byteOffset,
    byteLength: $VkDescriptorPoolInlineUniformBlockCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDescriptorPoolInlineUniformBlockCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkDescriptorPoolInlineUniformBlockCreateInfoEXT.pNext.byteLength
  }),
  maxInlineUniformBlockBindings: Object.freeze({
    byteOffset: $VkDescriptorPoolInlineUniformBlockCreateInfoEXT.maxInlineUniformBlockBindings.byteOffset,
    byteLength: $VkDescriptorPoolInlineUniformBlockCreateInfoEXT.maxInlineUniformBlockBindings.byteLength
  }),
});
class VkPipelineCoverageModulationStateCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._coverageModulationMode = 0;
    this._coverageModulationTableEnable = 0;
    this._coverageModulationTableCount = 0;
    this._pCoverageModulationTable = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineCoverageModulationStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.coverageModulationMode !== void 0) this.coverageModulationMode = opts.coverageModulationMode;
      if (opts.coverageModulationTableEnable !== void 0) this.coverageModulationTableEnable = opts.coverageModulationTableEnable;
      if (opts.coverageModulationTableCount !== void 0) this.coverageModulationTableCount = opts.coverageModulationTableCount;
      if (opts.pCoverageModulationTable !== void 0) this.pCoverageModulationTable = opts.pCoverageModulationTable;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineCoverageModulationStateCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineCoverageModulationStateCreateInfoNV.flags.byteOffset, value);
this._flags = value;
  }
  get coverageModulationMode() {
    return this._coverageModulationMode;
  }
  set coverageModulationMode(value) {
    
this.memoryView.setInt32($VkPipelineCoverageModulationStateCreateInfoNV.coverageModulationMode.byteOffset, value);
this._coverageModulationMode = value;
  }
  get coverageModulationTableEnable() {
    return this._coverageModulationTableEnable;
  }
  set coverageModulationTableEnable(value) {
    
this.memoryView.setUint32($VkPipelineCoverageModulationStateCreateInfoNV.coverageModulationTableEnable.byteOffset, value);
this._coverageModulationTableEnable = value;
  }
  get coverageModulationTableCount() {
    return this._coverageModulationTableCount;
  }
  set coverageModulationTableCount(value) {
    
this.memoryView.setUint32($VkPipelineCoverageModulationStateCreateInfoNV.coverageModulationTableCount.byteOffset, value);
this._coverageModulationTableCount = value;
  }
  get pCoverageModulationTable() {
    return this._pCoverageModulationTable;
  }
  set pCoverageModulationTable(value) {
    
  }
  
};

VkPipelineCoverageModulationStateCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineCoverageModulationStateCreateInfoNV = memoryLayouts.VkPipelineCoverageModulationStateCreateInfoNV;
VkPipelineCoverageModulationStateCreateInfoNV.byteLength = $VkPipelineCoverageModulationStateCreateInfoNV.byteLength;

VkPipelineCoverageModulationStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineCoverageModulationStateCreateInfoNV.sType.byteOffset,
    byteLength: $VkPipelineCoverageModulationStateCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineCoverageModulationStateCreateInfoNV.pNext.byteOffset,
    byteLength: $VkPipelineCoverageModulationStateCreateInfoNV.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineCoverageModulationStateCreateInfoNV.flags.byteOffset,
    byteLength: $VkPipelineCoverageModulationStateCreateInfoNV.flags.byteLength
  }),
  coverageModulationMode: Object.freeze({
    byteOffset: $VkPipelineCoverageModulationStateCreateInfoNV.coverageModulationMode.byteOffset,
    byteLength: $VkPipelineCoverageModulationStateCreateInfoNV.coverageModulationMode.byteLength
  }),
  coverageModulationTableEnable: Object.freeze({
    byteOffset: $VkPipelineCoverageModulationStateCreateInfoNV.coverageModulationTableEnable.byteOffset,
    byteLength: $VkPipelineCoverageModulationStateCreateInfoNV.coverageModulationTableEnable.byteLength
  }),
  coverageModulationTableCount: Object.freeze({
    byteOffset: $VkPipelineCoverageModulationStateCreateInfoNV.coverageModulationTableCount.byteOffset,
    byteLength: $VkPipelineCoverageModulationStateCreateInfoNV.coverageModulationTableCount.byteLength
  }),
  pCoverageModulationTable: Object.freeze({
    byteOffset: $VkPipelineCoverageModulationStateCreateInfoNV.pCoverageModulationTable.byteOffset,
    byteLength: $VkPipelineCoverageModulationStateCreateInfoNV.pCoverageModulationTable.byteLength
  }),
});
class VkImageFormatListCreateInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._viewFormatCount = 0;
    this._pViewFormats = null;
    this.memoryBuffer = new ArrayBuffer(VkImageFormatListCreateInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.viewFormatCount !== void 0) this.viewFormatCount = opts.viewFormatCount;
      if (opts.pViewFormats !== void 0) this.pViewFormats = opts.pViewFormats;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageFormatListCreateInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get viewFormatCount() {
    return this._viewFormatCount;
  }
  set viewFormatCount(value) {
    
this.memoryView.setUint32($VkImageFormatListCreateInfoKHR.viewFormatCount.byteOffset, value);
this._viewFormatCount = value;
  }
  get pViewFormats() {
    return this._pViewFormats;
  }
  set pViewFormats(value) {
    
  }
  
};

VkImageFormatListCreateInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImageFormatListCreateInfoKHR = memoryLayouts.VkImageFormatListCreateInfoKHR;
VkImageFormatListCreateInfoKHR.byteLength = $VkImageFormatListCreateInfoKHR.byteLength;

VkImageFormatListCreateInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageFormatListCreateInfoKHR.sType.byteOffset,
    byteLength: $VkImageFormatListCreateInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageFormatListCreateInfoKHR.pNext.byteOffset,
    byteLength: $VkImageFormatListCreateInfoKHR.pNext.byteLength
  }),
  viewFormatCount: Object.freeze({
    byteOffset: $VkImageFormatListCreateInfoKHR.viewFormatCount.byteOffset,
    byteLength: $VkImageFormatListCreateInfoKHR.viewFormatCount.byteLength
  }),
  pViewFormats: Object.freeze({
    byteOffset: $VkImageFormatListCreateInfoKHR.pViewFormats.byteOffset,
    byteLength: $VkImageFormatListCreateInfoKHR.pViewFormats.byteLength
  }),
});
class VkValidationCacheCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._initialDataSize = 0;
    this._pInitialData = null;
    this.memoryBuffer = new ArrayBuffer(VkValidationCacheCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.initialDataSize !== void 0) this.initialDataSize = opts.initialDataSize;
      if (opts.pInitialData !== void 0) this.pInitialData = opts.pInitialData;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkValidationCacheCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkValidationCacheCreateInfoEXT.flags.byteOffset, value);
this._flags = value;
  }
  get initialDataSize() {
    return this._initialDataSize;
  }
  set initialDataSize(value) {
    
this.memoryView.setBigInt64($VkValidationCacheCreateInfoEXT.initialDataSize.byteOffset, value);
this._initialDataSize = value;
  }
  get pInitialData() {
    return this._pInitialData;
  }
  set pInitialData(value) {
    
  }
  
};

VkValidationCacheCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkValidationCacheCreateInfoEXT = memoryLayouts.VkValidationCacheCreateInfoEXT;
VkValidationCacheCreateInfoEXT.byteLength = $VkValidationCacheCreateInfoEXT.byteLength;

VkValidationCacheCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkValidationCacheCreateInfoEXT.sType.byteOffset,
    byteLength: $VkValidationCacheCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkValidationCacheCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkValidationCacheCreateInfoEXT.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkValidationCacheCreateInfoEXT.flags.byteOffset,
    byteLength: $VkValidationCacheCreateInfoEXT.flags.byteLength
  }),
  initialDataSize: Object.freeze({
    byteOffset: $VkValidationCacheCreateInfoEXT.initialDataSize.byteOffset,
    byteLength: $VkValidationCacheCreateInfoEXT.initialDataSize.byteLength
  }),
  pInitialData: Object.freeze({
    byteOffset: $VkValidationCacheCreateInfoEXT.pInitialData.byteOffset,
    byteLength: $VkValidationCacheCreateInfoEXT.pInitialData.byteLength
  }),
});
class VkShaderModuleValidationCacheCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._validationCache = null;
    this.memoryBuffer = new ArrayBuffer(VkShaderModuleValidationCacheCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.validationCache !== void 0) this.validationCache = opts.validationCache;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkShaderModuleValidationCacheCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get validationCache() {
    return this._validationCache;
  }
  set validationCache(value) {
    String
  }
  
};

VkShaderModuleValidationCacheCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkShaderModuleValidationCacheCreateInfoEXT = memoryLayouts.VkShaderModuleValidationCacheCreateInfoEXT;
VkShaderModuleValidationCacheCreateInfoEXT.byteLength = $VkShaderModuleValidationCacheCreateInfoEXT.byteLength;

VkShaderModuleValidationCacheCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkShaderModuleValidationCacheCreateInfoEXT.sType.byteOffset,
    byteLength: $VkShaderModuleValidationCacheCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkShaderModuleValidationCacheCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkShaderModuleValidationCacheCreateInfoEXT.pNext.byteLength
  }),
  validationCache: Object.freeze({
    byteOffset: $VkShaderModuleValidationCacheCreateInfoEXT.validationCache.byteOffset,
    byteLength: $VkShaderModuleValidationCacheCreateInfoEXT.validationCache.byteLength
  }),
});
class VkPhysicalDeviceMaintenance3Properties {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxPerSetDescriptors = 0;
    this._maxMemoryAllocationSize = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMaintenance3Properties.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceMaintenance3Properties.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxPerSetDescriptors() {
    return this._maxPerSetDescriptors;
  }
  get maxMemoryAllocationSize() {
    return this._maxMemoryAllocationSize;
  }
  
};

VkPhysicalDeviceMaintenance3Properties.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceMaintenance3Properties = memoryLayouts.VkPhysicalDeviceMaintenance3Properties;
VkPhysicalDeviceMaintenance3Properties.byteLength = $VkPhysicalDeviceMaintenance3Properties.byteLength;

VkPhysicalDeviceMaintenance3Properties.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceMaintenance3Properties.sType.byteOffset,
    byteLength: $VkPhysicalDeviceMaintenance3Properties.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceMaintenance3Properties.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceMaintenance3Properties.pNext.byteLength
  }),
  maxPerSetDescriptors: Object.freeze({
    byteOffset: $VkPhysicalDeviceMaintenance3Properties.maxPerSetDescriptors.byteOffset,
    byteLength: $VkPhysicalDeviceMaintenance3Properties.maxPerSetDescriptors.byteLength
  }),
  maxMemoryAllocationSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceMaintenance3Properties.maxMemoryAllocationSize.byteOffset,
    byteLength: $VkPhysicalDeviceMaintenance3Properties.maxMemoryAllocationSize.byteLength
  }),
});
class VkPhysicalDeviceMaintenance3PropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxPerSetDescriptors = 0;
    this._maxMemoryAllocationSize = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMaintenance3PropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceMaintenance3PropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxPerSetDescriptors() {
    return this._maxPerSetDescriptors;
  }
  get maxMemoryAllocationSize() {
    return this._maxMemoryAllocationSize;
  }
  
};

VkPhysicalDeviceMaintenance3PropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceMaintenance3PropertiesKHR = memoryLayouts.VkPhysicalDeviceMaintenance3PropertiesKHR;
VkPhysicalDeviceMaintenance3PropertiesKHR.byteLength = $VkPhysicalDeviceMaintenance3PropertiesKHR.byteLength;

VkPhysicalDeviceMaintenance3PropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceMaintenance3PropertiesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceMaintenance3PropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceMaintenance3PropertiesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceMaintenance3PropertiesKHR.pNext.byteLength
  }),
  maxPerSetDescriptors: Object.freeze({
    byteOffset: $VkPhysicalDeviceMaintenance3PropertiesKHR.maxPerSetDescriptors.byteOffset,
    byteLength: $VkPhysicalDeviceMaintenance3PropertiesKHR.maxPerSetDescriptors.byteLength
  }),
  maxMemoryAllocationSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceMaintenance3PropertiesKHR.maxMemoryAllocationSize.byteOffset,
    byteLength: $VkPhysicalDeviceMaintenance3PropertiesKHR.maxMemoryAllocationSize.byteLength
  }),
});
class VkDescriptorSetLayoutSupport {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._supported = 0;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetLayoutSupport.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDescriptorSetLayoutSupport.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get supported() {
    return this._supported;
  }
  
};

VkDescriptorSetLayoutSupport.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDescriptorSetLayoutSupport = memoryLayouts.VkDescriptorSetLayoutSupport;
VkDescriptorSetLayoutSupport.byteLength = $VkDescriptorSetLayoutSupport.byteLength;

VkDescriptorSetLayoutSupport.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutSupport.sType.byteOffset,
    byteLength: $VkDescriptorSetLayoutSupport.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutSupport.pNext.byteOffset,
    byteLength: $VkDescriptorSetLayoutSupport.pNext.byteLength
  }),
  supported: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutSupport.supported.byteOffset,
    byteLength: $VkDescriptorSetLayoutSupport.supported.byteLength
  }),
});
class VkDescriptorSetLayoutSupportKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._supported = 0;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetLayoutSupportKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDescriptorSetLayoutSupportKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get supported() {
    return this._supported;
  }
  
};

VkDescriptorSetLayoutSupportKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDescriptorSetLayoutSupportKHR = memoryLayouts.VkDescriptorSetLayoutSupportKHR;
VkDescriptorSetLayoutSupportKHR.byteLength = $VkDescriptorSetLayoutSupportKHR.byteLength;

VkDescriptorSetLayoutSupportKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutSupportKHR.sType.byteOffset,
    byteLength: $VkDescriptorSetLayoutSupportKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutSupportKHR.pNext.byteOffset,
    byteLength: $VkDescriptorSetLayoutSupportKHR.pNext.byteLength
  }),
  supported: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutSupportKHR.supported.byteOffset,
    byteLength: $VkDescriptorSetLayoutSupportKHR.supported.byteLength
  }),
});
class VkPhysicalDeviceShaderDrawParameterFeatures {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._shaderDrawParameters = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceShaderDrawParameterFeatures.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderDrawParameters !== void 0) this.shaderDrawParameters = opts.shaderDrawParameters;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceShaderDrawParameterFeatures.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get shaderDrawParameters() {
    return this._shaderDrawParameters;
  }
  set shaderDrawParameters(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceShaderDrawParameterFeatures.shaderDrawParameters.byteOffset, value);
this._shaderDrawParameters = value;
  }
  
};

VkPhysicalDeviceShaderDrawParameterFeatures.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceShaderDrawParameterFeatures = memoryLayouts.VkPhysicalDeviceShaderDrawParameterFeatures;
VkPhysicalDeviceShaderDrawParameterFeatures.byteLength = $VkPhysicalDeviceShaderDrawParameterFeatures.byteLength;

VkPhysicalDeviceShaderDrawParameterFeatures.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderDrawParameterFeatures.sType.byteOffset,
    byteLength: $VkPhysicalDeviceShaderDrawParameterFeatures.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderDrawParameterFeatures.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceShaderDrawParameterFeatures.pNext.byteLength
  }),
  shaderDrawParameters: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderDrawParameterFeatures.shaderDrawParameters.byteOffset,
    byteLength: $VkPhysicalDeviceShaderDrawParameterFeatures.shaderDrawParameters.byteLength
  }),
});
class VkPhysicalDeviceFloat16Int8FeaturesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._shaderFloat16 = 0;
    this._shaderInt8 = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFloat16Int8FeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderFloat16 !== void 0) this.shaderFloat16 = opts.shaderFloat16;
      if (opts.shaderInt8 !== void 0) this.shaderInt8 = opts.shaderInt8;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceFloat16Int8FeaturesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get shaderFloat16() {
    return this._shaderFloat16;
  }
  set shaderFloat16(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFloat16Int8FeaturesKHR.shaderFloat16.byteOffset, value);
this._shaderFloat16 = value;
  }
  get shaderInt8() {
    return this._shaderInt8;
  }
  set shaderInt8(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFloat16Int8FeaturesKHR.shaderInt8.byteOffset, value);
this._shaderInt8 = value;
  }
  
};

VkPhysicalDeviceFloat16Int8FeaturesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceFloat16Int8FeaturesKHR = memoryLayouts.VkPhysicalDeviceFloat16Int8FeaturesKHR;
VkPhysicalDeviceFloat16Int8FeaturesKHR.byteLength = $VkPhysicalDeviceFloat16Int8FeaturesKHR.byteLength;

VkPhysicalDeviceFloat16Int8FeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloat16Int8FeaturesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceFloat16Int8FeaturesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloat16Int8FeaturesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceFloat16Int8FeaturesKHR.pNext.byteLength
  }),
  shaderFloat16: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloat16Int8FeaturesKHR.shaderFloat16.byteOffset,
    byteLength: $VkPhysicalDeviceFloat16Int8FeaturesKHR.shaderFloat16.byteLength
  }),
  shaderInt8: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloat16Int8FeaturesKHR.shaderInt8.byteOffset,
    byteLength: $VkPhysicalDeviceFloat16Int8FeaturesKHR.shaderInt8.byteLength
  }),
});
class VkPhysicalDeviceFloatControlsPropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._separateDenormSettings = 0;
    this._separateRoundingModeSettings = 0;
    this._shaderSignedZeroInfNanPreserveFloat16 = 0;
    this._shaderSignedZeroInfNanPreserveFloat32 = 0;
    this._shaderSignedZeroInfNanPreserveFloat64 = 0;
    this._shaderDenormPreserveFloat16 = 0;
    this._shaderDenormPreserveFloat32 = 0;
    this._shaderDenormPreserveFloat64 = 0;
    this._shaderDenormFlushToZeroFloat16 = 0;
    this._shaderDenormFlushToZeroFloat32 = 0;
    this._shaderDenormFlushToZeroFloat64 = 0;
    this._shaderRoundingModeRTEFloat16 = 0;
    this._shaderRoundingModeRTEFloat32 = 0;
    this._shaderRoundingModeRTEFloat64 = 0;
    this._shaderRoundingModeRTZFloat16 = 0;
    this._shaderRoundingModeRTZFloat32 = 0;
    this._shaderRoundingModeRTZFloat64 = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFloatControlsPropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceFloatControlsPropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get separateDenormSettings() {
    return this._separateDenormSettings;
  }
  get separateRoundingModeSettings() {
    return this._separateRoundingModeSettings;
  }
  get shaderSignedZeroInfNanPreserveFloat16() {
    return this._shaderSignedZeroInfNanPreserveFloat16;
  }
  get shaderSignedZeroInfNanPreserveFloat32() {
    return this._shaderSignedZeroInfNanPreserveFloat32;
  }
  get shaderSignedZeroInfNanPreserveFloat64() {
    return this._shaderSignedZeroInfNanPreserveFloat64;
  }
  get shaderDenormPreserveFloat16() {
    return this._shaderDenormPreserveFloat16;
  }
  get shaderDenormPreserveFloat32() {
    return this._shaderDenormPreserveFloat32;
  }
  get shaderDenormPreserveFloat64() {
    return this._shaderDenormPreserveFloat64;
  }
  get shaderDenormFlushToZeroFloat16() {
    return this._shaderDenormFlushToZeroFloat16;
  }
  get shaderDenormFlushToZeroFloat32() {
    return this._shaderDenormFlushToZeroFloat32;
  }
  get shaderDenormFlushToZeroFloat64() {
    return this._shaderDenormFlushToZeroFloat64;
  }
  get shaderRoundingModeRTEFloat16() {
    return this._shaderRoundingModeRTEFloat16;
  }
  get shaderRoundingModeRTEFloat32() {
    return this._shaderRoundingModeRTEFloat32;
  }
  get shaderRoundingModeRTEFloat64() {
    return this._shaderRoundingModeRTEFloat64;
  }
  get shaderRoundingModeRTZFloat16() {
    return this._shaderRoundingModeRTZFloat16;
  }
  get shaderRoundingModeRTZFloat32() {
    return this._shaderRoundingModeRTZFloat32;
  }
  get shaderRoundingModeRTZFloat64() {
    return this._shaderRoundingModeRTZFloat64;
  }
  
};

VkPhysicalDeviceFloatControlsPropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceFloatControlsPropertiesKHR = memoryLayouts.VkPhysicalDeviceFloatControlsPropertiesKHR;
VkPhysicalDeviceFloatControlsPropertiesKHR.byteLength = $VkPhysicalDeviceFloatControlsPropertiesKHR.byteLength;

VkPhysicalDeviceFloatControlsPropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.pNext.byteLength
  }),
  separateDenormSettings: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.separateDenormSettings.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.separateDenormSettings.byteLength
  }),
  separateRoundingModeSettings: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.separateRoundingModeSettings.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.separateRoundingModeSettings.byteLength
  }),
  shaderSignedZeroInfNanPreserveFloat16: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderSignedZeroInfNanPreserveFloat16.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderSignedZeroInfNanPreserveFloat16.byteLength
  }),
  shaderSignedZeroInfNanPreserveFloat32: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderSignedZeroInfNanPreserveFloat32.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderSignedZeroInfNanPreserveFloat32.byteLength
  }),
  shaderSignedZeroInfNanPreserveFloat64: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderSignedZeroInfNanPreserveFloat64.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderSignedZeroInfNanPreserveFloat64.byteLength
  }),
  shaderDenormPreserveFloat16: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormPreserveFloat16.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormPreserveFloat16.byteLength
  }),
  shaderDenormPreserveFloat32: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormPreserveFloat32.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormPreserveFloat32.byteLength
  }),
  shaderDenormPreserveFloat64: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormPreserveFloat64.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormPreserveFloat64.byteLength
  }),
  shaderDenormFlushToZeroFloat16: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormFlushToZeroFloat16.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormFlushToZeroFloat16.byteLength
  }),
  shaderDenormFlushToZeroFloat32: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormFlushToZeroFloat32.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormFlushToZeroFloat32.byteLength
  }),
  shaderDenormFlushToZeroFloat64: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormFlushToZeroFloat64.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderDenormFlushToZeroFloat64.byteLength
  }),
  shaderRoundingModeRTEFloat16: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTEFloat16.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTEFloat16.byteLength
  }),
  shaderRoundingModeRTEFloat32: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTEFloat32.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTEFloat32.byteLength
  }),
  shaderRoundingModeRTEFloat64: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTEFloat64.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTEFloat64.byteLength
  }),
  shaderRoundingModeRTZFloat16: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTZFloat16.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTZFloat16.byteLength
  }),
  shaderRoundingModeRTZFloat32: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTZFloat32.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTZFloat32.byteLength
  }),
  shaderRoundingModeRTZFloat64: Object.freeze({
    byteOffset: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTZFloat64.byteOffset,
    byteLength: $VkPhysicalDeviceFloatControlsPropertiesKHR.shaderRoundingModeRTZFloat64.byteLength
  }),
});
class VkShaderResourceUsageAMD {
  constructor(opts) {
    this._numUsedVgprs = 0;
    this._numUsedSgprs = 0;
    this._ldsSizePerLocalWorkGroup = 0;
    this._ldsUsageSizeInBytes = 0;
    this._scratchMemUsageInBytes = 0;
    this.memoryBuffer = new ArrayBuffer(VkShaderResourceUsageAMD.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get numUsedVgprs() {
    return this._numUsedVgprs;
  }
  get numUsedSgprs() {
    return this._numUsedSgprs;
  }
  get ldsSizePerLocalWorkGroup() {
    return this._ldsSizePerLocalWorkGroup;
  }
  get ldsUsageSizeInBytes() {
    return this._ldsUsageSizeInBytes;
  }
  get scratchMemUsageInBytes() {
    return this._scratchMemUsageInBytes;
  }
  
};

VkShaderResourceUsageAMD.prototype.flush = function flush() {
  
};

const $VkShaderResourceUsageAMD = memoryLayouts.VkShaderResourceUsageAMD;
VkShaderResourceUsageAMD.byteLength = $VkShaderResourceUsageAMD.byteLength;

VkShaderResourceUsageAMD.memoryLayout = Object.freeze({
  numUsedVgprs: Object.freeze({
    byteOffset: $VkShaderResourceUsageAMD.numUsedVgprs.byteOffset,
    byteLength: $VkShaderResourceUsageAMD.numUsedVgprs.byteLength
  }),
  numUsedSgprs: Object.freeze({
    byteOffset: $VkShaderResourceUsageAMD.numUsedSgprs.byteOffset,
    byteLength: $VkShaderResourceUsageAMD.numUsedSgprs.byteLength
  }),
  ldsSizePerLocalWorkGroup: Object.freeze({
    byteOffset: $VkShaderResourceUsageAMD.ldsSizePerLocalWorkGroup.byteOffset,
    byteLength: $VkShaderResourceUsageAMD.ldsSizePerLocalWorkGroup.byteLength
  }),
  ldsUsageSizeInBytes: Object.freeze({
    byteOffset: $VkShaderResourceUsageAMD.ldsUsageSizeInBytes.byteOffset,
    byteLength: $VkShaderResourceUsageAMD.ldsUsageSizeInBytes.byteLength
  }),
  scratchMemUsageInBytes: Object.freeze({
    byteOffset: $VkShaderResourceUsageAMD.scratchMemUsageInBytes.byteOffset,
    byteLength: $VkShaderResourceUsageAMD.scratchMemUsageInBytes.byteLength
  }),
});
class VkShaderStatisticsInfoAMD {
  constructor(opts) {
    this._shaderStageMask = 0;
    this._resourceUsage = null;
    this._numPhysicalVgprs = 0;
    this._numPhysicalSgprs = 0;
    this._numAvailableVgprs = 0;
    this._numAvailableSgprs = 0;
    this._computeWorkGroupSize = null;
    this.memoryBuffer = new ArrayBuffer(VkShaderStatisticsInfoAMD.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get shaderStageMask() {
    return this._shaderStageMask;
  }
  get resourceUsage() {
    return this._resourceUsage;
  }
  get numPhysicalVgprs() {
    return this._numPhysicalVgprs;
  }
  get numPhysicalSgprs() {
    return this._numPhysicalSgprs;
  }
  get numAvailableVgprs() {
    return this._numAvailableVgprs;
  }
  get numAvailableSgprs() {
    return this._numAvailableSgprs;
  }
  get computeWorkGroupSize() {
    return this._computeWorkGroupSize;
  }
  
};

VkShaderStatisticsInfoAMD.prototype.flush = function flush() {
  
  if (this.resourceUsage !== null) { }
  
  if (this.computeWorkGroupSize !== null) { }
  
};

const $VkShaderStatisticsInfoAMD = memoryLayouts.VkShaderStatisticsInfoAMD;
VkShaderStatisticsInfoAMD.byteLength = $VkShaderStatisticsInfoAMD.byteLength;

VkShaderStatisticsInfoAMD.memoryLayout = Object.freeze({
  shaderStageMask: Object.freeze({
    byteOffset: $VkShaderStatisticsInfoAMD.shaderStageMask.byteOffset,
    byteLength: $VkShaderStatisticsInfoAMD.shaderStageMask.byteLength
  }),
  resourceUsage: Object.freeze({
    byteOffset: $VkShaderStatisticsInfoAMD.resourceUsage.byteOffset,
    byteLength: $VkShaderStatisticsInfoAMD.resourceUsage.byteLength
  }),
  numPhysicalVgprs: Object.freeze({
    byteOffset: $VkShaderStatisticsInfoAMD.numPhysicalVgprs.byteOffset,
    byteLength: $VkShaderStatisticsInfoAMD.numPhysicalVgprs.byteLength
  }),
  numPhysicalSgprs: Object.freeze({
    byteOffset: $VkShaderStatisticsInfoAMD.numPhysicalSgprs.byteOffset,
    byteLength: $VkShaderStatisticsInfoAMD.numPhysicalSgprs.byteLength
  }),
  numAvailableVgprs: Object.freeze({
    byteOffset: $VkShaderStatisticsInfoAMD.numAvailableVgprs.byteOffset,
    byteLength: $VkShaderStatisticsInfoAMD.numAvailableVgprs.byteLength
  }),
  numAvailableSgprs: Object.freeze({
    byteOffset: $VkShaderStatisticsInfoAMD.numAvailableSgprs.byteOffset,
    byteLength: $VkShaderStatisticsInfoAMD.numAvailableSgprs.byteLength
  }),
  computeWorkGroupSize: Object.freeze({
    byteOffset: $VkShaderStatisticsInfoAMD.computeWorkGroupSize.byteOffset,
    byteLength: $VkShaderStatisticsInfoAMD.computeWorkGroupSize.byteLength
  }),
});
class VkDeviceQueueGlobalPriorityCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._globalPriority = 0;
    this.memoryBuffer = new ArrayBuffer(VkDeviceQueueGlobalPriorityCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.globalPriority !== void 0) this.globalPriority = opts.globalPriority;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceQueueGlobalPriorityCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get globalPriority() {
    return this._globalPriority;
  }
  set globalPriority(value) {
    
this.memoryView.setInt32($VkDeviceQueueGlobalPriorityCreateInfoEXT.globalPriority.byteOffset, value);
this._globalPriority = value;
  }
  
};

VkDeviceQueueGlobalPriorityCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceQueueGlobalPriorityCreateInfoEXT = memoryLayouts.VkDeviceQueueGlobalPriorityCreateInfoEXT;
VkDeviceQueueGlobalPriorityCreateInfoEXT.byteLength = $VkDeviceQueueGlobalPriorityCreateInfoEXT.byteLength;

VkDeviceQueueGlobalPriorityCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceQueueGlobalPriorityCreateInfoEXT.sType.byteOffset,
    byteLength: $VkDeviceQueueGlobalPriorityCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceQueueGlobalPriorityCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkDeviceQueueGlobalPriorityCreateInfoEXT.pNext.byteLength
  }),
  globalPriority: Object.freeze({
    byteOffset: $VkDeviceQueueGlobalPriorityCreateInfoEXT.globalPriority.byteOffset,
    byteLength: $VkDeviceQueueGlobalPriorityCreateInfoEXT.globalPriority.byteLength
  }),
});
class VkDebugUtilsObjectNameInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._objectType = 0;
    this._objectHandle = 0;
    this._pObjectName = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugUtilsObjectNameInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.objectHandle !== void 0) this.objectHandle = opts.objectHandle;
      if (opts.pObjectName !== void 0) this.pObjectName = opts.pObjectName;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDebugUtilsObjectNameInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get objectType() {
    return this._objectType;
  }
  set objectType(value) {
    
this.memoryView.setInt32($VkDebugUtilsObjectNameInfoEXT.objectType.byteOffset, value);
this._objectType = value;
  }
  get objectHandle() {
    return this._objectHandle;
  }
  set objectHandle(value) {
    
this.memoryView.setBigUint64($VkDebugUtilsObjectNameInfoEXT.objectHandle.byteOffset, value);
this._objectHandle = value;
  }
  get pObjectName() {
    return this._pObjectName;
  }
  set pObjectName(value) {
    String
  }
  
};

VkDebugUtilsObjectNameInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDebugUtilsObjectNameInfoEXT = memoryLayouts.VkDebugUtilsObjectNameInfoEXT;
VkDebugUtilsObjectNameInfoEXT.byteLength = $VkDebugUtilsObjectNameInfoEXT.byteLength;

VkDebugUtilsObjectNameInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDebugUtilsObjectNameInfoEXT.sType.byteOffset,
    byteLength: $VkDebugUtilsObjectNameInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDebugUtilsObjectNameInfoEXT.pNext.byteOffset,
    byteLength: $VkDebugUtilsObjectNameInfoEXT.pNext.byteLength
  }),
  objectType: Object.freeze({
    byteOffset: $VkDebugUtilsObjectNameInfoEXT.objectType.byteOffset,
    byteLength: $VkDebugUtilsObjectNameInfoEXT.objectType.byteLength
  }),
  objectHandle: Object.freeze({
    byteOffset: $VkDebugUtilsObjectNameInfoEXT.objectHandle.byteOffset,
    byteLength: $VkDebugUtilsObjectNameInfoEXT.objectHandle.byteLength
  }),
  pObjectName: Object.freeze({
    byteOffset: $VkDebugUtilsObjectNameInfoEXT.pObjectName.byteOffset,
    byteLength: $VkDebugUtilsObjectNameInfoEXT.pObjectName.byteLength
  }),
});
class VkDebugUtilsObjectTagInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._objectType = 0;
    this._objectHandle = 0;
    this._tagName = 0;
    this._tagSize = 0;
    this._pTag = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugUtilsObjectTagInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.objectType !== void 0) this.objectType = opts.objectType;
      if (opts.objectHandle !== void 0) this.objectHandle = opts.objectHandle;
      if (opts.tagName !== void 0) this.tagName = opts.tagName;
      if (opts.tagSize !== void 0) this.tagSize = opts.tagSize;
      if (opts.pTag !== void 0) this.pTag = opts.pTag;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDebugUtilsObjectTagInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get objectType() {
    return this._objectType;
  }
  set objectType(value) {
    
this.memoryView.setInt32($VkDebugUtilsObjectTagInfoEXT.objectType.byteOffset, value);
this._objectType = value;
  }
  get objectHandle() {
    return this._objectHandle;
  }
  set objectHandle(value) {
    
this.memoryView.setBigUint64($VkDebugUtilsObjectTagInfoEXT.objectHandle.byteOffset, value);
this._objectHandle = value;
  }
  get tagName() {
    return this._tagName;
  }
  set tagName(value) {
    
this.memoryView.setBigUint64($VkDebugUtilsObjectTagInfoEXT.tagName.byteOffset, value);
this._tagName = value;
  }
  get tagSize() {
    return this._tagSize;
  }
  set tagSize(value) {
    
this.memoryView.setBigInt64($VkDebugUtilsObjectTagInfoEXT.tagSize.byteOffset, value);
this._tagSize = value;
  }
  get pTag() {
    return this._pTag;
  }
  set pTag(value) {
    
  }
  
};

VkDebugUtilsObjectTagInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDebugUtilsObjectTagInfoEXT = memoryLayouts.VkDebugUtilsObjectTagInfoEXT;
VkDebugUtilsObjectTagInfoEXT.byteLength = $VkDebugUtilsObjectTagInfoEXT.byteLength;

VkDebugUtilsObjectTagInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDebugUtilsObjectTagInfoEXT.sType.byteOffset,
    byteLength: $VkDebugUtilsObjectTagInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDebugUtilsObjectTagInfoEXT.pNext.byteOffset,
    byteLength: $VkDebugUtilsObjectTagInfoEXT.pNext.byteLength
  }),
  objectType: Object.freeze({
    byteOffset: $VkDebugUtilsObjectTagInfoEXT.objectType.byteOffset,
    byteLength: $VkDebugUtilsObjectTagInfoEXT.objectType.byteLength
  }),
  objectHandle: Object.freeze({
    byteOffset: $VkDebugUtilsObjectTagInfoEXT.objectHandle.byteOffset,
    byteLength: $VkDebugUtilsObjectTagInfoEXT.objectHandle.byteLength
  }),
  tagName: Object.freeze({
    byteOffset: $VkDebugUtilsObjectTagInfoEXT.tagName.byteOffset,
    byteLength: $VkDebugUtilsObjectTagInfoEXT.tagName.byteLength
  }),
  tagSize: Object.freeze({
    byteOffset: $VkDebugUtilsObjectTagInfoEXT.tagSize.byteOffset,
    byteLength: $VkDebugUtilsObjectTagInfoEXT.tagSize.byteLength
  }),
  pTag: Object.freeze({
    byteOffset: $VkDebugUtilsObjectTagInfoEXT.pTag.byteOffset,
    byteLength: $VkDebugUtilsObjectTagInfoEXT.pTag.byteLength
  }),
});
class VkDebugUtilsLabelEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._pLabelName = null;
    this._color = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugUtilsLabelEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pLabelName !== void 0) this.pLabelName = opts.pLabelName;
      if (opts.color !== void 0) this.color = opts.color;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDebugUtilsLabelEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get pLabelName() {
    return this._pLabelName;
  }
  set pLabelName(value) {
    String
  }
  get color() {
    return this._color;
  }
  set color(value) {
    
  }
  
};

VkDebugUtilsLabelEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.color !== null) { }
  
};

const $VkDebugUtilsLabelEXT = memoryLayouts.VkDebugUtilsLabelEXT;
VkDebugUtilsLabelEXT.byteLength = $VkDebugUtilsLabelEXT.byteLength;

VkDebugUtilsLabelEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDebugUtilsLabelEXT.sType.byteOffset,
    byteLength: $VkDebugUtilsLabelEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDebugUtilsLabelEXT.pNext.byteOffset,
    byteLength: $VkDebugUtilsLabelEXT.pNext.byteLength
  }),
  pLabelName: Object.freeze({
    byteOffset: $VkDebugUtilsLabelEXT.pLabelName.byteOffset,
    byteLength: $VkDebugUtilsLabelEXT.pLabelName.byteLength
  }),
  color: Object.freeze({
    byteOffset: $VkDebugUtilsLabelEXT.color.byteOffset,
    byteLength: $VkDebugUtilsLabelEXT.color.byteLength
  }),
});
class VkDebugUtilsMessengerCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._messageSeverity = 0;
    this._messageType = 0;
    this._pUserData = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugUtilsMessengerCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.messageSeverity !== void 0) this.messageSeverity = opts.messageSeverity;
      if (opts.messageType !== void 0) this.messageType = opts.messageType;
      if (opts.pUserData !== void 0) this.pUserData = opts.pUserData;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDebugUtilsMessengerCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkDebugUtilsMessengerCreateInfoEXT.flags.byteOffset, value);
this._flags = value;
  }
  get messageSeverity() {
    return this._messageSeverity;
  }
  set messageSeverity(value) {
    
this.memoryView.setInt32($VkDebugUtilsMessengerCreateInfoEXT.messageSeverity.byteOffset, value);
this._messageSeverity = value;
  }
  get messageType() {
    return this._messageType;
  }
  set messageType(value) {
    
this.memoryView.setInt32($VkDebugUtilsMessengerCreateInfoEXT.messageType.byteOffset, value);
this._messageType = value;
  }
  get pUserData() {
    return this._pUserData;
  }
  set pUserData(value) {
    
  }
  
};

VkDebugUtilsMessengerCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDebugUtilsMessengerCreateInfoEXT = memoryLayouts.VkDebugUtilsMessengerCreateInfoEXT;
VkDebugUtilsMessengerCreateInfoEXT.byteLength = $VkDebugUtilsMessengerCreateInfoEXT.byteLength;

VkDebugUtilsMessengerCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCreateInfoEXT.sType.byteOffset,
    byteLength: $VkDebugUtilsMessengerCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkDebugUtilsMessengerCreateInfoEXT.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCreateInfoEXT.flags.byteOffset,
    byteLength: $VkDebugUtilsMessengerCreateInfoEXT.flags.byteLength
  }),
  messageSeverity: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCreateInfoEXT.messageSeverity.byteOffset,
    byteLength: $VkDebugUtilsMessengerCreateInfoEXT.messageSeverity.byteLength
  }),
  messageType: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCreateInfoEXT.messageType.byteOffset,
    byteLength: $VkDebugUtilsMessengerCreateInfoEXT.messageType.byteLength
  }),
  pUserData: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCreateInfoEXT.pUserData.byteOffset,
    byteLength: $VkDebugUtilsMessengerCreateInfoEXT.pUserData.byteLength
  }),
});
class VkDebugUtilsMessengerCallbackDataEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._pMessageIdName = null;
    this._messageIdNumber = 0;
    this._pMessage = null;
    this._queueLabelCount = 0;
    this._pQueueLabels = null;
    this._cmdBufLabelCount = 0;
    this._pCmdBufLabels = null;
    this._objectCount = 0;
    this._pObjects = null;
    this.memoryBuffer = new ArrayBuffer(VkDebugUtilsMessengerCallbackDataEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pMessageIdName !== void 0) this.pMessageIdName = opts.pMessageIdName;
      if (opts.messageIdNumber !== void 0) this.messageIdNumber = opts.messageIdNumber;
      if (opts.pMessage !== void 0) this.pMessage = opts.pMessage;
      if (opts.queueLabelCount !== void 0) this.queueLabelCount = opts.queueLabelCount;
      if (opts.pQueueLabels !== void 0) this.pQueueLabels = opts.pQueueLabels;
      if (opts.cmdBufLabelCount !== void 0) this.cmdBufLabelCount = opts.cmdBufLabelCount;
      if (opts.pCmdBufLabels !== void 0) this.pCmdBufLabels = opts.pCmdBufLabels;
      if (opts.objectCount !== void 0) this.objectCount = opts.objectCount;
      if (opts.pObjects !== void 0) this.pObjects = opts.pObjects;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDebugUtilsMessengerCallbackDataEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkDebugUtilsMessengerCallbackDataEXT.flags.byteOffset, value);
this._flags = value;
  }
  get pMessageIdName() {
    return this._pMessageIdName;
  }
  set pMessageIdName(value) {
    String
  }
  get messageIdNumber() {
    return this._messageIdNumber;
  }
  set messageIdNumber(value) {
    
this.memoryView.setInt32($VkDebugUtilsMessengerCallbackDataEXT.messageIdNumber.byteOffset, value);
this._messageIdNumber = value;
  }
  get pMessage() {
    return this._pMessage;
  }
  set pMessage(value) {
    String
  }
  get queueLabelCount() {
    return this._queueLabelCount;
  }
  set queueLabelCount(value) {
    
this.memoryView.setUint32($VkDebugUtilsMessengerCallbackDataEXT.queueLabelCount.byteOffset, value);
this._queueLabelCount = value;
  }
  get pQueueLabels() {
    return this._pQueueLabels;
  }
  set pQueueLabels(value) {
    
  }
  get cmdBufLabelCount() {
    return this._cmdBufLabelCount;
  }
  set cmdBufLabelCount(value) {
    
this.memoryView.setUint32($VkDebugUtilsMessengerCallbackDataEXT.cmdBufLabelCount.byteOffset, value);
this._cmdBufLabelCount = value;
  }
  get pCmdBufLabels() {
    return this._pCmdBufLabels;
  }
  set pCmdBufLabels(value) {
    
  }
  get objectCount() {
    return this._objectCount;
  }
  set objectCount(value) {
    
this.memoryView.setUint32($VkDebugUtilsMessengerCallbackDataEXT.objectCount.byteOffset, value);
this._objectCount = value;
  }
  get pObjects() {
    return this._pObjects;
  }
  set pObjects(value) {
    
  }
  
};

VkDebugUtilsMessengerCallbackDataEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pQueueLabels !== null) { }
  
  if (this.pCmdBufLabels !== null) { }
  
  if (this.pObjects !== null) { }
  
};

const $VkDebugUtilsMessengerCallbackDataEXT = memoryLayouts.VkDebugUtilsMessengerCallbackDataEXT;
VkDebugUtilsMessengerCallbackDataEXT.byteLength = $VkDebugUtilsMessengerCallbackDataEXT.byteLength;

VkDebugUtilsMessengerCallbackDataEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCallbackDataEXT.sType.byteOffset,
    byteLength: $VkDebugUtilsMessengerCallbackDataEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCallbackDataEXT.pNext.byteOffset,
    byteLength: $VkDebugUtilsMessengerCallbackDataEXT.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCallbackDataEXT.flags.byteOffset,
    byteLength: $VkDebugUtilsMessengerCallbackDataEXT.flags.byteLength
  }),
  pMessageIdName: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCallbackDataEXT.pMessageIdName.byteOffset,
    byteLength: $VkDebugUtilsMessengerCallbackDataEXT.pMessageIdName.byteLength
  }),
  messageIdNumber: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCallbackDataEXT.messageIdNumber.byteOffset,
    byteLength: $VkDebugUtilsMessengerCallbackDataEXT.messageIdNumber.byteLength
  }),
  pMessage: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCallbackDataEXT.pMessage.byteOffset,
    byteLength: $VkDebugUtilsMessengerCallbackDataEXT.pMessage.byteLength
  }),
  queueLabelCount: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCallbackDataEXT.queueLabelCount.byteOffset,
    byteLength: $VkDebugUtilsMessengerCallbackDataEXT.queueLabelCount.byteLength
  }),
  pQueueLabels: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCallbackDataEXT.pQueueLabels.byteOffset,
    byteLength: $VkDebugUtilsMessengerCallbackDataEXT.pQueueLabels.byteLength
  }),
  cmdBufLabelCount: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCallbackDataEXT.cmdBufLabelCount.byteOffset,
    byteLength: $VkDebugUtilsMessengerCallbackDataEXT.cmdBufLabelCount.byteLength
  }),
  pCmdBufLabels: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCallbackDataEXT.pCmdBufLabels.byteOffset,
    byteLength: $VkDebugUtilsMessengerCallbackDataEXT.pCmdBufLabels.byteLength
  }),
  objectCount: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCallbackDataEXT.objectCount.byteOffset,
    byteLength: $VkDebugUtilsMessengerCallbackDataEXT.objectCount.byteLength
  }),
  pObjects: Object.freeze({
    byteOffset: $VkDebugUtilsMessengerCallbackDataEXT.pObjects.byteOffset,
    byteLength: $VkDebugUtilsMessengerCallbackDataEXT.pObjects.byteLength
  }),
});
class VkImportMemoryHostPointerInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._handleType = 0;
    this._pHostPointer = null;
    this.memoryBuffer = new ArrayBuffer(VkImportMemoryHostPointerInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.handleType !== void 0) this.handleType = opts.handleType;
      if (opts.pHostPointer !== void 0) this.pHostPointer = opts.pHostPointer;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImportMemoryHostPointerInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get handleType() {
    return this._handleType;
  }
  set handleType(value) {
    
this.memoryView.setInt32($VkImportMemoryHostPointerInfoEXT.handleType.byteOffset, value);
this._handleType = value;
  }
  get pHostPointer() {
    return this._pHostPointer;
  }
  set pHostPointer(value) {
    
  }
  
};

VkImportMemoryHostPointerInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImportMemoryHostPointerInfoEXT = memoryLayouts.VkImportMemoryHostPointerInfoEXT;
VkImportMemoryHostPointerInfoEXT.byteLength = $VkImportMemoryHostPointerInfoEXT.byteLength;

VkImportMemoryHostPointerInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImportMemoryHostPointerInfoEXT.sType.byteOffset,
    byteLength: $VkImportMemoryHostPointerInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImportMemoryHostPointerInfoEXT.pNext.byteOffset,
    byteLength: $VkImportMemoryHostPointerInfoEXT.pNext.byteLength
  }),
  handleType: Object.freeze({
    byteOffset: $VkImportMemoryHostPointerInfoEXT.handleType.byteOffset,
    byteLength: $VkImportMemoryHostPointerInfoEXT.handleType.byteLength
  }),
  pHostPointer: Object.freeze({
    byteOffset: $VkImportMemoryHostPointerInfoEXT.pHostPointer.byteOffset,
    byteLength: $VkImportMemoryHostPointerInfoEXT.pHostPointer.byteLength
  }),
});
class VkMemoryHostPointerPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._memoryTypeBits = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryHostPointerPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryHostPointerPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get memoryTypeBits() {
    return this._memoryTypeBits;
  }
  
};

VkMemoryHostPointerPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryHostPointerPropertiesEXT = memoryLayouts.VkMemoryHostPointerPropertiesEXT;
VkMemoryHostPointerPropertiesEXT.byteLength = $VkMemoryHostPointerPropertiesEXT.byteLength;

VkMemoryHostPointerPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryHostPointerPropertiesEXT.sType.byteOffset,
    byteLength: $VkMemoryHostPointerPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryHostPointerPropertiesEXT.pNext.byteOffset,
    byteLength: $VkMemoryHostPointerPropertiesEXT.pNext.byteLength
  }),
  memoryTypeBits: Object.freeze({
    byteOffset: $VkMemoryHostPointerPropertiesEXT.memoryTypeBits.byteOffset,
    byteLength: $VkMemoryHostPointerPropertiesEXT.memoryTypeBits.byteLength
  }),
});
class VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._minImportedHostPointerAlignment = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExternalMemoryHostPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExternalMemoryHostPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get minImportedHostPointerAlignment() {
    return this._minImportedHostPointerAlignment;
  }
  
};

VkPhysicalDeviceExternalMemoryHostPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceExternalMemoryHostPropertiesEXT = memoryLayouts.VkPhysicalDeviceExternalMemoryHostPropertiesEXT;
VkPhysicalDeviceExternalMemoryHostPropertiesEXT.byteLength = $VkPhysicalDeviceExternalMemoryHostPropertiesEXT.byteLength;

VkPhysicalDeviceExternalMemoryHostPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalMemoryHostPropertiesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceExternalMemoryHostPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalMemoryHostPropertiesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceExternalMemoryHostPropertiesEXT.pNext.byteLength
  }),
  minImportedHostPointerAlignment: Object.freeze({
    byteOffset: $VkPhysicalDeviceExternalMemoryHostPropertiesEXT.minImportedHostPointerAlignment.byteOffset,
    byteLength: $VkPhysicalDeviceExternalMemoryHostPropertiesEXT.minImportedHostPointerAlignment.byteLength
  }),
});
class VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._primitiveOverestimationSize = 0;
    this._maxExtraPrimitiveOverestimationSize = 0;
    this._extraPrimitiveOverestimationSizeGranularity = 0;
    this._primitiveUnderestimation = 0;
    this._conservativePointAndLineRasterization = 0;
    this._degenerateTrianglesRasterized = 0;
    this._degenerateLinesRasterized = 0;
    this._fullyCoveredFragmentShaderInputVariable = 0;
    this._conservativeRasterizationPostDepthCoverage = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceConservativeRasterizationPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceConservativeRasterizationPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get primitiveOverestimationSize() {
    return this._primitiveOverestimationSize;
  }
  get maxExtraPrimitiveOverestimationSize() {
    return this._maxExtraPrimitiveOverestimationSize;
  }
  get extraPrimitiveOverestimationSizeGranularity() {
    return this._extraPrimitiveOverestimationSizeGranularity;
  }
  get primitiveUnderestimation() {
    return this._primitiveUnderestimation;
  }
  get conservativePointAndLineRasterization() {
    return this._conservativePointAndLineRasterization;
  }
  get degenerateTrianglesRasterized() {
    return this._degenerateTrianglesRasterized;
  }
  get degenerateLinesRasterized() {
    return this._degenerateLinesRasterized;
  }
  get fullyCoveredFragmentShaderInputVariable() {
    return this._fullyCoveredFragmentShaderInputVariable;
  }
  get conservativeRasterizationPostDepthCoverage() {
    return this._conservativeRasterizationPostDepthCoverage;
  }
  
};

VkPhysicalDeviceConservativeRasterizationPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceConservativeRasterizationPropertiesEXT = memoryLayouts.VkPhysicalDeviceConservativeRasterizationPropertiesEXT;
VkPhysicalDeviceConservativeRasterizationPropertiesEXT.byteLength = $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.byteLength;

VkPhysicalDeviceConservativeRasterizationPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.pNext.byteLength
  }),
  primitiveOverestimationSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.primitiveOverestimationSize.byteOffset,
    byteLength: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.primitiveOverestimationSize.byteLength
  }),
  maxExtraPrimitiveOverestimationSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.maxExtraPrimitiveOverestimationSize.byteOffset,
    byteLength: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.maxExtraPrimitiveOverestimationSize.byteLength
  }),
  extraPrimitiveOverestimationSizeGranularity: Object.freeze({
    byteOffset: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.extraPrimitiveOverestimationSizeGranularity.byteOffset,
    byteLength: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.extraPrimitiveOverestimationSizeGranularity.byteLength
  }),
  primitiveUnderestimation: Object.freeze({
    byteOffset: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.primitiveUnderestimation.byteOffset,
    byteLength: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.primitiveUnderestimation.byteLength
  }),
  conservativePointAndLineRasterization: Object.freeze({
    byteOffset: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.conservativePointAndLineRasterization.byteOffset,
    byteLength: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.conservativePointAndLineRasterization.byteLength
  }),
  degenerateTrianglesRasterized: Object.freeze({
    byteOffset: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.degenerateTrianglesRasterized.byteOffset,
    byteLength: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.degenerateTrianglesRasterized.byteLength
  }),
  degenerateLinesRasterized: Object.freeze({
    byteOffset: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.degenerateLinesRasterized.byteOffset,
    byteLength: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.degenerateLinesRasterized.byteLength
  }),
  fullyCoveredFragmentShaderInputVariable: Object.freeze({
    byteOffset: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.fullyCoveredFragmentShaderInputVariable.byteOffset,
    byteLength: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.fullyCoveredFragmentShaderInputVariable.byteLength
  }),
  conservativeRasterizationPostDepthCoverage: Object.freeze({
    byteOffset: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.conservativeRasterizationPostDepthCoverage.byteOffset,
    byteLength: $VkPhysicalDeviceConservativeRasterizationPropertiesEXT.conservativeRasterizationPostDepthCoverage.byteLength
  }),
});
class VkCalibratedTimestampInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._timeDomain = 0;
    this.memoryBuffer = new ArrayBuffer(VkCalibratedTimestampInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.timeDomain !== void 0) this.timeDomain = opts.timeDomain;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkCalibratedTimestampInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get timeDomain() {
    return this._timeDomain;
  }
  set timeDomain(value) {
    
this.memoryView.setInt32($VkCalibratedTimestampInfoEXT.timeDomain.byteOffset, value);
this._timeDomain = value;
  }
  
};

VkCalibratedTimestampInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkCalibratedTimestampInfoEXT = memoryLayouts.VkCalibratedTimestampInfoEXT;
VkCalibratedTimestampInfoEXT.byteLength = $VkCalibratedTimestampInfoEXT.byteLength;

VkCalibratedTimestampInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkCalibratedTimestampInfoEXT.sType.byteOffset,
    byteLength: $VkCalibratedTimestampInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkCalibratedTimestampInfoEXT.pNext.byteOffset,
    byteLength: $VkCalibratedTimestampInfoEXT.pNext.byteLength
  }),
  timeDomain: Object.freeze({
    byteOffset: $VkCalibratedTimestampInfoEXT.timeDomain.byteOffset,
    byteLength: $VkCalibratedTimestampInfoEXT.timeDomain.byteLength
  }),
});
class VkPhysicalDeviceShaderCorePropertiesAMD {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._shaderEngineCount = 0;
    this._shaderArraysPerEngineCount = 0;
    this._computeUnitsPerShaderArray = 0;
    this._simdPerComputeUnit = 0;
    this._wavefrontsPerSimd = 0;
    this._wavefrontSize = 0;
    this._sgprsPerSimd = 0;
    this._minSgprAllocation = 0;
    this._maxSgprAllocation = 0;
    this._sgprAllocationGranularity = 0;
    this._vgprsPerSimd = 0;
    this._minVgprAllocation = 0;
    this._maxVgprAllocation = 0;
    this._vgprAllocationGranularity = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceShaderCorePropertiesAMD.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceShaderCorePropertiesAMD.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get shaderEngineCount() {
    return this._shaderEngineCount;
  }
  get shaderArraysPerEngineCount() {
    return this._shaderArraysPerEngineCount;
  }
  get computeUnitsPerShaderArray() {
    return this._computeUnitsPerShaderArray;
  }
  get simdPerComputeUnit() {
    return this._simdPerComputeUnit;
  }
  get wavefrontsPerSimd() {
    return this._wavefrontsPerSimd;
  }
  get wavefrontSize() {
    return this._wavefrontSize;
  }
  get sgprsPerSimd() {
    return this._sgprsPerSimd;
  }
  get minSgprAllocation() {
    return this._minSgprAllocation;
  }
  get maxSgprAllocation() {
    return this._maxSgprAllocation;
  }
  get sgprAllocationGranularity() {
    return this._sgprAllocationGranularity;
  }
  get vgprsPerSimd() {
    return this._vgprsPerSimd;
  }
  get minVgprAllocation() {
    return this._minVgprAllocation;
  }
  get maxVgprAllocation() {
    return this._maxVgprAllocation;
  }
  get vgprAllocationGranularity() {
    return this._vgprAllocationGranularity;
  }
  
};

VkPhysicalDeviceShaderCorePropertiesAMD.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceShaderCorePropertiesAMD = memoryLayouts.VkPhysicalDeviceShaderCorePropertiesAMD;
VkPhysicalDeviceShaderCorePropertiesAMD.byteLength = $VkPhysicalDeviceShaderCorePropertiesAMD.byteLength;

VkPhysicalDeviceShaderCorePropertiesAMD.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.sType.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.pNext.byteLength
  }),
  shaderEngineCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.shaderEngineCount.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.shaderEngineCount.byteLength
  }),
  shaderArraysPerEngineCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.shaderArraysPerEngineCount.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.shaderArraysPerEngineCount.byteLength
  }),
  computeUnitsPerShaderArray: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.computeUnitsPerShaderArray.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.computeUnitsPerShaderArray.byteLength
  }),
  simdPerComputeUnit: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.simdPerComputeUnit.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.simdPerComputeUnit.byteLength
  }),
  wavefrontsPerSimd: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.wavefrontsPerSimd.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.wavefrontsPerSimd.byteLength
  }),
  wavefrontSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.wavefrontSize.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.wavefrontSize.byteLength
  }),
  sgprsPerSimd: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.sgprsPerSimd.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.sgprsPerSimd.byteLength
  }),
  minSgprAllocation: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.minSgprAllocation.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.minSgprAllocation.byteLength
  }),
  maxSgprAllocation: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.maxSgprAllocation.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.maxSgprAllocation.byteLength
  }),
  sgprAllocationGranularity: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.sgprAllocationGranularity.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.sgprAllocationGranularity.byteLength
  }),
  vgprsPerSimd: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.vgprsPerSimd.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.vgprsPerSimd.byteLength
  }),
  minVgprAllocation: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.minVgprAllocation.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.minVgprAllocation.byteLength
  }),
  maxVgprAllocation: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.maxVgprAllocation.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.maxVgprAllocation.byteLength
  }),
  vgprAllocationGranularity: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderCorePropertiesAMD.vgprAllocationGranularity.byteOffset,
    byteLength: $VkPhysicalDeviceShaderCorePropertiesAMD.vgprAllocationGranularity.byteLength
  }),
});
class VkPipelineRasterizationConservativeStateCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._conservativeRasterizationMode = 0;
    this._extraPrimitiveOverestimationSize = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineRasterizationConservativeStateCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.conservativeRasterizationMode !== void 0) this.conservativeRasterizationMode = opts.conservativeRasterizationMode;
      if (opts.extraPrimitiveOverestimationSize !== void 0) this.extraPrimitiveOverestimationSize = opts.extraPrimitiveOverestimationSize;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationConservativeStateCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationConservativeStateCreateInfoEXT.flags.byteOffset, value);
this._flags = value;
  }
  get conservativeRasterizationMode() {
    return this._conservativeRasterizationMode;
  }
  set conservativeRasterizationMode(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationConservativeStateCreateInfoEXT.conservativeRasterizationMode.byteOffset, value);
this._conservativeRasterizationMode = value;
  }
  get extraPrimitiveOverestimationSize() {
    return this._extraPrimitiveOverestimationSize;
  }
  set extraPrimitiveOverestimationSize(value) {
    
this.memoryView.setFloat32($VkPipelineRasterizationConservativeStateCreateInfoEXT.extraPrimitiveOverestimationSize.byteOffset, value);
this._extraPrimitiveOverestimationSize = value;
  }
  
};

VkPipelineRasterizationConservativeStateCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineRasterizationConservativeStateCreateInfoEXT = memoryLayouts.VkPipelineRasterizationConservativeStateCreateInfoEXT;
VkPipelineRasterizationConservativeStateCreateInfoEXT.byteLength = $VkPipelineRasterizationConservativeStateCreateInfoEXT.byteLength;

VkPipelineRasterizationConservativeStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineRasterizationConservativeStateCreateInfoEXT.sType.byteOffset,
    byteLength: $VkPipelineRasterizationConservativeStateCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineRasterizationConservativeStateCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkPipelineRasterizationConservativeStateCreateInfoEXT.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineRasterizationConservativeStateCreateInfoEXT.flags.byteOffset,
    byteLength: $VkPipelineRasterizationConservativeStateCreateInfoEXT.flags.byteLength
  }),
  conservativeRasterizationMode: Object.freeze({
    byteOffset: $VkPipelineRasterizationConservativeStateCreateInfoEXT.conservativeRasterizationMode.byteOffset,
    byteLength: $VkPipelineRasterizationConservativeStateCreateInfoEXT.conservativeRasterizationMode.byteLength
  }),
  extraPrimitiveOverestimationSize: Object.freeze({
    byteOffset: $VkPipelineRasterizationConservativeStateCreateInfoEXT.extraPrimitiveOverestimationSize.byteOffset,
    byteLength: $VkPipelineRasterizationConservativeStateCreateInfoEXT.extraPrimitiveOverestimationSize.byteLength
  }),
});
class VkPhysicalDeviceDescriptorIndexingFeaturesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._shaderInputAttachmentArrayDynamicIndexing = 0;
    this._shaderUniformTexelBufferArrayDynamicIndexing = 0;
    this._shaderStorageTexelBufferArrayDynamicIndexing = 0;
    this._shaderUniformBufferArrayNonUniformIndexing = 0;
    this._shaderSampledImageArrayNonUniformIndexing = 0;
    this._shaderStorageBufferArrayNonUniformIndexing = 0;
    this._shaderStorageImageArrayNonUniformIndexing = 0;
    this._shaderInputAttachmentArrayNonUniformIndexing = 0;
    this._shaderUniformTexelBufferArrayNonUniformIndexing = 0;
    this._shaderStorageTexelBufferArrayNonUniformIndexing = 0;
    this._descriptorBindingUniformBufferUpdateAfterBind = 0;
    this._descriptorBindingSampledImageUpdateAfterBind = 0;
    this._descriptorBindingStorageImageUpdateAfterBind = 0;
    this._descriptorBindingStorageBufferUpdateAfterBind = 0;
    this._descriptorBindingUniformTexelBufferUpdateAfterBind = 0;
    this._descriptorBindingStorageTexelBufferUpdateAfterBind = 0;
    this._descriptorBindingUpdateUnusedWhilePending = 0;
    this._descriptorBindingPartiallyBound = 0;
    this._descriptorBindingVariableDescriptorCount = 0;
    this._runtimeDescriptorArray = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDescriptorIndexingFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderInputAttachmentArrayDynamicIndexing !== void 0) this.shaderInputAttachmentArrayDynamicIndexing = opts.shaderInputAttachmentArrayDynamicIndexing;
      if (opts.shaderUniformTexelBufferArrayDynamicIndexing !== void 0) this.shaderUniformTexelBufferArrayDynamicIndexing = opts.shaderUniformTexelBufferArrayDynamicIndexing;
      if (opts.shaderStorageTexelBufferArrayDynamicIndexing !== void 0) this.shaderStorageTexelBufferArrayDynamicIndexing = opts.shaderStorageTexelBufferArrayDynamicIndexing;
      if (opts.shaderUniformBufferArrayNonUniformIndexing !== void 0) this.shaderUniformBufferArrayNonUniformIndexing = opts.shaderUniformBufferArrayNonUniformIndexing;
      if (opts.shaderSampledImageArrayNonUniformIndexing !== void 0) this.shaderSampledImageArrayNonUniformIndexing = opts.shaderSampledImageArrayNonUniformIndexing;
      if (opts.shaderStorageBufferArrayNonUniformIndexing !== void 0) this.shaderStorageBufferArrayNonUniformIndexing = opts.shaderStorageBufferArrayNonUniformIndexing;
      if (opts.shaderStorageImageArrayNonUniformIndexing !== void 0) this.shaderStorageImageArrayNonUniformIndexing = opts.shaderStorageImageArrayNonUniformIndexing;
      if (opts.shaderInputAttachmentArrayNonUniformIndexing !== void 0) this.shaderInputAttachmentArrayNonUniformIndexing = opts.shaderInputAttachmentArrayNonUniformIndexing;
      if (opts.shaderUniformTexelBufferArrayNonUniformIndexing !== void 0) this.shaderUniformTexelBufferArrayNonUniformIndexing = opts.shaderUniformTexelBufferArrayNonUniformIndexing;
      if (opts.shaderStorageTexelBufferArrayNonUniformIndexing !== void 0) this.shaderStorageTexelBufferArrayNonUniformIndexing = opts.shaderStorageTexelBufferArrayNonUniformIndexing;
      if (opts.descriptorBindingUniformBufferUpdateAfterBind !== void 0) this.descriptorBindingUniformBufferUpdateAfterBind = opts.descriptorBindingUniformBufferUpdateAfterBind;
      if (opts.descriptorBindingSampledImageUpdateAfterBind !== void 0) this.descriptorBindingSampledImageUpdateAfterBind = opts.descriptorBindingSampledImageUpdateAfterBind;
      if (opts.descriptorBindingStorageImageUpdateAfterBind !== void 0) this.descriptorBindingStorageImageUpdateAfterBind = opts.descriptorBindingStorageImageUpdateAfterBind;
      if (opts.descriptorBindingStorageBufferUpdateAfterBind !== void 0) this.descriptorBindingStorageBufferUpdateAfterBind = opts.descriptorBindingStorageBufferUpdateAfterBind;
      if (opts.descriptorBindingUniformTexelBufferUpdateAfterBind !== void 0) this.descriptorBindingUniformTexelBufferUpdateAfterBind = opts.descriptorBindingUniformTexelBufferUpdateAfterBind;
      if (opts.descriptorBindingStorageTexelBufferUpdateAfterBind !== void 0) this.descriptorBindingStorageTexelBufferUpdateAfterBind = opts.descriptorBindingStorageTexelBufferUpdateAfterBind;
      if (opts.descriptorBindingUpdateUnusedWhilePending !== void 0) this.descriptorBindingUpdateUnusedWhilePending = opts.descriptorBindingUpdateUnusedWhilePending;
      if (opts.descriptorBindingPartiallyBound !== void 0) this.descriptorBindingPartiallyBound = opts.descriptorBindingPartiallyBound;
      if (opts.descriptorBindingVariableDescriptorCount !== void 0) this.descriptorBindingVariableDescriptorCount = opts.descriptorBindingVariableDescriptorCount;
      if (opts.runtimeDescriptorArray !== void 0) this.runtimeDescriptorArray = opts.runtimeDescriptorArray;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get shaderInputAttachmentArrayDynamicIndexing() {
    return this._shaderInputAttachmentArrayDynamicIndexing;
  }
  set shaderInputAttachmentArrayDynamicIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderInputAttachmentArrayDynamicIndexing.byteOffset, value);
this._shaderInputAttachmentArrayDynamicIndexing = value;
  }
  get shaderUniformTexelBufferArrayDynamicIndexing() {
    return this._shaderUniformTexelBufferArrayDynamicIndexing;
  }
  set shaderUniformTexelBufferArrayDynamicIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderUniformTexelBufferArrayDynamicIndexing.byteOffset, value);
this._shaderUniformTexelBufferArrayDynamicIndexing = value;
  }
  get shaderStorageTexelBufferArrayDynamicIndexing() {
    return this._shaderStorageTexelBufferArrayDynamicIndexing;
  }
  set shaderStorageTexelBufferArrayDynamicIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageTexelBufferArrayDynamicIndexing.byteOffset, value);
this._shaderStorageTexelBufferArrayDynamicIndexing = value;
  }
  get shaderUniformBufferArrayNonUniformIndexing() {
    return this._shaderUniformBufferArrayNonUniformIndexing;
  }
  set shaderUniformBufferArrayNonUniformIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderUniformBufferArrayNonUniformIndexing.byteOffset, value);
this._shaderUniformBufferArrayNonUniformIndexing = value;
  }
  get shaderSampledImageArrayNonUniformIndexing() {
    return this._shaderSampledImageArrayNonUniformIndexing;
  }
  set shaderSampledImageArrayNonUniformIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderSampledImageArrayNonUniformIndexing.byteOffset, value);
this._shaderSampledImageArrayNonUniformIndexing = value;
  }
  get shaderStorageBufferArrayNonUniformIndexing() {
    return this._shaderStorageBufferArrayNonUniformIndexing;
  }
  set shaderStorageBufferArrayNonUniformIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageBufferArrayNonUniformIndexing.byteOffset, value);
this._shaderStorageBufferArrayNonUniformIndexing = value;
  }
  get shaderStorageImageArrayNonUniformIndexing() {
    return this._shaderStorageImageArrayNonUniformIndexing;
  }
  set shaderStorageImageArrayNonUniformIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageImageArrayNonUniformIndexing.byteOffset, value);
this._shaderStorageImageArrayNonUniformIndexing = value;
  }
  get shaderInputAttachmentArrayNonUniformIndexing() {
    return this._shaderInputAttachmentArrayNonUniformIndexing;
  }
  set shaderInputAttachmentArrayNonUniformIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderInputAttachmentArrayNonUniformIndexing.byteOffset, value);
this._shaderInputAttachmentArrayNonUniformIndexing = value;
  }
  get shaderUniformTexelBufferArrayNonUniformIndexing() {
    return this._shaderUniformTexelBufferArrayNonUniformIndexing;
  }
  set shaderUniformTexelBufferArrayNonUniformIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderUniformTexelBufferArrayNonUniformIndexing.byteOffset, value);
this._shaderUniformTexelBufferArrayNonUniformIndexing = value;
  }
  get shaderStorageTexelBufferArrayNonUniformIndexing() {
    return this._shaderStorageTexelBufferArrayNonUniformIndexing;
  }
  set shaderStorageTexelBufferArrayNonUniformIndexing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageTexelBufferArrayNonUniformIndexing.byteOffset, value);
this._shaderStorageTexelBufferArrayNonUniformIndexing = value;
  }
  get descriptorBindingUniformBufferUpdateAfterBind() {
    return this._descriptorBindingUniformBufferUpdateAfterBind;
  }
  set descriptorBindingUniformBufferUpdateAfterBind(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingUniformBufferUpdateAfterBind.byteOffset, value);
this._descriptorBindingUniformBufferUpdateAfterBind = value;
  }
  get descriptorBindingSampledImageUpdateAfterBind() {
    return this._descriptorBindingSampledImageUpdateAfterBind;
  }
  set descriptorBindingSampledImageUpdateAfterBind(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingSampledImageUpdateAfterBind.byteOffset, value);
this._descriptorBindingSampledImageUpdateAfterBind = value;
  }
  get descriptorBindingStorageImageUpdateAfterBind() {
    return this._descriptorBindingStorageImageUpdateAfterBind;
  }
  set descriptorBindingStorageImageUpdateAfterBind(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingStorageImageUpdateAfterBind.byteOffset, value);
this._descriptorBindingStorageImageUpdateAfterBind = value;
  }
  get descriptorBindingStorageBufferUpdateAfterBind() {
    return this._descriptorBindingStorageBufferUpdateAfterBind;
  }
  set descriptorBindingStorageBufferUpdateAfterBind(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingStorageBufferUpdateAfterBind.byteOffset, value);
this._descriptorBindingStorageBufferUpdateAfterBind = value;
  }
  get descriptorBindingUniformTexelBufferUpdateAfterBind() {
    return this._descriptorBindingUniformTexelBufferUpdateAfterBind;
  }
  set descriptorBindingUniformTexelBufferUpdateAfterBind(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingUniformTexelBufferUpdateAfterBind.byteOffset, value);
this._descriptorBindingUniformTexelBufferUpdateAfterBind = value;
  }
  get descriptorBindingStorageTexelBufferUpdateAfterBind() {
    return this._descriptorBindingStorageTexelBufferUpdateAfterBind;
  }
  set descriptorBindingStorageTexelBufferUpdateAfterBind(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingStorageTexelBufferUpdateAfterBind.byteOffset, value);
this._descriptorBindingStorageTexelBufferUpdateAfterBind = value;
  }
  get descriptorBindingUpdateUnusedWhilePending() {
    return this._descriptorBindingUpdateUnusedWhilePending;
  }
  set descriptorBindingUpdateUnusedWhilePending(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingUpdateUnusedWhilePending.byteOffset, value);
this._descriptorBindingUpdateUnusedWhilePending = value;
  }
  get descriptorBindingPartiallyBound() {
    return this._descriptorBindingPartiallyBound;
  }
  set descriptorBindingPartiallyBound(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingPartiallyBound.byteOffset, value);
this._descriptorBindingPartiallyBound = value;
  }
  get descriptorBindingVariableDescriptorCount() {
    return this._descriptorBindingVariableDescriptorCount;
  }
  set descriptorBindingVariableDescriptorCount(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingVariableDescriptorCount.byteOffset, value);
this._descriptorBindingVariableDescriptorCount = value;
  }
  get runtimeDescriptorArray() {
    return this._runtimeDescriptorArray;
  }
  set runtimeDescriptorArray(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDescriptorIndexingFeaturesEXT.runtimeDescriptorArray.byteOffset, value);
this._runtimeDescriptorArray = value;
  }
  
};

VkPhysicalDeviceDescriptorIndexingFeaturesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceDescriptorIndexingFeaturesEXT = memoryLayouts.VkPhysicalDeviceDescriptorIndexingFeaturesEXT;
VkPhysicalDeviceDescriptorIndexingFeaturesEXT.byteLength = $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.byteLength;

VkPhysicalDeviceDescriptorIndexingFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.pNext.byteLength
  }),
  shaderInputAttachmentArrayDynamicIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderInputAttachmentArrayDynamicIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderInputAttachmentArrayDynamicIndexing.byteLength
  }),
  shaderUniformTexelBufferArrayDynamicIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderUniformTexelBufferArrayDynamicIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderUniformTexelBufferArrayDynamicIndexing.byteLength
  }),
  shaderStorageTexelBufferArrayDynamicIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageTexelBufferArrayDynamicIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageTexelBufferArrayDynamicIndexing.byteLength
  }),
  shaderUniformBufferArrayNonUniformIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderUniformBufferArrayNonUniformIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderUniformBufferArrayNonUniformIndexing.byteLength
  }),
  shaderSampledImageArrayNonUniformIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderSampledImageArrayNonUniformIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderSampledImageArrayNonUniformIndexing.byteLength
  }),
  shaderStorageBufferArrayNonUniformIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageBufferArrayNonUniformIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageBufferArrayNonUniformIndexing.byteLength
  }),
  shaderStorageImageArrayNonUniformIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageImageArrayNonUniformIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageImageArrayNonUniformIndexing.byteLength
  }),
  shaderInputAttachmentArrayNonUniformIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderInputAttachmentArrayNonUniformIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderInputAttachmentArrayNonUniformIndexing.byteLength
  }),
  shaderUniformTexelBufferArrayNonUniformIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderUniformTexelBufferArrayNonUniformIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderUniformTexelBufferArrayNonUniformIndexing.byteLength
  }),
  shaderStorageTexelBufferArrayNonUniformIndexing: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageTexelBufferArrayNonUniformIndexing.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.shaderStorageTexelBufferArrayNonUniformIndexing.byteLength
  }),
  descriptorBindingUniformBufferUpdateAfterBind: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingUniformBufferUpdateAfterBind.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingUniformBufferUpdateAfterBind.byteLength
  }),
  descriptorBindingSampledImageUpdateAfterBind: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingSampledImageUpdateAfterBind.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingSampledImageUpdateAfterBind.byteLength
  }),
  descriptorBindingStorageImageUpdateAfterBind: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingStorageImageUpdateAfterBind.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingStorageImageUpdateAfterBind.byteLength
  }),
  descriptorBindingStorageBufferUpdateAfterBind: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingStorageBufferUpdateAfterBind.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingStorageBufferUpdateAfterBind.byteLength
  }),
  descriptorBindingUniformTexelBufferUpdateAfterBind: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingUniformTexelBufferUpdateAfterBind.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingUniformTexelBufferUpdateAfterBind.byteLength
  }),
  descriptorBindingStorageTexelBufferUpdateAfterBind: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingStorageTexelBufferUpdateAfterBind.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingStorageTexelBufferUpdateAfterBind.byteLength
  }),
  descriptorBindingUpdateUnusedWhilePending: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingUpdateUnusedWhilePending.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingUpdateUnusedWhilePending.byteLength
  }),
  descriptorBindingPartiallyBound: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingPartiallyBound.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingPartiallyBound.byteLength
  }),
  descriptorBindingVariableDescriptorCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingVariableDescriptorCount.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.descriptorBindingVariableDescriptorCount.byteLength
  }),
  runtimeDescriptorArray: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.runtimeDescriptorArray.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingFeaturesEXT.runtimeDescriptorArray.byteLength
  }),
});
class VkPhysicalDeviceDescriptorIndexingPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxUpdateAfterBindDescriptorsInAllPools = 0;
    this._shaderUniformBufferArrayNonUniformIndexingNative = 0;
    this._shaderSampledImageArrayNonUniformIndexingNative = 0;
    this._shaderStorageBufferArrayNonUniformIndexingNative = 0;
    this._shaderStorageImageArrayNonUniformIndexingNative = 0;
    this._shaderInputAttachmentArrayNonUniformIndexingNative = 0;
    this._robustBufferAccessUpdateAfterBind = 0;
    this._quadDivergentImplicitLod = 0;
    this._maxPerStageDescriptorUpdateAfterBindSamplers = 0;
    this._maxPerStageDescriptorUpdateAfterBindUniformBuffers = 0;
    this._maxPerStageDescriptorUpdateAfterBindStorageBuffers = 0;
    this._maxPerStageDescriptorUpdateAfterBindSampledImages = 0;
    this._maxPerStageDescriptorUpdateAfterBindStorageImages = 0;
    this._maxPerStageDescriptorUpdateAfterBindInputAttachments = 0;
    this._maxPerStageUpdateAfterBindResources = 0;
    this._maxDescriptorSetUpdateAfterBindSamplers = 0;
    this._maxDescriptorSetUpdateAfterBindUniformBuffers = 0;
    this._maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = 0;
    this._maxDescriptorSetUpdateAfterBindStorageBuffers = 0;
    this._maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = 0;
    this._maxDescriptorSetUpdateAfterBindSampledImages = 0;
    this._maxDescriptorSetUpdateAfterBindStorageImages = 0;
    this._maxDescriptorSetUpdateAfterBindInputAttachments = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDescriptorIndexingPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceDescriptorIndexingPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxUpdateAfterBindDescriptorsInAllPools() {
    return this._maxUpdateAfterBindDescriptorsInAllPools;
  }
  get shaderUniformBufferArrayNonUniformIndexingNative() {
    return this._shaderUniformBufferArrayNonUniformIndexingNative;
  }
  get shaderSampledImageArrayNonUniformIndexingNative() {
    return this._shaderSampledImageArrayNonUniformIndexingNative;
  }
  get shaderStorageBufferArrayNonUniformIndexingNative() {
    return this._shaderStorageBufferArrayNonUniformIndexingNative;
  }
  get shaderStorageImageArrayNonUniformIndexingNative() {
    return this._shaderStorageImageArrayNonUniformIndexingNative;
  }
  get shaderInputAttachmentArrayNonUniformIndexingNative() {
    return this._shaderInputAttachmentArrayNonUniformIndexingNative;
  }
  get robustBufferAccessUpdateAfterBind() {
    return this._robustBufferAccessUpdateAfterBind;
  }
  get quadDivergentImplicitLod() {
    return this._quadDivergentImplicitLod;
  }
  get maxPerStageDescriptorUpdateAfterBindSamplers() {
    return this._maxPerStageDescriptorUpdateAfterBindSamplers;
  }
  get maxPerStageDescriptorUpdateAfterBindUniformBuffers() {
    return this._maxPerStageDescriptorUpdateAfterBindUniformBuffers;
  }
  get maxPerStageDescriptorUpdateAfterBindStorageBuffers() {
    return this._maxPerStageDescriptorUpdateAfterBindStorageBuffers;
  }
  get maxPerStageDescriptorUpdateAfterBindSampledImages() {
    return this._maxPerStageDescriptorUpdateAfterBindSampledImages;
  }
  get maxPerStageDescriptorUpdateAfterBindStorageImages() {
    return this._maxPerStageDescriptorUpdateAfterBindStorageImages;
  }
  get maxPerStageDescriptorUpdateAfterBindInputAttachments() {
    return this._maxPerStageDescriptorUpdateAfterBindInputAttachments;
  }
  get maxPerStageUpdateAfterBindResources() {
    return this._maxPerStageUpdateAfterBindResources;
  }
  get maxDescriptorSetUpdateAfterBindSamplers() {
    return this._maxDescriptorSetUpdateAfterBindSamplers;
  }
  get maxDescriptorSetUpdateAfterBindUniformBuffers() {
    return this._maxDescriptorSetUpdateAfterBindUniformBuffers;
  }
  get maxDescriptorSetUpdateAfterBindUniformBuffersDynamic() {
    return this._maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
  }
  get maxDescriptorSetUpdateAfterBindStorageBuffers() {
    return this._maxDescriptorSetUpdateAfterBindStorageBuffers;
  }
  get maxDescriptorSetUpdateAfterBindStorageBuffersDynamic() {
    return this._maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
  }
  get maxDescriptorSetUpdateAfterBindSampledImages() {
    return this._maxDescriptorSetUpdateAfterBindSampledImages;
  }
  get maxDescriptorSetUpdateAfterBindStorageImages() {
    return this._maxDescriptorSetUpdateAfterBindStorageImages;
  }
  get maxDescriptorSetUpdateAfterBindInputAttachments() {
    return this._maxDescriptorSetUpdateAfterBindInputAttachments;
  }
  
};

VkPhysicalDeviceDescriptorIndexingPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceDescriptorIndexingPropertiesEXT = memoryLayouts.VkPhysicalDeviceDescriptorIndexingPropertiesEXT;
VkPhysicalDeviceDescriptorIndexingPropertiesEXT.byteLength = $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.byteLength;

VkPhysicalDeviceDescriptorIndexingPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.pNext.byteLength
  }),
  maxUpdateAfterBindDescriptorsInAllPools: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxUpdateAfterBindDescriptorsInAllPools.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxUpdateAfterBindDescriptorsInAllPools.byteLength
  }),
  shaderUniformBufferArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.shaderUniformBufferArrayNonUniformIndexingNative.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.shaderUniformBufferArrayNonUniformIndexingNative.byteLength
  }),
  shaderSampledImageArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.shaderSampledImageArrayNonUniformIndexingNative.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.shaderSampledImageArrayNonUniformIndexingNative.byteLength
  }),
  shaderStorageBufferArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.shaderStorageBufferArrayNonUniformIndexingNative.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.shaderStorageBufferArrayNonUniformIndexingNative.byteLength
  }),
  shaderStorageImageArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.shaderStorageImageArrayNonUniformIndexingNative.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.shaderStorageImageArrayNonUniformIndexingNative.byteLength
  }),
  shaderInputAttachmentArrayNonUniformIndexingNative: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.shaderInputAttachmentArrayNonUniformIndexingNative.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.shaderInputAttachmentArrayNonUniformIndexingNative.byteLength
  }),
  robustBufferAccessUpdateAfterBind: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.robustBufferAccessUpdateAfterBind.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.robustBufferAccessUpdateAfterBind.byteLength
  }),
  quadDivergentImplicitLod: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.quadDivergentImplicitLod.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.quadDivergentImplicitLod.byteLength
  }),
  maxPerStageDescriptorUpdateAfterBindSamplers: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageDescriptorUpdateAfterBindSamplers.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageDescriptorUpdateAfterBindSamplers.byteLength
  }),
  maxPerStageDescriptorUpdateAfterBindUniformBuffers: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageDescriptorUpdateAfterBindUniformBuffers.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageDescriptorUpdateAfterBindUniformBuffers.byteLength
  }),
  maxPerStageDescriptorUpdateAfterBindStorageBuffers: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageDescriptorUpdateAfterBindStorageBuffers.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageDescriptorUpdateAfterBindStorageBuffers.byteLength
  }),
  maxPerStageDescriptorUpdateAfterBindSampledImages: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageDescriptorUpdateAfterBindSampledImages.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageDescriptorUpdateAfterBindSampledImages.byteLength
  }),
  maxPerStageDescriptorUpdateAfterBindStorageImages: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageDescriptorUpdateAfterBindStorageImages.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageDescriptorUpdateAfterBindStorageImages.byteLength
  }),
  maxPerStageDescriptorUpdateAfterBindInputAttachments: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageDescriptorUpdateAfterBindInputAttachments.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageDescriptorUpdateAfterBindInputAttachments.byteLength
  }),
  maxPerStageUpdateAfterBindResources: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageUpdateAfterBindResources.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxPerStageUpdateAfterBindResources.byteLength
  }),
  maxDescriptorSetUpdateAfterBindSamplers: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindSamplers.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindSamplers.byteLength
  }),
  maxDescriptorSetUpdateAfterBindUniformBuffers: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindUniformBuffers.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindUniformBuffers.byteLength
  }),
  maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic.byteLength
  }),
  maxDescriptorSetUpdateAfterBindStorageBuffers: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindStorageBuffers.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindStorageBuffers.byteLength
  }),
  maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic.byteLength
  }),
  maxDescriptorSetUpdateAfterBindSampledImages: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindSampledImages.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindSampledImages.byteLength
  }),
  maxDescriptorSetUpdateAfterBindStorageImages: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindStorageImages.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindStorageImages.byteLength
  }),
  maxDescriptorSetUpdateAfterBindInputAttachments: Object.freeze({
    byteOffset: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindInputAttachments.byteOffset,
    byteLength: $VkPhysicalDeviceDescriptorIndexingPropertiesEXT.maxDescriptorSetUpdateAfterBindInputAttachments.byteLength
  }),
});
class VkDescriptorSetLayoutBindingFlagsCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._bindingCount = 0;
    this._pBindingFlags = null;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.bindingCount !== void 0) this.bindingCount = opts.bindingCount;
      if (opts.pBindingFlags !== void 0) this.pBindingFlags = opts.pBindingFlags;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get bindingCount() {
    return this._bindingCount;
  }
  set bindingCount(value) {
    
this.memoryView.setUint32($VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.bindingCount.byteOffset, value);
this._bindingCount = value;
  }
  get pBindingFlags() {
    return this._pBindingFlags;
  }
  set pBindingFlags(value) {
    
  }
  
};

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = memoryLayouts.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;
VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.byteLength = $VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.byteLength;

VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.sType.byteOffset,
    byteLength: $VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.pNext.byteLength
  }),
  bindingCount: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.bindingCount.byteOffset,
    byteLength: $VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.bindingCount.byteLength
  }),
  pBindingFlags: Object.freeze({
    byteOffset: $VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.pBindingFlags.byteOffset,
    byteLength: $VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.pBindingFlags.byteLength
  }),
});
class VkDescriptorSetVariableDescriptorCountAllocateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._descriptorSetCount = 0;
    this._pDescriptorCounts = null;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.descriptorSetCount !== void 0) this.descriptorSetCount = opts.descriptorSetCount;
      if (opts.pDescriptorCounts !== void 0) this.pDescriptorCounts = opts.pDescriptorCounts;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get descriptorSetCount() {
    return this._descriptorSetCount;
  }
  set descriptorSetCount(value) {
    
this.memoryView.setUint32($VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.descriptorSetCount.byteOffset, value);
this._descriptorSetCount = value;
  }
  get pDescriptorCounts() {
    return this._pDescriptorCounts;
  }
  set pDescriptorCounts(value) {
    
  }
  
};

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = memoryLayouts.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;
VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.byteLength = $VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.byteLength;

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.sType.byteOffset,
    byteLength: $VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.pNext.byteOffset,
    byteLength: $VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.pNext.byteLength
  }),
  descriptorSetCount: Object.freeze({
    byteOffset: $VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.descriptorSetCount.byteOffset,
    byteLength: $VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.descriptorSetCount.byteLength
  }),
  pDescriptorCounts: Object.freeze({
    byteOffset: $VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.pDescriptorCounts.byteOffset,
    byteLength: $VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.pDescriptorCounts.byteLength
  }),
});
class VkDescriptorSetVariableDescriptorCountLayoutSupportEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxVariableDescriptorCount = 0;
    this.memoryBuffer = new ArrayBuffer(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxVariableDescriptorCount() {
    return this._maxVariableDescriptorCount;
  }
  
};

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = memoryLayouts.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;
VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.byteLength = $VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.byteLength;

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.sType.byteOffset,
    byteLength: $VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.pNext.byteOffset,
    byteLength: $VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.pNext.byteLength
  }),
  maxVariableDescriptorCount: Object.freeze({
    byteOffset: $VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.maxVariableDescriptorCount.byteOffset,
    byteLength: $VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.maxVariableDescriptorCount.byteLength
  }),
});
class VkAttachmentDescription2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._format = 0;
    this._samples = 0;
    this._loadOp = 0;
    this._storeOp = 0;
    this._stencilLoadOp = 0;
    this._stencilStoreOp = 0;
    this._initialLayout = 0;
    this._finalLayout = 0;
    this.memoryBuffer = new ArrayBuffer(VkAttachmentDescription2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.format !== void 0) this.format = opts.format;
      if (opts.samples !== void 0) this.samples = opts.samples;
      if (opts.loadOp !== void 0) this.loadOp = opts.loadOp;
      if (opts.storeOp !== void 0) this.storeOp = opts.storeOp;
      if (opts.stencilLoadOp !== void 0) this.stencilLoadOp = opts.stencilLoadOp;
      if (opts.stencilStoreOp !== void 0) this.stencilStoreOp = opts.stencilStoreOp;
      if (opts.initialLayout !== void 0) this.initialLayout = opts.initialLayout;
      if (opts.finalLayout !== void 0) this.finalLayout = opts.finalLayout;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkAttachmentDescription2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkAttachmentDescription2KHR.flags.byteOffset, value);
this._flags = value;
  }
  get format() {
    return this._format;
  }
  set format(value) {
    
this.memoryView.setInt32($VkAttachmentDescription2KHR.format.byteOffset, value);
this._format = value;
  }
  get samples() {
    return this._samples;
  }
  set samples(value) {
    
this.memoryView.setInt32($VkAttachmentDescription2KHR.samples.byteOffset, value);
this._samples = value;
  }
  get loadOp() {
    return this._loadOp;
  }
  set loadOp(value) {
    
this.memoryView.setInt32($VkAttachmentDescription2KHR.loadOp.byteOffset, value);
this._loadOp = value;
  }
  get storeOp() {
    return this._storeOp;
  }
  set storeOp(value) {
    
this.memoryView.setInt32($VkAttachmentDescription2KHR.storeOp.byteOffset, value);
this._storeOp = value;
  }
  get stencilLoadOp() {
    return this._stencilLoadOp;
  }
  set stencilLoadOp(value) {
    
this.memoryView.setInt32($VkAttachmentDescription2KHR.stencilLoadOp.byteOffset, value);
this._stencilLoadOp = value;
  }
  get stencilStoreOp() {
    return this._stencilStoreOp;
  }
  set stencilStoreOp(value) {
    
this.memoryView.setInt32($VkAttachmentDescription2KHR.stencilStoreOp.byteOffset, value);
this._stencilStoreOp = value;
  }
  get initialLayout() {
    return this._initialLayout;
  }
  set initialLayout(value) {
    
this.memoryView.setInt32($VkAttachmentDescription2KHR.initialLayout.byteOffset, value);
this._initialLayout = value;
  }
  get finalLayout() {
    return this._finalLayout;
  }
  set finalLayout(value) {
    
this.memoryView.setInt32($VkAttachmentDescription2KHR.finalLayout.byteOffset, value);
this._finalLayout = value;
  }
  
};

VkAttachmentDescription2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkAttachmentDescription2KHR = memoryLayouts.VkAttachmentDescription2KHR;
VkAttachmentDescription2KHR.byteLength = $VkAttachmentDescription2KHR.byteLength;

VkAttachmentDescription2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkAttachmentDescription2KHR.sType.byteOffset,
    byteLength: $VkAttachmentDescription2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkAttachmentDescription2KHR.pNext.byteOffset,
    byteLength: $VkAttachmentDescription2KHR.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkAttachmentDescription2KHR.flags.byteOffset,
    byteLength: $VkAttachmentDescription2KHR.flags.byteLength
  }),
  format: Object.freeze({
    byteOffset: $VkAttachmentDescription2KHR.format.byteOffset,
    byteLength: $VkAttachmentDescription2KHR.format.byteLength
  }),
  samples: Object.freeze({
    byteOffset: $VkAttachmentDescription2KHR.samples.byteOffset,
    byteLength: $VkAttachmentDescription2KHR.samples.byteLength
  }),
  loadOp: Object.freeze({
    byteOffset: $VkAttachmentDescription2KHR.loadOp.byteOffset,
    byteLength: $VkAttachmentDescription2KHR.loadOp.byteLength
  }),
  storeOp: Object.freeze({
    byteOffset: $VkAttachmentDescription2KHR.storeOp.byteOffset,
    byteLength: $VkAttachmentDescription2KHR.storeOp.byteLength
  }),
  stencilLoadOp: Object.freeze({
    byteOffset: $VkAttachmentDescription2KHR.stencilLoadOp.byteOffset,
    byteLength: $VkAttachmentDescription2KHR.stencilLoadOp.byteLength
  }),
  stencilStoreOp: Object.freeze({
    byteOffset: $VkAttachmentDescription2KHR.stencilStoreOp.byteOffset,
    byteLength: $VkAttachmentDescription2KHR.stencilStoreOp.byteLength
  }),
  initialLayout: Object.freeze({
    byteOffset: $VkAttachmentDescription2KHR.initialLayout.byteOffset,
    byteLength: $VkAttachmentDescription2KHR.initialLayout.byteLength
  }),
  finalLayout: Object.freeze({
    byteOffset: $VkAttachmentDescription2KHR.finalLayout.byteOffset,
    byteLength: $VkAttachmentDescription2KHR.finalLayout.byteLength
  }),
});
class VkAttachmentReference2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._attachment = 0;
    this._layout = 0;
    this._aspectMask = 0;
    this.memoryBuffer = new ArrayBuffer(VkAttachmentReference2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.attachment !== void 0) this.attachment = opts.attachment;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.aspectMask !== void 0) this.aspectMask = opts.aspectMask;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkAttachmentReference2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get attachment() {
    return this._attachment;
  }
  set attachment(value) {
    
this.memoryView.setUint32($VkAttachmentReference2KHR.attachment.byteOffset, value);
this._attachment = value;
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    
this.memoryView.setInt32($VkAttachmentReference2KHR.layout.byteOffset, value);
this._layout = value;
  }
  get aspectMask() {
    return this._aspectMask;
  }
  set aspectMask(value) {
    
this.memoryView.setInt32($VkAttachmentReference2KHR.aspectMask.byteOffset, value);
this._aspectMask = value;
  }
  
};

VkAttachmentReference2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkAttachmentReference2KHR = memoryLayouts.VkAttachmentReference2KHR;
VkAttachmentReference2KHR.byteLength = $VkAttachmentReference2KHR.byteLength;

VkAttachmentReference2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkAttachmentReference2KHR.sType.byteOffset,
    byteLength: $VkAttachmentReference2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkAttachmentReference2KHR.pNext.byteOffset,
    byteLength: $VkAttachmentReference2KHR.pNext.byteLength
  }),
  attachment: Object.freeze({
    byteOffset: $VkAttachmentReference2KHR.attachment.byteOffset,
    byteLength: $VkAttachmentReference2KHR.attachment.byteLength
  }),
  layout: Object.freeze({
    byteOffset: $VkAttachmentReference2KHR.layout.byteOffset,
    byteLength: $VkAttachmentReference2KHR.layout.byteLength
  }),
  aspectMask: Object.freeze({
    byteOffset: $VkAttachmentReference2KHR.aspectMask.byteOffset,
    byteLength: $VkAttachmentReference2KHR.aspectMask.byteLength
  }),
});
class VkSubpassDescription2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._pipelineBindPoint = 0;
    this._viewMask = 0;
    this._inputAttachmentCount = 0;
    this._pInputAttachments = null;
    this._colorAttachmentCount = 0;
    this._pColorAttachments = null;
    this._pResolveAttachments = null;
    this._pDepthStencilAttachment = null;
    this._preserveAttachmentCount = 0;
    this._pPreserveAttachments = null;
    this.memoryBuffer = new ArrayBuffer(VkSubpassDescription2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.pipelineBindPoint !== void 0) this.pipelineBindPoint = opts.pipelineBindPoint;
      if (opts.viewMask !== void 0) this.viewMask = opts.viewMask;
      if (opts.inputAttachmentCount !== void 0) this.inputAttachmentCount = opts.inputAttachmentCount;
      if (opts.pInputAttachments !== void 0) this.pInputAttachments = opts.pInputAttachments;
      if (opts.colorAttachmentCount !== void 0) this.colorAttachmentCount = opts.colorAttachmentCount;
      if (opts.pColorAttachments !== void 0) this.pColorAttachments = opts.pColorAttachments;
      if (opts.pResolveAttachments !== void 0) this.pResolveAttachments = opts.pResolveAttachments;
      if (opts.pDepthStencilAttachment !== void 0) this.pDepthStencilAttachment = opts.pDepthStencilAttachment;
      if (opts.preserveAttachmentCount !== void 0) this.preserveAttachmentCount = opts.preserveAttachmentCount;
      if (opts.pPreserveAttachments !== void 0) this.pPreserveAttachments = opts.pPreserveAttachments;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSubpassDescription2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkSubpassDescription2KHR.flags.byteOffset, value);
this._flags = value;
  }
  get pipelineBindPoint() {
    return this._pipelineBindPoint;
  }
  set pipelineBindPoint(value) {
    
this.memoryView.setInt32($VkSubpassDescription2KHR.pipelineBindPoint.byteOffset, value);
this._pipelineBindPoint = value;
  }
  get viewMask() {
    return this._viewMask;
  }
  set viewMask(value) {
    
this.memoryView.setUint32($VkSubpassDescription2KHR.viewMask.byteOffset, value);
this._viewMask = value;
  }
  get inputAttachmentCount() {
    return this._inputAttachmentCount;
  }
  set inputAttachmentCount(value) {
    
this.memoryView.setUint32($VkSubpassDescription2KHR.inputAttachmentCount.byteOffset, value);
this._inputAttachmentCount = value;
  }
  get pInputAttachments() {
    return this._pInputAttachments;
  }
  set pInputAttachments(value) {
    
  }
  get colorAttachmentCount() {
    return this._colorAttachmentCount;
  }
  set colorAttachmentCount(value) {
    
this.memoryView.setUint32($VkSubpassDescription2KHR.colorAttachmentCount.byteOffset, value);
this._colorAttachmentCount = value;
  }
  get pColorAttachments() {
    return this._pColorAttachments;
  }
  set pColorAttachments(value) {
    
  }
  get pResolveAttachments() {
    return this._pResolveAttachments;
  }
  set pResolveAttachments(value) {
    
  }
  get pDepthStencilAttachment() {
    return this._pDepthStencilAttachment;
  }
  set pDepthStencilAttachment(value) {
    String
  }
  get preserveAttachmentCount() {
    return this._preserveAttachmentCount;
  }
  set preserveAttachmentCount(value) {
    
this.memoryView.setUint32($VkSubpassDescription2KHR.preserveAttachmentCount.byteOffset, value);
this._preserveAttachmentCount = value;
  }
  get pPreserveAttachments() {
    return this._pPreserveAttachments;
  }
  set pPreserveAttachments(value) {
    
  }
  
};

VkSubpassDescription2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pInputAttachments !== null) { }
  
  if (this.pColorAttachments !== null) { }
  
  if (this.pResolveAttachments !== null) { }
  
};

const $VkSubpassDescription2KHR = memoryLayouts.VkSubpassDescription2KHR;
VkSubpassDescription2KHR.byteLength = $VkSubpassDescription2KHR.byteLength;

VkSubpassDescription2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSubpassDescription2KHR.sType.byteOffset,
    byteLength: $VkSubpassDescription2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSubpassDescription2KHR.pNext.byteOffset,
    byteLength: $VkSubpassDescription2KHR.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkSubpassDescription2KHR.flags.byteOffset,
    byteLength: $VkSubpassDescription2KHR.flags.byteLength
  }),
  pipelineBindPoint: Object.freeze({
    byteOffset: $VkSubpassDescription2KHR.pipelineBindPoint.byteOffset,
    byteLength: $VkSubpassDescription2KHR.pipelineBindPoint.byteLength
  }),
  viewMask: Object.freeze({
    byteOffset: $VkSubpassDescription2KHR.viewMask.byteOffset,
    byteLength: $VkSubpassDescription2KHR.viewMask.byteLength
  }),
  inputAttachmentCount: Object.freeze({
    byteOffset: $VkSubpassDescription2KHR.inputAttachmentCount.byteOffset,
    byteLength: $VkSubpassDescription2KHR.inputAttachmentCount.byteLength
  }),
  pInputAttachments: Object.freeze({
    byteOffset: $VkSubpassDescription2KHR.pInputAttachments.byteOffset,
    byteLength: $VkSubpassDescription2KHR.pInputAttachments.byteLength
  }),
  colorAttachmentCount: Object.freeze({
    byteOffset: $VkSubpassDescription2KHR.colorAttachmentCount.byteOffset,
    byteLength: $VkSubpassDescription2KHR.colorAttachmentCount.byteLength
  }),
  pColorAttachments: Object.freeze({
    byteOffset: $VkSubpassDescription2KHR.pColorAttachments.byteOffset,
    byteLength: $VkSubpassDescription2KHR.pColorAttachments.byteLength
  }),
  pResolveAttachments: Object.freeze({
    byteOffset: $VkSubpassDescription2KHR.pResolveAttachments.byteOffset,
    byteLength: $VkSubpassDescription2KHR.pResolveAttachments.byteLength
  }),
  pDepthStencilAttachment: Object.freeze({
    byteOffset: $VkSubpassDescription2KHR.pDepthStencilAttachment.byteOffset,
    byteLength: $VkSubpassDescription2KHR.pDepthStencilAttachment.byteLength
  }),
  preserveAttachmentCount: Object.freeze({
    byteOffset: $VkSubpassDescription2KHR.preserveAttachmentCount.byteOffset,
    byteLength: $VkSubpassDescription2KHR.preserveAttachmentCount.byteLength
  }),
  pPreserveAttachments: Object.freeze({
    byteOffset: $VkSubpassDescription2KHR.pPreserveAttachments.byteOffset,
    byteLength: $VkSubpassDescription2KHR.pPreserveAttachments.byteLength
  }),
});
class VkSubpassDependency2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._srcSubpass = 0;
    this._dstSubpass = 0;
    this._srcStageMask = 0;
    this._dstStageMask = 0;
    this._srcAccessMask = 0;
    this._dstAccessMask = 0;
    this._dependencyFlags = 0;
    this._viewOffset = 0;
    this.memoryBuffer = new ArrayBuffer(VkSubpassDependency2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.srcSubpass !== void 0) this.srcSubpass = opts.srcSubpass;
      if (opts.dstSubpass !== void 0) this.dstSubpass = opts.dstSubpass;
      if (opts.srcStageMask !== void 0) this.srcStageMask = opts.srcStageMask;
      if (opts.dstStageMask !== void 0) this.dstStageMask = opts.dstStageMask;
      if (opts.srcAccessMask !== void 0) this.srcAccessMask = opts.srcAccessMask;
      if (opts.dstAccessMask !== void 0) this.dstAccessMask = opts.dstAccessMask;
      if (opts.dependencyFlags !== void 0) this.dependencyFlags = opts.dependencyFlags;
      if (opts.viewOffset !== void 0) this.viewOffset = opts.viewOffset;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSubpassDependency2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get srcSubpass() {
    return this._srcSubpass;
  }
  set srcSubpass(value) {
    
this.memoryView.setUint32($VkSubpassDependency2KHR.srcSubpass.byteOffset, value);
this._srcSubpass = value;
  }
  get dstSubpass() {
    return this._dstSubpass;
  }
  set dstSubpass(value) {
    
this.memoryView.setUint32($VkSubpassDependency2KHR.dstSubpass.byteOffset, value);
this._dstSubpass = value;
  }
  get srcStageMask() {
    return this._srcStageMask;
  }
  set srcStageMask(value) {
    
this.memoryView.setInt32($VkSubpassDependency2KHR.srcStageMask.byteOffset, value);
this._srcStageMask = value;
  }
  get dstStageMask() {
    return this._dstStageMask;
  }
  set dstStageMask(value) {
    
this.memoryView.setInt32($VkSubpassDependency2KHR.dstStageMask.byteOffset, value);
this._dstStageMask = value;
  }
  get srcAccessMask() {
    return this._srcAccessMask;
  }
  set srcAccessMask(value) {
    
this.memoryView.setInt32($VkSubpassDependency2KHR.srcAccessMask.byteOffset, value);
this._srcAccessMask = value;
  }
  get dstAccessMask() {
    return this._dstAccessMask;
  }
  set dstAccessMask(value) {
    
this.memoryView.setInt32($VkSubpassDependency2KHR.dstAccessMask.byteOffset, value);
this._dstAccessMask = value;
  }
  get dependencyFlags() {
    return this._dependencyFlags;
  }
  set dependencyFlags(value) {
    
this.memoryView.setInt32($VkSubpassDependency2KHR.dependencyFlags.byteOffset, value);
this._dependencyFlags = value;
  }
  get viewOffset() {
    return this._viewOffset;
  }
  set viewOffset(value) {
    
this.memoryView.setInt32($VkSubpassDependency2KHR.viewOffset.byteOffset, value);
this._viewOffset = value;
  }
  
};

VkSubpassDependency2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSubpassDependency2KHR = memoryLayouts.VkSubpassDependency2KHR;
VkSubpassDependency2KHR.byteLength = $VkSubpassDependency2KHR.byteLength;

VkSubpassDependency2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSubpassDependency2KHR.sType.byteOffset,
    byteLength: $VkSubpassDependency2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSubpassDependency2KHR.pNext.byteOffset,
    byteLength: $VkSubpassDependency2KHR.pNext.byteLength
  }),
  srcSubpass: Object.freeze({
    byteOffset: $VkSubpassDependency2KHR.srcSubpass.byteOffset,
    byteLength: $VkSubpassDependency2KHR.srcSubpass.byteLength
  }),
  dstSubpass: Object.freeze({
    byteOffset: $VkSubpassDependency2KHR.dstSubpass.byteOffset,
    byteLength: $VkSubpassDependency2KHR.dstSubpass.byteLength
  }),
  srcStageMask: Object.freeze({
    byteOffset: $VkSubpassDependency2KHR.srcStageMask.byteOffset,
    byteLength: $VkSubpassDependency2KHR.srcStageMask.byteLength
  }),
  dstStageMask: Object.freeze({
    byteOffset: $VkSubpassDependency2KHR.dstStageMask.byteOffset,
    byteLength: $VkSubpassDependency2KHR.dstStageMask.byteLength
  }),
  srcAccessMask: Object.freeze({
    byteOffset: $VkSubpassDependency2KHR.srcAccessMask.byteOffset,
    byteLength: $VkSubpassDependency2KHR.srcAccessMask.byteLength
  }),
  dstAccessMask: Object.freeze({
    byteOffset: $VkSubpassDependency2KHR.dstAccessMask.byteOffset,
    byteLength: $VkSubpassDependency2KHR.dstAccessMask.byteLength
  }),
  dependencyFlags: Object.freeze({
    byteOffset: $VkSubpassDependency2KHR.dependencyFlags.byteOffset,
    byteLength: $VkSubpassDependency2KHR.dependencyFlags.byteLength
  }),
  viewOffset: Object.freeze({
    byteOffset: $VkSubpassDependency2KHR.viewOffset.byteOffset,
    byteLength: $VkSubpassDependency2KHR.viewOffset.byteLength
  }),
});
class VkRenderPassCreateInfo2KHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._attachmentCount = 0;
    this._pAttachments = null;
    this._subpassCount = 0;
    this._pSubpasses = null;
    this._dependencyCount = 0;
    this._pDependencies = null;
    this._correlatedViewMaskCount = 0;
    this._pCorrelatedViewMasks = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassCreateInfo2KHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.attachmentCount !== void 0) this.attachmentCount = opts.attachmentCount;
      if (opts.pAttachments !== void 0) this.pAttachments = opts.pAttachments;
      if (opts.subpassCount !== void 0) this.subpassCount = opts.subpassCount;
      if (opts.pSubpasses !== void 0) this.pSubpasses = opts.pSubpasses;
      if (opts.dependencyCount !== void 0) this.dependencyCount = opts.dependencyCount;
      if (opts.pDependencies !== void 0) this.pDependencies = opts.pDependencies;
      if (opts.correlatedViewMaskCount !== void 0) this.correlatedViewMaskCount = opts.correlatedViewMaskCount;
      if (opts.pCorrelatedViewMasks !== void 0) this.pCorrelatedViewMasks = opts.pCorrelatedViewMasks;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkRenderPassCreateInfo2KHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkRenderPassCreateInfo2KHR.flags.byteOffset, value);
this._flags = value;
  }
  get attachmentCount() {
    return this._attachmentCount;
  }
  set attachmentCount(value) {
    
this.memoryView.setUint32($VkRenderPassCreateInfo2KHR.attachmentCount.byteOffset, value);
this._attachmentCount = value;
  }
  get pAttachments() {
    return this._pAttachments;
  }
  set pAttachments(value) {
    
  }
  get subpassCount() {
    return this._subpassCount;
  }
  set subpassCount(value) {
    
this.memoryView.setUint32($VkRenderPassCreateInfo2KHR.subpassCount.byteOffset, value);
this._subpassCount = value;
  }
  get pSubpasses() {
    return this._pSubpasses;
  }
  set pSubpasses(value) {
    
  }
  get dependencyCount() {
    return this._dependencyCount;
  }
  set dependencyCount(value) {
    
this.memoryView.setUint32($VkRenderPassCreateInfo2KHR.dependencyCount.byteOffset, value);
this._dependencyCount = value;
  }
  get pDependencies() {
    return this._pDependencies;
  }
  set pDependencies(value) {
    
  }
  get correlatedViewMaskCount() {
    return this._correlatedViewMaskCount;
  }
  set correlatedViewMaskCount(value) {
    
this.memoryView.setUint32($VkRenderPassCreateInfo2KHR.correlatedViewMaskCount.byteOffset, value);
this._correlatedViewMaskCount = value;
  }
  get pCorrelatedViewMasks() {
    return this._pCorrelatedViewMasks;
  }
  set pCorrelatedViewMasks(value) {
    
  }
  
};

VkRenderPassCreateInfo2KHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pAttachments !== null) { }
  
  if (this.pSubpasses !== null) { }
  
  if (this.pDependencies !== null) { }
  
};

const $VkRenderPassCreateInfo2KHR = memoryLayouts.VkRenderPassCreateInfo2KHR;
VkRenderPassCreateInfo2KHR.byteLength = $VkRenderPassCreateInfo2KHR.byteLength;

VkRenderPassCreateInfo2KHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo2KHR.sType.byteOffset,
    byteLength: $VkRenderPassCreateInfo2KHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo2KHR.pNext.byteOffset,
    byteLength: $VkRenderPassCreateInfo2KHR.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo2KHR.flags.byteOffset,
    byteLength: $VkRenderPassCreateInfo2KHR.flags.byteLength
  }),
  attachmentCount: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo2KHR.attachmentCount.byteOffset,
    byteLength: $VkRenderPassCreateInfo2KHR.attachmentCount.byteLength
  }),
  pAttachments: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo2KHR.pAttachments.byteOffset,
    byteLength: $VkRenderPassCreateInfo2KHR.pAttachments.byteLength
  }),
  subpassCount: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo2KHR.subpassCount.byteOffset,
    byteLength: $VkRenderPassCreateInfo2KHR.subpassCount.byteLength
  }),
  pSubpasses: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo2KHR.pSubpasses.byteOffset,
    byteLength: $VkRenderPassCreateInfo2KHR.pSubpasses.byteLength
  }),
  dependencyCount: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo2KHR.dependencyCount.byteOffset,
    byteLength: $VkRenderPassCreateInfo2KHR.dependencyCount.byteLength
  }),
  pDependencies: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo2KHR.pDependencies.byteOffset,
    byteLength: $VkRenderPassCreateInfo2KHR.pDependencies.byteLength
  }),
  correlatedViewMaskCount: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo2KHR.correlatedViewMaskCount.byteOffset,
    byteLength: $VkRenderPassCreateInfo2KHR.correlatedViewMaskCount.byteLength
  }),
  pCorrelatedViewMasks: Object.freeze({
    byteOffset: $VkRenderPassCreateInfo2KHR.pCorrelatedViewMasks.byteOffset,
    byteLength: $VkRenderPassCreateInfo2KHR.pCorrelatedViewMasks.byteLength
  }),
});
class VkSubpassBeginInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._contents = 0;
    this.memoryBuffer = new ArrayBuffer(VkSubpassBeginInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.contents !== void 0) this.contents = opts.contents;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSubpassBeginInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get contents() {
    return this._contents;
  }
  set contents(value) {
    
this.memoryView.setInt32($VkSubpassBeginInfoKHR.contents.byteOffset, value);
this._contents = value;
  }
  
};

VkSubpassBeginInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSubpassBeginInfoKHR = memoryLayouts.VkSubpassBeginInfoKHR;
VkSubpassBeginInfoKHR.byteLength = $VkSubpassBeginInfoKHR.byteLength;

VkSubpassBeginInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSubpassBeginInfoKHR.sType.byteOffset,
    byteLength: $VkSubpassBeginInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSubpassBeginInfoKHR.pNext.byteOffset,
    byteLength: $VkSubpassBeginInfoKHR.pNext.byteLength
  }),
  contents: Object.freeze({
    byteOffset: $VkSubpassBeginInfoKHR.contents.byteOffset,
    byteLength: $VkSubpassBeginInfoKHR.contents.byteLength
  }),
});
class VkSubpassEndInfoKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this.memoryBuffer = new ArrayBuffer(VkSubpassEndInfoKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSubpassEndInfoKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  
};

VkSubpassEndInfoKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSubpassEndInfoKHR = memoryLayouts.VkSubpassEndInfoKHR;
VkSubpassEndInfoKHR.byteLength = $VkSubpassEndInfoKHR.byteLength;

VkSubpassEndInfoKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSubpassEndInfoKHR.sType.byteOffset,
    byteLength: $VkSubpassEndInfoKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSubpassEndInfoKHR.pNext.byteOffset,
    byteLength: $VkSubpassEndInfoKHR.pNext.byteLength
  }),
});
class VkVertexInputBindingDivisorDescriptionEXT {
  constructor(opts) {
    this._binding = 0;
    this._divisor = 0;
    this.memoryBuffer = new ArrayBuffer(VkVertexInputBindingDivisorDescriptionEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.binding !== void 0) this.binding = opts.binding;
      if (opts.divisor !== void 0) this.divisor = opts.divisor;
      
    }
  }
  get binding() {
    return this._binding;
  }
  set binding(value) {
    
this.memoryView.setUint32($VkVertexInputBindingDivisorDescriptionEXT.binding.byteOffset, value);
this._binding = value;
  }
  get divisor() {
    return this._divisor;
  }
  set divisor(value) {
    
this.memoryView.setUint32($VkVertexInputBindingDivisorDescriptionEXT.divisor.byteOffset, value);
this._divisor = value;
  }
  
};

VkVertexInputBindingDivisorDescriptionEXT.prototype.flush = function flush() {
  
};

const $VkVertexInputBindingDivisorDescriptionEXT = memoryLayouts.VkVertexInputBindingDivisorDescriptionEXT;
VkVertexInputBindingDivisorDescriptionEXT.byteLength = $VkVertexInputBindingDivisorDescriptionEXT.byteLength;

VkVertexInputBindingDivisorDescriptionEXT.memoryLayout = Object.freeze({
  binding: Object.freeze({
    byteOffset: $VkVertexInputBindingDivisorDescriptionEXT.binding.byteOffset,
    byteLength: $VkVertexInputBindingDivisorDescriptionEXT.binding.byteLength
  }),
  divisor: Object.freeze({
    byteOffset: $VkVertexInputBindingDivisorDescriptionEXT.divisor.byteOffset,
    byteLength: $VkVertexInputBindingDivisorDescriptionEXT.divisor.byteLength
  }),
});
class VkPipelineVertexInputDivisorStateCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._vertexBindingDivisorCount = 0;
    this._pVertexBindingDivisors = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineVertexInputDivisorStateCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vertexBindingDivisorCount !== void 0) this.vertexBindingDivisorCount = opts.vertexBindingDivisorCount;
      if (opts.pVertexBindingDivisors !== void 0) this.pVertexBindingDivisors = opts.pVertexBindingDivisors;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineVertexInputDivisorStateCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get vertexBindingDivisorCount() {
    return this._vertexBindingDivisorCount;
  }
  set vertexBindingDivisorCount(value) {
    
this.memoryView.setUint32($VkPipelineVertexInputDivisorStateCreateInfoEXT.vertexBindingDivisorCount.byteOffset, value);
this._vertexBindingDivisorCount = value;
  }
  get pVertexBindingDivisors() {
    return this._pVertexBindingDivisors;
  }
  set pVertexBindingDivisors(value) {
    
  }
  
};

VkPipelineVertexInputDivisorStateCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pVertexBindingDivisors !== null) { }
  
};

const $VkPipelineVertexInputDivisorStateCreateInfoEXT = memoryLayouts.VkPipelineVertexInputDivisorStateCreateInfoEXT;
VkPipelineVertexInputDivisorStateCreateInfoEXT.byteLength = $VkPipelineVertexInputDivisorStateCreateInfoEXT.byteLength;

VkPipelineVertexInputDivisorStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineVertexInputDivisorStateCreateInfoEXT.sType.byteOffset,
    byteLength: $VkPipelineVertexInputDivisorStateCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineVertexInputDivisorStateCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkPipelineVertexInputDivisorStateCreateInfoEXT.pNext.byteLength
  }),
  vertexBindingDivisorCount: Object.freeze({
    byteOffset: $VkPipelineVertexInputDivisorStateCreateInfoEXT.vertexBindingDivisorCount.byteOffset,
    byteLength: $VkPipelineVertexInputDivisorStateCreateInfoEXT.vertexBindingDivisorCount.byteLength
  }),
  pVertexBindingDivisors: Object.freeze({
    byteOffset: $VkPipelineVertexInputDivisorStateCreateInfoEXT.pVertexBindingDivisors.byteOffset,
    byteLength: $VkPipelineVertexInputDivisorStateCreateInfoEXT.pVertexBindingDivisors.byteLength
  }),
});
class VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxVertexAttribDivisor = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxVertexAttribDivisor() {
    return this._maxVertexAttribDivisor;
  }
  
};

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = memoryLayouts.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.byteLength = $VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.byteLength;

VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.pNext.byteLength
  }),
  maxVertexAttribDivisor: Object.freeze({
    byteOffset: $VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.maxVertexAttribDivisor.byteOffset,
    byteLength: $VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.maxVertexAttribDivisor.byteLength
  }),
});
class VkPhysicalDevicePCIBusInfoPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._pciDomain = 0;
    this._pciBus = 0;
    this._pciDevice = 0;
    this._pciFunction = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevicePCIBusInfoPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDevicePCIBusInfoPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get pciDomain() {
    return this._pciDomain;
  }
  get pciBus() {
    return this._pciBus;
  }
  get pciDevice() {
    return this._pciDevice;
  }
  get pciFunction() {
    return this._pciFunction;
  }
  
};

VkPhysicalDevicePCIBusInfoPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDevicePCIBusInfoPropertiesEXT = memoryLayouts.VkPhysicalDevicePCIBusInfoPropertiesEXT;
VkPhysicalDevicePCIBusInfoPropertiesEXT.byteLength = $VkPhysicalDevicePCIBusInfoPropertiesEXT.byteLength;

VkPhysicalDevicePCIBusInfoPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDevicePCIBusInfoPropertiesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDevicePCIBusInfoPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDevicePCIBusInfoPropertiesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDevicePCIBusInfoPropertiesEXT.pNext.byteLength
  }),
  pciDomain: Object.freeze({
    byteOffset: $VkPhysicalDevicePCIBusInfoPropertiesEXT.pciDomain.byteOffset,
    byteLength: $VkPhysicalDevicePCIBusInfoPropertiesEXT.pciDomain.byteLength
  }),
  pciBus: Object.freeze({
    byteOffset: $VkPhysicalDevicePCIBusInfoPropertiesEXT.pciBus.byteOffset,
    byteLength: $VkPhysicalDevicePCIBusInfoPropertiesEXT.pciBus.byteLength
  }),
  pciDevice: Object.freeze({
    byteOffset: $VkPhysicalDevicePCIBusInfoPropertiesEXT.pciDevice.byteOffset,
    byteLength: $VkPhysicalDevicePCIBusInfoPropertiesEXT.pciDevice.byteLength
  }),
  pciFunction: Object.freeze({
    byteOffset: $VkPhysicalDevicePCIBusInfoPropertiesEXT.pciFunction.byteOffset,
    byteLength: $VkPhysicalDevicePCIBusInfoPropertiesEXT.pciFunction.byteLength
  }),
});
class VkCommandBufferInheritanceConditionalRenderingInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._conditionalRenderingEnable = 0;
    this.memoryBuffer = new ArrayBuffer(VkCommandBufferInheritanceConditionalRenderingInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conditionalRenderingEnable !== void 0) this.conditionalRenderingEnable = opts.conditionalRenderingEnable;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkCommandBufferInheritanceConditionalRenderingInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get conditionalRenderingEnable() {
    return this._conditionalRenderingEnable;
  }
  set conditionalRenderingEnable(value) {
    
this.memoryView.setUint32($VkCommandBufferInheritanceConditionalRenderingInfoEXT.conditionalRenderingEnable.byteOffset, value);
this._conditionalRenderingEnable = value;
  }
  
};

VkCommandBufferInheritanceConditionalRenderingInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkCommandBufferInheritanceConditionalRenderingInfoEXT = memoryLayouts.VkCommandBufferInheritanceConditionalRenderingInfoEXT;
VkCommandBufferInheritanceConditionalRenderingInfoEXT.byteLength = $VkCommandBufferInheritanceConditionalRenderingInfoEXT.byteLength;

VkCommandBufferInheritanceConditionalRenderingInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkCommandBufferInheritanceConditionalRenderingInfoEXT.sType.byteOffset,
    byteLength: $VkCommandBufferInheritanceConditionalRenderingInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkCommandBufferInheritanceConditionalRenderingInfoEXT.pNext.byteOffset,
    byteLength: $VkCommandBufferInheritanceConditionalRenderingInfoEXT.pNext.byteLength
  }),
  conditionalRenderingEnable: Object.freeze({
    byteOffset: $VkCommandBufferInheritanceConditionalRenderingInfoEXT.conditionalRenderingEnable.byteOffset,
    byteLength: $VkCommandBufferInheritanceConditionalRenderingInfoEXT.conditionalRenderingEnable.byteLength
  }),
});
class VkPhysicalDevice8BitStorageFeaturesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._storageBuffer8BitAccess = 0;
    this._uniformAndStorageBuffer8BitAccess = 0;
    this._storagePushConstant8 = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDevice8BitStorageFeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.storageBuffer8BitAccess !== void 0) this.storageBuffer8BitAccess = opts.storageBuffer8BitAccess;
      if (opts.uniformAndStorageBuffer8BitAccess !== void 0) this.uniformAndStorageBuffer8BitAccess = opts.uniformAndStorageBuffer8BitAccess;
      if (opts.storagePushConstant8 !== void 0) this.storagePushConstant8 = opts.storagePushConstant8;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDevice8BitStorageFeaturesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get storageBuffer8BitAccess() {
    return this._storageBuffer8BitAccess;
  }
  set storageBuffer8BitAccess(value) {
    
this.memoryView.setUint32($VkPhysicalDevice8BitStorageFeaturesKHR.storageBuffer8BitAccess.byteOffset, value);
this._storageBuffer8BitAccess = value;
  }
  get uniformAndStorageBuffer8BitAccess() {
    return this._uniformAndStorageBuffer8BitAccess;
  }
  set uniformAndStorageBuffer8BitAccess(value) {
    
this.memoryView.setUint32($VkPhysicalDevice8BitStorageFeaturesKHR.uniformAndStorageBuffer8BitAccess.byteOffset, value);
this._uniformAndStorageBuffer8BitAccess = value;
  }
  get storagePushConstant8() {
    return this._storagePushConstant8;
  }
  set storagePushConstant8(value) {
    
this.memoryView.setUint32($VkPhysicalDevice8BitStorageFeaturesKHR.storagePushConstant8.byteOffset, value);
this._storagePushConstant8 = value;
  }
  
};

VkPhysicalDevice8BitStorageFeaturesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDevice8BitStorageFeaturesKHR = memoryLayouts.VkPhysicalDevice8BitStorageFeaturesKHR;
VkPhysicalDevice8BitStorageFeaturesKHR.byteLength = $VkPhysicalDevice8BitStorageFeaturesKHR.byteLength;

VkPhysicalDevice8BitStorageFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDevice8BitStorageFeaturesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDevice8BitStorageFeaturesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDevice8BitStorageFeaturesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDevice8BitStorageFeaturesKHR.pNext.byteLength
  }),
  storageBuffer8BitAccess: Object.freeze({
    byteOffset: $VkPhysicalDevice8BitStorageFeaturesKHR.storageBuffer8BitAccess.byteOffset,
    byteLength: $VkPhysicalDevice8BitStorageFeaturesKHR.storageBuffer8BitAccess.byteLength
  }),
  uniformAndStorageBuffer8BitAccess: Object.freeze({
    byteOffset: $VkPhysicalDevice8BitStorageFeaturesKHR.uniformAndStorageBuffer8BitAccess.byteOffset,
    byteLength: $VkPhysicalDevice8BitStorageFeaturesKHR.uniformAndStorageBuffer8BitAccess.byteLength
  }),
  storagePushConstant8: Object.freeze({
    byteOffset: $VkPhysicalDevice8BitStorageFeaturesKHR.storagePushConstant8.byteOffset,
    byteLength: $VkPhysicalDevice8BitStorageFeaturesKHR.storagePushConstant8.byteLength
  }),
});
class VkPhysicalDeviceConditionalRenderingFeaturesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._conditionalRendering = 0;
    this._inheritedConditionalRendering = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceConditionalRenderingFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.conditionalRendering !== void 0) this.conditionalRendering = opts.conditionalRendering;
      if (opts.inheritedConditionalRendering !== void 0) this.inheritedConditionalRendering = opts.inheritedConditionalRendering;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceConditionalRenderingFeaturesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get conditionalRendering() {
    return this._conditionalRendering;
  }
  set conditionalRendering(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceConditionalRenderingFeaturesEXT.conditionalRendering.byteOffset, value);
this._conditionalRendering = value;
  }
  get inheritedConditionalRendering() {
    return this._inheritedConditionalRendering;
  }
  set inheritedConditionalRendering(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceConditionalRenderingFeaturesEXT.inheritedConditionalRendering.byteOffset, value);
this._inheritedConditionalRendering = value;
  }
  
};

VkPhysicalDeviceConditionalRenderingFeaturesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceConditionalRenderingFeaturesEXT = memoryLayouts.VkPhysicalDeviceConditionalRenderingFeaturesEXT;
VkPhysicalDeviceConditionalRenderingFeaturesEXT.byteLength = $VkPhysicalDeviceConditionalRenderingFeaturesEXT.byteLength;

VkPhysicalDeviceConditionalRenderingFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceConditionalRenderingFeaturesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceConditionalRenderingFeaturesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceConditionalRenderingFeaturesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceConditionalRenderingFeaturesEXT.pNext.byteLength
  }),
  conditionalRendering: Object.freeze({
    byteOffset: $VkPhysicalDeviceConditionalRenderingFeaturesEXT.conditionalRendering.byteOffset,
    byteLength: $VkPhysicalDeviceConditionalRenderingFeaturesEXT.conditionalRendering.byteLength
  }),
  inheritedConditionalRendering: Object.freeze({
    byteOffset: $VkPhysicalDeviceConditionalRenderingFeaturesEXT.inheritedConditionalRendering.byteOffset,
    byteLength: $VkPhysicalDeviceConditionalRenderingFeaturesEXT.inheritedConditionalRendering.byteLength
  }),
});
class VkPhysicalDeviceVulkanMemoryModelFeaturesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._vulkanMemoryModel = 0;
    this._vulkanMemoryModelDeviceScope = 0;
    this._vulkanMemoryModelAvailabilityVisibilityChains = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vulkanMemoryModel !== void 0) this.vulkanMemoryModel = opts.vulkanMemoryModel;
      if (opts.vulkanMemoryModelDeviceScope !== void 0) this.vulkanMemoryModelDeviceScope = opts.vulkanMemoryModelDeviceScope;
      if (opts.vulkanMemoryModelAvailabilityVisibilityChains !== void 0) this.vulkanMemoryModelAvailabilityVisibilityChains = opts.vulkanMemoryModelAvailabilityVisibilityChains;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get vulkanMemoryModel() {
    return this._vulkanMemoryModel;
  }
  set vulkanMemoryModel(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.vulkanMemoryModel.byteOffset, value);
this._vulkanMemoryModel = value;
  }
  get vulkanMemoryModelDeviceScope() {
    return this._vulkanMemoryModelDeviceScope;
  }
  set vulkanMemoryModelDeviceScope(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.vulkanMemoryModelDeviceScope.byteOffset, value);
this._vulkanMemoryModelDeviceScope = value;
  }
  get vulkanMemoryModelAvailabilityVisibilityChains() {
    return this._vulkanMemoryModelAvailabilityVisibilityChains;
  }
  set vulkanMemoryModelAvailabilityVisibilityChains(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.vulkanMemoryModelAvailabilityVisibilityChains.byteOffset, value);
this._vulkanMemoryModelAvailabilityVisibilityChains = value;
  }
  
};

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = memoryLayouts.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;
VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.byteLength = $VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.byteLength;

VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.pNext.byteLength
  }),
  vulkanMemoryModel: Object.freeze({
    byteOffset: $VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.vulkanMemoryModel.byteOffset,
    byteLength: $VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.vulkanMemoryModel.byteLength
  }),
  vulkanMemoryModelDeviceScope: Object.freeze({
    byteOffset: $VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.vulkanMemoryModelDeviceScope.byteOffset,
    byteLength: $VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.vulkanMemoryModelDeviceScope.byteLength
  }),
  vulkanMemoryModelAvailabilityVisibilityChains: Object.freeze({
    byteOffset: $VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.vulkanMemoryModelAvailabilityVisibilityChains.byteOffset,
    byteLength: $VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.vulkanMemoryModelAvailabilityVisibilityChains.byteLength
  }),
});
class VkPhysicalDeviceShaderAtomicInt64FeaturesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._shaderBufferInt64Atomics = 0;
    this._shaderSharedInt64Atomics = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shaderBufferInt64Atomics !== void 0) this.shaderBufferInt64Atomics = opts.shaderBufferInt64Atomics;
      if (opts.shaderSharedInt64Atomics !== void 0) this.shaderSharedInt64Atomics = opts.shaderSharedInt64Atomics;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get shaderBufferInt64Atomics() {
    return this._shaderBufferInt64Atomics;
  }
  set shaderBufferInt64Atomics(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.shaderBufferInt64Atomics.byteOffset, value);
this._shaderBufferInt64Atomics = value;
  }
  get shaderSharedInt64Atomics() {
    return this._shaderSharedInt64Atomics;
  }
  set shaderSharedInt64Atomics(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.shaderSharedInt64Atomics.byteOffset, value);
this._shaderSharedInt64Atomics = value;
  }
  
};

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = memoryLayouts.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;
VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.byteLength = $VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.byteLength;

VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.pNext.byteLength
  }),
  shaderBufferInt64Atomics: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.shaderBufferInt64Atomics.byteOffset,
    byteLength: $VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.shaderBufferInt64Atomics.byteLength
  }),
  shaderSharedInt64Atomics: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.shaderSharedInt64Atomics.byteOffset,
    byteLength: $VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.shaderSharedInt64Atomics.byteLength
  }),
});
class VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._vertexAttributeInstanceRateDivisor = 0;
    this._vertexAttributeInstanceRateZeroDivisor = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vertexAttributeInstanceRateDivisor !== void 0) this.vertexAttributeInstanceRateDivisor = opts.vertexAttributeInstanceRateDivisor;
      if (opts.vertexAttributeInstanceRateZeroDivisor !== void 0) this.vertexAttributeInstanceRateZeroDivisor = opts.vertexAttributeInstanceRateZeroDivisor;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get vertexAttributeInstanceRateDivisor() {
    return this._vertexAttributeInstanceRateDivisor;
  }
  set vertexAttributeInstanceRateDivisor(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.vertexAttributeInstanceRateDivisor.byteOffset, value);
this._vertexAttributeInstanceRateDivisor = value;
  }
  get vertexAttributeInstanceRateZeroDivisor() {
    return this._vertexAttributeInstanceRateZeroDivisor;
  }
  set vertexAttributeInstanceRateZeroDivisor(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.vertexAttributeInstanceRateZeroDivisor.byteOffset, value);
this._vertexAttributeInstanceRateZeroDivisor = value;
  }
  
};

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = memoryLayouts.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;
VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.byteLength = $VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.byteLength;

VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.pNext.byteLength
  }),
  vertexAttributeInstanceRateDivisor: Object.freeze({
    byteOffset: $VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.vertexAttributeInstanceRateDivisor.byteOffset,
    byteLength: $VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.vertexAttributeInstanceRateDivisor.byteLength
  }),
  vertexAttributeInstanceRateZeroDivisor: Object.freeze({
    byteOffset: $VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.vertexAttributeInstanceRateZeroDivisor.byteOffset,
    byteLength: $VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.vertexAttributeInstanceRateZeroDivisor.byteLength
  }),
});
class VkQueueFamilyCheckpointPropertiesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._checkpointExecutionStageMask = 0;
    this.memoryBuffer = new ArrayBuffer(VkQueueFamilyCheckpointPropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkQueueFamilyCheckpointPropertiesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get checkpointExecutionStageMask() {
    return this._checkpointExecutionStageMask;
  }
  
};

VkQueueFamilyCheckpointPropertiesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkQueueFamilyCheckpointPropertiesNV = memoryLayouts.VkQueueFamilyCheckpointPropertiesNV;
VkQueueFamilyCheckpointPropertiesNV.byteLength = $VkQueueFamilyCheckpointPropertiesNV.byteLength;

VkQueueFamilyCheckpointPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkQueueFamilyCheckpointPropertiesNV.sType.byteOffset,
    byteLength: $VkQueueFamilyCheckpointPropertiesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkQueueFamilyCheckpointPropertiesNV.pNext.byteOffset,
    byteLength: $VkQueueFamilyCheckpointPropertiesNV.pNext.byteLength
  }),
  checkpointExecutionStageMask: Object.freeze({
    byteOffset: $VkQueueFamilyCheckpointPropertiesNV.checkpointExecutionStageMask.byteOffset,
    byteLength: $VkQueueFamilyCheckpointPropertiesNV.checkpointExecutionStageMask.byteLength
  }),
});
class VkCheckpointDataNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._stage = 0;
    this._pCheckpointMarker = null;
    this.memoryBuffer = new ArrayBuffer(VkCheckpointDataNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.pCheckpointMarker !== void 0) this.pCheckpointMarker = opts.pCheckpointMarker;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkCheckpointDataNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get stage() {
    return this._stage;
  }
  get pCheckpointMarker() {
    return this._pCheckpointMarker;
  }
  set pCheckpointMarker(value) {
    
  }
  
};

VkCheckpointDataNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkCheckpointDataNV = memoryLayouts.VkCheckpointDataNV;
VkCheckpointDataNV.byteLength = $VkCheckpointDataNV.byteLength;

VkCheckpointDataNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkCheckpointDataNV.sType.byteOffset,
    byteLength: $VkCheckpointDataNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkCheckpointDataNV.pNext.byteOffset,
    byteLength: $VkCheckpointDataNV.pNext.byteLength
  }),
  stage: Object.freeze({
    byteOffset: $VkCheckpointDataNV.stage.byteOffset,
    byteLength: $VkCheckpointDataNV.stage.byteLength
  }),
  pCheckpointMarker: Object.freeze({
    byteOffset: $VkCheckpointDataNV.pCheckpointMarker.byteOffset,
    byteLength: $VkCheckpointDataNV.pCheckpointMarker.byteLength
  }),
});
class VkPhysicalDeviceDepthStencilResolvePropertiesKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._supportedDepthResolveModes = 0;
    this._supportedStencilResolveModes = 0;
    this._independentResolveNone = 0;
    this._independentResolve = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDepthStencilResolvePropertiesKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceDepthStencilResolvePropertiesKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get supportedDepthResolveModes() {
    return this._supportedDepthResolveModes;
  }
  get supportedStencilResolveModes() {
    return this._supportedStencilResolveModes;
  }
  get independentResolveNone() {
    return this._independentResolveNone;
  }
  get independentResolve() {
    return this._independentResolve;
  }
  
};

VkPhysicalDeviceDepthStencilResolvePropertiesKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceDepthStencilResolvePropertiesKHR = memoryLayouts.VkPhysicalDeviceDepthStencilResolvePropertiesKHR;
VkPhysicalDeviceDepthStencilResolvePropertiesKHR.byteLength = $VkPhysicalDeviceDepthStencilResolvePropertiesKHR.byteLength;

VkPhysicalDeviceDepthStencilResolvePropertiesKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceDepthStencilResolvePropertiesKHR.sType.byteOffset,
    byteLength: $VkPhysicalDeviceDepthStencilResolvePropertiesKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceDepthStencilResolvePropertiesKHR.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceDepthStencilResolvePropertiesKHR.pNext.byteLength
  }),
  supportedDepthResolveModes: Object.freeze({
    byteOffset: $VkPhysicalDeviceDepthStencilResolvePropertiesKHR.supportedDepthResolveModes.byteOffset,
    byteLength: $VkPhysicalDeviceDepthStencilResolvePropertiesKHR.supportedDepthResolveModes.byteLength
  }),
  supportedStencilResolveModes: Object.freeze({
    byteOffset: $VkPhysicalDeviceDepthStencilResolvePropertiesKHR.supportedStencilResolveModes.byteOffset,
    byteLength: $VkPhysicalDeviceDepthStencilResolvePropertiesKHR.supportedStencilResolveModes.byteLength
  }),
  independentResolveNone: Object.freeze({
    byteOffset: $VkPhysicalDeviceDepthStencilResolvePropertiesKHR.independentResolveNone.byteOffset,
    byteLength: $VkPhysicalDeviceDepthStencilResolvePropertiesKHR.independentResolveNone.byteLength
  }),
  independentResolve: Object.freeze({
    byteOffset: $VkPhysicalDeviceDepthStencilResolvePropertiesKHR.independentResolve.byteOffset,
    byteLength: $VkPhysicalDeviceDepthStencilResolvePropertiesKHR.independentResolve.byteLength
  }),
});
class VkSubpassDescriptionDepthStencilResolveKHR {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._depthResolveMode = 0;
    this._stencilResolveMode = 0;
    this._pDepthStencilResolveAttachment = null;
    this.memoryBuffer = new ArrayBuffer(VkSubpassDescriptionDepthStencilResolveKHR.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.depthResolveMode !== void 0) this.depthResolveMode = opts.depthResolveMode;
      if (opts.stencilResolveMode !== void 0) this.stencilResolveMode = opts.stencilResolveMode;
      if (opts.pDepthStencilResolveAttachment !== void 0) this.pDepthStencilResolveAttachment = opts.pDepthStencilResolveAttachment;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkSubpassDescriptionDepthStencilResolveKHR.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get depthResolveMode() {
    return this._depthResolveMode;
  }
  set depthResolveMode(value) {
    
this.memoryView.setInt32($VkSubpassDescriptionDepthStencilResolveKHR.depthResolveMode.byteOffset, value);
this._depthResolveMode = value;
  }
  get stencilResolveMode() {
    return this._stencilResolveMode;
  }
  set stencilResolveMode(value) {
    
this.memoryView.setInt32($VkSubpassDescriptionDepthStencilResolveKHR.stencilResolveMode.byteOffset, value);
this._stencilResolveMode = value;
  }
  get pDepthStencilResolveAttachment() {
    return this._pDepthStencilResolveAttachment;
  }
  set pDepthStencilResolveAttachment(value) {
    String
  }
  
};

VkSubpassDescriptionDepthStencilResolveKHR.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkSubpassDescriptionDepthStencilResolveKHR = memoryLayouts.VkSubpassDescriptionDepthStencilResolveKHR;
VkSubpassDescriptionDepthStencilResolveKHR.byteLength = $VkSubpassDescriptionDepthStencilResolveKHR.byteLength;

VkSubpassDescriptionDepthStencilResolveKHR.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkSubpassDescriptionDepthStencilResolveKHR.sType.byteOffset,
    byteLength: $VkSubpassDescriptionDepthStencilResolveKHR.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkSubpassDescriptionDepthStencilResolveKHR.pNext.byteOffset,
    byteLength: $VkSubpassDescriptionDepthStencilResolveKHR.pNext.byteLength
  }),
  depthResolveMode: Object.freeze({
    byteOffset: $VkSubpassDescriptionDepthStencilResolveKHR.depthResolveMode.byteOffset,
    byteLength: $VkSubpassDescriptionDepthStencilResolveKHR.depthResolveMode.byteLength
  }),
  stencilResolveMode: Object.freeze({
    byteOffset: $VkSubpassDescriptionDepthStencilResolveKHR.stencilResolveMode.byteOffset,
    byteLength: $VkSubpassDescriptionDepthStencilResolveKHR.stencilResolveMode.byteLength
  }),
  pDepthStencilResolveAttachment: Object.freeze({
    byteOffset: $VkSubpassDescriptionDepthStencilResolveKHR.pDepthStencilResolveAttachment.byteOffset,
    byteLength: $VkSubpassDescriptionDepthStencilResolveKHR.pDepthStencilResolveAttachment.byteLength
  }),
});
class VkImageViewASTCDecodeModeEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._decodeMode = 0;
    this.memoryBuffer = new ArrayBuffer(VkImageViewASTCDecodeModeEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.decodeMode !== void 0) this.decodeMode = opts.decodeMode;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageViewASTCDecodeModeEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get decodeMode() {
    return this._decodeMode;
  }
  set decodeMode(value) {
    
this.memoryView.setInt32($VkImageViewASTCDecodeModeEXT.decodeMode.byteOffset, value);
this._decodeMode = value;
  }
  
};

VkImageViewASTCDecodeModeEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImageViewASTCDecodeModeEXT = memoryLayouts.VkImageViewASTCDecodeModeEXT;
VkImageViewASTCDecodeModeEXT.byteLength = $VkImageViewASTCDecodeModeEXT.byteLength;

VkImageViewASTCDecodeModeEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageViewASTCDecodeModeEXT.sType.byteOffset,
    byteLength: $VkImageViewASTCDecodeModeEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageViewASTCDecodeModeEXT.pNext.byteOffset,
    byteLength: $VkImageViewASTCDecodeModeEXT.pNext.byteLength
  }),
  decodeMode: Object.freeze({
    byteOffset: $VkImageViewASTCDecodeModeEXT.decodeMode.byteOffset,
    byteLength: $VkImageViewASTCDecodeModeEXT.decodeMode.byteLength
  }),
});
class VkPhysicalDeviceASTCDecodeFeaturesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._decodeModeSharedExponent = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceASTCDecodeFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.decodeModeSharedExponent !== void 0) this.decodeModeSharedExponent = opts.decodeModeSharedExponent;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceASTCDecodeFeaturesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get decodeModeSharedExponent() {
    return this._decodeModeSharedExponent;
  }
  set decodeModeSharedExponent(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceASTCDecodeFeaturesEXT.decodeModeSharedExponent.byteOffset, value);
this._decodeModeSharedExponent = value;
  }
  
};

VkPhysicalDeviceASTCDecodeFeaturesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceASTCDecodeFeaturesEXT = memoryLayouts.VkPhysicalDeviceASTCDecodeFeaturesEXT;
VkPhysicalDeviceASTCDecodeFeaturesEXT.byteLength = $VkPhysicalDeviceASTCDecodeFeaturesEXT.byteLength;

VkPhysicalDeviceASTCDecodeFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceASTCDecodeFeaturesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceASTCDecodeFeaturesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceASTCDecodeFeaturesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceASTCDecodeFeaturesEXT.pNext.byteLength
  }),
  decodeModeSharedExponent: Object.freeze({
    byteOffset: $VkPhysicalDeviceASTCDecodeFeaturesEXT.decodeModeSharedExponent.byteOffset,
    byteLength: $VkPhysicalDeviceASTCDecodeFeaturesEXT.decodeModeSharedExponent.byteLength
  }),
});
class VkPhysicalDeviceTransformFeedbackFeaturesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._transformFeedback = 0;
    this._geometryStreams = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceTransformFeedbackFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.transformFeedback !== void 0) this.transformFeedback = opts.transformFeedback;
      if (opts.geometryStreams !== void 0) this.geometryStreams = opts.geometryStreams;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceTransformFeedbackFeaturesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get transformFeedback() {
    return this._transformFeedback;
  }
  set transformFeedback(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceTransformFeedbackFeaturesEXT.transformFeedback.byteOffset, value);
this._transformFeedback = value;
  }
  get geometryStreams() {
    return this._geometryStreams;
  }
  set geometryStreams(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceTransformFeedbackFeaturesEXT.geometryStreams.byteOffset, value);
this._geometryStreams = value;
  }
  
};

VkPhysicalDeviceTransformFeedbackFeaturesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceTransformFeedbackFeaturesEXT = memoryLayouts.VkPhysicalDeviceTransformFeedbackFeaturesEXT;
VkPhysicalDeviceTransformFeedbackFeaturesEXT.byteLength = $VkPhysicalDeviceTransformFeedbackFeaturesEXT.byteLength;

VkPhysicalDeviceTransformFeedbackFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackFeaturesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackFeaturesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackFeaturesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackFeaturesEXT.pNext.byteLength
  }),
  transformFeedback: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackFeaturesEXT.transformFeedback.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackFeaturesEXT.transformFeedback.byteLength
  }),
  geometryStreams: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackFeaturesEXT.geometryStreams.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackFeaturesEXT.geometryStreams.byteLength
  }),
});
class VkPhysicalDeviceTransformFeedbackPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxTransformFeedbackStreams = 0;
    this._maxTransformFeedbackBuffers = 0;
    this._maxTransformFeedbackBufferSize = 0;
    this._maxTransformFeedbackStreamDataSize = 0;
    this._maxTransformFeedbackBufferDataSize = 0;
    this._maxTransformFeedbackBufferDataStride = 0;
    this._transformFeedbackQueries = 0;
    this._transformFeedbackStreamsLinesTriangles = 0;
    this._transformFeedbackRasterizationStreamSelect = 0;
    this._transformFeedbackDraw = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceTransformFeedbackPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceTransformFeedbackPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxTransformFeedbackStreams() {
    return this._maxTransformFeedbackStreams;
  }
  get maxTransformFeedbackBuffers() {
    return this._maxTransformFeedbackBuffers;
  }
  get maxTransformFeedbackBufferSize() {
    return this._maxTransformFeedbackBufferSize;
  }
  get maxTransformFeedbackStreamDataSize() {
    return this._maxTransformFeedbackStreamDataSize;
  }
  get maxTransformFeedbackBufferDataSize() {
    return this._maxTransformFeedbackBufferDataSize;
  }
  get maxTransformFeedbackBufferDataStride() {
    return this._maxTransformFeedbackBufferDataStride;
  }
  get transformFeedbackQueries() {
    return this._transformFeedbackQueries;
  }
  get transformFeedbackStreamsLinesTriangles() {
    return this._transformFeedbackStreamsLinesTriangles;
  }
  get transformFeedbackRasterizationStreamSelect() {
    return this._transformFeedbackRasterizationStreamSelect;
  }
  get transformFeedbackDraw() {
    return this._transformFeedbackDraw;
  }
  
};

VkPhysicalDeviceTransformFeedbackPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceTransformFeedbackPropertiesEXT = memoryLayouts.VkPhysicalDeviceTransformFeedbackPropertiesEXT;
VkPhysicalDeviceTransformFeedbackPropertiesEXT.byteLength = $VkPhysicalDeviceTransformFeedbackPropertiesEXT.byteLength;

VkPhysicalDeviceTransformFeedbackPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.pNext.byteLength
  }),
  maxTransformFeedbackStreams: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.maxTransformFeedbackStreams.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.maxTransformFeedbackStreams.byteLength
  }),
  maxTransformFeedbackBuffers: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.maxTransformFeedbackBuffers.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.maxTransformFeedbackBuffers.byteLength
  }),
  maxTransformFeedbackBufferSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.maxTransformFeedbackBufferSize.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.maxTransformFeedbackBufferSize.byteLength
  }),
  maxTransformFeedbackStreamDataSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.maxTransformFeedbackStreamDataSize.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.maxTransformFeedbackStreamDataSize.byteLength
  }),
  maxTransformFeedbackBufferDataSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.maxTransformFeedbackBufferDataSize.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.maxTransformFeedbackBufferDataSize.byteLength
  }),
  maxTransformFeedbackBufferDataStride: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.maxTransformFeedbackBufferDataStride.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.maxTransformFeedbackBufferDataStride.byteLength
  }),
  transformFeedbackQueries: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.transformFeedbackQueries.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.transformFeedbackQueries.byteLength
  }),
  transformFeedbackStreamsLinesTriangles: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.transformFeedbackStreamsLinesTriangles.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.transformFeedbackStreamsLinesTriangles.byteLength
  }),
  transformFeedbackRasterizationStreamSelect: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.transformFeedbackRasterizationStreamSelect.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.transformFeedbackRasterizationStreamSelect.byteLength
  }),
  transformFeedbackDraw: Object.freeze({
    byteOffset: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.transformFeedbackDraw.byteOffset,
    byteLength: $VkPhysicalDeviceTransformFeedbackPropertiesEXT.transformFeedbackDraw.byteLength
  }),
});
class VkPipelineRasterizationStateStreamCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._rasterizationStream = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineRasterizationStateStreamCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.rasterizationStream !== void 0) this.rasterizationStream = opts.rasterizationStream;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationStateStreamCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationStateStreamCreateInfoEXT.flags.byteOffset, value);
this._flags = value;
  }
  get rasterizationStream() {
    return this._rasterizationStream;
  }
  set rasterizationStream(value) {
    
this.memoryView.setUint32($VkPipelineRasterizationStateStreamCreateInfoEXT.rasterizationStream.byteOffset, value);
this._rasterizationStream = value;
  }
  
};

VkPipelineRasterizationStateStreamCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineRasterizationStateStreamCreateInfoEXT = memoryLayouts.VkPipelineRasterizationStateStreamCreateInfoEXT;
VkPipelineRasterizationStateStreamCreateInfoEXT.byteLength = $VkPipelineRasterizationStateStreamCreateInfoEXT.byteLength;

VkPipelineRasterizationStateStreamCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateStreamCreateInfoEXT.sType.byteOffset,
    byteLength: $VkPipelineRasterizationStateStreamCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateStreamCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkPipelineRasterizationStateStreamCreateInfoEXT.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateStreamCreateInfoEXT.flags.byteOffset,
    byteLength: $VkPipelineRasterizationStateStreamCreateInfoEXT.flags.byteLength
  }),
  rasterizationStream: Object.freeze({
    byteOffset: $VkPipelineRasterizationStateStreamCreateInfoEXT.rasterizationStream.byteOffset,
    byteLength: $VkPipelineRasterizationStateStreamCreateInfoEXT.rasterizationStream.byteLength
  }),
});
class VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._representativeFragmentTest = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.representativeFragmentTest !== void 0) this.representativeFragmentTest = opts.representativeFragmentTest;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get representativeFragmentTest() {
    return this._representativeFragmentTest;
  }
  set representativeFragmentTest(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.representativeFragmentTest.byteOffset, value);
this._representativeFragmentTest = value;
  }
  
};

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = memoryLayouts.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.byteLength = $VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.byteLength;

VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.pNext.byteLength
  }),
  representativeFragmentTest: Object.freeze({
    byteOffset: $VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.representativeFragmentTest.byteOffset,
    byteLength: $VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.representativeFragmentTest.byteLength
  }),
});
class VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._representativeFragmentTestEnable = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineRepresentativeFragmentTestStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.representativeFragmentTestEnable !== void 0) this.representativeFragmentTestEnable = opts.representativeFragmentTestEnable;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineRepresentativeFragmentTestStateCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get representativeFragmentTestEnable() {
    return this._representativeFragmentTestEnable;
  }
  set representativeFragmentTestEnable(value) {
    
this.memoryView.setUint32($VkPipelineRepresentativeFragmentTestStateCreateInfoNV.representativeFragmentTestEnable.byteOffset, value);
this._representativeFragmentTestEnable = value;
  }
  
};

VkPipelineRepresentativeFragmentTestStateCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineRepresentativeFragmentTestStateCreateInfoNV = memoryLayouts.VkPipelineRepresentativeFragmentTestStateCreateInfoNV;
VkPipelineRepresentativeFragmentTestStateCreateInfoNV.byteLength = $VkPipelineRepresentativeFragmentTestStateCreateInfoNV.byteLength;

VkPipelineRepresentativeFragmentTestStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineRepresentativeFragmentTestStateCreateInfoNV.sType.byteOffset,
    byteLength: $VkPipelineRepresentativeFragmentTestStateCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineRepresentativeFragmentTestStateCreateInfoNV.pNext.byteOffset,
    byteLength: $VkPipelineRepresentativeFragmentTestStateCreateInfoNV.pNext.byteLength
  }),
  representativeFragmentTestEnable: Object.freeze({
    byteOffset: $VkPipelineRepresentativeFragmentTestStateCreateInfoNV.representativeFragmentTestEnable.byteOffset,
    byteLength: $VkPipelineRepresentativeFragmentTestStateCreateInfoNV.representativeFragmentTestEnable.byteLength
  }),
});
class VkPhysicalDeviceExclusiveScissorFeaturesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._exclusiveScissor = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceExclusiveScissorFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.exclusiveScissor !== void 0) this.exclusiveScissor = opts.exclusiveScissor;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceExclusiveScissorFeaturesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get exclusiveScissor() {
    return this._exclusiveScissor;
  }
  set exclusiveScissor(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceExclusiveScissorFeaturesNV.exclusiveScissor.byteOffset, value);
this._exclusiveScissor = value;
  }
  
};

VkPhysicalDeviceExclusiveScissorFeaturesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceExclusiveScissorFeaturesNV = memoryLayouts.VkPhysicalDeviceExclusiveScissorFeaturesNV;
VkPhysicalDeviceExclusiveScissorFeaturesNV.byteLength = $VkPhysicalDeviceExclusiveScissorFeaturesNV.byteLength;

VkPhysicalDeviceExclusiveScissorFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceExclusiveScissorFeaturesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceExclusiveScissorFeaturesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceExclusiveScissorFeaturesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceExclusiveScissorFeaturesNV.pNext.byteLength
  }),
  exclusiveScissor: Object.freeze({
    byteOffset: $VkPhysicalDeviceExclusiveScissorFeaturesNV.exclusiveScissor.byteOffset,
    byteLength: $VkPhysicalDeviceExclusiveScissorFeaturesNV.exclusiveScissor.byteLength
  }),
});
class VkPipelineViewportExclusiveScissorStateCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._exclusiveScissorCount = 0;
    this._pExclusiveScissors = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineViewportExclusiveScissorStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.exclusiveScissorCount !== void 0) this.exclusiveScissorCount = opts.exclusiveScissorCount;
      if (opts.pExclusiveScissors !== void 0) this.pExclusiveScissors = opts.pExclusiveScissors;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineViewportExclusiveScissorStateCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get exclusiveScissorCount() {
    return this._exclusiveScissorCount;
  }
  set exclusiveScissorCount(value) {
    
this.memoryView.setUint32($VkPipelineViewportExclusiveScissorStateCreateInfoNV.exclusiveScissorCount.byteOffset, value);
this._exclusiveScissorCount = value;
  }
  get pExclusiveScissors() {
    return this._pExclusiveScissors;
  }
  set pExclusiveScissors(value) {
    
  }
  
};

VkPipelineViewportExclusiveScissorStateCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pExclusiveScissors !== null) { }
  
};

const $VkPipelineViewportExclusiveScissorStateCreateInfoNV = memoryLayouts.VkPipelineViewportExclusiveScissorStateCreateInfoNV;
VkPipelineViewportExclusiveScissorStateCreateInfoNV.byteLength = $VkPipelineViewportExclusiveScissorStateCreateInfoNV.byteLength;

VkPipelineViewportExclusiveScissorStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineViewportExclusiveScissorStateCreateInfoNV.sType.byteOffset,
    byteLength: $VkPipelineViewportExclusiveScissorStateCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineViewportExclusiveScissorStateCreateInfoNV.pNext.byteOffset,
    byteLength: $VkPipelineViewportExclusiveScissorStateCreateInfoNV.pNext.byteLength
  }),
  exclusiveScissorCount: Object.freeze({
    byteOffset: $VkPipelineViewportExclusiveScissorStateCreateInfoNV.exclusiveScissorCount.byteOffset,
    byteLength: $VkPipelineViewportExclusiveScissorStateCreateInfoNV.exclusiveScissorCount.byteLength
  }),
  pExclusiveScissors: Object.freeze({
    byteOffset: $VkPipelineViewportExclusiveScissorStateCreateInfoNV.pExclusiveScissors.byteOffset,
    byteLength: $VkPipelineViewportExclusiveScissorStateCreateInfoNV.pExclusiveScissors.byteLength
  }),
});
class VkPhysicalDeviceCornerSampledImageFeaturesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._cornerSampledImage = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceCornerSampledImageFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.cornerSampledImage !== void 0) this.cornerSampledImage = opts.cornerSampledImage;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceCornerSampledImageFeaturesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get cornerSampledImage() {
    return this._cornerSampledImage;
  }
  set cornerSampledImage(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceCornerSampledImageFeaturesNV.cornerSampledImage.byteOffset, value);
this._cornerSampledImage = value;
  }
  
};

VkPhysicalDeviceCornerSampledImageFeaturesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceCornerSampledImageFeaturesNV = memoryLayouts.VkPhysicalDeviceCornerSampledImageFeaturesNV;
VkPhysicalDeviceCornerSampledImageFeaturesNV.byteLength = $VkPhysicalDeviceCornerSampledImageFeaturesNV.byteLength;

VkPhysicalDeviceCornerSampledImageFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceCornerSampledImageFeaturesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceCornerSampledImageFeaturesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceCornerSampledImageFeaturesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceCornerSampledImageFeaturesNV.pNext.byteLength
  }),
  cornerSampledImage: Object.freeze({
    byteOffset: $VkPhysicalDeviceCornerSampledImageFeaturesNV.cornerSampledImage.byteOffset,
    byteLength: $VkPhysicalDeviceCornerSampledImageFeaturesNV.cornerSampledImage.byteLength
  }),
});
class VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._computeDerivativeGroupQuads = 0;
    this._computeDerivativeGroupLinear = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.computeDerivativeGroupQuads !== void 0) this.computeDerivativeGroupQuads = opts.computeDerivativeGroupQuads;
      if (opts.computeDerivativeGroupLinear !== void 0) this.computeDerivativeGroupLinear = opts.computeDerivativeGroupLinear;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get computeDerivativeGroupQuads() {
    return this._computeDerivativeGroupQuads;
  }
  set computeDerivativeGroupQuads(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.computeDerivativeGroupQuads.byteOffset, value);
this._computeDerivativeGroupQuads = value;
  }
  get computeDerivativeGroupLinear() {
    return this._computeDerivativeGroupLinear;
  }
  set computeDerivativeGroupLinear(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.computeDerivativeGroupLinear.byteOffset, value);
this._computeDerivativeGroupLinear = value;
  }
  
};

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = memoryLayouts.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;
VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.byteLength = $VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.byteLength;

VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.pNext.byteLength
  }),
  computeDerivativeGroupQuads: Object.freeze({
    byteOffset: $VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.computeDerivativeGroupQuads.byteOffset,
    byteLength: $VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.computeDerivativeGroupQuads.byteLength
  }),
  computeDerivativeGroupLinear: Object.freeze({
    byteOffset: $VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.computeDerivativeGroupLinear.byteOffset,
    byteLength: $VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.computeDerivativeGroupLinear.byteLength
  }),
});
class VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._fragmentShaderBarycentric = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fragmentShaderBarycentric !== void 0) this.fragmentShaderBarycentric = opts.fragmentShaderBarycentric;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get fragmentShaderBarycentric() {
    return this._fragmentShaderBarycentric;
  }
  set fragmentShaderBarycentric(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.fragmentShaderBarycentric.byteOffset, value);
this._fragmentShaderBarycentric = value;
  }
  
};

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = memoryLayouts.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;
VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.byteLength = $VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.byteLength;

VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.pNext.byteLength
  }),
  fragmentShaderBarycentric: Object.freeze({
    byteOffset: $VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.fragmentShaderBarycentric.byteOffset,
    byteLength: $VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.fragmentShaderBarycentric.byteLength
  }),
});
class VkPhysicalDeviceShaderImageFootprintFeaturesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._imageFootprint = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceShaderImageFootprintFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.imageFootprint !== void 0) this.imageFootprint = opts.imageFootprint;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceShaderImageFootprintFeaturesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get imageFootprint() {
    return this._imageFootprint;
  }
  set imageFootprint(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceShaderImageFootprintFeaturesNV.imageFootprint.byteOffset, value);
this._imageFootprint = value;
  }
  
};

VkPhysicalDeviceShaderImageFootprintFeaturesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceShaderImageFootprintFeaturesNV = memoryLayouts.VkPhysicalDeviceShaderImageFootprintFeaturesNV;
VkPhysicalDeviceShaderImageFootprintFeaturesNV.byteLength = $VkPhysicalDeviceShaderImageFootprintFeaturesNV.byteLength;

VkPhysicalDeviceShaderImageFootprintFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderImageFootprintFeaturesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceShaderImageFootprintFeaturesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderImageFootprintFeaturesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceShaderImageFootprintFeaturesNV.pNext.byteLength
  }),
  imageFootprint: Object.freeze({
    byteOffset: $VkPhysicalDeviceShaderImageFootprintFeaturesNV.imageFootprint.byteOffset,
    byteLength: $VkPhysicalDeviceShaderImageFootprintFeaturesNV.imageFootprint.byteLength
  }),
});
class VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._dedicatedAllocationImageAliasing = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.dedicatedAllocationImageAliasing !== void 0) this.dedicatedAllocationImageAliasing = opts.dedicatedAllocationImageAliasing;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get dedicatedAllocationImageAliasing() {
    return this._dedicatedAllocationImageAliasing;
  }
  set dedicatedAllocationImageAliasing(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.dedicatedAllocationImageAliasing.byteOffset, value);
this._dedicatedAllocationImageAliasing = value;
  }
  
};

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = memoryLayouts.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.byteLength = $VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.byteLength;

VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.pNext.byteLength
  }),
  dedicatedAllocationImageAliasing: Object.freeze({
    byteOffset: $VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.dedicatedAllocationImageAliasing.byteOffset,
    byteLength: $VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.dedicatedAllocationImageAliasing.byteLength
  }),
});
class VkShadingRatePaletteNV {
  constructor(opts) {
    this._shadingRatePaletteEntryCount = 0;
    this._pShadingRatePaletteEntries = null;
    this.memoryBuffer = new ArrayBuffer(VkShadingRatePaletteNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.shadingRatePaletteEntryCount !== void 0) this.shadingRatePaletteEntryCount = opts.shadingRatePaletteEntryCount;
      if (opts.pShadingRatePaletteEntries !== void 0) this.pShadingRatePaletteEntries = opts.pShadingRatePaletteEntries;
      
    }
  }
  get shadingRatePaletteEntryCount() {
    return this._shadingRatePaletteEntryCount;
  }
  set shadingRatePaletteEntryCount(value) {
    
this.memoryView.setUint32($VkShadingRatePaletteNV.shadingRatePaletteEntryCount.byteOffset, value);
this._shadingRatePaletteEntryCount = value;
  }
  get pShadingRatePaletteEntries() {
    return this._pShadingRatePaletteEntries;
  }
  set pShadingRatePaletteEntries(value) {
    
  }
  
};

VkShadingRatePaletteNV.prototype.flush = function flush() {
  
};

const $VkShadingRatePaletteNV = memoryLayouts.VkShadingRatePaletteNV;
VkShadingRatePaletteNV.byteLength = $VkShadingRatePaletteNV.byteLength;

VkShadingRatePaletteNV.memoryLayout = Object.freeze({
  shadingRatePaletteEntryCount: Object.freeze({
    byteOffset: $VkShadingRatePaletteNV.shadingRatePaletteEntryCount.byteOffset,
    byteLength: $VkShadingRatePaletteNV.shadingRatePaletteEntryCount.byteLength
  }),
  pShadingRatePaletteEntries: Object.freeze({
    byteOffset: $VkShadingRatePaletteNV.pShadingRatePaletteEntries.byteOffset,
    byteLength: $VkShadingRatePaletteNV.pShadingRatePaletteEntries.byteLength
  }),
});
class VkPipelineViewportShadingRateImageStateCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._shadingRateImageEnable = 0;
    this._viewportCount = 0;
    this._pShadingRatePalettes = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineViewportShadingRateImageStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shadingRateImageEnable !== void 0) this.shadingRateImageEnable = opts.shadingRateImageEnable;
      if (opts.viewportCount !== void 0) this.viewportCount = opts.viewportCount;
      if (opts.pShadingRatePalettes !== void 0) this.pShadingRatePalettes = opts.pShadingRatePalettes;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineViewportShadingRateImageStateCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get shadingRateImageEnable() {
    return this._shadingRateImageEnable;
  }
  set shadingRateImageEnable(value) {
    
this.memoryView.setUint32($VkPipelineViewportShadingRateImageStateCreateInfoNV.shadingRateImageEnable.byteOffset, value);
this._shadingRateImageEnable = value;
  }
  get viewportCount() {
    return this._viewportCount;
  }
  set viewportCount(value) {
    
this.memoryView.setUint32($VkPipelineViewportShadingRateImageStateCreateInfoNV.viewportCount.byteOffset, value);
this._viewportCount = value;
  }
  get pShadingRatePalettes() {
    return this._pShadingRatePalettes;
  }
  set pShadingRatePalettes(value) {
    
  }
  
};

VkPipelineViewportShadingRateImageStateCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pShadingRatePalettes !== null) { }
  
};

const $VkPipelineViewportShadingRateImageStateCreateInfoNV = memoryLayouts.VkPipelineViewportShadingRateImageStateCreateInfoNV;
VkPipelineViewportShadingRateImageStateCreateInfoNV.byteLength = $VkPipelineViewportShadingRateImageStateCreateInfoNV.byteLength;

VkPipelineViewportShadingRateImageStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineViewportShadingRateImageStateCreateInfoNV.sType.byteOffset,
    byteLength: $VkPipelineViewportShadingRateImageStateCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineViewportShadingRateImageStateCreateInfoNV.pNext.byteOffset,
    byteLength: $VkPipelineViewportShadingRateImageStateCreateInfoNV.pNext.byteLength
  }),
  shadingRateImageEnable: Object.freeze({
    byteOffset: $VkPipelineViewportShadingRateImageStateCreateInfoNV.shadingRateImageEnable.byteOffset,
    byteLength: $VkPipelineViewportShadingRateImageStateCreateInfoNV.shadingRateImageEnable.byteLength
  }),
  viewportCount: Object.freeze({
    byteOffset: $VkPipelineViewportShadingRateImageStateCreateInfoNV.viewportCount.byteOffset,
    byteLength: $VkPipelineViewportShadingRateImageStateCreateInfoNV.viewportCount.byteLength
  }),
  pShadingRatePalettes: Object.freeze({
    byteOffset: $VkPipelineViewportShadingRateImageStateCreateInfoNV.pShadingRatePalettes.byteOffset,
    byteLength: $VkPipelineViewportShadingRateImageStateCreateInfoNV.pShadingRatePalettes.byteLength
  }),
});
class VkPhysicalDeviceShadingRateImageFeaturesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._shadingRateImage = 0;
    this._shadingRateCoarseSampleOrder = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceShadingRateImageFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.shadingRateImage !== void 0) this.shadingRateImage = opts.shadingRateImage;
      if (opts.shadingRateCoarseSampleOrder !== void 0) this.shadingRateCoarseSampleOrder = opts.shadingRateCoarseSampleOrder;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceShadingRateImageFeaturesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get shadingRateImage() {
    return this._shadingRateImage;
  }
  set shadingRateImage(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceShadingRateImageFeaturesNV.shadingRateImage.byteOffset, value);
this._shadingRateImage = value;
  }
  get shadingRateCoarseSampleOrder() {
    return this._shadingRateCoarseSampleOrder;
  }
  set shadingRateCoarseSampleOrder(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceShadingRateImageFeaturesNV.shadingRateCoarseSampleOrder.byteOffset, value);
this._shadingRateCoarseSampleOrder = value;
  }
  
};

VkPhysicalDeviceShadingRateImageFeaturesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceShadingRateImageFeaturesNV = memoryLayouts.VkPhysicalDeviceShadingRateImageFeaturesNV;
VkPhysicalDeviceShadingRateImageFeaturesNV.byteLength = $VkPhysicalDeviceShadingRateImageFeaturesNV.byteLength;

VkPhysicalDeviceShadingRateImageFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceShadingRateImageFeaturesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceShadingRateImageFeaturesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceShadingRateImageFeaturesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceShadingRateImageFeaturesNV.pNext.byteLength
  }),
  shadingRateImage: Object.freeze({
    byteOffset: $VkPhysicalDeviceShadingRateImageFeaturesNV.shadingRateImage.byteOffset,
    byteLength: $VkPhysicalDeviceShadingRateImageFeaturesNV.shadingRateImage.byteLength
  }),
  shadingRateCoarseSampleOrder: Object.freeze({
    byteOffset: $VkPhysicalDeviceShadingRateImageFeaturesNV.shadingRateCoarseSampleOrder.byteOffset,
    byteLength: $VkPhysicalDeviceShadingRateImageFeaturesNV.shadingRateCoarseSampleOrder.byteLength
  }),
});
class VkPhysicalDeviceShadingRateImagePropertiesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._shadingRateTexelSize = null;
    this._shadingRatePaletteSize = 0;
    this._shadingRateMaxCoarseSamples = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceShadingRateImagePropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceShadingRateImagePropertiesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get shadingRateTexelSize() {
    return this._shadingRateTexelSize;
  }
  get shadingRatePaletteSize() {
    return this._shadingRatePaletteSize;
  }
  get shadingRateMaxCoarseSamples() {
    return this._shadingRateMaxCoarseSamples;
  }
  
};

VkPhysicalDeviceShadingRateImagePropertiesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.shadingRateTexelSize !== null) { }
  
};

const $VkPhysicalDeviceShadingRateImagePropertiesNV = memoryLayouts.VkPhysicalDeviceShadingRateImagePropertiesNV;
VkPhysicalDeviceShadingRateImagePropertiesNV.byteLength = $VkPhysicalDeviceShadingRateImagePropertiesNV.byteLength;

VkPhysicalDeviceShadingRateImagePropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceShadingRateImagePropertiesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceShadingRateImagePropertiesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceShadingRateImagePropertiesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceShadingRateImagePropertiesNV.pNext.byteLength
  }),
  shadingRateTexelSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceShadingRateImagePropertiesNV.shadingRateTexelSize.byteOffset,
    byteLength: $VkPhysicalDeviceShadingRateImagePropertiesNV.shadingRateTexelSize.byteLength
  }),
  shadingRatePaletteSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceShadingRateImagePropertiesNV.shadingRatePaletteSize.byteOffset,
    byteLength: $VkPhysicalDeviceShadingRateImagePropertiesNV.shadingRatePaletteSize.byteLength
  }),
  shadingRateMaxCoarseSamples: Object.freeze({
    byteOffset: $VkPhysicalDeviceShadingRateImagePropertiesNV.shadingRateMaxCoarseSamples.byteOffset,
    byteLength: $VkPhysicalDeviceShadingRateImagePropertiesNV.shadingRateMaxCoarseSamples.byteLength
  }),
});
class VkCoarseSampleLocationNV {
  constructor(opts) {
    this._pixelX = 0;
    this._pixelY = 0;
    this._sample = 0;
    this.memoryBuffer = new ArrayBuffer(VkCoarseSampleLocationNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.pixelX !== void 0) this.pixelX = opts.pixelX;
      if (opts.pixelY !== void 0) this.pixelY = opts.pixelY;
      if (opts.sample !== void 0) this.sample = opts.sample;
      
    }
  }
  get pixelX() {
    return this._pixelX;
  }
  set pixelX(value) {
    
this.memoryView.setUint32($VkCoarseSampleLocationNV.pixelX.byteOffset, value);
this._pixelX = value;
  }
  get pixelY() {
    return this._pixelY;
  }
  set pixelY(value) {
    
this.memoryView.setUint32($VkCoarseSampleLocationNV.pixelY.byteOffset, value);
this._pixelY = value;
  }
  get sample() {
    return this._sample;
  }
  set sample(value) {
    
this.memoryView.setUint32($VkCoarseSampleLocationNV.sample.byteOffset, value);
this._sample = value;
  }
  
};

VkCoarseSampleLocationNV.prototype.flush = function flush() {
  
};

const $VkCoarseSampleLocationNV = memoryLayouts.VkCoarseSampleLocationNV;
VkCoarseSampleLocationNV.byteLength = $VkCoarseSampleLocationNV.byteLength;

VkCoarseSampleLocationNV.memoryLayout = Object.freeze({
  pixelX: Object.freeze({
    byteOffset: $VkCoarseSampleLocationNV.pixelX.byteOffset,
    byteLength: $VkCoarseSampleLocationNV.pixelX.byteLength
  }),
  pixelY: Object.freeze({
    byteOffset: $VkCoarseSampleLocationNV.pixelY.byteOffset,
    byteLength: $VkCoarseSampleLocationNV.pixelY.byteLength
  }),
  sample: Object.freeze({
    byteOffset: $VkCoarseSampleLocationNV.sample.byteOffset,
    byteLength: $VkCoarseSampleLocationNV.sample.byteLength
  }),
});
class VkCoarseSampleOrderCustomNV {
  constructor(opts) {
    this._shadingRate = 0;
    this._sampleCount = 0;
    this._sampleLocationCount = 0;
    this._pSampleLocations = null;
    this.memoryBuffer = new ArrayBuffer(VkCoarseSampleOrderCustomNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.shadingRate !== void 0) this.shadingRate = opts.shadingRate;
      if (opts.sampleCount !== void 0) this.sampleCount = opts.sampleCount;
      if (opts.sampleLocationCount !== void 0) this.sampleLocationCount = opts.sampleLocationCount;
      if (opts.pSampleLocations !== void 0) this.pSampleLocations = opts.pSampleLocations;
      
    }
  }
  get shadingRate() {
    return this._shadingRate;
  }
  set shadingRate(value) {
    
this.memoryView.setInt32($VkCoarseSampleOrderCustomNV.shadingRate.byteOffset, value);
this._shadingRate = value;
  }
  get sampleCount() {
    return this._sampleCount;
  }
  set sampleCount(value) {
    
this.memoryView.setUint32($VkCoarseSampleOrderCustomNV.sampleCount.byteOffset, value);
this._sampleCount = value;
  }
  get sampleLocationCount() {
    return this._sampleLocationCount;
  }
  set sampleLocationCount(value) {
    
this.memoryView.setUint32($VkCoarseSampleOrderCustomNV.sampleLocationCount.byteOffset, value);
this._sampleLocationCount = value;
  }
  get pSampleLocations() {
    return this._pSampleLocations;
  }
  set pSampleLocations(value) {
    
  }
  
};

VkCoarseSampleOrderCustomNV.prototype.flush = function flush() {
  
  if (this.pSampleLocations !== null) { }
  
};

const $VkCoarseSampleOrderCustomNV = memoryLayouts.VkCoarseSampleOrderCustomNV;
VkCoarseSampleOrderCustomNV.byteLength = $VkCoarseSampleOrderCustomNV.byteLength;

VkCoarseSampleOrderCustomNV.memoryLayout = Object.freeze({
  shadingRate: Object.freeze({
    byteOffset: $VkCoarseSampleOrderCustomNV.shadingRate.byteOffset,
    byteLength: $VkCoarseSampleOrderCustomNV.shadingRate.byteLength
  }),
  sampleCount: Object.freeze({
    byteOffset: $VkCoarseSampleOrderCustomNV.sampleCount.byteOffset,
    byteLength: $VkCoarseSampleOrderCustomNV.sampleCount.byteLength
  }),
  sampleLocationCount: Object.freeze({
    byteOffset: $VkCoarseSampleOrderCustomNV.sampleLocationCount.byteOffset,
    byteLength: $VkCoarseSampleOrderCustomNV.sampleLocationCount.byteLength
  }),
  pSampleLocations: Object.freeze({
    byteOffset: $VkCoarseSampleOrderCustomNV.pSampleLocations.byteOffset,
    byteLength: $VkCoarseSampleOrderCustomNV.pSampleLocations.byteLength
  }),
});
class VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._sampleOrderType = 0;
    this._customSampleOrderCount = 0;
    this._pCustomSampleOrders = null;
    this.memoryBuffer = new ArrayBuffer(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.sampleOrderType !== void 0) this.sampleOrderType = opts.sampleOrderType;
      if (opts.customSampleOrderCount !== void 0) this.customSampleOrderCount = opts.customSampleOrderCount;
      if (opts.pCustomSampleOrders !== void 0) this.pCustomSampleOrders = opts.pCustomSampleOrders;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get sampleOrderType() {
    return this._sampleOrderType;
  }
  set sampleOrderType(value) {
    
this.memoryView.setInt32($VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.sampleOrderType.byteOffset, value);
this._sampleOrderType = value;
  }
  get customSampleOrderCount() {
    return this._customSampleOrderCount;
  }
  set customSampleOrderCount(value) {
    
this.memoryView.setUint32($VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.customSampleOrderCount.byteOffset, value);
this._customSampleOrderCount = value;
  }
  get pCustomSampleOrders() {
    return this._pCustomSampleOrders;
  }
  set pCustomSampleOrders(value) {
    
  }
  
};

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pCustomSampleOrders !== null) { }
  
};

const $VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = memoryLayouts.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.byteLength = $VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.byteLength;

VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.sType.byteOffset,
    byteLength: $VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.pNext.byteOffset,
    byteLength: $VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.pNext.byteLength
  }),
  sampleOrderType: Object.freeze({
    byteOffset: $VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.sampleOrderType.byteOffset,
    byteLength: $VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.sampleOrderType.byteLength
  }),
  customSampleOrderCount: Object.freeze({
    byteOffset: $VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.customSampleOrderCount.byteOffset,
    byteLength: $VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.customSampleOrderCount.byteLength
  }),
  pCustomSampleOrders: Object.freeze({
    byteOffset: $VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.pCustomSampleOrders.byteOffset,
    byteLength: $VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.pCustomSampleOrders.byteLength
  }),
});
class VkPhysicalDeviceMeshShaderFeaturesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._taskShader = 0;
    this._meshShader = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMeshShaderFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.taskShader !== void 0) this.taskShader = opts.taskShader;
      if (opts.meshShader !== void 0) this.meshShader = opts.meshShader;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceMeshShaderFeaturesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get taskShader() {
    return this._taskShader;
  }
  set taskShader(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceMeshShaderFeaturesNV.taskShader.byteOffset, value);
this._taskShader = value;
  }
  get meshShader() {
    return this._meshShader;
  }
  set meshShader(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceMeshShaderFeaturesNV.meshShader.byteOffset, value);
this._meshShader = value;
  }
  
};

VkPhysicalDeviceMeshShaderFeaturesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceMeshShaderFeaturesNV = memoryLayouts.VkPhysicalDeviceMeshShaderFeaturesNV;
VkPhysicalDeviceMeshShaderFeaturesNV.byteLength = $VkPhysicalDeviceMeshShaderFeaturesNV.byteLength;

VkPhysicalDeviceMeshShaderFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderFeaturesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderFeaturesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderFeaturesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderFeaturesNV.pNext.byteLength
  }),
  taskShader: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderFeaturesNV.taskShader.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderFeaturesNV.taskShader.byteLength
  }),
  meshShader: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderFeaturesNV.meshShader.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderFeaturesNV.meshShader.byteLength
  }),
});
class VkPhysicalDeviceMeshShaderPropertiesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._maxDrawMeshTasksCount = 0;
    this._maxTaskWorkGroupInvocations = 0;
    this._maxTaskWorkGroupSize = null;
    this._maxTaskTotalMemorySize = 0;
    this._maxTaskOutputCount = 0;
    this._maxMeshWorkGroupInvocations = 0;
    this._maxMeshWorkGroupSize = null;
    this._maxMeshTotalMemorySize = 0;
    this._maxMeshOutputVertices = 0;
    this._maxMeshOutputPrimitives = 0;
    this._maxMeshMultiviewViewCount = 0;
    this._meshOutputPerVertexGranularity = 0;
    this._meshOutputPerPrimitiveGranularity = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMeshShaderPropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceMeshShaderPropertiesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get maxDrawMeshTasksCount() {
    return this._maxDrawMeshTasksCount;
  }
  get maxTaskWorkGroupInvocations() {
    return this._maxTaskWorkGroupInvocations;
  }
  get maxTaskWorkGroupSize() {
    return this._maxTaskWorkGroupSize;
  }
  get maxTaskTotalMemorySize() {
    return this._maxTaskTotalMemorySize;
  }
  get maxTaskOutputCount() {
    return this._maxTaskOutputCount;
  }
  get maxMeshWorkGroupInvocations() {
    return this._maxMeshWorkGroupInvocations;
  }
  get maxMeshWorkGroupSize() {
    return this._maxMeshWorkGroupSize;
  }
  get maxMeshTotalMemorySize() {
    return this._maxMeshTotalMemorySize;
  }
  get maxMeshOutputVertices() {
    return this._maxMeshOutputVertices;
  }
  get maxMeshOutputPrimitives() {
    return this._maxMeshOutputPrimitives;
  }
  get maxMeshMultiviewViewCount() {
    return this._maxMeshMultiviewViewCount;
  }
  get meshOutputPerVertexGranularity() {
    return this._meshOutputPerVertexGranularity;
  }
  get meshOutputPerPrimitiveGranularity() {
    return this._meshOutputPerPrimitiveGranularity;
  }
  
};

VkPhysicalDeviceMeshShaderPropertiesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.maxTaskWorkGroupSize !== null) { }
  
  if (this.maxMeshWorkGroupSize !== null) { }
  
};

const $VkPhysicalDeviceMeshShaderPropertiesNV = memoryLayouts.VkPhysicalDeviceMeshShaderPropertiesNV;
VkPhysicalDeviceMeshShaderPropertiesNV.byteLength = $VkPhysicalDeviceMeshShaderPropertiesNV.byteLength;

VkPhysicalDeviceMeshShaderPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.pNext.byteLength
  }),
  maxDrawMeshTasksCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.maxDrawMeshTasksCount.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.maxDrawMeshTasksCount.byteLength
  }),
  maxTaskWorkGroupInvocations: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskWorkGroupInvocations.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskWorkGroupInvocations.byteLength
  }),
  maxTaskWorkGroupSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskWorkGroupSize.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskWorkGroupSize.byteLength
  }),
  maxTaskTotalMemorySize: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskTotalMemorySize.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskTotalMemorySize.byteLength
  }),
  maxTaskOutputCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskOutputCount.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.maxTaskOutputCount.byteLength
  }),
  maxMeshWorkGroupInvocations: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshWorkGroupInvocations.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshWorkGroupInvocations.byteLength
  }),
  maxMeshWorkGroupSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshWorkGroupSize.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshWorkGroupSize.byteLength
  }),
  maxMeshTotalMemorySize: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshTotalMemorySize.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshTotalMemorySize.byteLength
  }),
  maxMeshOutputVertices: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshOutputVertices.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshOutputVertices.byteLength
  }),
  maxMeshOutputPrimitives: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshOutputPrimitives.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshOutputPrimitives.byteLength
  }),
  maxMeshMultiviewViewCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshMultiviewViewCount.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.maxMeshMultiviewViewCount.byteLength
  }),
  meshOutputPerVertexGranularity: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.meshOutputPerVertexGranularity.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.meshOutputPerVertexGranularity.byteLength
  }),
  meshOutputPerPrimitiveGranularity: Object.freeze({
    byteOffset: $VkPhysicalDeviceMeshShaderPropertiesNV.meshOutputPerPrimitiveGranularity.byteOffset,
    byteLength: $VkPhysicalDeviceMeshShaderPropertiesNV.meshOutputPerPrimitiveGranularity.byteLength
  }),
});
class VkDrawMeshTasksIndirectCommandNV {
  constructor(opts) {
    this._taskCount = 0;
    this._firstTask = 0;
    this.memoryBuffer = new ArrayBuffer(VkDrawMeshTasksIndirectCommandNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.taskCount !== void 0) this.taskCount = opts.taskCount;
      if (opts.firstTask !== void 0) this.firstTask = opts.firstTask;
      
    }
  }
  get taskCount() {
    return this._taskCount;
  }
  set taskCount(value) {
    
this.memoryView.setUint32($VkDrawMeshTasksIndirectCommandNV.taskCount.byteOffset, value);
this._taskCount = value;
  }
  get firstTask() {
    return this._firstTask;
  }
  set firstTask(value) {
    
this.memoryView.setUint32($VkDrawMeshTasksIndirectCommandNV.firstTask.byteOffset, value);
this._firstTask = value;
  }
  
};

VkDrawMeshTasksIndirectCommandNV.prototype.flush = function flush() {
  
};

const $VkDrawMeshTasksIndirectCommandNV = memoryLayouts.VkDrawMeshTasksIndirectCommandNV;
VkDrawMeshTasksIndirectCommandNV.byteLength = $VkDrawMeshTasksIndirectCommandNV.byteLength;

VkDrawMeshTasksIndirectCommandNV.memoryLayout = Object.freeze({
  taskCount: Object.freeze({
    byteOffset: $VkDrawMeshTasksIndirectCommandNV.taskCount.byteOffset,
    byteLength: $VkDrawMeshTasksIndirectCommandNV.taskCount.byteLength
  }),
  firstTask: Object.freeze({
    byteOffset: $VkDrawMeshTasksIndirectCommandNV.firstTask.byteOffset,
    byteLength: $VkDrawMeshTasksIndirectCommandNV.firstTask.byteLength
  }),
});
class VkRayTracingShaderGroupCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._type = 0;
    this._generalShader = 0;
    this._closestHitShader = 0;
    this._anyHitShader = 0;
    this._intersectionShader = 0;
    this.memoryBuffer = new ArrayBuffer(VkRayTracingShaderGroupCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.generalShader !== void 0) this.generalShader = opts.generalShader;
      if (opts.closestHitShader !== void 0) this.closestHitShader = opts.closestHitShader;
      if (opts.anyHitShader !== void 0) this.anyHitShader = opts.anyHitShader;
      if (opts.intersectionShader !== void 0) this.intersectionShader = opts.intersectionShader;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkRayTracingShaderGroupCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkRayTracingShaderGroupCreateInfoNV.type.byteOffset, value);
this._type = value;
  }
  get generalShader() {
    return this._generalShader;
  }
  set generalShader(value) {
    
this.memoryView.setUint32($VkRayTracingShaderGroupCreateInfoNV.generalShader.byteOffset, value);
this._generalShader = value;
  }
  get closestHitShader() {
    return this._closestHitShader;
  }
  set closestHitShader(value) {
    
this.memoryView.setUint32($VkRayTracingShaderGroupCreateInfoNV.closestHitShader.byteOffset, value);
this._closestHitShader = value;
  }
  get anyHitShader() {
    return this._anyHitShader;
  }
  set anyHitShader(value) {
    
this.memoryView.setUint32($VkRayTracingShaderGroupCreateInfoNV.anyHitShader.byteOffset, value);
this._anyHitShader = value;
  }
  get intersectionShader() {
    return this._intersectionShader;
  }
  set intersectionShader(value) {
    
this.memoryView.setUint32($VkRayTracingShaderGroupCreateInfoNV.intersectionShader.byteOffset, value);
this._intersectionShader = value;
  }
  
};

VkRayTracingShaderGroupCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkRayTracingShaderGroupCreateInfoNV = memoryLayouts.VkRayTracingShaderGroupCreateInfoNV;
VkRayTracingShaderGroupCreateInfoNV.byteLength = $VkRayTracingShaderGroupCreateInfoNV.byteLength;

VkRayTracingShaderGroupCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkRayTracingShaderGroupCreateInfoNV.sType.byteOffset,
    byteLength: $VkRayTracingShaderGroupCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkRayTracingShaderGroupCreateInfoNV.pNext.byteOffset,
    byteLength: $VkRayTracingShaderGroupCreateInfoNV.pNext.byteLength
  }),
  type: Object.freeze({
    byteOffset: $VkRayTracingShaderGroupCreateInfoNV.type.byteOffset,
    byteLength: $VkRayTracingShaderGroupCreateInfoNV.type.byteLength
  }),
  generalShader: Object.freeze({
    byteOffset: $VkRayTracingShaderGroupCreateInfoNV.generalShader.byteOffset,
    byteLength: $VkRayTracingShaderGroupCreateInfoNV.generalShader.byteLength
  }),
  closestHitShader: Object.freeze({
    byteOffset: $VkRayTracingShaderGroupCreateInfoNV.closestHitShader.byteOffset,
    byteLength: $VkRayTracingShaderGroupCreateInfoNV.closestHitShader.byteLength
  }),
  anyHitShader: Object.freeze({
    byteOffset: $VkRayTracingShaderGroupCreateInfoNV.anyHitShader.byteOffset,
    byteLength: $VkRayTracingShaderGroupCreateInfoNV.anyHitShader.byteLength
  }),
  intersectionShader: Object.freeze({
    byteOffset: $VkRayTracingShaderGroupCreateInfoNV.intersectionShader.byteOffset,
    byteLength: $VkRayTracingShaderGroupCreateInfoNV.intersectionShader.byteLength
  }),
});
class VkRayTracingPipelineCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._stageCount = 0;
    this._pStages = null;
    this._groupCount = 0;
    this._pGroups = null;
    this._maxRecursionDepth = 0;
    this._layout = null;
    this._basePipelineHandle = null;
    this._basePipelineIndex = 0;
    this.memoryBuffer = new ArrayBuffer(VkRayTracingPipelineCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.stageCount !== void 0) this.stageCount = opts.stageCount;
      if (opts.pStages !== void 0) this.pStages = opts.pStages;
      if (opts.groupCount !== void 0) this.groupCount = opts.groupCount;
      if (opts.pGroups !== void 0) this.pGroups = opts.pGroups;
      if (opts.maxRecursionDepth !== void 0) this.maxRecursionDepth = opts.maxRecursionDepth;
      if (opts.layout !== void 0) this.layout = opts.layout;
      if (opts.basePipelineHandle !== void 0) this.basePipelineHandle = opts.basePipelineHandle;
      if (opts.basePipelineIndex !== void 0) this.basePipelineIndex = opts.basePipelineIndex;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkRayTracingPipelineCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkRayTracingPipelineCreateInfoNV.flags.byteOffset, value);
this._flags = value;
  }
  get stageCount() {
    return this._stageCount;
  }
  set stageCount(value) {
    
this.memoryView.setUint32($VkRayTracingPipelineCreateInfoNV.stageCount.byteOffset, value);
this._stageCount = value;
  }
  get pStages() {
    return this._pStages;
  }
  set pStages(value) {
    
  }
  get groupCount() {
    return this._groupCount;
  }
  set groupCount(value) {
    
this.memoryView.setUint32($VkRayTracingPipelineCreateInfoNV.groupCount.byteOffset, value);
this._groupCount = value;
  }
  get pGroups() {
    return this._pGroups;
  }
  set pGroups(value) {
    
  }
  get maxRecursionDepth() {
    return this._maxRecursionDepth;
  }
  set maxRecursionDepth(value) {
    
this.memoryView.setUint32($VkRayTracingPipelineCreateInfoNV.maxRecursionDepth.byteOffset, value);
this._maxRecursionDepth = value;
  }
  get layout() {
    return this._layout;
  }
  set layout(value) {
    String
  }
  get basePipelineHandle() {
    return this._basePipelineHandle;
  }
  set basePipelineHandle(value) {
    String
  }
  get basePipelineIndex() {
    return this._basePipelineIndex;
  }
  set basePipelineIndex(value) {
    
this.memoryView.setInt32($VkRayTracingPipelineCreateInfoNV.basePipelineIndex.byteOffset, value);
this._basePipelineIndex = value;
  }
  
};

VkRayTracingPipelineCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pStages !== null) { }
  
  if (this.pGroups !== null) { }
  
};

const $VkRayTracingPipelineCreateInfoNV = memoryLayouts.VkRayTracingPipelineCreateInfoNV;
VkRayTracingPipelineCreateInfoNV.byteLength = $VkRayTracingPipelineCreateInfoNV.byteLength;

VkRayTracingPipelineCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkRayTracingPipelineCreateInfoNV.sType.byteOffset,
    byteLength: $VkRayTracingPipelineCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkRayTracingPipelineCreateInfoNV.pNext.byteOffset,
    byteLength: $VkRayTracingPipelineCreateInfoNV.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkRayTracingPipelineCreateInfoNV.flags.byteOffset,
    byteLength: $VkRayTracingPipelineCreateInfoNV.flags.byteLength
  }),
  stageCount: Object.freeze({
    byteOffset: $VkRayTracingPipelineCreateInfoNV.stageCount.byteOffset,
    byteLength: $VkRayTracingPipelineCreateInfoNV.stageCount.byteLength
  }),
  pStages: Object.freeze({
    byteOffset: $VkRayTracingPipelineCreateInfoNV.pStages.byteOffset,
    byteLength: $VkRayTracingPipelineCreateInfoNV.pStages.byteLength
  }),
  groupCount: Object.freeze({
    byteOffset: $VkRayTracingPipelineCreateInfoNV.groupCount.byteOffset,
    byteLength: $VkRayTracingPipelineCreateInfoNV.groupCount.byteLength
  }),
  pGroups: Object.freeze({
    byteOffset: $VkRayTracingPipelineCreateInfoNV.pGroups.byteOffset,
    byteLength: $VkRayTracingPipelineCreateInfoNV.pGroups.byteLength
  }),
  maxRecursionDepth: Object.freeze({
    byteOffset: $VkRayTracingPipelineCreateInfoNV.maxRecursionDepth.byteOffset,
    byteLength: $VkRayTracingPipelineCreateInfoNV.maxRecursionDepth.byteLength
  }),
  layout: Object.freeze({
    byteOffset: $VkRayTracingPipelineCreateInfoNV.layout.byteOffset,
    byteLength: $VkRayTracingPipelineCreateInfoNV.layout.byteLength
  }),
  basePipelineHandle: Object.freeze({
    byteOffset: $VkRayTracingPipelineCreateInfoNV.basePipelineHandle.byteOffset,
    byteLength: $VkRayTracingPipelineCreateInfoNV.basePipelineHandle.byteLength
  }),
  basePipelineIndex: Object.freeze({
    byteOffset: $VkRayTracingPipelineCreateInfoNV.basePipelineIndex.byteOffset,
    byteLength: $VkRayTracingPipelineCreateInfoNV.basePipelineIndex.byteLength
  }),
});
class VkGeometryTrianglesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._vertexData = null;
    this._vertexOffset = 0;
    this._vertexCount = 0;
    this._vertexStride = 0;
    this._vertexFormat = 0;
    this._indexData = null;
    this._indexOffset = 0;
    this._indexCount = 0;
    this._indexType = 0;
    this._transformData = null;
    this._transformOffset = 0;
    this.memoryBuffer = new ArrayBuffer(VkGeometryTrianglesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.vertexData !== void 0) this.vertexData = opts.vertexData;
      if (opts.vertexOffset !== void 0) this.vertexOffset = opts.vertexOffset;
      if (opts.vertexCount !== void 0) this.vertexCount = opts.vertexCount;
      if (opts.vertexStride !== void 0) this.vertexStride = opts.vertexStride;
      if (opts.vertexFormat !== void 0) this.vertexFormat = opts.vertexFormat;
      if (opts.indexData !== void 0) this.indexData = opts.indexData;
      if (opts.indexOffset !== void 0) this.indexOffset = opts.indexOffset;
      if (opts.indexCount !== void 0) this.indexCount = opts.indexCount;
      if (opts.indexType !== void 0) this.indexType = opts.indexType;
      if (opts.transformData !== void 0) this.transformData = opts.transformData;
      if (opts.transformOffset !== void 0) this.transformOffset = opts.transformOffset;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkGeometryTrianglesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get vertexData() {
    return this._vertexData;
  }
  set vertexData(value) {
    String
  }
  get vertexOffset() {
    return this._vertexOffset;
  }
  set vertexOffset(value) {
    
this.memoryView.setBigUint64($VkGeometryTrianglesNV.vertexOffset.byteOffset, value);
this._vertexOffset = value;
  }
  get vertexCount() {
    return this._vertexCount;
  }
  set vertexCount(value) {
    
this.memoryView.setUint32($VkGeometryTrianglesNV.vertexCount.byteOffset, value);
this._vertexCount = value;
  }
  get vertexStride() {
    return this._vertexStride;
  }
  set vertexStride(value) {
    
this.memoryView.setBigUint64($VkGeometryTrianglesNV.vertexStride.byteOffset, value);
this._vertexStride = value;
  }
  get vertexFormat() {
    return this._vertexFormat;
  }
  set vertexFormat(value) {
    
this.memoryView.setInt32($VkGeometryTrianglesNV.vertexFormat.byteOffset, value);
this._vertexFormat = value;
  }
  get indexData() {
    return this._indexData;
  }
  set indexData(value) {
    String
  }
  get indexOffset() {
    return this._indexOffset;
  }
  set indexOffset(value) {
    
this.memoryView.setBigUint64($VkGeometryTrianglesNV.indexOffset.byteOffset, value);
this._indexOffset = value;
  }
  get indexCount() {
    return this._indexCount;
  }
  set indexCount(value) {
    
this.memoryView.setUint32($VkGeometryTrianglesNV.indexCount.byteOffset, value);
this._indexCount = value;
  }
  get indexType() {
    return this._indexType;
  }
  set indexType(value) {
    
this.memoryView.setInt32($VkGeometryTrianglesNV.indexType.byteOffset, value);
this._indexType = value;
  }
  get transformData() {
    return this._transformData;
  }
  set transformData(value) {
    String
  }
  get transformOffset() {
    return this._transformOffset;
  }
  set transformOffset(value) {
    
this.memoryView.setBigUint64($VkGeometryTrianglesNV.transformOffset.byteOffset, value);
this._transformOffset = value;
  }
  
};

VkGeometryTrianglesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkGeometryTrianglesNV = memoryLayouts.VkGeometryTrianglesNV;
VkGeometryTrianglesNV.byteLength = $VkGeometryTrianglesNV.byteLength;

VkGeometryTrianglesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkGeometryTrianglesNV.sType.byteOffset,
    byteLength: $VkGeometryTrianglesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkGeometryTrianglesNV.pNext.byteOffset,
    byteLength: $VkGeometryTrianglesNV.pNext.byteLength
  }),
  vertexData: Object.freeze({
    byteOffset: $VkGeometryTrianglesNV.vertexData.byteOffset,
    byteLength: $VkGeometryTrianglesNV.vertexData.byteLength
  }),
  vertexOffset: Object.freeze({
    byteOffset: $VkGeometryTrianglesNV.vertexOffset.byteOffset,
    byteLength: $VkGeometryTrianglesNV.vertexOffset.byteLength
  }),
  vertexCount: Object.freeze({
    byteOffset: $VkGeometryTrianglesNV.vertexCount.byteOffset,
    byteLength: $VkGeometryTrianglesNV.vertexCount.byteLength
  }),
  vertexStride: Object.freeze({
    byteOffset: $VkGeometryTrianglesNV.vertexStride.byteOffset,
    byteLength: $VkGeometryTrianglesNV.vertexStride.byteLength
  }),
  vertexFormat: Object.freeze({
    byteOffset: $VkGeometryTrianglesNV.vertexFormat.byteOffset,
    byteLength: $VkGeometryTrianglesNV.vertexFormat.byteLength
  }),
  indexData: Object.freeze({
    byteOffset: $VkGeometryTrianglesNV.indexData.byteOffset,
    byteLength: $VkGeometryTrianglesNV.indexData.byteLength
  }),
  indexOffset: Object.freeze({
    byteOffset: $VkGeometryTrianglesNV.indexOffset.byteOffset,
    byteLength: $VkGeometryTrianglesNV.indexOffset.byteLength
  }),
  indexCount: Object.freeze({
    byteOffset: $VkGeometryTrianglesNV.indexCount.byteOffset,
    byteLength: $VkGeometryTrianglesNV.indexCount.byteLength
  }),
  indexType: Object.freeze({
    byteOffset: $VkGeometryTrianglesNV.indexType.byteOffset,
    byteLength: $VkGeometryTrianglesNV.indexType.byteLength
  }),
  transformData: Object.freeze({
    byteOffset: $VkGeometryTrianglesNV.transformData.byteOffset,
    byteLength: $VkGeometryTrianglesNV.transformData.byteLength
  }),
  transformOffset: Object.freeze({
    byteOffset: $VkGeometryTrianglesNV.transformOffset.byteOffset,
    byteLength: $VkGeometryTrianglesNV.transformOffset.byteLength
  }),
});
class VkGeometryAABBNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._aabbData = null;
    this._numAABBs = 0;
    this._stride = 0;
    this._offset = 0;
    this.memoryBuffer = new ArrayBuffer(VkGeometryAABBNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.aabbData !== void 0) this.aabbData = opts.aabbData;
      if (opts.numAABBs !== void 0) this.numAABBs = opts.numAABBs;
      if (opts.stride !== void 0) this.stride = opts.stride;
      if (opts.offset !== void 0) this.offset = opts.offset;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkGeometryAABBNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get aabbData() {
    return this._aabbData;
  }
  set aabbData(value) {
    String
  }
  get numAABBs() {
    return this._numAABBs;
  }
  set numAABBs(value) {
    
this.memoryView.setUint32($VkGeometryAABBNV.numAABBs.byteOffset, value);
this._numAABBs = value;
  }
  get stride() {
    return this._stride;
  }
  set stride(value) {
    
this.memoryView.setUint32($VkGeometryAABBNV.stride.byteOffset, value);
this._stride = value;
  }
  get offset() {
    return this._offset;
  }
  set offset(value) {
    
this.memoryView.setBigUint64($VkGeometryAABBNV.offset.byteOffset, value);
this._offset = value;
  }
  
};

VkGeometryAABBNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkGeometryAABBNV = memoryLayouts.VkGeometryAABBNV;
VkGeometryAABBNV.byteLength = $VkGeometryAABBNV.byteLength;

VkGeometryAABBNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkGeometryAABBNV.sType.byteOffset,
    byteLength: $VkGeometryAABBNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkGeometryAABBNV.pNext.byteOffset,
    byteLength: $VkGeometryAABBNV.pNext.byteLength
  }),
  aabbData: Object.freeze({
    byteOffset: $VkGeometryAABBNV.aabbData.byteOffset,
    byteLength: $VkGeometryAABBNV.aabbData.byteLength
  }),
  numAABBs: Object.freeze({
    byteOffset: $VkGeometryAABBNV.numAABBs.byteOffset,
    byteLength: $VkGeometryAABBNV.numAABBs.byteLength
  }),
  stride: Object.freeze({
    byteOffset: $VkGeometryAABBNV.stride.byteOffset,
    byteLength: $VkGeometryAABBNV.stride.byteLength
  }),
  offset: Object.freeze({
    byteOffset: $VkGeometryAABBNV.offset.byteOffset,
    byteLength: $VkGeometryAABBNV.offset.byteLength
  }),
});
class VkGeometryDataNV {
  constructor(opts) {
    this._triangles = null;
    this._aabbs = null;
    this.memoryBuffer = new ArrayBuffer(VkGeometryDataNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.triangles !== void 0) this.triangles = opts.triangles;
      if (opts.aabbs !== void 0) this.aabbs = opts.aabbs;
      
    }
  }
  get triangles() {
    return this._triangles;
  }
  set triangles(value) {
    String
  }
  get aabbs() {
    return this._aabbs;
  }
  set aabbs(value) {
    String
  }
  
};

VkGeometryDataNV.prototype.flush = function flush() {
  
  if (this.triangles !== null) { }
  
  if (this.aabbs !== null) { }
  
};

const $VkGeometryDataNV = memoryLayouts.VkGeometryDataNV;
VkGeometryDataNV.byteLength = $VkGeometryDataNV.byteLength;

VkGeometryDataNV.memoryLayout = Object.freeze({
  triangles: Object.freeze({
    byteOffset: $VkGeometryDataNV.triangles.byteOffset,
    byteLength: $VkGeometryDataNV.triangles.byteLength
  }),
  aabbs: Object.freeze({
    byteOffset: $VkGeometryDataNV.aabbs.byteOffset,
    byteLength: $VkGeometryDataNV.aabbs.byteLength
  }),
});
class VkGeometryNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._geometryType = 0;
    this._geometry = null;
    this._flags = 0;
    this.memoryBuffer = new ArrayBuffer(VkGeometryNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.geometryType !== void 0) this.geometryType = opts.geometryType;
      if (opts.geometry !== void 0) this.geometry = opts.geometry;
      if (opts.flags !== void 0) this.flags = opts.flags;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkGeometryNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get geometryType() {
    return this._geometryType;
  }
  set geometryType(value) {
    
this.memoryView.setInt32($VkGeometryNV.geometryType.byteOffset, value);
this._geometryType = value;
  }
  get geometry() {
    return this._geometry;
  }
  set geometry(value) {
    String
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkGeometryNV.flags.byteOffset, value);
this._flags = value;
  }
  
};

VkGeometryNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.geometry !== null) { }
  
};

const $VkGeometryNV = memoryLayouts.VkGeometryNV;
VkGeometryNV.byteLength = $VkGeometryNV.byteLength;

VkGeometryNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkGeometryNV.sType.byteOffset,
    byteLength: $VkGeometryNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkGeometryNV.pNext.byteOffset,
    byteLength: $VkGeometryNV.pNext.byteLength
  }),
  geometryType: Object.freeze({
    byteOffset: $VkGeometryNV.geometryType.byteOffset,
    byteLength: $VkGeometryNV.geometryType.byteLength
  }),
  geometry: Object.freeze({
    byteOffset: $VkGeometryNV.geometry.byteOffset,
    byteLength: $VkGeometryNV.geometry.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkGeometryNV.flags.byteOffset,
    byteLength: $VkGeometryNV.flags.byteLength
  }),
});
class VkAccelerationStructureInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._type = 0;
    this._flags = 0;
    this._instanceCount = 0;
    this._geometryCount = 0;
    this._pGeometries = null;
    this.memoryBuffer = new ArrayBuffer(VkAccelerationStructureInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.instanceCount !== void 0) this.instanceCount = opts.instanceCount;
      if (opts.geometryCount !== void 0) this.geometryCount = opts.geometryCount;
      if (opts.pGeometries !== void 0) this.pGeometries = opts.pGeometries;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkAccelerationStructureInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkAccelerationStructureInfoNV.type.byteOffset, value);
this._type = value;
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkAccelerationStructureInfoNV.flags.byteOffset, value);
this._flags = value;
  }
  get instanceCount() {
    return this._instanceCount;
  }
  set instanceCount(value) {
    
this.memoryView.setUint32($VkAccelerationStructureInfoNV.instanceCount.byteOffset, value);
this._instanceCount = value;
  }
  get geometryCount() {
    return this._geometryCount;
  }
  set geometryCount(value) {
    
this.memoryView.setUint32($VkAccelerationStructureInfoNV.geometryCount.byteOffset, value);
this._geometryCount = value;
  }
  get pGeometries() {
    return this._pGeometries;
  }
  set pGeometries(value) {
    
  }
  
};

VkAccelerationStructureInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pGeometries !== null) { }
  
};

const $VkAccelerationStructureInfoNV = memoryLayouts.VkAccelerationStructureInfoNV;
VkAccelerationStructureInfoNV.byteLength = $VkAccelerationStructureInfoNV.byteLength;

VkAccelerationStructureInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkAccelerationStructureInfoNV.sType.byteOffset,
    byteLength: $VkAccelerationStructureInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkAccelerationStructureInfoNV.pNext.byteOffset,
    byteLength: $VkAccelerationStructureInfoNV.pNext.byteLength
  }),
  type: Object.freeze({
    byteOffset: $VkAccelerationStructureInfoNV.type.byteOffset,
    byteLength: $VkAccelerationStructureInfoNV.type.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkAccelerationStructureInfoNV.flags.byteOffset,
    byteLength: $VkAccelerationStructureInfoNV.flags.byteLength
  }),
  instanceCount: Object.freeze({
    byteOffset: $VkAccelerationStructureInfoNV.instanceCount.byteOffset,
    byteLength: $VkAccelerationStructureInfoNV.instanceCount.byteLength
  }),
  geometryCount: Object.freeze({
    byteOffset: $VkAccelerationStructureInfoNV.geometryCount.byteOffset,
    byteLength: $VkAccelerationStructureInfoNV.geometryCount.byteLength
  }),
  pGeometries: Object.freeze({
    byteOffset: $VkAccelerationStructureInfoNV.pGeometries.byteOffset,
    byteLength: $VkAccelerationStructureInfoNV.pGeometries.byteLength
  }),
});
class VkAccelerationStructureCreateInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._compactedSize = 0;
    this._info = null;
    this.memoryBuffer = new ArrayBuffer(VkAccelerationStructureCreateInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.compactedSize !== void 0) this.compactedSize = opts.compactedSize;
      if (opts.info !== void 0) this.info = opts.info;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkAccelerationStructureCreateInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get compactedSize() {
    return this._compactedSize;
  }
  set compactedSize(value) {
    
this.memoryView.setBigUint64($VkAccelerationStructureCreateInfoNV.compactedSize.byteOffset, value);
this._compactedSize = value;
  }
  get info() {
    return this._info;
  }
  set info(value) {
    String
  }
  
};

VkAccelerationStructureCreateInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.info !== null) { }
  
};

const $VkAccelerationStructureCreateInfoNV = memoryLayouts.VkAccelerationStructureCreateInfoNV;
VkAccelerationStructureCreateInfoNV.byteLength = $VkAccelerationStructureCreateInfoNV.byteLength;

VkAccelerationStructureCreateInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkAccelerationStructureCreateInfoNV.sType.byteOffset,
    byteLength: $VkAccelerationStructureCreateInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkAccelerationStructureCreateInfoNV.pNext.byteOffset,
    byteLength: $VkAccelerationStructureCreateInfoNV.pNext.byteLength
  }),
  compactedSize: Object.freeze({
    byteOffset: $VkAccelerationStructureCreateInfoNV.compactedSize.byteOffset,
    byteLength: $VkAccelerationStructureCreateInfoNV.compactedSize.byteLength
  }),
  info: Object.freeze({
    byteOffset: $VkAccelerationStructureCreateInfoNV.info.byteOffset,
    byteLength: $VkAccelerationStructureCreateInfoNV.info.byteLength
  }),
});
class VkBindAccelerationStructureMemoryInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._accelerationStructure = null;
    this._memory = null;
    this._memoryOffset = 0;
    this._deviceIndexCount = 0;
    this._pDeviceIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkBindAccelerationStructureMemoryInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.accelerationStructure !== void 0) this.accelerationStructure = opts.accelerationStructure;
      if (opts.memory !== void 0) this.memory = opts.memory;
      if (opts.memoryOffset !== void 0) this.memoryOffset = opts.memoryOffset;
      if (opts.deviceIndexCount !== void 0) this.deviceIndexCount = opts.deviceIndexCount;
      if (opts.pDeviceIndices !== void 0) this.pDeviceIndices = opts.pDeviceIndices;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBindAccelerationStructureMemoryInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get accelerationStructure() {
    return this._accelerationStructure;
  }
  set accelerationStructure(value) {
    String
  }
  get memory() {
    return this._memory;
  }
  set memory(value) {
    String
  }
  get memoryOffset() {
    return this._memoryOffset;
  }
  set memoryOffset(value) {
    
this.memoryView.setBigUint64($VkBindAccelerationStructureMemoryInfoNV.memoryOffset.byteOffset, value);
this._memoryOffset = value;
  }
  get deviceIndexCount() {
    return this._deviceIndexCount;
  }
  set deviceIndexCount(value) {
    
this.memoryView.setUint32($VkBindAccelerationStructureMemoryInfoNV.deviceIndexCount.byteOffset, value);
this._deviceIndexCount = value;
  }
  get pDeviceIndices() {
    return this._pDeviceIndices;
  }
  set pDeviceIndices(value) {
    
  }
  
};

VkBindAccelerationStructureMemoryInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBindAccelerationStructureMemoryInfoNV = memoryLayouts.VkBindAccelerationStructureMemoryInfoNV;
VkBindAccelerationStructureMemoryInfoNV.byteLength = $VkBindAccelerationStructureMemoryInfoNV.byteLength;

VkBindAccelerationStructureMemoryInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBindAccelerationStructureMemoryInfoNV.sType.byteOffset,
    byteLength: $VkBindAccelerationStructureMemoryInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBindAccelerationStructureMemoryInfoNV.pNext.byteOffset,
    byteLength: $VkBindAccelerationStructureMemoryInfoNV.pNext.byteLength
  }),
  accelerationStructure: Object.freeze({
    byteOffset: $VkBindAccelerationStructureMemoryInfoNV.accelerationStructure.byteOffset,
    byteLength: $VkBindAccelerationStructureMemoryInfoNV.accelerationStructure.byteLength
  }),
  memory: Object.freeze({
    byteOffset: $VkBindAccelerationStructureMemoryInfoNV.memory.byteOffset,
    byteLength: $VkBindAccelerationStructureMemoryInfoNV.memory.byteLength
  }),
  memoryOffset: Object.freeze({
    byteOffset: $VkBindAccelerationStructureMemoryInfoNV.memoryOffset.byteOffset,
    byteLength: $VkBindAccelerationStructureMemoryInfoNV.memoryOffset.byteLength
  }),
  deviceIndexCount: Object.freeze({
    byteOffset: $VkBindAccelerationStructureMemoryInfoNV.deviceIndexCount.byteOffset,
    byteLength: $VkBindAccelerationStructureMemoryInfoNV.deviceIndexCount.byteLength
  }),
  pDeviceIndices: Object.freeze({
    byteOffset: $VkBindAccelerationStructureMemoryInfoNV.pDeviceIndices.byteOffset,
    byteLength: $VkBindAccelerationStructureMemoryInfoNV.pDeviceIndices.byteLength
  }),
});
class VkWriteDescriptorSetAccelerationStructureNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._accelerationStructureCount = 0;
    this._pAccelerationStructures = null;
    this.memoryBuffer = new ArrayBuffer(VkWriteDescriptorSetAccelerationStructureNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.accelerationStructureCount !== void 0) this.accelerationStructureCount = opts.accelerationStructureCount;
      if (opts.pAccelerationStructures !== void 0) this.pAccelerationStructures = opts.pAccelerationStructures;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkWriteDescriptorSetAccelerationStructureNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get accelerationStructureCount() {
    return this._accelerationStructureCount;
  }
  set accelerationStructureCount(value) {
    
this.memoryView.setUint32($VkWriteDescriptorSetAccelerationStructureNV.accelerationStructureCount.byteOffset, value);
this._accelerationStructureCount = value;
  }
  get pAccelerationStructures() {
    return this._pAccelerationStructures;
  }
  set pAccelerationStructures(value) {
    
  }
  
};

VkWriteDescriptorSetAccelerationStructureNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pAccelerationStructures !== null) { }
  
};

const $VkWriteDescriptorSetAccelerationStructureNV = memoryLayouts.VkWriteDescriptorSetAccelerationStructureNV;
VkWriteDescriptorSetAccelerationStructureNV.byteLength = $VkWriteDescriptorSetAccelerationStructureNV.byteLength;

VkWriteDescriptorSetAccelerationStructureNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkWriteDescriptorSetAccelerationStructureNV.sType.byteOffset,
    byteLength: $VkWriteDescriptorSetAccelerationStructureNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkWriteDescriptorSetAccelerationStructureNV.pNext.byteOffset,
    byteLength: $VkWriteDescriptorSetAccelerationStructureNV.pNext.byteLength
  }),
  accelerationStructureCount: Object.freeze({
    byteOffset: $VkWriteDescriptorSetAccelerationStructureNV.accelerationStructureCount.byteOffset,
    byteLength: $VkWriteDescriptorSetAccelerationStructureNV.accelerationStructureCount.byteLength
  }),
  pAccelerationStructures: Object.freeze({
    byteOffset: $VkWriteDescriptorSetAccelerationStructureNV.pAccelerationStructures.byteOffset,
    byteLength: $VkWriteDescriptorSetAccelerationStructureNV.pAccelerationStructures.byteLength
  }),
});
class VkAccelerationStructureMemoryRequirementsInfoNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._type = 0;
    this._accelerationStructure = null;
    this.memoryBuffer = new ArrayBuffer(VkAccelerationStructureMemoryRequirementsInfoNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.type !== void 0) this.type = opts.type;
      if (opts.accelerationStructure !== void 0) this.accelerationStructure = opts.accelerationStructure;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkAccelerationStructureMemoryRequirementsInfoNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get type() {
    return this._type;
  }
  set type(value) {
    
this.memoryView.setInt32($VkAccelerationStructureMemoryRequirementsInfoNV.type.byteOffset, value);
this._type = value;
  }
  get accelerationStructure() {
    return this._accelerationStructure;
  }
  set accelerationStructure(value) {
    String
  }
  
};

VkAccelerationStructureMemoryRequirementsInfoNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkAccelerationStructureMemoryRequirementsInfoNV = memoryLayouts.VkAccelerationStructureMemoryRequirementsInfoNV;
VkAccelerationStructureMemoryRequirementsInfoNV.byteLength = $VkAccelerationStructureMemoryRequirementsInfoNV.byteLength;

VkAccelerationStructureMemoryRequirementsInfoNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkAccelerationStructureMemoryRequirementsInfoNV.sType.byteOffset,
    byteLength: $VkAccelerationStructureMemoryRequirementsInfoNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkAccelerationStructureMemoryRequirementsInfoNV.pNext.byteOffset,
    byteLength: $VkAccelerationStructureMemoryRequirementsInfoNV.pNext.byteLength
  }),
  type: Object.freeze({
    byteOffset: $VkAccelerationStructureMemoryRequirementsInfoNV.type.byteOffset,
    byteLength: $VkAccelerationStructureMemoryRequirementsInfoNV.type.byteLength
  }),
  accelerationStructure: Object.freeze({
    byteOffset: $VkAccelerationStructureMemoryRequirementsInfoNV.accelerationStructure.byteOffset,
    byteLength: $VkAccelerationStructureMemoryRequirementsInfoNV.accelerationStructure.byteLength
  }),
});
class VkPhysicalDeviceRayTracingPropertiesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._shaderGroupHandleSize = 0;
    this._maxRecursionDepth = 0;
    this._maxShaderGroupStride = 0;
    this._shaderGroupBaseAlignment = 0;
    this._maxGeometryCount = 0;
    this._maxInstanceCount = 0;
    this._maxTriangleCount = 0;
    this._maxDescriptorSetAccelerationStructures = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceRayTracingPropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceRayTracingPropertiesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get shaderGroupHandleSize() {
    return this._shaderGroupHandleSize;
  }
  get maxRecursionDepth() {
    return this._maxRecursionDepth;
  }
  get maxShaderGroupStride() {
    return this._maxShaderGroupStride;
  }
  get shaderGroupBaseAlignment() {
    return this._shaderGroupBaseAlignment;
  }
  get maxGeometryCount() {
    return this._maxGeometryCount;
  }
  get maxInstanceCount() {
    return this._maxInstanceCount;
  }
  get maxTriangleCount() {
    return this._maxTriangleCount;
  }
  get maxDescriptorSetAccelerationStructures() {
    return this._maxDescriptorSetAccelerationStructures;
  }
  
};

VkPhysicalDeviceRayTracingPropertiesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceRayTracingPropertiesNV = memoryLayouts.VkPhysicalDeviceRayTracingPropertiesNV;
VkPhysicalDeviceRayTracingPropertiesNV.byteLength = $VkPhysicalDeviceRayTracingPropertiesNV.byteLength;

VkPhysicalDeviceRayTracingPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceRayTracingPropertiesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceRayTracingPropertiesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceRayTracingPropertiesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceRayTracingPropertiesNV.pNext.byteLength
  }),
  shaderGroupHandleSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceRayTracingPropertiesNV.shaderGroupHandleSize.byteOffset,
    byteLength: $VkPhysicalDeviceRayTracingPropertiesNV.shaderGroupHandleSize.byteLength
  }),
  maxRecursionDepth: Object.freeze({
    byteOffset: $VkPhysicalDeviceRayTracingPropertiesNV.maxRecursionDepth.byteOffset,
    byteLength: $VkPhysicalDeviceRayTracingPropertiesNV.maxRecursionDepth.byteLength
  }),
  maxShaderGroupStride: Object.freeze({
    byteOffset: $VkPhysicalDeviceRayTracingPropertiesNV.maxShaderGroupStride.byteOffset,
    byteLength: $VkPhysicalDeviceRayTracingPropertiesNV.maxShaderGroupStride.byteLength
  }),
  shaderGroupBaseAlignment: Object.freeze({
    byteOffset: $VkPhysicalDeviceRayTracingPropertiesNV.shaderGroupBaseAlignment.byteOffset,
    byteLength: $VkPhysicalDeviceRayTracingPropertiesNV.shaderGroupBaseAlignment.byteLength
  }),
  maxGeometryCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceRayTracingPropertiesNV.maxGeometryCount.byteOffset,
    byteLength: $VkPhysicalDeviceRayTracingPropertiesNV.maxGeometryCount.byteLength
  }),
  maxInstanceCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceRayTracingPropertiesNV.maxInstanceCount.byteOffset,
    byteLength: $VkPhysicalDeviceRayTracingPropertiesNV.maxInstanceCount.byteLength
  }),
  maxTriangleCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceRayTracingPropertiesNV.maxTriangleCount.byteOffset,
    byteLength: $VkPhysicalDeviceRayTracingPropertiesNV.maxTriangleCount.byteLength
  }),
  maxDescriptorSetAccelerationStructures: Object.freeze({
    byteOffset: $VkPhysicalDeviceRayTracingPropertiesNV.maxDescriptorSetAccelerationStructures.byteOffset,
    byteLength: $VkPhysicalDeviceRayTracingPropertiesNV.maxDescriptorSetAccelerationStructures.byteLength
  }),
});
class VkDrmFormatModifierPropertiesListEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._drmFormatModifierCount = 0;
    this._pDrmFormatModifierProperties = null;
    this.memoryBuffer = new ArrayBuffer(VkDrmFormatModifierPropertiesListEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDrmFormatModifierPropertiesListEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get drmFormatModifierCount() {
    return this._drmFormatModifierCount;
  }
  get pDrmFormatModifierProperties() {
    return this._pDrmFormatModifierProperties;
  }
  
};

VkDrmFormatModifierPropertiesListEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pDrmFormatModifierProperties !== null) { }
  
};

const $VkDrmFormatModifierPropertiesListEXT = memoryLayouts.VkDrmFormatModifierPropertiesListEXT;
VkDrmFormatModifierPropertiesListEXT.byteLength = $VkDrmFormatModifierPropertiesListEXT.byteLength;

VkDrmFormatModifierPropertiesListEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDrmFormatModifierPropertiesListEXT.sType.byteOffset,
    byteLength: $VkDrmFormatModifierPropertiesListEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDrmFormatModifierPropertiesListEXT.pNext.byteOffset,
    byteLength: $VkDrmFormatModifierPropertiesListEXT.pNext.byteLength
  }),
  drmFormatModifierCount: Object.freeze({
    byteOffset: $VkDrmFormatModifierPropertiesListEXT.drmFormatModifierCount.byteOffset,
    byteLength: $VkDrmFormatModifierPropertiesListEXT.drmFormatModifierCount.byteLength
  }),
  pDrmFormatModifierProperties: Object.freeze({
    byteOffset: $VkDrmFormatModifierPropertiesListEXT.pDrmFormatModifierProperties.byteOffset,
    byteLength: $VkDrmFormatModifierPropertiesListEXT.pDrmFormatModifierProperties.byteLength
  }),
});
class VkDrmFormatModifierPropertiesEXT {
  constructor(opts) {
    this._drmFormatModifier = 0;
    this._drmFormatModifierPlaneCount = 0;
    this._drmFormatModifierTilingFeatures = 0;
    this.memoryBuffer = new ArrayBuffer(VkDrmFormatModifierPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      
    }
  }
  get drmFormatModifier() {
    return this._drmFormatModifier;
  }
  get drmFormatModifierPlaneCount() {
    return this._drmFormatModifierPlaneCount;
  }
  get drmFormatModifierTilingFeatures() {
    return this._drmFormatModifierTilingFeatures;
  }
  
};

VkDrmFormatModifierPropertiesEXT.prototype.flush = function flush() {
  
};

const $VkDrmFormatModifierPropertiesEXT = memoryLayouts.VkDrmFormatModifierPropertiesEXT;
VkDrmFormatModifierPropertiesEXT.byteLength = $VkDrmFormatModifierPropertiesEXT.byteLength;

VkDrmFormatModifierPropertiesEXT.memoryLayout = Object.freeze({
  drmFormatModifier: Object.freeze({
    byteOffset: $VkDrmFormatModifierPropertiesEXT.drmFormatModifier.byteOffset,
    byteLength: $VkDrmFormatModifierPropertiesEXT.drmFormatModifier.byteLength
  }),
  drmFormatModifierPlaneCount: Object.freeze({
    byteOffset: $VkDrmFormatModifierPropertiesEXT.drmFormatModifierPlaneCount.byteOffset,
    byteLength: $VkDrmFormatModifierPropertiesEXT.drmFormatModifierPlaneCount.byteLength
  }),
  drmFormatModifierTilingFeatures: Object.freeze({
    byteOffset: $VkDrmFormatModifierPropertiesEXT.drmFormatModifierTilingFeatures.byteOffset,
    byteLength: $VkDrmFormatModifierPropertiesEXT.drmFormatModifierTilingFeatures.byteLength
  }),
});
class VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._drmFormatModifier = 0;
    this._sharingMode = 0;
    this._queueFamilyIndexCount = 0;
    this._pQueueFamilyIndices = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceImageDrmFormatModifierInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.drmFormatModifier !== void 0) this.drmFormatModifier = opts.drmFormatModifier;
      if (opts.sharingMode !== void 0) this.sharingMode = opts.sharingMode;
      if (opts.queueFamilyIndexCount !== void 0) this.queueFamilyIndexCount = opts.queueFamilyIndexCount;
      if (opts.pQueueFamilyIndices !== void 0) this.pQueueFamilyIndices = opts.pQueueFamilyIndices;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageDrmFormatModifierInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get drmFormatModifier() {
    return this._drmFormatModifier;
  }
  set drmFormatModifier(value) {
    
this.memoryView.setBigUint64($VkPhysicalDeviceImageDrmFormatModifierInfoEXT.drmFormatModifier.byteOffset, value);
this._drmFormatModifier = value;
  }
  get sharingMode() {
    return this._sharingMode;
  }
  set sharingMode(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageDrmFormatModifierInfoEXT.sharingMode.byteOffset, value);
this._sharingMode = value;
  }
  get queueFamilyIndexCount() {
    return this._queueFamilyIndexCount;
  }
  set queueFamilyIndexCount(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceImageDrmFormatModifierInfoEXT.queueFamilyIndexCount.byteOffset, value);
this._queueFamilyIndexCount = value;
  }
  get pQueueFamilyIndices() {
    return this._pQueueFamilyIndices;
  }
  set pQueueFamilyIndices(value) {
    
  }
  
};

VkPhysicalDeviceImageDrmFormatModifierInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceImageDrmFormatModifierInfoEXT = memoryLayouts.VkPhysicalDeviceImageDrmFormatModifierInfoEXT;
VkPhysicalDeviceImageDrmFormatModifierInfoEXT.byteLength = $VkPhysicalDeviceImageDrmFormatModifierInfoEXT.byteLength;

VkPhysicalDeviceImageDrmFormatModifierInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageDrmFormatModifierInfoEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceImageDrmFormatModifierInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageDrmFormatModifierInfoEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceImageDrmFormatModifierInfoEXT.pNext.byteLength
  }),
  drmFormatModifier: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageDrmFormatModifierInfoEXT.drmFormatModifier.byteOffset,
    byteLength: $VkPhysicalDeviceImageDrmFormatModifierInfoEXT.drmFormatModifier.byteLength
  }),
  sharingMode: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageDrmFormatModifierInfoEXT.sharingMode.byteOffset,
    byteLength: $VkPhysicalDeviceImageDrmFormatModifierInfoEXT.sharingMode.byteLength
  }),
  queueFamilyIndexCount: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageDrmFormatModifierInfoEXT.queueFamilyIndexCount.byteOffset,
    byteLength: $VkPhysicalDeviceImageDrmFormatModifierInfoEXT.queueFamilyIndexCount.byteLength
  }),
  pQueueFamilyIndices: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageDrmFormatModifierInfoEXT.pQueueFamilyIndices.byteOffset,
    byteLength: $VkPhysicalDeviceImageDrmFormatModifierInfoEXT.pQueueFamilyIndices.byteLength
  }),
});
class VkImageDrmFormatModifierListCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._drmFormatModifierCount = 0;
    this._pDrmFormatModifiers = null;
    this.memoryBuffer = new ArrayBuffer(VkImageDrmFormatModifierListCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.drmFormatModifierCount !== void 0) this.drmFormatModifierCount = opts.drmFormatModifierCount;
      if (opts.pDrmFormatModifiers !== void 0) this.pDrmFormatModifiers = opts.pDrmFormatModifiers;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageDrmFormatModifierListCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get drmFormatModifierCount() {
    return this._drmFormatModifierCount;
  }
  set drmFormatModifierCount(value) {
    
this.memoryView.setUint32($VkImageDrmFormatModifierListCreateInfoEXT.drmFormatModifierCount.byteOffset, value);
this._drmFormatModifierCount = value;
  }
  get pDrmFormatModifiers() {
    return this._pDrmFormatModifiers;
  }
  set pDrmFormatModifiers(value) {
    
  }
  
};

VkImageDrmFormatModifierListCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImageDrmFormatModifierListCreateInfoEXT = memoryLayouts.VkImageDrmFormatModifierListCreateInfoEXT;
VkImageDrmFormatModifierListCreateInfoEXT.byteLength = $VkImageDrmFormatModifierListCreateInfoEXT.byteLength;

VkImageDrmFormatModifierListCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageDrmFormatModifierListCreateInfoEXT.sType.byteOffset,
    byteLength: $VkImageDrmFormatModifierListCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageDrmFormatModifierListCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkImageDrmFormatModifierListCreateInfoEXT.pNext.byteLength
  }),
  drmFormatModifierCount: Object.freeze({
    byteOffset: $VkImageDrmFormatModifierListCreateInfoEXT.drmFormatModifierCount.byteOffset,
    byteLength: $VkImageDrmFormatModifierListCreateInfoEXT.drmFormatModifierCount.byteLength
  }),
  pDrmFormatModifiers: Object.freeze({
    byteOffset: $VkImageDrmFormatModifierListCreateInfoEXT.pDrmFormatModifiers.byteOffset,
    byteLength: $VkImageDrmFormatModifierListCreateInfoEXT.pDrmFormatModifiers.byteLength
  }),
});
class VkImageDrmFormatModifierExplicitCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._drmFormatModifier = 0;
    this._drmFormatModifierPlaneCount = 0;
    this._pPlaneLayouts = null;
    this.memoryBuffer = new ArrayBuffer(VkImageDrmFormatModifierExplicitCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.drmFormatModifier !== void 0) this.drmFormatModifier = opts.drmFormatModifier;
      if (opts.drmFormatModifierPlaneCount !== void 0) this.drmFormatModifierPlaneCount = opts.drmFormatModifierPlaneCount;
      if (opts.pPlaneLayouts !== void 0) this.pPlaneLayouts = opts.pPlaneLayouts;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageDrmFormatModifierExplicitCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get drmFormatModifier() {
    return this._drmFormatModifier;
  }
  set drmFormatModifier(value) {
    
this.memoryView.setBigUint64($VkImageDrmFormatModifierExplicitCreateInfoEXT.drmFormatModifier.byteOffset, value);
this._drmFormatModifier = value;
  }
  get drmFormatModifierPlaneCount() {
    return this._drmFormatModifierPlaneCount;
  }
  set drmFormatModifierPlaneCount(value) {
    
this.memoryView.setUint32($VkImageDrmFormatModifierExplicitCreateInfoEXT.drmFormatModifierPlaneCount.byteOffset, value);
this._drmFormatModifierPlaneCount = value;
  }
  get pPlaneLayouts() {
    return this._pPlaneLayouts;
  }
  set pPlaneLayouts(value) {
    
  }
  
};

VkImageDrmFormatModifierExplicitCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.pPlaneLayouts !== null) { }
  
};

const $VkImageDrmFormatModifierExplicitCreateInfoEXT = memoryLayouts.VkImageDrmFormatModifierExplicitCreateInfoEXT;
VkImageDrmFormatModifierExplicitCreateInfoEXT.byteLength = $VkImageDrmFormatModifierExplicitCreateInfoEXT.byteLength;

VkImageDrmFormatModifierExplicitCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageDrmFormatModifierExplicitCreateInfoEXT.sType.byteOffset,
    byteLength: $VkImageDrmFormatModifierExplicitCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageDrmFormatModifierExplicitCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkImageDrmFormatModifierExplicitCreateInfoEXT.pNext.byteLength
  }),
  drmFormatModifier: Object.freeze({
    byteOffset: $VkImageDrmFormatModifierExplicitCreateInfoEXT.drmFormatModifier.byteOffset,
    byteLength: $VkImageDrmFormatModifierExplicitCreateInfoEXT.drmFormatModifier.byteLength
  }),
  drmFormatModifierPlaneCount: Object.freeze({
    byteOffset: $VkImageDrmFormatModifierExplicitCreateInfoEXT.drmFormatModifierPlaneCount.byteOffset,
    byteLength: $VkImageDrmFormatModifierExplicitCreateInfoEXT.drmFormatModifierPlaneCount.byteLength
  }),
  pPlaneLayouts: Object.freeze({
    byteOffset: $VkImageDrmFormatModifierExplicitCreateInfoEXT.pPlaneLayouts.byteOffset,
    byteLength: $VkImageDrmFormatModifierExplicitCreateInfoEXT.pPlaneLayouts.byteLength
  }),
});
class VkImageDrmFormatModifierPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._drmFormatModifier = 0;
    this.memoryBuffer = new ArrayBuffer(VkImageDrmFormatModifierPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageDrmFormatModifierPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get drmFormatModifier() {
    return this._drmFormatModifier;
  }
  
};

VkImageDrmFormatModifierPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImageDrmFormatModifierPropertiesEXT = memoryLayouts.VkImageDrmFormatModifierPropertiesEXT;
VkImageDrmFormatModifierPropertiesEXT.byteLength = $VkImageDrmFormatModifierPropertiesEXT.byteLength;

VkImageDrmFormatModifierPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageDrmFormatModifierPropertiesEXT.sType.byteOffset,
    byteLength: $VkImageDrmFormatModifierPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageDrmFormatModifierPropertiesEXT.pNext.byteOffset,
    byteLength: $VkImageDrmFormatModifierPropertiesEXT.pNext.byteLength
  }),
  drmFormatModifier: Object.freeze({
    byteOffset: $VkImageDrmFormatModifierPropertiesEXT.drmFormatModifier.byteOffset,
    byteLength: $VkImageDrmFormatModifierPropertiesEXT.drmFormatModifier.byteLength
  }),
});
class VkImageStencilUsageCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._stencilUsage = 0;
    this.memoryBuffer = new ArrayBuffer(VkImageStencilUsageCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.stencilUsage !== void 0) this.stencilUsage = opts.stencilUsage;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkImageStencilUsageCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get stencilUsage() {
    return this._stencilUsage;
  }
  set stencilUsage(value) {
    
this.memoryView.setInt32($VkImageStencilUsageCreateInfoEXT.stencilUsage.byteOffset, value);
this._stencilUsage = value;
  }
  
};

VkImageStencilUsageCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkImageStencilUsageCreateInfoEXT = memoryLayouts.VkImageStencilUsageCreateInfoEXT;
VkImageStencilUsageCreateInfoEXT.byteLength = $VkImageStencilUsageCreateInfoEXT.byteLength;

VkImageStencilUsageCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkImageStencilUsageCreateInfoEXT.sType.byteOffset,
    byteLength: $VkImageStencilUsageCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkImageStencilUsageCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkImageStencilUsageCreateInfoEXT.pNext.byteLength
  }),
  stencilUsage: Object.freeze({
    byteOffset: $VkImageStencilUsageCreateInfoEXT.stencilUsage.byteOffset,
    byteLength: $VkImageStencilUsageCreateInfoEXT.stencilUsage.byteLength
  }),
});
class VkDeviceMemoryOverallocationCreateInfoAMD {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._overallocationBehavior = 0;
    this.memoryBuffer = new ArrayBuffer(VkDeviceMemoryOverallocationCreateInfoAMD.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.overallocationBehavior !== void 0) this.overallocationBehavior = opts.overallocationBehavior;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkDeviceMemoryOverallocationCreateInfoAMD.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get overallocationBehavior() {
    return this._overallocationBehavior;
  }
  set overallocationBehavior(value) {
    
this.memoryView.setInt32($VkDeviceMemoryOverallocationCreateInfoAMD.overallocationBehavior.byteOffset, value);
this._overallocationBehavior = value;
  }
  
};

VkDeviceMemoryOverallocationCreateInfoAMD.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkDeviceMemoryOverallocationCreateInfoAMD = memoryLayouts.VkDeviceMemoryOverallocationCreateInfoAMD;
VkDeviceMemoryOverallocationCreateInfoAMD.byteLength = $VkDeviceMemoryOverallocationCreateInfoAMD.byteLength;

VkDeviceMemoryOverallocationCreateInfoAMD.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkDeviceMemoryOverallocationCreateInfoAMD.sType.byteOffset,
    byteLength: $VkDeviceMemoryOverallocationCreateInfoAMD.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkDeviceMemoryOverallocationCreateInfoAMD.pNext.byteOffset,
    byteLength: $VkDeviceMemoryOverallocationCreateInfoAMD.pNext.byteLength
  }),
  overallocationBehavior: Object.freeze({
    byteOffset: $VkDeviceMemoryOverallocationCreateInfoAMD.overallocationBehavior.byteOffset,
    byteLength: $VkDeviceMemoryOverallocationCreateInfoAMD.overallocationBehavior.byteLength
  }),
});
class VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._fragmentDensityMap = 0;
    this._fragmentDensityMapDynamic = 0;
    this._fragmentDensityMapNonSubsampledImages = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFragmentDensityMapFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceFragmentDensityMapFeaturesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get fragmentDensityMap() {
    return this._fragmentDensityMap;
  }
  get fragmentDensityMapDynamic() {
    return this._fragmentDensityMapDynamic;
  }
  get fragmentDensityMapNonSubsampledImages() {
    return this._fragmentDensityMapNonSubsampledImages;
  }
  
};

VkPhysicalDeviceFragmentDensityMapFeaturesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceFragmentDensityMapFeaturesEXT = memoryLayouts.VkPhysicalDeviceFragmentDensityMapFeaturesEXT;
VkPhysicalDeviceFragmentDensityMapFeaturesEXT.byteLength = $VkPhysicalDeviceFragmentDensityMapFeaturesEXT.byteLength;

VkPhysicalDeviceFragmentDensityMapFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceFragmentDensityMapFeaturesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceFragmentDensityMapFeaturesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceFragmentDensityMapFeaturesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceFragmentDensityMapFeaturesEXT.pNext.byteLength
  }),
  fragmentDensityMap: Object.freeze({
    byteOffset: $VkPhysicalDeviceFragmentDensityMapFeaturesEXT.fragmentDensityMap.byteOffset,
    byteLength: $VkPhysicalDeviceFragmentDensityMapFeaturesEXT.fragmentDensityMap.byteLength
  }),
  fragmentDensityMapDynamic: Object.freeze({
    byteOffset: $VkPhysicalDeviceFragmentDensityMapFeaturesEXT.fragmentDensityMapDynamic.byteOffset,
    byteLength: $VkPhysicalDeviceFragmentDensityMapFeaturesEXT.fragmentDensityMapDynamic.byteLength
  }),
  fragmentDensityMapNonSubsampledImages: Object.freeze({
    byteOffset: $VkPhysicalDeviceFragmentDensityMapFeaturesEXT.fragmentDensityMapNonSubsampledImages.byteOffset,
    byteLength: $VkPhysicalDeviceFragmentDensityMapFeaturesEXT.fragmentDensityMapNonSubsampledImages.byteLength
  }),
});
class VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._minFragmentDensityTexelSize = null;
    this._maxFragmentDensityTexelSize = null;
    this._fragmentDensityInvocations = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceFragmentDensityMapPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceFragmentDensityMapPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get minFragmentDensityTexelSize() {
    return this._minFragmentDensityTexelSize;
  }
  get maxFragmentDensityTexelSize() {
    return this._maxFragmentDensityTexelSize;
  }
  get fragmentDensityInvocations() {
    return this._fragmentDensityInvocations;
  }
  
};

VkPhysicalDeviceFragmentDensityMapPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.minFragmentDensityTexelSize !== null) { }
  
  if (this.maxFragmentDensityTexelSize !== null) { }
  
};

const $VkPhysicalDeviceFragmentDensityMapPropertiesEXT = memoryLayouts.VkPhysicalDeviceFragmentDensityMapPropertiesEXT;
VkPhysicalDeviceFragmentDensityMapPropertiesEXT.byteLength = $VkPhysicalDeviceFragmentDensityMapPropertiesEXT.byteLength;

VkPhysicalDeviceFragmentDensityMapPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceFragmentDensityMapPropertiesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceFragmentDensityMapPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceFragmentDensityMapPropertiesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceFragmentDensityMapPropertiesEXT.pNext.byteLength
  }),
  minFragmentDensityTexelSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceFragmentDensityMapPropertiesEXT.minFragmentDensityTexelSize.byteOffset,
    byteLength: $VkPhysicalDeviceFragmentDensityMapPropertiesEXT.minFragmentDensityTexelSize.byteLength
  }),
  maxFragmentDensityTexelSize: Object.freeze({
    byteOffset: $VkPhysicalDeviceFragmentDensityMapPropertiesEXT.maxFragmentDensityTexelSize.byteOffset,
    byteLength: $VkPhysicalDeviceFragmentDensityMapPropertiesEXT.maxFragmentDensityTexelSize.byteLength
  }),
  fragmentDensityInvocations: Object.freeze({
    byteOffset: $VkPhysicalDeviceFragmentDensityMapPropertiesEXT.fragmentDensityInvocations.byteOffset,
    byteLength: $VkPhysicalDeviceFragmentDensityMapPropertiesEXT.fragmentDensityInvocations.byteLength
  }),
});
class VkRenderPassFragmentDensityMapCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._fragmentDensityMapAttachment = null;
    this.memoryBuffer = new ArrayBuffer(VkRenderPassFragmentDensityMapCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.fragmentDensityMapAttachment !== void 0) this.fragmentDensityMapAttachment = opts.fragmentDensityMapAttachment;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkRenderPassFragmentDensityMapCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get fragmentDensityMapAttachment() {
    return this._fragmentDensityMapAttachment;
  }
  set fragmentDensityMapAttachment(value) {
    String
  }
  
};

VkRenderPassFragmentDensityMapCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.fragmentDensityMapAttachment !== null) { }
  
};

const $VkRenderPassFragmentDensityMapCreateInfoEXT = memoryLayouts.VkRenderPassFragmentDensityMapCreateInfoEXT;
VkRenderPassFragmentDensityMapCreateInfoEXT.byteLength = $VkRenderPassFragmentDensityMapCreateInfoEXT.byteLength;

VkRenderPassFragmentDensityMapCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkRenderPassFragmentDensityMapCreateInfoEXT.sType.byteOffset,
    byteLength: $VkRenderPassFragmentDensityMapCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkRenderPassFragmentDensityMapCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkRenderPassFragmentDensityMapCreateInfoEXT.pNext.byteLength
  }),
  fragmentDensityMapAttachment: Object.freeze({
    byteOffset: $VkRenderPassFragmentDensityMapCreateInfoEXT.fragmentDensityMapAttachment.byteOffset,
    byteLength: $VkRenderPassFragmentDensityMapCreateInfoEXT.fragmentDensityMapAttachment.byteLength
  }),
});
class VkPhysicalDeviceScalarBlockLayoutFeaturesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._scalarBlockLayout = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.scalarBlockLayout !== void 0) this.scalarBlockLayout = opts.scalarBlockLayout;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get scalarBlockLayout() {
    return this._scalarBlockLayout;
  }
  set scalarBlockLayout(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.scalarBlockLayout.byteOffset, value);
this._scalarBlockLayout = value;
  }
  
};

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = memoryLayouts.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;
VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.byteLength = $VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.byteLength;

VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.pNext.byteLength
  }),
  scalarBlockLayout: Object.freeze({
    byteOffset: $VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.scalarBlockLayout.byteOffset,
    byteLength: $VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.scalarBlockLayout.byteLength
  }),
});
class VkPhysicalDeviceDepthClipEnableFeaturesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._depthClipEnable = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceDepthClipEnableFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.depthClipEnable !== void 0) this.depthClipEnable = opts.depthClipEnable;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceDepthClipEnableFeaturesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get depthClipEnable() {
    return this._depthClipEnable;
  }
  set depthClipEnable(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceDepthClipEnableFeaturesEXT.depthClipEnable.byteOffset, value);
this._depthClipEnable = value;
  }
  
};

VkPhysicalDeviceDepthClipEnableFeaturesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceDepthClipEnableFeaturesEXT = memoryLayouts.VkPhysicalDeviceDepthClipEnableFeaturesEXT;
VkPhysicalDeviceDepthClipEnableFeaturesEXT.byteLength = $VkPhysicalDeviceDepthClipEnableFeaturesEXT.byteLength;

VkPhysicalDeviceDepthClipEnableFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceDepthClipEnableFeaturesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceDepthClipEnableFeaturesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceDepthClipEnableFeaturesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceDepthClipEnableFeaturesEXT.pNext.byteLength
  }),
  depthClipEnable: Object.freeze({
    byteOffset: $VkPhysicalDeviceDepthClipEnableFeaturesEXT.depthClipEnable.byteOffset,
    byteLength: $VkPhysicalDeviceDepthClipEnableFeaturesEXT.depthClipEnable.byteLength
  }),
});
class VkPipelineRasterizationDepthClipStateCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._flags = 0;
    this._depthClipEnable = 0;
    this.memoryBuffer = new ArrayBuffer(VkPipelineRasterizationDepthClipStateCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.flags !== void 0) this.flags = opts.flags;
      if (opts.depthClipEnable !== void 0) this.depthClipEnable = opts.depthClipEnable;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationDepthClipStateCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get flags() {
    return this._flags;
  }
  set flags(value) {
    
this.memoryView.setInt32($VkPipelineRasterizationDepthClipStateCreateInfoEXT.flags.byteOffset, value);
this._flags = value;
  }
  get depthClipEnable() {
    return this._depthClipEnable;
  }
  set depthClipEnable(value) {
    
this.memoryView.setUint32($VkPipelineRasterizationDepthClipStateCreateInfoEXT.depthClipEnable.byteOffset, value);
this._depthClipEnable = value;
  }
  
};

VkPipelineRasterizationDepthClipStateCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPipelineRasterizationDepthClipStateCreateInfoEXT = memoryLayouts.VkPipelineRasterizationDepthClipStateCreateInfoEXT;
VkPipelineRasterizationDepthClipStateCreateInfoEXT.byteLength = $VkPipelineRasterizationDepthClipStateCreateInfoEXT.byteLength;

VkPipelineRasterizationDepthClipStateCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPipelineRasterizationDepthClipStateCreateInfoEXT.sType.byteOffset,
    byteLength: $VkPipelineRasterizationDepthClipStateCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPipelineRasterizationDepthClipStateCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkPipelineRasterizationDepthClipStateCreateInfoEXT.pNext.byteLength
  }),
  flags: Object.freeze({
    byteOffset: $VkPipelineRasterizationDepthClipStateCreateInfoEXT.flags.byteOffset,
    byteLength: $VkPipelineRasterizationDepthClipStateCreateInfoEXT.flags.byteLength
  }),
  depthClipEnable: Object.freeze({
    byteOffset: $VkPipelineRasterizationDepthClipStateCreateInfoEXT.depthClipEnable.byteOffset,
    byteLength: $VkPipelineRasterizationDepthClipStateCreateInfoEXT.depthClipEnable.byteLength
  }),
});
class VkPhysicalDeviceMemoryBudgetPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._heapBudget = null;
    this._heapUsage = null;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMemoryBudgetPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceMemoryBudgetPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get heapBudget() {
    return this._heapBudget;
  }
  get heapUsage() {
    return this._heapUsage;
  }
  
};

VkPhysicalDeviceMemoryBudgetPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
  if (this.heapBudget !== null) { }
  
  if (this.heapUsage !== null) { }
  
};

const $VkPhysicalDeviceMemoryBudgetPropertiesEXT = memoryLayouts.VkPhysicalDeviceMemoryBudgetPropertiesEXT;
VkPhysicalDeviceMemoryBudgetPropertiesEXT.byteLength = $VkPhysicalDeviceMemoryBudgetPropertiesEXT.byteLength;

VkPhysicalDeviceMemoryBudgetPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryBudgetPropertiesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryBudgetPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryBudgetPropertiesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryBudgetPropertiesEXT.pNext.byteLength
  }),
  heapBudget: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryBudgetPropertiesEXT.heapBudget.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryBudgetPropertiesEXT.heapBudget.byteLength
  }),
  heapUsage: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryBudgetPropertiesEXT.heapUsage.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryBudgetPropertiesEXT.heapUsage.byteLength
  }),
});
class VkPhysicalDeviceMemoryPriorityFeaturesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._memoryPriority = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceMemoryPriorityFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.memoryPriority !== void 0) this.memoryPriority = opts.memoryPriority;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceMemoryPriorityFeaturesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get memoryPriority() {
    return this._memoryPriority;
  }
  set memoryPriority(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceMemoryPriorityFeaturesEXT.memoryPriority.byteOffset, value);
this._memoryPriority = value;
  }
  
};

VkPhysicalDeviceMemoryPriorityFeaturesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceMemoryPriorityFeaturesEXT = memoryLayouts.VkPhysicalDeviceMemoryPriorityFeaturesEXT;
VkPhysicalDeviceMemoryPriorityFeaturesEXT.byteLength = $VkPhysicalDeviceMemoryPriorityFeaturesEXT.byteLength;

VkPhysicalDeviceMemoryPriorityFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryPriorityFeaturesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryPriorityFeaturesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryPriorityFeaturesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryPriorityFeaturesEXT.pNext.byteLength
  }),
  memoryPriority: Object.freeze({
    byteOffset: $VkPhysicalDeviceMemoryPriorityFeaturesEXT.memoryPriority.byteOffset,
    byteLength: $VkPhysicalDeviceMemoryPriorityFeaturesEXT.memoryPriority.byteLength
  }),
});
class VkMemoryPriorityAllocateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._priority = 0;
    this.memoryBuffer = new ArrayBuffer(VkMemoryPriorityAllocateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.priority !== void 0) this.priority = opts.priority;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkMemoryPriorityAllocateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get priority() {
    return this._priority;
  }
  set priority(value) {
    
this.memoryView.setFloat32($VkMemoryPriorityAllocateInfoEXT.priority.byteOffset, value);
this._priority = value;
  }
  
};

VkMemoryPriorityAllocateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkMemoryPriorityAllocateInfoEXT = memoryLayouts.VkMemoryPriorityAllocateInfoEXT;
VkMemoryPriorityAllocateInfoEXT.byteLength = $VkMemoryPriorityAllocateInfoEXT.byteLength;

VkMemoryPriorityAllocateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkMemoryPriorityAllocateInfoEXT.sType.byteOffset,
    byteLength: $VkMemoryPriorityAllocateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkMemoryPriorityAllocateInfoEXT.pNext.byteOffset,
    byteLength: $VkMemoryPriorityAllocateInfoEXT.pNext.byteLength
  }),
  priority: Object.freeze({
    byteOffset: $VkMemoryPriorityAllocateInfoEXT.priority.byteOffset,
    byteLength: $VkMemoryPriorityAllocateInfoEXT.priority.byteLength
  }),
});
class VkPhysicalDeviceBufferAddressFeaturesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._bufferDeviceAddress = 0;
    this._bufferDeviceAddressCaptureReplay = 0;
    this._bufferDeviceAddressMultiDevice = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceBufferAddressFeaturesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.bufferDeviceAddress !== void 0) this.bufferDeviceAddress = opts.bufferDeviceAddress;
      if (opts.bufferDeviceAddressCaptureReplay !== void 0) this.bufferDeviceAddressCaptureReplay = opts.bufferDeviceAddressCaptureReplay;
      if (opts.bufferDeviceAddressMultiDevice !== void 0) this.bufferDeviceAddressMultiDevice = opts.bufferDeviceAddressMultiDevice;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceBufferAddressFeaturesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get bufferDeviceAddress() {
    return this._bufferDeviceAddress;
  }
  set bufferDeviceAddress(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceBufferAddressFeaturesEXT.bufferDeviceAddress.byteOffset, value);
this._bufferDeviceAddress = value;
  }
  get bufferDeviceAddressCaptureReplay() {
    return this._bufferDeviceAddressCaptureReplay;
  }
  set bufferDeviceAddressCaptureReplay(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceBufferAddressFeaturesEXT.bufferDeviceAddressCaptureReplay.byteOffset, value);
this._bufferDeviceAddressCaptureReplay = value;
  }
  get bufferDeviceAddressMultiDevice() {
    return this._bufferDeviceAddressMultiDevice;
  }
  set bufferDeviceAddressMultiDevice(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceBufferAddressFeaturesEXT.bufferDeviceAddressMultiDevice.byteOffset, value);
this._bufferDeviceAddressMultiDevice = value;
  }
  
};

VkPhysicalDeviceBufferAddressFeaturesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceBufferAddressFeaturesEXT = memoryLayouts.VkPhysicalDeviceBufferAddressFeaturesEXT;
VkPhysicalDeviceBufferAddressFeaturesEXT.byteLength = $VkPhysicalDeviceBufferAddressFeaturesEXT.byteLength;

VkPhysicalDeviceBufferAddressFeaturesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceBufferAddressFeaturesEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceBufferAddressFeaturesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceBufferAddressFeaturesEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceBufferAddressFeaturesEXT.pNext.byteLength
  }),
  bufferDeviceAddress: Object.freeze({
    byteOffset: $VkPhysicalDeviceBufferAddressFeaturesEXT.bufferDeviceAddress.byteOffset,
    byteLength: $VkPhysicalDeviceBufferAddressFeaturesEXT.bufferDeviceAddress.byteLength
  }),
  bufferDeviceAddressCaptureReplay: Object.freeze({
    byteOffset: $VkPhysicalDeviceBufferAddressFeaturesEXT.bufferDeviceAddressCaptureReplay.byteOffset,
    byteLength: $VkPhysicalDeviceBufferAddressFeaturesEXT.bufferDeviceAddressCaptureReplay.byteLength
  }),
  bufferDeviceAddressMultiDevice: Object.freeze({
    byteOffset: $VkPhysicalDeviceBufferAddressFeaturesEXT.bufferDeviceAddressMultiDevice.byteOffset,
    byteLength: $VkPhysicalDeviceBufferAddressFeaturesEXT.bufferDeviceAddressMultiDevice.byteLength
  }),
});
class VkBufferDeviceAddressInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._buffer = null;
    this.memoryBuffer = new ArrayBuffer(VkBufferDeviceAddressInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.buffer !== void 0) this.buffer = opts.buffer;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBufferDeviceAddressInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get buffer() {
    return this._buffer;
  }
  set buffer(value) {
    String
  }
  
};

VkBufferDeviceAddressInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBufferDeviceAddressInfoEXT = memoryLayouts.VkBufferDeviceAddressInfoEXT;
VkBufferDeviceAddressInfoEXT.byteLength = $VkBufferDeviceAddressInfoEXT.byteLength;

VkBufferDeviceAddressInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBufferDeviceAddressInfoEXT.sType.byteOffset,
    byteLength: $VkBufferDeviceAddressInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBufferDeviceAddressInfoEXT.pNext.byteOffset,
    byteLength: $VkBufferDeviceAddressInfoEXT.pNext.byteLength
  }),
  buffer: Object.freeze({
    byteOffset: $VkBufferDeviceAddressInfoEXT.buffer.byteOffset,
    byteLength: $VkBufferDeviceAddressInfoEXT.buffer.byteLength
  }),
});
class VkBufferDeviceAddressCreateInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._deviceAddress = 0;
    this.memoryBuffer = new ArrayBuffer(VkBufferDeviceAddressCreateInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.deviceAddress !== void 0) this.deviceAddress = opts.deviceAddress;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkBufferDeviceAddressCreateInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get deviceAddress() {
    return this._deviceAddress;
  }
  set deviceAddress(value) {
    
this.memoryView.setBigUint64($VkBufferDeviceAddressCreateInfoEXT.deviceAddress.byteOffset, value);
this._deviceAddress = value;
  }
  
};

VkBufferDeviceAddressCreateInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkBufferDeviceAddressCreateInfoEXT = memoryLayouts.VkBufferDeviceAddressCreateInfoEXT;
VkBufferDeviceAddressCreateInfoEXT.byteLength = $VkBufferDeviceAddressCreateInfoEXT.byteLength;

VkBufferDeviceAddressCreateInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkBufferDeviceAddressCreateInfoEXT.sType.byteOffset,
    byteLength: $VkBufferDeviceAddressCreateInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkBufferDeviceAddressCreateInfoEXT.pNext.byteOffset,
    byteLength: $VkBufferDeviceAddressCreateInfoEXT.pNext.byteLength
  }),
  deviceAddress: Object.freeze({
    byteOffset: $VkBufferDeviceAddressCreateInfoEXT.deviceAddress.byteOffset,
    byteLength: $VkBufferDeviceAddressCreateInfoEXT.deviceAddress.byteLength
  }),
});
class VkPhysicalDeviceImageViewImageFormatInfoEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._imageViewType = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceImageViewImageFormatInfoEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.imageViewType !== void 0) this.imageViewType = opts.imageViewType;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageViewImageFormatInfoEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get imageViewType() {
    return this._imageViewType;
  }
  set imageViewType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceImageViewImageFormatInfoEXT.imageViewType.byteOffset, value);
this._imageViewType = value;
  }
  
};

VkPhysicalDeviceImageViewImageFormatInfoEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceImageViewImageFormatInfoEXT = memoryLayouts.VkPhysicalDeviceImageViewImageFormatInfoEXT;
VkPhysicalDeviceImageViewImageFormatInfoEXT.byteLength = $VkPhysicalDeviceImageViewImageFormatInfoEXT.byteLength;

VkPhysicalDeviceImageViewImageFormatInfoEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageViewImageFormatInfoEXT.sType.byteOffset,
    byteLength: $VkPhysicalDeviceImageViewImageFormatInfoEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageViewImageFormatInfoEXT.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceImageViewImageFormatInfoEXT.pNext.byteLength
  }),
  imageViewType: Object.freeze({
    byteOffset: $VkPhysicalDeviceImageViewImageFormatInfoEXT.imageViewType.byteOffset,
    byteLength: $VkPhysicalDeviceImageViewImageFormatInfoEXT.imageViewType.byteLength
  }),
});
class VkFilterCubicImageViewImageFormatPropertiesEXT {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._filterCubic = 0;
    this._filterCubicMinmax = 0;
    this.memoryBuffer = new ArrayBuffer(VkFilterCubicImageViewImageFormatPropertiesEXT.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkFilterCubicImageViewImageFormatPropertiesEXT.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get filterCubic() {
    return this._filterCubic;
  }
  get filterCubicMinmax() {
    return this._filterCubicMinmax;
  }
  
};

VkFilterCubicImageViewImageFormatPropertiesEXT.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkFilterCubicImageViewImageFormatPropertiesEXT = memoryLayouts.VkFilterCubicImageViewImageFormatPropertiesEXT;
VkFilterCubicImageViewImageFormatPropertiesEXT.byteLength = $VkFilterCubicImageViewImageFormatPropertiesEXT.byteLength;

VkFilterCubicImageViewImageFormatPropertiesEXT.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkFilterCubicImageViewImageFormatPropertiesEXT.sType.byteOffset,
    byteLength: $VkFilterCubicImageViewImageFormatPropertiesEXT.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkFilterCubicImageViewImageFormatPropertiesEXT.pNext.byteOffset,
    byteLength: $VkFilterCubicImageViewImageFormatPropertiesEXT.pNext.byteLength
  }),
  filterCubic: Object.freeze({
    byteOffset: $VkFilterCubicImageViewImageFormatPropertiesEXT.filterCubic.byteOffset,
    byteLength: $VkFilterCubicImageViewImageFormatPropertiesEXT.filterCubic.byteLength
  }),
  filterCubicMinmax: Object.freeze({
    byteOffset: $VkFilterCubicImageViewImageFormatPropertiesEXT.filterCubicMinmax.byteOffset,
    byteLength: $VkFilterCubicImageViewImageFormatPropertiesEXT.filterCubicMinmax.byteLength
  }),
});
class VkPhysicalDeviceCooperativeMatrixFeaturesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._cooperativeMatrix = 0;
    this._cooperativeMatrixRobustBufferAccess = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceCooperativeMatrixFeaturesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.cooperativeMatrix !== void 0) this.cooperativeMatrix = opts.cooperativeMatrix;
      if (opts.cooperativeMatrixRobustBufferAccess !== void 0) this.cooperativeMatrixRobustBufferAccess = opts.cooperativeMatrixRobustBufferAccess;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceCooperativeMatrixFeaturesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get cooperativeMatrix() {
    return this._cooperativeMatrix;
  }
  set cooperativeMatrix(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceCooperativeMatrixFeaturesNV.cooperativeMatrix.byteOffset, value);
this._cooperativeMatrix = value;
  }
  get cooperativeMatrixRobustBufferAccess() {
    return this._cooperativeMatrixRobustBufferAccess;
  }
  set cooperativeMatrixRobustBufferAccess(value) {
    
this.memoryView.setUint32($VkPhysicalDeviceCooperativeMatrixFeaturesNV.cooperativeMatrixRobustBufferAccess.byteOffset, value);
this._cooperativeMatrixRobustBufferAccess = value;
  }
  
};

VkPhysicalDeviceCooperativeMatrixFeaturesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceCooperativeMatrixFeaturesNV = memoryLayouts.VkPhysicalDeviceCooperativeMatrixFeaturesNV;
VkPhysicalDeviceCooperativeMatrixFeaturesNV.byteLength = $VkPhysicalDeviceCooperativeMatrixFeaturesNV.byteLength;

VkPhysicalDeviceCooperativeMatrixFeaturesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceCooperativeMatrixFeaturesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceCooperativeMatrixFeaturesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceCooperativeMatrixFeaturesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceCooperativeMatrixFeaturesNV.pNext.byteLength
  }),
  cooperativeMatrix: Object.freeze({
    byteOffset: $VkPhysicalDeviceCooperativeMatrixFeaturesNV.cooperativeMatrix.byteOffset,
    byteLength: $VkPhysicalDeviceCooperativeMatrixFeaturesNV.cooperativeMatrix.byteLength
  }),
  cooperativeMatrixRobustBufferAccess: Object.freeze({
    byteOffset: $VkPhysicalDeviceCooperativeMatrixFeaturesNV.cooperativeMatrixRobustBufferAccess.byteOffset,
    byteLength: $VkPhysicalDeviceCooperativeMatrixFeaturesNV.cooperativeMatrixRobustBufferAccess.byteLength
  }),
});
class VkPhysicalDeviceCooperativeMatrixPropertiesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._cooperativeMatrixSupportedStages = 0;
    this.memoryBuffer = new ArrayBuffer(VkPhysicalDeviceCooperativeMatrixPropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkPhysicalDeviceCooperativeMatrixPropertiesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get cooperativeMatrixSupportedStages() {
    return this._cooperativeMatrixSupportedStages;
  }
  
};

VkPhysicalDeviceCooperativeMatrixPropertiesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkPhysicalDeviceCooperativeMatrixPropertiesNV = memoryLayouts.VkPhysicalDeviceCooperativeMatrixPropertiesNV;
VkPhysicalDeviceCooperativeMatrixPropertiesNV.byteLength = $VkPhysicalDeviceCooperativeMatrixPropertiesNV.byteLength;

VkPhysicalDeviceCooperativeMatrixPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkPhysicalDeviceCooperativeMatrixPropertiesNV.sType.byteOffset,
    byteLength: $VkPhysicalDeviceCooperativeMatrixPropertiesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkPhysicalDeviceCooperativeMatrixPropertiesNV.pNext.byteOffset,
    byteLength: $VkPhysicalDeviceCooperativeMatrixPropertiesNV.pNext.byteLength
  }),
  cooperativeMatrixSupportedStages: Object.freeze({
    byteOffset: $VkPhysicalDeviceCooperativeMatrixPropertiesNV.cooperativeMatrixSupportedStages.byteOffset,
    byteLength: $VkPhysicalDeviceCooperativeMatrixPropertiesNV.cooperativeMatrixSupportedStages.byteLength
  }),
});
class VkCooperativeMatrixPropertiesNV {
  constructor(opts) {
    this._sType = 0;
    this._pNext = null;
    this._MSize = 0;
    this._NSize = 0;
    this._KSize = 0;
    this._AType = 0;
    this._BType = 0;
    this._CType = 0;
    this._DType = 0;
    this._scope = 0;
    this.memoryBuffer = new ArrayBuffer(VkCooperativeMatrixPropertiesNV.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.sType !== void 0) this.sType = opts.sType;
      if (opts.pNext !== void 0) this.pNext = opts.pNext;
      if (opts.MSize !== void 0) this.MSize = opts.MSize;
      if (opts.NSize !== void 0) this.NSize = opts.NSize;
      if (opts.KSize !== void 0) this.KSize = opts.KSize;
      if (opts.AType !== void 0) this.AType = opts.AType;
      if (opts.BType !== void 0) this.BType = opts.BType;
      if (opts.CType !== void 0) this.CType = opts.CType;
      if (opts.DType !== void 0) this.DType = opts.DType;
      if (opts.scope !== void 0) this.scope = opts.scope;
      
    }
  }
  get sType() {
    return this._sType;
  }
  set sType(value) {
    
this.memoryView.setInt32($VkCooperativeMatrixPropertiesNV.sType.byteOffset, value);
this._sType = value;
  }
  get pNext() {
    return this._pNext;
  }
  set pNext(value) {
    
  }
  get MSize() {
    return this._MSize;
  }
  set MSize(value) {
    
this.memoryView.setUint32($VkCooperativeMatrixPropertiesNV.MSize.byteOffset, value);
this._MSize = value;
  }
  get NSize() {
    return this._NSize;
  }
  set NSize(value) {
    
this.memoryView.setUint32($VkCooperativeMatrixPropertiesNV.NSize.byteOffset, value);
this._NSize = value;
  }
  get KSize() {
    return this._KSize;
  }
  set KSize(value) {
    
this.memoryView.setUint32($VkCooperativeMatrixPropertiesNV.KSize.byteOffset, value);
this._KSize = value;
  }
  get AType() {
    return this._AType;
  }
  set AType(value) {
    
this.memoryView.setInt32($VkCooperativeMatrixPropertiesNV.AType.byteOffset, value);
this._AType = value;
  }
  get BType() {
    return this._BType;
  }
  set BType(value) {
    
this.memoryView.setInt32($VkCooperativeMatrixPropertiesNV.BType.byteOffset, value);
this._BType = value;
  }
  get CType() {
    return this._CType;
  }
  set CType(value) {
    
this.memoryView.setInt32($VkCooperativeMatrixPropertiesNV.CType.byteOffset, value);
this._CType = value;
  }
  get DType() {
    return this._DType;
  }
  set DType(value) {
    
this.memoryView.setInt32($VkCooperativeMatrixPropertiesNV.DType.byteOffset, value);
this._DType = value;
  }
  get scope() {
    return this._scope;
  }
  set scope(value) {
    
this.memoryView.setInt32($VkCooperativeMatrixPropertiesNV.scope.byteOffset, value);
this._scope = value;
  }
  
};

VkCooperativeMatrixPropertiesNV.prototype.flush = function flush() {
  
  if (this.pNext !== null) { }
  
};

const $VkCooperativeMatrixPropertiesNV = memoryLayouts.VkCooperativeMatrixPropertiesNV;
VkCooperativeMatrixPropertiesNV.byteLength = $VkCooperativeMatrixPropertiesNV.byteLength;

VkCooperativeMatrixPropertiesNV.memoryLayout = Object.freeze({
  sType: Object.freeze({
    byteOffset: $VkCooperativeMatrixPropertiesNV.sType.byteOffset,
    byteLength: $VkCooperativeMatrixPropertiesNV.sType.byteLength
  }),
  pNext: Object.freeze({
    byteOffset: $VkCooperativeMatrixPropertiesNV.pNext.byteOffset,
    byteLength: $VkCooperativeMatrixPropertiesNV.pNext.byteLength
  }),
  MSize: Object.freeze({
    byteOffset: $VkCooperativeMatrixPropertiesNV.MSize.byteOffset,
    byteLength: $VkCooperativeMatrixPropertiesNV.MSize.byteLength
  }),
  NSize: Object.freeze({
    byteOffset: $VkCooperativeMatrixPropertiesNV.NSize.byteOffset,
    byteLength: $VkCooperativeMatrixPropertiesNV.NSize.byteLength
  }),
  KSize: Object.freeze({
    byteOffset: $VkCooperativeMatrixPropertiesNV.KSize.byteOffset,
    byteLength: $VkCooperativeMatrixPropertiesNV.KSize.byteLength
  }),
  AType: Object.freeze({
    byteOffset: $VkCooperativeMatrixPropertiesNV.AType.byteOffset,
    byteLength: $VkCooperativeMatrixPropertiesNV.AType.byteLength
  }),
  BType: Object.freeze({
    byteOffset: $VkCooperativeMatrixPropertiesNV.BType.byteOffset,
    byteLength: $VkCooperativeMatrixPropertiesNV.BType.byteLength
  }),
  CType: Object.freeze({
    byteOffset: $VkCooperativeMatrixPropertiesNV.CType.byteOffset,
    byteLength: $VkCooperativeMatrixPropertiesNV.CType.byteLength
  }),
  DType: Object.freeze({
    byteOffset: $VkCooperativeMatrixPropertiesNV.DType.byteOffset,
    byteLength: $VkCooperativeMatrixPropertiesNV.DType.byteLength
  }),
  scope: Object.freeze({
    byteOffset: $VkCooperativeMatrixPropertiesNV.scope.byteOffset,
    byteLength: $VkCooperativeMatrixPropertiesNV.scope.byteLength
  }),
});
class VkClearColorValue {
  constructor(opts) {
    this._float32 = null;
    this._int32 = null;
    this._uint32 = null;
    this.memoryBuffer = new ArrayBuffer(VkClearColorValue.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.float32 !== void 0) this.float32 = opts.float32;
      if (opts.int32 !== void 0) this.int32 = opts.int32;
      if (opts.uint32 !== void 0) this.uint32 = opts.uint32;
      
    }
  }
  get float32() {
    return this._float32;
  }
  set float32(value) {
    
  }
  get int32() {
    return this._int32;
  }
  set int32(value) {
    
  }
  get uint32() {
    return this._uint32;
  }
  set uint32(value) {
    
  }
  
};

VkClearColorValue.prototype.flush = function flush() {
  
  if (this.float32 !== null) { }
  
  if (this.int32 !== null) { }
  
  if (this.uint32 !== null) { }
  
};

const $VkClearColorValue = memoryLayouts.VkClearColorValue;
VkClearColorValue.byteLength = $VkClearColorValue.byteLength;

VkClearColorValue.memoryLayout = Object.freeze({
  float32: Object.freeze({
    byteOffset: $VkClearColorValue.float32.byteOffset,
    byteLength: $VkClearColorValue.float32.byteLength
  }),
  int32: Object.freeze({
    byteOffset: $VkClearColorValue.int32.byteOffset,
    byteLength: $VkClearColorValue.int32.byteLength
  }),
  uint32: Object.freeze({
    byteOffset: $VkClearColorValue.uint32.byteOffset,
    byteLength: $VkClearColorValue.uint32.byteLength
  }),
});
class VkClearValue {
  constructor(opts) {
    this._color = null;
    this._depthStencil = null;
    this.memoryBuffer = new ArrayBuffer(VkClearValue.byteLength);
    this.memoryView = new DataView(this.memoryBuffer);
    if (typeof opts === "object") {
      if (opts.color !== void 0) this.color = opts.color;
      if (opts.depthStencil !== void 0) this.depthStencil = opts.depthStencil;
      
    }
  }
  get color() {
    return this._color;
  }
  set color(value) {
    String
  }
  get depthStencil() {
    return this._depthStencil;
  }
  set depthStencil(value) {
    String
  }
  
};

VkClearValue.prototype.flush = function flush() {
  
  if (this.color !== null) { }
  
  if (this.depthStencil !== null) { }
  
};

const $VkClearValue = memoryLayouts.VkClearValue;
VkClearValue.byteLength = $VkClearValue.byteLength;

VkClearValue.memoryLayout = Object.freeze({
  color: Object.freeze({
    byteOffset: $VkClearValue.color.byteOffset,
    byteLength: $VkClearValue.color.byteLength
  }),
  depthStencil: Object.freeze({
    byteOffset: $VkClearValue.depthStencil.byteOffset,
    byteLength: $VkClearValue.depthStencil.byteLength
  }),
});
