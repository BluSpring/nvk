/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.3.5
 */
// temporary esnext.bigint fix
type BigInt = number
declare const BigInt: typeof Number

type BigUint64Array = Float32Array
declare const BigUint64Array: typeof Float32Array

declare var VkInout: { $: number; }
export interface VkInout { $: number; }

declare var VkInoutAddress: { $: BigInt; }
export interface VkInoutAddress { $: BigInt; }

/** #### ENUMS #### **/

/** ## API_Extensions_Strings ## */
export enum API_Extensions_Strings {
  VK_KHR_SURFACE_EXTENSION_NAME,
  VK_KHR_SWAPCHAIN_EXTENSION_NAME,
  VK_KHR_DISPLAY_EXTENSION_NAME,
  VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME,
  VK_KHR_XLIB_SURFACE_EXTENSION_NAME,
  VK_KHR_XCB_SURFACE_EXTENSION_NAME,
  VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME,
  VK_KHR_MIR_SURFACE_EXTENSION_NAME,
  VK_KHR_ANDROID_SURFACE_EXTENSION_NAME,
  VK_KHR_WIN32_SURFACE_EXTENSION_NAME,
  VK_ANDROID_NATIVE_BUFFER_NAME,
  VK_EXT_DEBUG_REPORT_EXTENSION_NAME,
  VK_NV_GLSL_SHADER_EXTENSION_NAME,
  VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME,
  VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME,
  VK_IMG_FILTER_CUBIC_EXTENSION_NAME,
  VK_AMD_EXTENSION_17_EXTENSION_NAME,
  VK_AMD_EXTENSION_18_EXTENSION_NAME,
  VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME,
  VK_AMD_EXTENSION_20_EXTENSION_NAME,
  VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME,
  VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME,
  VK_EXT_DEBUG_MARKER_EXTENSION_NAME,
  VK_AMD_EXTENSION_24_EXTENSION_NAME,
  VK_AMD_EXTENSION_25_EXTENSION_NAME,
  VK_AMD_GCN_SHADER_EXTENSION_NAME,
  VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME,
  VK_EXT_EXTENSION_28_EXTENSION_NAME,
  VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME,
  VK_NVX_EXTENSION_30_EXTENSION_NAME,
  VK_NVX_EXTENSION_31_EXTENSION_NAME,
  VK_AMD_EXTENSION_32_EXTENSION_NAME,
  VK_AMD_EXTENSION_33_EXTENSION_NAME,
  VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME,
  VK_AMD_EXTENSION_35_EXTENSION_NAME,
  VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME,
  VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME,
  VK_AMD_SHADER_BALLOT_EXTENSION_NAME,
  VK_AMD_EXTENSION_39_EXTENSION_NAME,
  VK_AMD_EXTENSION_40_EXTENSION_NAME,
  VK_AMD_EXTENSION_41_EXTENSION_NAME,
  VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME,
  VK_AMD_SHADER_INFO_EXTENSION_NAME,
  VK_AMD_EXTENSION_44_EXTENSION_NAME,
  VK_AMD_EXTENSION_45_EXTENSION_NAME,
  VK_AMD_EXTENSION_46_EXTENSION_NAME,
  VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME,
  VK_NVX_EXTENSION_48_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_49_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_50_EXTENSION_NAME,
  VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME,
  VK_NVX_EXTENSION_52_EXTENSION_NAME,
  VK_NV_EXTENSION_53_EXTENSION_NAME,
  VK_KHR_MULTIVIEW_EXTENSION_NAME,
  VK_IMG_FORMAT_PVRTC_EXTENSION_NAME,
  VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME,
  VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME,
  VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME,
  VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME,
  VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME,
  VK_KHR_DEVICE_GROUP_EXTENSION_NAME,
  VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME,
  VK_NN_VI_SURFACE_EXTENSION_NAME,
  VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME,
  VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME,
  VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME,
  VK_ARM_EXTENSION_01_EXTENSION_NAME,
  VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME,
  VK_IMG_EXTENSION_69_EXTENSION_NAME,
  VK_KHR_MAINTENANCE1_EXTENSION_NAME,
  VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME,
  VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME,
  VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME,
  VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME,
  VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME,
  VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME,
  VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME,
  VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME,
  VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME,
  VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME,
  VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME,
  VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME,
  VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME,
  VK_KHR_16BIT_STORAGE_EXTENSION_NAME,
  VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME,
  VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME,
  VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME,
  VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME,
  VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME,
  VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME,
  VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME,
  VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME,
  VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME,
  VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME,
  VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME,
  VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME,
  VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME,
  VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME,
  VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME,
  VK_NV_EXTENSION_101_EXTENSION_NAME,
  VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME,
  VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME,
  VK_NV_EXTENSION_104_EXTENSION_NAME,
  VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME,
  VK_EXT_HDR_METADATA_EXTENSION_NAME,
  VK_IMG_EXTENSION_107_EXTENSION_NAME,
  VK_IMG_EXTENSION_108_EXTENSION_NAME,
  VK_IMG_EXTENSION_109_EXTENSION_NAME,
  VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME,
  VK_IMG_EXTENSION_111_EXTENSION_NAME,
  VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME,
  VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME,
  VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME,
  VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME,
  VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME,
  VK_KHR_EXTENSION_117_EXTENSION_NAME,
  VK_KHR_MAINTENANCE2_EXTENSION_NAME,
  VK_KHR_EXTENSION_119_EXTENSION_NAME,
  VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME,
  VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME,
  VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME,
  VK_MVK_IOS_SURFACE_EXTENSION_NAME,
  VK_MVK_MACOS_SURFACE_EXTENSION_NAME,
  VK_MVK_MOLTENVK_EXTENSION_NAME,
  VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME,
  VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME,
  VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME,
  VK_EXT_DEBUG_UTILS_EXTENSION_NAME,
  VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME,
  VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME,
  VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME,
  VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME,
  VK_AMD_EXTENSION_134_EXTENSION_NAME,
  VK_AMD_EXTENSION_135_EXTENSION_NAME,
  VK_AMD_EXTENSION_136_EXTENSION_NAME,
  VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME,
  VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME,
  VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME,
  VK_AMD_EXTENSION_140_EXTENSION_NAME,
  VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME,
  VK_AMD_EXTENSION_142_EXTENSION_NAME,
  VK_AMD_EXTENSION_143_EXTENSION_NAME,
  VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME,
  VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME,
  VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME,
  VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME,
  VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME,
  VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME,
  VK_NV_EXTENSION_151_EXTENSION_NAME,
  VK_NV_EXTENSION_152_EXTENSION_NAME,
  VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME,
  VK_NV_FILL_RECTANGLE_EXTENSION_NAME,
  VK_NV_EXTENSION_155_EXTENSION_NAME,
  VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME,
  VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME,
  VK_KHR_BIND_MEMORY_2_EXTENSION_NAME,
  VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME,
  VK_EXT_EXTENSION_160_EXTENSION_NAME,
  VK_EXT_VALIDATION_CACHE_EXTENSION_NAME,
  VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME,
  VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME,
  VK_EXT_EXTENSION_164_EXTENSION_NAME,
  VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME,
  VK_NV_RAY_TRACING_EXTENSION_NAME,
  VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME,
  VK_EXT_EXTENSION_168_EXTENSION_NAME,
  VK_KHR_MAINTENANCE3_EXTENSION_NAME,
  VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME,
  VK_EXT_FILTER_CUBIC_EXTENSION_NAME,
  VK_QCOM_extension_172_EXTENSION_NAME,
  VK_QCOM_extension_173_EXTENSION_NAME,
  VK_QCOM_extension_174_EXTENSION_NAME,
  VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME,
  VK_KHR_EXTENSION_176_EXTENSION_NAME,
  VK_KHR_EXTENSION_177_EXTENSION_NAME,
  VK_KHR_8BIT_STORAGE_EXTENSION_NAME,
  VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME,
  VK_AMD_BUFFER_MARKER_EXTENSION_NAME,
  VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME,
  VK_KHR_EXTENSION_182_EXTENSION_NAME,
  VK_KHR_EXTENSION_183_EXTENSION_NAME,
  VK_KHR_EXTENSION_184_EXTENSION_NAME,
  VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME,
  VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME,
  VK_KHR_EXTENSION_187_EXTENSION_NAME,
  VK_KHR_EXTENSION_188_EXTENSION_NAME,
  VK_KHR_EXTENSION_189_EXTENSION_NAME,
  VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME,
  VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_192_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_193_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_194_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_195_EXTENSION_NAME,
  VK_GOOGLE_EXTENSION_196_EXTENSION_NAME,
  VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME,
  VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME,
  VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME,
  VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME,
  VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME,
  VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME,
  VK_NV_MESH_SHADER_EXTENSION_NAME,
  VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME,
  VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME,
  VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME,
  VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME,
  VK_KHR_EXTENSION_208_EXTENSION_NAME,
  VK_KHR_EXTENSION_209_EXTENSION_NAME,
  VK_KHR_EXTENSION_210_EXTENSION_NAME,
  VK_KHR_EXTENSION_211_EXTENSION_NAME,
  VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME,
  VK_EXT_PCI_BUS_INFO_EXTENSION_NAME,
  VK_KHR_EXTENSION_214_EXTENSION_NAME,
  VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME,
  VK_KHR_EXTENSION_216_EXTENSION_NAME,
  VK_KHR_EXTENSION_217_EXTENSION_NAME,
  VK_EXT_MACOS_IOS_WINDOW_EXTENSION_NAME,
  VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME,
  VK_EXT_EXTENSION_220_EXTENSION_NAME,
  VK_KHR_EXTENSION_221_EXTENSION_NAME,
  VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME,
  VK_EXT_EXTENSION_223_EXTENSION_NAME,
  VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME,
  VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME,
  VK_AMD_EXTENSION_226_EXTENSION_NAME,
  VK_AMD_EXTENSION_227_EXTENSION_NAME,
  VK_AMD_EXTENSION_228_EXTENSION_NAME,
  VK_AMD_EXTENSION_229_EXTENSION_NAME,
  VK_AMD_EXTENSION_230_EXTENSION_NAME,
  VK_AMD_EXTENSION_231_EXTENSION_NAME,
  VK_AMD_EXTENSION_232_EXTENSION_NAME,
  VK_AMD_EXTENSION_233_EXTENSION_NAME,
  VK_AMD_EXTENSION_234_EXTENSION_NAME,
  VK_AMD_EXTENSION_235_EXTENSION_NAME,
  VK_AMD_EXTENSION_236_EXTENSION_NAME,
  VK_KHR_EXTENSION_237_EXTENSION_NAME,
  VK_EXT_MEMORY_BUDGET_EXTENSION_NAME,
  VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME,
  VK_KHR_EXTENSION_240_EXTENSION_NAME,
  VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME,
  VK_NV_EXTENSION_242_EXTENSION_NAME,
  VK_INTEL_EXTENSION_243_EXTENSION_NAME,
  VK_MESA_EXTENSION_244_EXTENSION_NAME,
  VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME,
  VK_EXT_EXTENSION_246_EXTENSION_NAME,
  VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME,
  VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME,
  VK_KHR_EXTENSION_249_EXTENSION_NAME,
  VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME,
  VK_NV_EXTENSION_251_EXTENSION_NAME,
  VK_NV_EXTENSION_252_EXTENSION_NAME,
  VK_NV_EXTENSION_253_EXTENSION_NAME,
  VK_EXT_EXTENSION_254_EXTENSION_NAME,
  VK_EXT_EXTENSION_255_EXTENSION_NAME,
  VK_EXT_EXTENSION_256_EXTENSION_NAME,
  
}

/** ## API_Extensions ## */
export enum API_Extensions {
  VK_KHR_SURFACE_SPEC_VERSION,
  VK_KHR_SWAPCHAIN_SPEC_VERSION,
  VK_KHR_DISPLAY_SPEC_VERSION,
  VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION,
  VK_KHR_XLIB_SURFACE_SPEC_VERSION,
  VK_KHR_XCB_SURFACE_SPEC_VERSION,
  VK_KHR_WAYLAND_SURFACE_SPEC_VERSION,
  VK_KHR_MIR_SURFACE_SPEC_VERSION,
  VK_KHR_ANDROID_SURFACE_SPEC_VERSION,
  VK_KHR_WIN32_SURFACE_SPEC_VERSION,
  VK_ANDROID_NATIVE_BUFFER_SPEC_VERSION,
  VK_ANDROID_NATIVE_BUFFER_NUMBER,
  VK_EXT_DEBUG_REPORT_SPEC_VERSION,
  VK_NV_GLSL_SHADER_SPEC_VERSION,
  VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION,
  VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION,
  VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
  VK_IMG_FILTER_CUBIC_SPEC_VERSION,
  VK_AMD_EXTENSION_17_SPEC_VERSION,
  VK_AMD_EXTENSION_18_SPEC_VERSION,
  VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION,
  VK_AMD_EXTENSION_20_SPEC_VERSION,
  VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION,
  VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION,
  VK_EXT_DEBUG_MARKER_SPEC_VERSION,
  VK_AMD_EXTENSION_24_SPEC_VERSION,
  VK_AMD_EXTENSION_25_SPEC_VERSION,
  VK_AMD_GCN_SHADER_SPEC_VERSION,
  VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION,
  VK_EXT_EXTENSION_28_SPEC_VERSION,
  VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION,
  VK_NVX_EXTENSION_30_SPEC_VERSION,
  VK_NVX_EXTENSION_31_SPEC_VERSION,
  VK_AMD_EXTENSION_32_SPEC_VERSION,
  VK_AMD_EXTENSION_33_SPEC_VERSION,
  VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION,
  VK_AMD_EXTENSION_35_SPEC_VERSION,
  VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION,
  VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION,
  VK_AMD_SHADER_BALLOT_SPEC_VERSION,
  VK_AMD_EXTENSION_39_SPEC_VERSION,
  VK_AMD_EXTENSION_40_SPEC_VERSION,
  VK_AMD_EXTENSION_41_SPEC_VERSION,
  VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION,
  VK_AMD_SHADER_INFO_SPEC_VERSION,
  VK_AMD_EXTENSION_44_SPEC_VERSION,
  VK_AMD_EXTENSION_45_SPEC_VERSION,
  VK_AMD_EXTENSION_46_SPEC_VERSION,
  VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION,
  VK_NVX_EXTENSION_48_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_49_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_50_SPEC_VERSION,
  VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION,
  VK_NVX_EXTENSION_52_SPEC_VERSION,
  VK_NV_EXTENSION_53_SPEC_VERSION,
  VK_KHR_MULTIVIEW_SPEC_VERSION,
  VK_IMG_FORMAT_PVRTC_SPEC_VERSION,
  VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION,
  VK_NV_EXTERNAL_MEMORY_SPEC_VERSION,
  VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION,
  VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION,
  VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION,
  VK_KHR_DEVICE_GROUP_SPEC_VERSION,
  VK_EXT_VALIDATION_FLAGS_SPEC_VERSION,
  VK_NN_VI_SURFACE_SPEC_VERSION,
  VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION,
  VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION,
  VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION,
  VK_ARM_EXTENSION_01_SPEC_VERSION,
  VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION,
  VK_IMG_EXTENSION_69_SPEC_VERSION,
  VK_KHR_MAINTENANCE1_SPEC_VERSION,
  VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION,
  VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION,
  VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION,
  VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION,
  VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION,
  VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION,
  VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION,
  VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION,
  VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION,
  VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION,
  VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION,
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR,
  VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION,
  VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION,
  VK_KHR_16BIT_STORAGE_SPEC_VERSION,
  VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION,
  VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION,
  VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION,
  VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION,
  VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION,
  VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION,
  VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION,
  VK_EXT_DISPLAY_CONTROL_SPEC_VERSION,
  VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION,
  VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION,
  VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION,
  VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION,
  VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION,
  VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION,
  VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION,
  VK_NV_EXTENSION_101_SPEC_VERSION,
  VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION,
  VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION,
  VK_NV_EXTENSION_104_SPEC_VERSION,
  VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION,
  VK_EXT_HDR_METADATA_SPEC_VERSION,
  VK_IMG_EXTENSION_107_SPEC_VERSION,
  VK_IMG_EXTENSION_108_SPEC_VERSION,
  VK_IMG_EXTENSION_109_SPEC_VERSION,
  VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION,
  VK_IMG_EXTENSION_111_SPEC_VERSION,
  VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION,
  VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION,
  VK_KHR_EXTERNAL_FENCE_SPEC_VERSION,
  VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION,
  VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION,
  VK_KHR_EXTENSION_117_SPEC_VERSION,
  VK_KHR_MAINTENANCE2_SPEC_VERSION,
  VK_KHR_EXTENSION_119_SPEC_VERSION,
  VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION,
  VK_KHR_VARIABLE_POINTERS_SPEC_VERSION,
  VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION,
  VK_MVK_IOS_SURFACE_SPEC_VERSION,
  VK_MVK_MACOS_SURFACE_SPEC_VERSION,
  VK_MVK_MOLTENVK_SPEC_VERSION,
  VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION,
  VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION,
  VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION,
  VK_EXT_DEBUG_UTILS_SPEC_VERSION,
  VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION,
  VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION,
  VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION,
  VK_AMD_GPU_SHADER_INT16_SPEC_VERSION,
  VK_AMD_EXTENSION_134_SPEC_VERSION,
  VK_AMD_EXTENSION_135_SPEC_VERSION,
  VK_AMD_EXTENSION_136_SPEC_VERSION,
  VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION,
  VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION,
  VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION,
  VK_AMD_EXTENSION_140_SPEC_VERSION,
  VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION,
  VK_AMD_EXTENSION_142_SPEC_VERSION,
  VK_AMD_EXTENSION_143_SPEC_VERSION,
  VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION,
  VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION,
  VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION,
  VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION,
  VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION,
  VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION,
  VK_NV_EXTENSION_151_SPEC_VERSION,
  VK_NV_EXTENSION_152_SPEC_VERSION,
  VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION,
  VK_NV_FILL_RECTANGLE_SPEC_VERSION,
  VK_NV_EXTENSION_155_SPEC_VERSION,
  VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION,
  VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION,
  VK_KHR_BIND_MEMORY_2_SPEC_VERSION,
  VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION,
  VK_EXT_EXTENSION_160_SPEC_VERSION,
  VK_EXT_VALIDATION_CACHE_SPEC_VERSION,
  VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION,
  VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION,
  VK_EXT_EXTENSION_164_SPEC_VERSION,
  VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION,
  VK_NV_RAY_TRACING_SPEC_VERSION,
  VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION,
  VK_EXT_EXTENSION_168_SPEC_VERSION,
  VK_KHR_MAINTENANCE3_SPEC_VERSION,
  VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION,
  VK_EXT_FILTER_CUBIC_SPEC_VERSION,
  VK_QCOM_extension_172_SPEC_VERSION,
  VK_QCOM_extension_173_SPEC_VERSION,
  VK_QCOM_extension_174_SPEC_VERSION,
  VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION,
  VK_KHR_EXTENSION_176_SPEC_VERSION,
  VK_KHR_EXTENSION_177_SPEC_VERSION,
  VK_KHR_8BIT_STORAGE_SPEC_VERSION,
  VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION,
  VK_AMD_BUFFER_MARKER_SPEC_VERSION,
  VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION,
  VK_KHR_EXTENSION_182_SPEC_VERSION,
  VK_KHR_EXTENSION_183_SPEC_VERSION,
  VK_KHR_EXTENSION_184_SPEC_VERSION,
  VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION,
  VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION,
  VK_KHR_EXTENSION_187_SPEC_VERSION,
  VK_KHR_EXTENSION_188_SPEC_VERSION,
  VK_KHR_EXTENSION_189_SPEC_VERSION,
  VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION,
  VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_192_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_193_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_194_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_195_SPEC_VERSION,
  VK_GOOGLE_EXTENSION_196_SPEC_VERSION,
  VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION,
  VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION,
  VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION,
  VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION,
  VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION,
  VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION,
  VK_NV_MESH_SHADER_SPEC_VERSION,
  VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION,
  VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION,
  VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION,
  VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION,
  VK_KHR_EXTENSION_208_SPEC_VERSION,
  VK_KHR_EXTENSION_209_SPEC_VERSION,
  VK_KHR_EXTENSION_210_SPEC_VERSION,
  VK_KHR_EXTENSION_211_SPEC_VERSION,
  VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION,
  VK_EXT_PCI_BUS_INFO_SPEC_VERSION,
  VK_KHR_EXTENSION_214_SPEC_VERSION,
  VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION,
  VK_KHR_EXTENSION_216_SPEC_VERSION,
  VK_KHR_EXTENSION_217_SPEC_VERSION,
  VK_EXT_MACOS_IOS_WINDOW_SPEC_VERSION,
  VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION,
  VK_EXT_EXTENSION_220_SPEC_VERSION,
  VK_KHR_EXTENSION_221_SPEC_VERSION,
  VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION,
  VK_EXT_EXTENSION_223_SPEC_VERSION,
  VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION,
  VK_GOOGLE_DECORATE_STRING_SPEC_VERSION,
  VK_AMD_EXTENSION_226_SPEC_VERSION,
  VK_AMD_EXTENSION_227_SPEC_VERSION,
  VK_AMD_EXTENSION_228_SPEC_VERSION,
  VK_AMD_EXTENSION_229_SPEC_VERSION,
  VK_AMD_EXTENSION_230_SPEC_VERSION,
  VK_AMD_EXTENSION_231_SPEC_VERSION,
  VK_AMD_EXTENSION_232_SPEC_VERSION,
  VK_AMD_EXTENSION_233_SPEC_VERSION,
  VK_AMD_EXTENSION_234_SPEC_VERSION,
  VK_AMD_EXTENSION_235_SPEC_VERSION,
  VK_AMD_EXTENSION_236_SPEC_VERSION,
  VK_KHR_EXTENSION_237_SPEC_VERSION,
  VK_EXT_MEMORY_BUDGET_SPEC_VERSION,
  VK_EXT_MEMORY_PRIORITY_SPEC_VERSION,
  VK_KHR_EXTENSION_240_SPEC_VERSION,
  VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION,
  VK_NV_EXTENSION_242_SPEC_VERSION,
  VK_INTEL_EXTENSION_243_SPEC_VERSION,
  VK_MESA_EXTENSION_244_SPEC_VERSION,
  VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION,
  VK_EXT_EXTENSION_246_SPEC_VERSION,
  VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION,
  VK_EXT_VALIDATION_FEATURES_SPEC_VERSION,
  VK_KHR_EXTENSION_249_SPEC_VERSION,
  VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION,
  VK_NV_EXTENSION_251_SPEC_VERSION,
  VK_NV_EXTENSION_252_SPEC_VERSION,
  VK_NV_EXTENSION_253_SPEC_VERSION,
  VK_EXT_EXTENSION_254_SPEC_VERSION,
  VK_EXT_EXTENSION_255_SPEC_VERSION,
  VK_EXT_EXTENSION_256_SPEC_VERSION,
  
}

/** ## API_Constants ## */
export enum API_Constants {
  VK_MAX_PHYSICAL_DEVICE_NAME_SIZE,
  VK_UUID_SIZE,
  VK_LUID_SIZE,
  VK_LUID_SIZE_KHR,
  VK_MAX_EXTENSION_NAME_SIZE,
  VK_MAX_DESCRIPTION_SIZE,
  VK_MAX_MEMORY_TYPES,
  VK_MAX_MEMORY_HEAPS,
  VK_LOD_CLAMP_NONE,
  VK_REMAINING_MIP_LEVELS,
  VK_REMAINING_ARRAY_LAYERS,
  VK_WHOLE_SIZE,
  VK_ATTACHMENT_UNUSED,
  VK_TRUE,
  VK_FALSE,
  VK_QUEUE_FAMILY_IGNORED,
  VK_QUEUE_FAMILY_EXTERNAL,
  VK_QUEUE_FAMILY_EXTERNAL_KHR,
  VK_QUEUE_FAMILY_FOREIGN_EXT,
  VK_SUBPASS_EXTERNAL,
  VK_MAX_DEVICE_GROUP_SIZE,
  VK_MAX_DEVICE_GROUP_SIZE_KHR,
  VK_MAX_DRIVER_NAME_SIZE_KHR,
  VK_MAX_DRIVER_INFO_SIZE_KHR,
  VK_SHADER_UNUSED_NV,
  VK_NULL_HANDLE,
  
}

/** ## VkImageLayout ## */
export enum VkImageLayout {
  VK_IMAGE_LAYOUT_UNDEFINED,
  VK_IMAGE_LAYOUT_GENERAL,
  VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
  VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
  VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
  VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
  VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
  VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
  VK_IMAGE_LAYOUT_PREINITIALIZED,
  VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,
  VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR,
  VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR,
  VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR,
  VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV,
  VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT,
  
}

/** ## VkAttachmentLoadOp ## */
export enum VkAttachmentLoadOp {
  VK_ATTACHMENT_LOAD_OP_LOAD,
  VK_ATTACHMENT_LOAD_OP_CLEAR,
  VK_ATTACHMENT_LOAD_OP_DONT_CARE,
  
}

/** ## VkAttachmentStoreOp ## */
export enum VkAttachmentStoreOp {
  VK_ATTACHMENT_STORE_OP_STORE,
  VK_ATTACHMENT_STORE_OP_DONT_CARE,
  
}

/** ## VkImageType ## */
export enum VkImageType {
  VK_IMAGE_TYPE_1D,
  VK_IMAGE_TYPE_2D,
  VK_IMAGE_TYPE_3D,
  
}

/** ## VkImageTiling ## */
export enum VkImageTiling {
  VK_IMAGE_TILING_OPTIMAL,
  VK_IMAGE_TILING_LINEAR,
  VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT,
  
}

/** ## VkImageViewType ## */
export enum VkImageViewType {
  VK_IMAGE_VIEW_TYPE_1D,
  VK_IMAGE_VIEW_TYPE_2D,
  VK_IMAGE_VIEW_TYPE_3D,
  VK_IMAGE_VIEW_TYPE_CUBE,
  VK_IMAGE_VIEW_TYPE_1D_ARRAY,
  VK_IMAGE_VIEW_TYPE_2D_ARRAY,
  VK_IMAGE_VIEW_TYPE_CUBE_ARRAY,
  
}

/** ## VkCommandBufferLevel ## */
export enum VkCommandBufferLevel {
  VK_COMMAND_BUFFER_LEVEL_PRIMARY,
  VK_COMMAND_BUFFER_LEVEL_SECONDARY,
  
}

/** ## VkComponentSwizzle ## */
export enum VkComponentSwizzle {
  VK_COMPONENT_SWIZZLE_IDENTITY,
  VK_COMPONENT_SWIZZLE_ZERO,
  VK_COMPONENT_SWIZZLE_ONE,
  VK_COMPONENT_SWIZZLE_R,
  VK_COMPONENT_SWIZZLE_G,
  VK_COMPONENT_SWIZZLE_B,
  VK_COMPONENT_SWIZZLE_A,
  
}

/** ## VkDescriptorType ## */
export enum VkDescriptorType {
  VK_DESCRIPTOR_TYPE_SAMPLER,
  VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
  VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
  VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
  VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
  VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER,
  VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
  VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
  VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
  VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC,
  VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT,
  VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT,
  VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV,
  
}

/** ## VkQueryType ## */
export enum VkQueryType {
  VK_QUERY_TYPE_OCCLUSION,
  VK_QUERY_TYPE_PIPELINE_STATISTICS,
  VK_QUERY_TYPE_TIMESTAMP,
  VK_QUERY_TYPE_RESERVED_8,
  VK_QUERY_TYPE_RESERVED_4,
  VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT,
  VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV,
  
}

/** ## VkBorderColor ## */
export enum VkBorderColor {
  VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK,
  VK_BORDER_COLOR_INT_TRANSPARENT_BLACK,
  VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK,
  VK_BORDER_COLOR_INT_OPAQUE_BLACK,
  VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE,
  VK_BORDER_COLOR_INT_OPAQUE_WHITE,
  
}

/** ## VkPipelineBindPoint ## */
export enum VkPipelineBindPoint {
  VK_PIPELINE_BIND_POINT_GRAPHICS,
  VK_PIPELINE_BIND_POINT_COMPUTE,
  VK_PIPELINE_BIND_POINT_RAY_TRACING_NV,
  
}

/** ## VkPipelineCacheHeaderVersion ## */
export enum VkPipelineCacheHeaderVersion {
  VK_PIPELINE_CACHE_HEADER_VERSION_ONE,
  
}

/** ## VkPrimitiveTopology ## */
export enum VkPrimitiveTopology {
  VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
  VK_PRIMITIVE_TOPOLOGY_LINE_LIST,
  VK_PRIMITIVE_TOPOLOGY_LINE_STRIP,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN,
  VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY,
  VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY,
  VK_PRIMITIVE_TOPOLOGY_PATCH_LIST,
  
}

/** ## VkSharingMode ## */
export enum VkSharingMode {
  VK_SHARING_MODE_EXCLUSIVE,
  VK_SHARING_MODE_CONCURRENT,
  
}

/** ## VkIndexType ## */
export enum VkIndexType {
  VK_INDEX_TYPE_UINT16,
  VK_INDEX_TYPE_UINT32,
  VK_INDEX_TYPE_NONE_NV,
  
}

/** ## VkFilter ## */
export enum VkFilter {
  VK_FILTER_NEAREST,
  VK_FILTER_LINEAR,
  VK_FILTER_CUBIC_IMG,
  VK_FILTER_CUBIC_EXT,
  
}

/** ## VkSamplerMipmapMode ## */
export enum VkSamplerMipmapMode {
  VK_SAMPLER_MIPMAP_MODE_NEAREST,
  VK_SAMPLER_MIPMAP_MODE_LINEAR,
  
}

/** ## VkSamplerAddressMode ## */
export enum VkSamplerAddressMode {
  VK_SAMPLER_ADDRESS_MODE_REPEAT,
  VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT,
  VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE,
  VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER,
  
}

/** ## VkCompareOp ## */
export enum VkCompareOp {
  VK_COMPARE_OP_NEVER,
  VK_COMPARE_OP_LESS,
  VK_COMPARE_OP_EQUAL,
  VK_COMPARE_OP_LESS_OR_EQUAL,
  VK_COMPARE_OP_GREATER,
  VK_COMPARE_OP_NOT_EQUAL,
  VK_COMPARE_OP_GREATER_OR_EQUAL,
  VK_COMPARE_OP_ALWAYS,
  
}

/** ## VkPolygonMode ## */
export enum VkPolygonMode {
  VK_POLYGON_MODE_FILL,
  VK_POLYGON_MODE_LINE,
  VK_POLYGON_MODE_POINT,
  VK_POLYGON_MODE_FILL_RECTANGLE_NV,
  
}

/** ## VkFrontFace ## */
export enum VkFrontFace {
  VK_FRONT_FACE_COUNTER_CLOCKWISE,
  VK_FRONT_FACE_CLOCKWISE,
  
}

/** ## VkBlendFactor ## */
export enum VkBlendFactor {
  VK_BLEND_FACTOR_ZERO,
  VK_BLEND_FACTOR_ONE,
  VK_BLEND_FACTOR_SRC_COLOR,
  VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
  VK_BLEND_FACTOR_DST_COLOR,
  VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR,
  VK_BLEND_FACTOR_SRC_ALPHA,
  VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
  VK_BLEND_FACTOR_DST_ALPHA,
  VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
  VK_BLEND_FACTOR_CONSTANT_COLOR,
  VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR,
  VK_BLEND_FACTOR_CONSTANT_ALPHA,
  VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,
  VK_BLEND_FACTOR_SRC_ALPHA_SATURATE,
  VK_BLEND_FACTOR_SRC1_COLOR,
  VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR,
  VK_BLEND_FACTOR_SRC1_ALPHA,
  VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA,
  
}

/** ## VkBlendOp ## */
export enum VkBlendOp {
  VK_BLEND_OP_ADD,
  VK_BLEND_OP_SUBTRACT,
  VK_BLEND_OP_REVERSE_SUBTRACT,
  VK_BLEND_OP_MIN,
  VK_BLEND_OP_MAX,
  VK_BLEND_OP_ZERO_EXT,
  VK_BLEND_OP_SRC_EXT,
  VK_BLEND_OP_DST_EXT,
  VK_BLEND_OP_SRC_OVER_EXT,
  VK_BLEND_OP_DST_OVER_EXT,
  VK_BLEND_OP_SRC_IN_EXT,
  VK_BLEND_OP_DST_IN_EXT,
  VK_BLEND_OP_SRC_OUT_EXT,
  VK_BLEND_OP_DST_OUT_EXT,
  VK_BLEND_OP_SRC_ATOP_EXT,
  VK_BLEND_OP_DST_ATOP_EXT,
  VK_BLEND_OP_XOR_EXT,
  VK_BLEND_OP_MULTIPLY_EXT,
  VK_BLEND_OP_SCREEN_EXT,
  VK_BLEND_OP_OVERLAY_EXT,
  VK_BLEND_OP_DARKEN_EXT,
  VK_BLEND_OP_LIGHTEN_EXT,
  VK_BLEND_OP_COLORDODGE_EXT,
  VK_BLEND_OP_COLORBURN_EXT,
  VK_BLEND_OP_HARDLIGHT_EXT,
  VK_BLEND_OP_SOFTLIGHT_EXT,
  VK_BLEND_OP_DIFFERENCE_EXT,
  VK_BLEND_OP_EXCLUSION_EXT,
  VK_BLEND_OP_INVERT_EXT,
  VK_BLEND_OP_INVERT_RGB_EXT,
  VK_BLEND_OP_LINEARDODGE_EXT,
  VK_BLEND_OP_LINEARBURN_EXT,
  VK_BLEND_OP_VIVIDLIGHT_EXT,
  VK_BLEND_OP_LINEARLIGHT_EXT,
  VK_BLEND_OP_PINLIGHT_EXT,
  VK_BLEND_OP_HARDMIX_EXT,
  VK_BLEND_OP_HSL_HUE_EXT,
  VK_BLEND_OP_HSL_SATURATION_EXT,
  VK_BLEND_OP_HSL_COLOR_EXT,
  VK_BLEND_OP_HSL_LUMINOSITY_EXT,
  VK_BLEND_OP_PLUS_EXT,
  VK_BLEND_OP_PLUS_CLAMPED_EXT,
  VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT,
  VK_BLEND_OP_PLUS_DARKER_EXT,
  VK_BLEND_OP_MINUS_EXT,
  VK_BLEND_OP_MINUS_CLAMPED_EXT,
  VK_BLEND_OP_CONTRAST_EXT,
  VK_BLEND_OP_INVERT_OVG_EXT,
  VK_BLEND_OP_RED_EXT,
  VK_BLEND_OP_GREEN_EXT,
  VK_BLEND_OP_BLUE_EXT,
  
}

/** ## VkStencilOp ## */
export enum VkStencilOp {
  VK_STENCIL_OP_KEEP,
  VK_STENCIL_OP_ZERO,
  VK_STENCIL_OP_REPLACE,
  VK_STENCIL_OP_INCREMENT_AND_CLAMP,
  VK_STENCIL_OP_DECREMENT_AND_CLAMP,
  VK_STENCIL_OP_INVERT,
  VK_STENCIL_OP_INCREMENT_AND_WRAP,
  VK_STENCIL_OP_DECREMENT_AND_WRAP,
  
}

/** ## VkLogicOp ## */
export enum VkLogicOp {
  VK_LOGIC_OP_CLEAR,
  VK_LOGIC_OP_AND,
  VK_LOGIC_OP_AND_REVERSE,
  VK_LOGIC_OP_COPY,
  VK_LOGIC_OP_AND_INVERTED,
  VK_LOGIC_OP_NO_OP,
  VK_LOGIC_OP_XOR,
  VK_LOGIC_OP_OR,
  VK_LOGIC_OP_NOR,
  VK_LOGIC_OP_EQUIVALENT,
  VK_LOGIC_OP_INVERT,
  VK_LOGIC_OP_OR_REVERSE,
  VK_LOGIC_OP_COPY_INVERTED,
  VK_LOGIC_OP_OR_INVERTED,
  VK_LOGIC_OP_NAND,
  VK_LOGIC_OP_SET,
  
}

/** ## VkInternalAllocationType ## */
export enum VkInternalAllocationType {
  VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,
  
}

/** ## VkSystemAllocationScope ## */
export enum VkSystemAllocationScope {
  VK_SYSTEM_ALLOCATION_SCOPE_COMMAND,
  VK_SYSTEM_ALLOCATION_SCOPE_OBJECT,
  VK_SYSTEM_ALLOCATION_SCOPE_CACHE,
  VK_SYSTEM_ALLOCATION_SCOPE_DEVICE,
  VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE,
  
}

/** ## VkPhysicalDeviceType ## */
export enum VkPhysicalDeviceType {
  VK_PHYSICAL_DEVICE_TYPE_OTHER,
  VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU,
  VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU,
  VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU,
  VK_PHYSICAL_DEVICE_TYPE_CPU,
  
}

/** ## VkVertexInputRate ## */
export enum VkVertexInputRate {
  VK_VERTEX_INPUT_RATE_VERTEX,
  VK_VERTEX_INPUT_RATE_INSTANCE,
  
}

/** ## VkFormat ## */
export enum VkFormat {
  VK_FORMAT_UNDEFINED,
  VK_FORMAT_R4G4_UNORM_PACK8,
  VK_FORMAT_R4G4B4A4_UNORM_PACK16,
  VK_FORMAT_B4G4R4A4_UNORM_PACK16,
  VK_FORMAT_R5G6B5_UNORM_PACK16,
  VK_FORMAT_B5G6R5_UNORM_PACK16,
  VK_FORMAT_R5G5B5A1_UNORM_PACK16,
  VK_FORMAT_B5G5R5A1_UNORM_PACK16,
  VK_FORMAT_A1R5G5B5_UNORM_PACK16,
  VK_FORMAT_R8_UNORM,
  VK_FORMAT_R8_SNORM,
  VK_FORMAT_R8_USCALED,
  VK_FORMAT_R8_SSCALED,
  VK_FORMAT_R8_UINT,
  VK_FORMAT_R8_SINT,
  VK_FORMAT_R8_SRGB,
  VK_FORMAT_R8G8_UNORM,
  VK_FORMAT_R8G8_SNORM,
  VK_FORMAT_R8G8_USCALED,
  VK_FORMAT_R8G8_SSCALED,
  VK_FORMAT_R8G8_UINT,
  VK_FORMAT_R8G8_SINT,
  VK_FORMAT_R8G8_SRGB,
  VK_FORMAT_R8G8B8_UNORM,
  VK_FORMAT_R8G8B8_SNORM,
  VK_FORMAT_R8G8B8_USCALED,
  VK_FORMAT_R8G8B8_SSCALED,
  VK_FORMAT_R8G8B8_UINT,
  VK_FORMAT_R8G8B8_SINT,
  VK_FORMAT_R8G8B8_SRGB,
  VK_FORMAT_B8G8R8_UNORM,
  VK_FORMAT_B8G8R8_SNORM,
  VK_FORMAT_B8G8R8_USCALED,
  VK_FORMAT_B8G8R8_SSCALED,
  VK_FORMAT_B8G8R8_UINT,
  VK_FORMAT_B8G8R8_SINT,
  VK_FORMAT_B8G8R8_SRGB,
  VK_FORMAT_R8G8B8A8_UNORM,
  VK_FORMAT_R8G8B8A8_SNORM,
  VK_FORMAT_R8G8B8A8_USCALED,
  VK_FORMAT_R8G8B8A8_SSCALED,
  VK_FORMAT_R8G8B8A8_UINT,
  VK_FORMAT_R8G8B8A8_SINT,
  VK_FORMAT_R8G8B8A8_SRGB,
  VK_FORMAT_B8G8R8A8_UNORM,
  VK_FORMAT_B8G8R8A8_SNORM,
  VK_FORMAT_B8G8R8A8_USCALED,
  VK_FORMAT_B8G8R8A8_SSCALED,
  VK_FORMAT_B8G8R8A8_UINT,
  VK_FORMAT_B8G8R8A8_SINT,
  VK_FORMAT_B8G8R8A8_SRGB,
  VK_FORMAT_A8B8G8R8_UNORM_PACK32,
  VK_FORMAT_A8B8G8R8_SNORM_PACK32,
  VK_FORMAT_A8B8G8R8_USCALED_PACK32,
  VK_FORMAT_A8B8G8R8_SSCALED_PACK32,
  VK_FORMAT_A8B8G8R8_UINT_PACK32,
  VK_FORMAT_A8B8G8R8_SINT_PACK32,
  VK_FORMAT_A8B8G8R8_SRGB_PACK32,
  VK_FORMAT_A2R10G10B10_UNORM_PACK32,
  VK_FORMAT_A2R10G10B10_SNORM_PACK32,
  VK_FORMAT_A2R10G10B10_USCALED_PACK32,
  VK_FORMAT_A2R10G10B10_SSCALED_PACK32,
  VK_FORMAT_A2R10G10B10_UINT_PACK32,
  VK_FORMAT_A2R10G10B10_SINT_PACK32,
  VK_FORMAT_A2B10G10R10_UNORM_PACK32,
  VK_FORMAT_A2B10G10R10_SNORM_PACK32,
  VK_FORMAT_A2B10G10R10_USCALED_PACK32,
  VK_FORMAT_A2B10G10R10_SSCALED_PACK32,
  VK_FORMAT_A2B10G10R10_UINT_PACK32,
  VK_FORMAT_A2B10G10R10_SINT_PACK32,
  VK_FORMAT_R16_UNORM,
  VK_FORMAT_R16_SNORM,
  VK_FORMAT_R16_USCALED,
  VK_FORMAT_R16_SSCALED,
  VK_FORMAT_R16_UINT,
  VK_FORMAT_R16_SINT,
  VK_FORMAT_R16_SFLOAT,
  VK_FORMAT_R16G16_UNORM,
  VK_FORMAT_R16G16_SNORM,
  VK_FORMAT_R16G16_USCALED,
  VK_FORMAT_R16G16_SSCALED,
  VK_FORMAT_R16G16_UINT,
  VK_FORMAT_R16G16_SINT,
  VK_FORMAT_R16G16_SFLOAT,
  VK_FORMAT_R16G16B16_UNORM,
  VK_FORMAT_R16G16B16_SNORM,
  VK_FORMAT_R16G16B16_USCALED,
  VK_FORMAT_R16G16B16_SSCALED,
  VK_FORMAT_R16G16B16_UINT,
  VK_FORMAT_R16G16B16_SINT,
  VK_FORMAT_R16G16B16_SFLOAT,
  VK_FORMAT_R16G16B16A16_UNORM,
  VK_FORMAT_R16G16B16A16_SNORM,
  VK_FORMAT_R16G16B16A16_USCALED,
  VK_FORMAT_R16G16B16A16_SSCALED,
  VK_FORMAT_R16G16B16A16_UINT,
  VK_FORMAT_R16G16B16A16_SINT,
  VK_FORMAT_R16G16B16A16_SFLOAT,
  VK_FORMAT_R32_UINT,
  VK_FORMAT_R32_SINT,
  VK_FORMAT_R32_SFLOAT,
  VK_FORMAT_R32G32_UINT,
  VK_FORMAT_R32G32_SINT,
  VK_FORMAT_R32G32_SFLOAT,
  VK_FORMAT_R32G32B32_UINT,
  VK_FORMAT_R32G32B32_SINT,
  VK_FORMAT_R32G32B32_SFLOAT,
  VK_FORMAT_R32G32B32A32_UINT,
  VK_FORMAT_R32G32B32A32_SINT,
  VK_FORMAT_R32G32B32A32_SFLOAT,
  VK_FORMAT_R64_UINT,
  VK_FORMAT_R64_SINT,
  VK_FORMAT_R64_SFLOAT,
  VK_FORMAT_R64G64_UINT,
  VK_FORMAT_R64G64_SINT,
  VK_FORMAT_R64G64_SFLOAT,
  VK_FORMAT_R64G64B64_UINT,
  VK_FORMAT_R64G64B64_SINT,
  VK_FORMAT_R64G64B64_SFLOAT,
  VK_FORMAT_R64G64B64A64_UINT,
  VK_FORMAT_R64G64B64A64_SINT,
  VK_FORMAT_R64G64B64A64_SFLOAT,
  VK_FORMAT_B10G11R11_UFLOAT_PACK32,
  VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,
  VK_FORMAT_D16_UNORM,
  VK_FORMAT_X8_D24_UNORM_PACK32,
  VK_FORMAT_D32_SFLOAT,
  VK_FORMAT_S8_UINT,
  VK_FORMAT_D16_UNORM_S8_UINT,
  VK_FORMAT_D24_UNORM_S8_UINT,
  VK_FORMAT_D32_SFLOAT_S8_UINT,
  VK_FORMAT_BC1_RGB_UNORM_BLOCK,
  VK_FORMAT_BC1_RGB_SRGB_BLOCK,
  VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
  VK_FORMAT_BC1_RGBA_SRGB_BLOCK,
  VK_FORMAT_BC2_UNORM_BLOCK,
  VK_FORMAT_BC2_SRGB_BLOCK,
  VK_FORMAT_BC3_UNORM_BLOCK,
  VK_FORMAT_BC3_SRGB_BLOCK,
  VK_FORMAT_BC4_UNORM_BLOCK,
  VK_FORMAT_BC4_SNORM_BLOCK,
  VK_FORMAT_BC5_UNORM_BLOCK,
  VK_FORMAT_BC5_SNORM_BLOCK,
  VK_FORMAT_BC6H_UFLOAT_BLOCK,
  VK_FORMAT_BC6H_SFLOAT_BLOCK,
  VK_FORMAT_BC7_UNORM_BLOCK,
  VK_FORMAT_BC7_SRGB_BLOCK,
  VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,
  VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,
  VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK,
  VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK,
  VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK,
  VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,
  VK_FORMAT_EAC_R11_UNORM_BLOCK,
  VK_FORMAT_EAC_R11_SNORM_BLOCK,
  VK_FORMAT_EAC_R11G11_UNORM_BLOCK,
  VK_FORMAT_EAC_R11G11_SNORM_BLOCK,
  VK_FORMAT_ASTC_4x4_UNORM_BLOCK,
  VK_FORMAT_ASTC_4x4_SRGB_BLOCK,
  VK_FORMAT_ASTC_5x4_UNORM_BLOCK,
  VK_FORMAT_ASTC_5x4_SRGB_BLOCK,
  VK_FORMAT_ASTC_5x5_UNORM_BLOCK,
  VK_FORMAT_ASTC_5x5_SRGB_BLOCK,
  VK_FORMAT_ASTC_6x5_UNORM_BLOCK,
  VK_FORMAT_ASTC_6x5_SRGB_BLOCK,
  VK_FORMAT_ASTC_6x6_UNORM_BLOCK,
  VK_FORMAT_ASTC_6x6_SRGB_BLOCK,
  VK_FORMAT_ASTC_8x5_UNORM_BLOCK,
  VK_FORMAT_ASTC_8x5_SRGB_BLOCK,
  VK_FORMAT_ASTC_8x6_UNORM_BLOCK,
  VK_FORMAT_ASTC_8x6_SRGB_BLOCK,
  VK_FORMAT_ASTC_8x8_UNORM_BLOCK,
  VK_FORMAT_ASTC_8x8_SRGB_BLOCK,
  VK_FORMAT_ASTC_10x5_UNORM_BLOCK,
  VK_FORMAT_ASTC_10x5_SRGB_BLOCK,
  VK_FORMAT_ASTC_10x6_UNORM_BLOCK,
  VK_FORMAT_ASTC_10x6_SRGB_BLOCK,
  VK_FORMAT_ASTC_10x8_UNORM_BLOCK,
  VK_FORMAT_ASTC_10x8_SRGB_BLOCK,
  VK_FORMAT_ASTC_10x10_UNORM_BLOCK,
  VK_FORMAT_ASTC_10x10_SRGB_BLOCK,
  VK_FORMAT_ASTC_12x10_UNORM_BLOCK,
  VK_FORMAT_ASTC_12x10_SRGB_BLOCK,
  VK_FORMAT_ASTC_12x12_UNORM_BLOCK,
  VK_FORMAT_ASTC_12x12_SRGB_BLOCK,
  VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG,
  VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG,
  VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG,
  VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG,
  VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG,
  VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG,
  VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG,
  VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG,
  VK_FORMAT_G8B8G8R8_422_UNORM_KHR,
  VK_FORMAT_B8G8R8G8_422_UNORM_KHR,
  VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR,
  VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR,
  VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR,
  VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR,
  VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR,
  VK_FORMAT_R10X6_UNORM_PACK16_KHR,
  VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR,
  VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR,
  VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR,
  VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR,
  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR,
  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR,
  VK_FORMAT_R12X4_UNORM_PACK16_KHR,
  VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR,
  VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR,
  VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR,
  VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR,
  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR,
  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR,
  VK_FORMAT_G16B16G16R16_422_UNORM_KHR,
  VK_FORMAT_B16G16R16G16_422_UNORM_KHR,
  VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR,
  VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR,
  VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR,
  VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR,
  VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR,
  
}

/** ## VkStructureType ## */
export enum VkStructureType {
  VK_STRUCTURE_TYPE_APPLICATION_INFO,
  VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
  VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
  VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
  VK_STRUCTURE_TYPE_SUBMIT_INFO,
  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
  VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
  VK_STRUCTURE_TYPE_BIND_SPARSE_INFO,
  VK_STRUCTURE_TYPE_FENCE_CREATE_INFO,
  VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO,
  VK_STRUCTURE_TYPE_EVENT_CREATE_INFO,
  VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO,
  VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
  VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO,
  VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
  VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
  VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
  VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO,
  VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
  VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
  VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
  VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET,
  VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
  VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,
  VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
  VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
  VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,
  VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,
  VK_STRUCTURE_TYPE_MEMORY_BARRIER,
  VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO,
  VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO,
  VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PRESENT_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR,
  VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR,
  VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR,
  VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID,
  VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD,
  VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT,
  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV,
  VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV,
  VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR,
  VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR,
  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR,
  VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT,
  VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR,
  VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT,
  VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR,
  VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX,
  VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX,
  VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX,
  VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX,
  VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX,
  VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT,
  VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT,
  VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT,
  VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT,
  VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_HDR_METADATA_EXT,
  VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR,
  VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR,
  VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR,
  VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR,
  VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR,
  VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR,
  VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR,
  VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK,
  VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK,
  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR,
  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID,
  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID,
  VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID,
  VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
  VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
  VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT,
  VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT,
  VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR,
  VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR,
  VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR,
  VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR,
  VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR,
  VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT,
  VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT,
  VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_GEOMETRY_NV,
  VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV,
  VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV,
  VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV,
  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV,
  VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT,
  VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR,
  VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT,
  VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR,
  VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD,
  VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR,
  VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV,
  VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV,
  VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT,
  VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT,
  VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT,
  VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT,
  VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV,
  VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV,
  
}

/** ## VkSubpassContents ## */
export enum VkSubpassContents {
  VK_SUBPASS_CONTENTS_INLINE,
  VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS,
  
}

/** ## VkResult ## */
export enum VkResult {
  VK_SUCCESS,
  VK_NOT_READY,
  VK_TIMEOUT,
  VK_EVENT_SET,
  VK_EVENT_RESET,
  VK_INCOMPLETE,
  VK_ERROR_OUT_OF_HOST_MEMORY,
  VK_ERROR_OUT_OF_DEVICE_MEMORY,
  VK_ERROR_INITIALIZATION_FAILED,
  VK_ERROR_DEVICE_LOST,
  VK_ERROR_MEMORY_MAP_FAILED,
  VK_ERROR_LAYER_NOT_PRESENT,
  VK_ERROR_EXTENSION_NOT_PRESENT,
  VK_ERROR_FEATURE_NOT_PRESENT,
  VK_ERROR_INCOMPATIBLE_DRIVER,
  VK_ERROR_TOO_MANY_OBJECTS,
  VK_ERROR_FORMAT_NOT_SUPPORTED,
  VK_ERROR_FRAGMENTED_POOL,
  VK_ERROR_SURFACE_LOST_KHR,
  VK_ERROR_NATIVE_WINDOW_IN_USE_KHR,
  VK_SUBOPTIMAL_KHR,
  VK_ERROR_OUT_OF_DATE_KHR,
  VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,
  VK_ERROR_VALIDATION_FAILED_EXT,
  VK_ERROR_INVALID_SHADER_NV,
  VK_ERROR_OUT_OF_POOL_MEMORY_KHR,
  VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR,
  VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT,
  VK_ERROR_FRAGMENTATION_EXT,
  VK_ERROR_NOT_PERMITTED_EXT,
  VK_ERROR_INVALID_DEVICE_ADDRESS_EXT,
  
}

/** ## VkDynamicState ## */
export enum VkDynamicState {
  VK_DYNAMIC_STATE_VIEWPORT,
  VK_DYNAMIC_STATE_SCISSOR,
  VK_DYNAMIC_STATE_LINE_WIDTH,
  VK_DYNAMIC_STATE_DEPTH_BIAS,
  VK_DYNAMIC_STATE_BLEND_CONSTANTS,
  VK_DYNAMIC_STATE_DEPTH_BOUNDS,
  VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK,
  VK_DYNAMIC_STATE_STENCIL_WRITE_MASK,
  VK_DYNAMIC_STATE_STENCIL_REFERENCE,
  VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV,
  VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT,
  VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT,
  VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV,
  VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV,
  VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV,
  
}

/** ## VkDescriptorUpdateTemplateType ## */
export enum VkDescriptorUpdateTemplateType {
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR,
  
}

/** ## VkObjectType ## */
export enum VkObjectType {
  VK_OBJECT_TYPE_UNKNOWN,
  VK_OBJECT_TYPE_INSTANCE,
  VK_OBJECT_TYPE_PHYSICAL_DEVICE,
  VK_OBJECT_TYPE_DEVICE,
  VK_OBJECT_TYPE_QUEUE,
  VK_OBJECT_TYPE_SEMAPHORE,
  VK_OBJECT_TYPE_COMMAND_BUFFER,
  VK_OBJECT_TYPE_FENCE,
  VK_OBJECT_TYPE_DEVICE_MEMORY,
  VK_OBJECT_TYPE_BUFFER,
  VK_OBJECT_TYPE_IMAGE,
  VK_OBJECT_TYPE_EVENT,
  VK_OBJECT_TYPE_QUERY_POOL,
  VK_OBJECT_TYPE_BUFFER_VIEW,
  VK_OBJECT_TYPE_IMAGE_VIEW,
  VK_OBJECT_TYPE_SHADER_MODULE,
  VK_OBJECT_TYPE_PIPELINE_CACHE,
  VK_OBJECT_TYPE_PIPELINE_LAYOUT,
  VK_OBJECT_TYPE_RENDER_PASS,
  VK_OBJECT_TYPE_PIPELINE,
  VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT,
  VK_OBJECT_TYPE_SAMPLER,
  VK_OBJECT_TYPE_DESCRIPTOR_POOL,
  VK_OBJECT_TYPE_DESCRIPTOR_SET,
  VK_OBJECT_TYPE_FRAMEBUFFER,
  VK_OBJECT_TYPE_COMMAND_POOL,
  VK_OBJECT_TYPE_SURFACE_KHR,
  VK_OBJECT_TYPE_SWAPCHAIN_KHR,
  VK_OBJECT_TYPE_DISPLAY_KHR,
  VK_OBJECT_TYPE_DISPLAY_MODE_KHR,
  VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT,
  VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR,
  VK_OBJECT_TYPE_OBJECT_TABLE_NVX,
  VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX,
  VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT,
  VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR,
  VK_OBJECT_TYPE_VALIDATION_CACHE_EXT,
  VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV,
  
}

/** ## VkPresentModeKHR ## */
export enum VkPresentModeKHR {
  VK_PRESENT_MODE_IMMEDIATE_KHR,
  VK_PRESENT_MODE_MAILBOX_KHR,
  VK_PRESENT_MODE_FIFO_KHR,
  VK_PRESENT_MODE_FIFO_RELAXED_KHR,
  VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR,
  VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR,
  
}

/** ## VkColorSpaceKHR ## */
export enum VkColorSpaceKHR {
  VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
  VK_COLORSPACE_SRGB_NONLINEAR_KHR,
  VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT,
  VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT,
  VK_COLOR_SPACE_DCI_P3_LINEAR_EXT,
  VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT,
  VK_COLOR_SPACE_BT709_LINEAR_EXT,
  VK_COLOR_SPACE_BT709_NONLINEAR_EXT,
  VK_COLOR_SPACE_BT2020_LINEAR_EXT,
  VK_COLOR_SPACE_HDR10_ST2084_EXT,
  VK_COLOR_SPACE_DOLBYVISION_EXT,
  VK_COLOR_SPACE_HDR10_HLG_EXT,
  VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT,
  VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT,
  VK_COLOR_SPACE_PASS_THROUGH_EXT,
  VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT,
  
}

/** ## VkTimeDomainEXT ## */
export enum VkTimeDomainEXT {
  VK_TIME_DOMAIN_DEVICE_EXT,
  VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT,
  VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT,
  VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT,
  
}

/** ## VkDebugReportObjectTypeEXT ## */
export enum VkDebugReportObjectTypeEXT {
  VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_OBJECT_TABLE_NVX_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVX_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT,
  VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT,
  
}

/** ## VkRasterizationOrderAMD ## */
export enum VkRasterizationOrderAMD {
  VK_RASTERIZATION_ORDER_STRICT_AMD,
  VK_RASTERIZATION_ORDER_RELAXED_AMD,
  
}

/** ## VkValidationCheckEXT ## */
export enum VkValidationCheckEXT {
  VK_VALIDATION_CHECK_ALL_EXT,
  VK_VALIDATION_CHECK_SHADERS_EXT,
  
}

/** ## VkValidationFeatureEnableEXT ## */
export enum VkValidationFeatureEnableEXT {
  VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT,
  VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT,
  
}

/** ## VkValidationFeatureDisableEXT ## */
export enum VkValidationFeatureDisableEXT {
  VK_VALIDATION_FEATURE_DISABLE_ALL_EXT,
  VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT,
  VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT,
  VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT,
  VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT,
  VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT,
  VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT,
  
}

/** ## VkIndirectCommandsTokenTypeNVX ## */
export enum VkIndirectCommandsTokenTypeNVX {
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DESCRIPTOR_SET_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX,
  VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX,
  
}

/** ## VkObjectEntryTypeNVX ## */
export enum VkObjectEntryTypeNVX {
  VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX,
  VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX,
  VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX,
  VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX,
  VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX,
  
}

/** ## VkDisplayPowerStateEXT ## */
export enum VkDisplayPowerStateEXT {
  VK_DISPLAY_POWER_STATE_OFF_EXT,
  VK_DISPLAY_POWER_STATE_SUSPEND_EXT,
  VK_DISPLAY_POWER_STATE_ON_EXT,
  
}

/** ## VkDeviceEventTypeEXT ## */
export enum VkDeviceEventTypeEXT {
  VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT,
  
}

/** ## VkDisplayEventTypeEXT ## */
export enum VkDisplayEventTypeEXT {
  VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT,
  
}

/** ## VkViewportCoordinateSwizzleNV ## */
export enum VkViewportCoordinateSwizzleNV {
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV,
  VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV,
  
}

/** ## VkDiscardRectangleModeEXT ## */
export enum VkDiscardRectangleModeEXT {
  VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT,
  VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT,
  
}

/** ## VkPointClippingBehavior ## */
export enum VkPointClippingBehavior {
  VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
  VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
  VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR,
  VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR,
  
}

/** ## VkSamplerReductionModeEXT ## */
export enum VkSamplerReductionModeEXT {
  VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT,
  VK_SAMPLER_REDUCTION_MODE_MIN_EXT,
  VK_SAMPLER_REDUCTION_MODE_MAX_EXT,
  
}

/** ## VkTessellationDomainOrigin ## */
export enum VkTessellationDomainOrigin {
  VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
  VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
  VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR,
  VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR,
  
}

/** ## VkSamplerYcbcrModelConversion ## */
export enum VkSamplerYcbcrModelConversion {
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR,
  
}

/** ## VkSamplerYcbcrRange ## */
export enum VkSamplerYcbcrRange {
  VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
  VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
  VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR,
  VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR,
  
}

/** ## VkChromaLocation ## */
export enum VkChromaLocation {
  VK_CHROMA_LOCATION_COSITED_EVEN,
  VK_CHROMA_LOCATION_MIDPOINT,
  VK_CHROMA_LOCATION_COSITED_EVEN_KHR,
  VK_CHROMA_LOCATION_MIDPOINT_KHR,
  
}

/** ## VkBlendOverlapEXT ## */
export enum VkBlendOverlapEXT {
  VK_BLEND_OVERLAP_UNCORRELATED_EXT,
  VK_BLEND_OVERLAP_DISJOINT_EXT,
  VK_BLEND_OVERLAP_CONJOINT_EXT,
  
}

/** ## VkCoverageModulationModeNV ## */
export enum VkCoverageModulationModeNV {
  VK_COVERAGE_MODULATION_MODE_NONE_NV,
  VK_COVERAGE_MODULATION_MODE_RGB_NV,
  VK_COVERAGE_MODULATION_MODE_ALPHA_NV,
  VK_COVERAGE_MODULATION_MODE_RGBA_NV,
  
}

/** ## VkValidationCacheHeaderVersionEXT ## */
export enum VkValidationCacheHeaderVersionEXT {
  VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT,
  
}

/** ## VkShaderInfoTypeAMD ## */
export enum VkShaderInfoTypeAMD {
  VK_SHADER_INFO_TYPE_STATISTICS_AMD,
  VK_SHADER_INFO_TYPE_BINARY_AMD,
  VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD,
  
}

/** ## VkQueueGlobalPriorityEXT ## */
export enum VkQueueGlobalPriorityEXT {
  VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT,
  VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT,
  VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT,
  VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT,
  
}

/** ## VkConservativeRasterizationModeEXT ## */
export enum VkConservativeRasterizationModeEXT {
  VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT,
  VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT,
  VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT,
  
}

/** ## VkVendorId ## */
export enum VkVendorId {
  VK_VENDOR_ID_VIV,
  VK_VENDOR_ID_VSI,
  VK_VENDOR_ID_KAZAN,
  
}

/** ## VkDriverIdKHR ## */
export enum VkDriverIdKHR {
  VK_DRIVER_ID_AMD_PROPRIETARY_KHR,
  VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR,
  VK_DRIVER_ID_MESA_RADV_KHR,
  VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR,
  VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR,
  VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR,
  VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR,
  VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR,
  VK_DRIVER_ID_ARM_PROPRIETARY_KHR,
  VK_DRIVER_ID_GOOGLE_PASTEL_KHR,
  
}

/** ## VkShadingRatePaletteEntryNV ## */
export enum VkShadingRatePaletteEntryNV {
  VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV,
  VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV,
  
}

/** ## VkCoarseSampleOrderTypeNV ## */
export enum VkCoarseSampleOrderTypeNV {
  VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV,
  VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV,
  VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV,
  VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV,
  
}

/** ## VkCopyAccelerationStructureModeNV ## */
export enum VkCopyAccelerationStructureModeNV {
  VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV,
  VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV,
  
}

/** ## VkAccelerationStructureTypeNV ## */
export enum VkAccelerationStructureTypeNV {
  VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV,
  VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV,
  
}

/** ## VkGeometryTypeNV ## */
export enum VkGeometryTypeNV {
  VK_GEOMETRY_TYPE_TRIANGLES_NV,
  VK_GEOMETRY_TYPE_AABBS_NV,
  
}

/** ## VkAccelerationStructureMemoryRequirementsTypeNV ## */
export enum VkAccelerationStructureMemoryRequirementsTypeNV {
  VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV,
  VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV,
  VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV,
  
}

/** ## VkRayTracingShaderGroupTypeNV ## */
export enum VkRayTracingShaderGroupTypeNV {
  VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV,
  VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV,
  
}

/** ## VkMemoryOverallocationBehaviorAMD ## */
export enum VkMemoryOverallocationBehaviorAMD {
  VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD,
  VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD,
  VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD,
  
}

/** ## VkScopeNV ## */
export enum VkScopeNV {
  VK_SCOPE_DEVICE_NV,
  VK_SCOPE_WORKGROUP_NV,
  VK_SCOPE_SUBGROUP_NV,
  VK_SCOPE_QUEUE_FAMILY_NV,
  
}

/** ## VkComponentTypeNV ## */
export enum VkComponentTypeNV {
  VK_COMPONENT_TYPE_FLOAT16_NV,
  VK_COMPONENT_TYPE_FLOAT32_NV,
  VK_COMPONENT_TYPE_FLOAT64_NV,
  VK_COMPONENT_TYPE_SINT8_NV,
  VK_COMPONENT_TYPE_SINT16_NV,
  VK_COMPONENT_TYPE_SINT32_NV,
  VK_COMPONENT_TYPE_SINT64_NV,
  VK_COMPONENT_TYPE_UINT8_NV,
  VK_COMPONENT_TYPE_UINT16_NV,
  VK_COMPONENT_TYPE_UINT32_NV,
  VK_COMPONENT_TYPE_UINT64_NV,
  
}

/** ## VkCullModeFlagBits ## */
export enum VkCullModeFlagBits {
  VK_CULL_MODE_NONE,
  VK_CULL_MODE_FRONT_BIT,
  VK_CULL_MODE_BACK_BIT,
  VK_CULL_MODE_FRONT_AND_BACK,
  
}

/** ## VkQueueFlagBits ## */
export enum VkQueueFlagBits {
  VK_QUEUE_GRAPHICS_BIT,
  VK_QUEUE_COMPUTE_BIT,
  VK_QUEUE_TRANSFER_BIT,
  VK_QUEUE_SPARSE_BINDING_BIT,
  VK_QUEUE_RESERVED_6_BIT_KHR,
  VK_QUEUE_RESERVED_5_BIT_KHR,
  
}

/** ## VkRenderPassCreateFlagBits ## */
export enum VkRenderPassCreateFlagBits {
  VK_RENDER_PASS_CREATE_RESERVED_0_BIT_KHR,
  
}

/** ## VkDeviceQueueCreateFlagBits ## */
export enum VkDeviceQueueCreateFlagBits {
  
}

/** ## VkMemoryPropertyFlagBits ## */
export enum VkMemoryPropertyFlagBits {
  VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
  VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT,
  VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
  VK_MEMORY_PROPERTY_HOST_CACHED_BIT,
  VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT,
  
}

/** ## VkMemoryHeapFlagBits ## */
export enum VkMemoryHeapFlagBits {
  VK_MEMORY_HEAP_DEVICE_LOCAL_BIT,
  VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR,
  
}

/** ## VkAccessFlagBits ## */
export enum VkAccessFlagBits {
  VK_ACCESS_INDIRECT_COMMAND_READ_BIT,
  VK_ACCESS_INDEX_READ_BIT,
  VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT,
  VK_ACCESS_UNIFORM_READ_BIT,
  VK_ACCESS_INPUT_ATTACHMENT_READ_BIT,
  VK_ACCESS_SHADER_READ_BIT,
  VK_ACCESS_SHADER_WRITE_BIT,
  VK_ACCESS_COLOR_ATTACHMENT_READ_BIT,
  VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT,
  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT,
  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,
  VK_ACCESS_TRANSFER_READ_BIT,
  VK_ACCESS_TRANSFER_WRITE_BIT,
  VK_ACCESS_HOST_READ_BIT,
  VK_ACCESS_HOST_WRITE_BIT,
  VK_ACCESS_MEMORY_READ_BIT,
  VK_ACCESS_MEMORY_WRITE_BIT,
  VK_ACCESS_RESERVED_30_BIT_KHR,
  VK_ACCESS_RESERVED_31_BIT_KHR,
  VK_ACCESS_RESERVED_28_BIT_KHR,
  VK_ACCESS_RESERVED_29_BIT_KHR,
  VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT,
  VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT,
  VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT,
  VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT,
  VK_ACCESS_COMMAND_PROCESS_READ_BIT_NVX,
  VK_ACCESS_COMMAND_PROCESS_WRITE_BIT_NVX,
  VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT,
  VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV,
  VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV,
  VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV,
  VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT,
  
}

/** ## VkBufferUsageFlagBits ## */
export enum VkBufferUsageFlagBits {
  VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
  VK_BUFFER_USAGE_TRANSFER_DST_BIT,
  VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT,
  VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT,
  VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT,
  VK_BUFFER_USAGE_STORAGE_BUFFER_BIT,
  VK_BUFFER_USAGE_INDEX_BUFFER_BIT,
  VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
  VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT,
  VK_BUFFER_USAGE_RESERVED_15_BIT_KHR,
  VK_BUFFER_USAGE_RESERVED_16_BIT_KHR,
  VK_BUFFER_USAGE_RESERVED_13_BIT_KHR,
  VK_BUFFER_USAGE_RESERVED_14_BIT_KHR,
  VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT,
  VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT,
  VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT,
  VK_BUFFER_USAGE_RAY_TRACING_BIT_NV,
  VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT,
  
}

/** ## VkBufferCreateFlagBits ## */
export enum VkBufferCreateFlagBits {
  VK_BUFFER_CREATE_SPARSE_BINDING_BIT,
  VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT,
  VK_BUFFER_CREATE_SPARSE_ALIASED_BIT,
  VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT,
  
}

/** ## VkShaderStageFlagBits ## */
export enum VkShaderStageFlagBits {
  VK_SHADER_STAGE_VERTEX_BIT,
  VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT,
  VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT,
  VK_SHADER_STAGE_GEOMETRY_BIT,
  VK_SHADER_STAGE_FRAGMENT_BIT,
  VK_SHADER_STAGE_COMPUTE_BIT,
  VK_SHADER_STAGE_ALL_GRAPHICS,
  VK_SHADER_STAGE_ALL,
  VK_SHADER_STAGE_RAYGEN_BIT_NV,
  VK_SHADER_STAGE_ANY_HIT_BIT_NV,
  VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV,
  VK_SHADER_STAGE_MISS_BIT_NV,
  VK_SHADER_STAGE_INTERSECTION_BIT_NV,
  VK_SHADER_STAGE_CALLABLE_BIT_NV,
  VK_SHADER_STAGE_TASK_BIT_NV,
  VK_SHADER_STAGE_MESH_BIT_NV,
  
}

/** ## VkImageUsageFlagBits ## */
export enum VkImageUsageFlagBits {
  VK_IMAGE_USAGE_TRANSFER_SRC_BIT,
  VK_IMAGE_USAGE_TRANSFER_DST_BIT,
  VK_IMAGE_USAGE_SAMPLED_BIT,
  VK_IMAGE_USAGE_STORAGE_BIT,
  VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
  VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,
  VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT,
  VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT,
  VK_IMAGE_USAGE_RESERVED_13_BIT_KHR,
  VK_IMAGE_USAGE_RESERVED_14_BIT_KHR,
  VK_IMAGE_USAGE_RESERVED_15_BIT_KHR,
  VK_IMAGE_USAGE_RESERVED_10_BIT_KHR,
  VK_IMAGE_USAGE_RESERVED_11_BIT_KHR,
  VK_IMAGE_USAGE_RESERVED_12_BIT_KHR,
  VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV,
  VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT,
  
}

/** ## VkImageCreateFlagBits ## */
export enum VkImageCreateFlagBits {
  VK_IMAGE_CREATE_SPARSE_BINDING_BIT,
  VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT,
  VK_IMAGE_CREATE_SPARSE_ALIASED_BIT,
  VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT,
  VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT,
  VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV,
  VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,
  VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR,
  VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR,
  VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR,
  VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT,
  VK_IMAGE_CREATE_DISJOINT_BIT_KHR,
  VK_IMAGE_CREATE_ALIAS_BIT_KHR,
  VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT,
  
}

/** ## VkImageViewCreateFlagBits ## */
export enum VkImageViewCreateFlagBits {
  VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT,
  
}

/** ## VkSamplerCreateFlagBits ## */
export enum VkSamplerCreateFlagBits {
  VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT,
  VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT,
  
}

/** ## VkPipelineCreateFlagBits ## */
export enum VkPipelineCreateFlagBits {
  VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT,
  VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT,
  VK_PIPELINE_CREATE_DERIVATIVE_BIT,
  VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR,
  VK_PIPELINE_CREATE_DISPATCH_BASE_KHR,
  VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV,
  
}

/** ## VkColorComponentFlagBits ## */
export enum VkColorComponentFlagBits {
  VK_COLOR_COMPONENT_R_BIT,
  VK_COLOR_COMPONENT_G_BIT,
  VK_COLOR_COMPONENT_B_BIT,
  VK_COLOR_COMPONENT_A_BIT,
  
}

/** ## VkFenceCreateFlagBits ## */
export enum VkFenceCreateFlagBits {
  VK_FENCE_CREATE_SIGNALED_BIT,
  
}

/** ## VkFormatFeatureFlagBits ## */
export enum VkFormatFeatureFlagBits {
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT,
  VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT,
  VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT,
  VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
  VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
  VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT,
  VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT,
  VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT,
  VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
  VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT,
  VK_FORMAT_FEATURE_BLIT_SRC_BIT,
  VK_FORMAT_FEATURE_BLIT_DST_BIT,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
  VK_FORMAT_FEATURE_RESERVED_27_BIT_KHR,
  VK_FORMAT_FEATURE_RESERVED_28_BIT_KHR,
  VK_FORMAT_FEATURE_RESERVED_25_BIT_KHR,
  VK_FORMAT_FEATURE_RESERVED_26_BIT_KHR,
  VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR,
  VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT,
  VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR,
  VK_FORMAT_FEATURE_DISJOINT_BIT_KHR,
  VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT,
  VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT,
  
}

/** ## VkQueryControlFlagBits ## */
export enum VkQueryControlFlagBits {
  VK_QUERY_CONTROL_PRECISE_BIT,
  
}

/** ## VkQueryResultFlagBits ## */
export enum VkQueryResultFlagBits {
  VK_QUERY_RESULT_64_BIT,
  VK_QUERY_RESULT_WAIT_BIT,
  VK_QUERY_RESULT_WITH_AVAILABILITY_BIT,
  VK_QUERY_RESULT_PARTIAL_BIT,
  
}

/** ## VkCommandBufferUsageFlagBits ## */
export enum VkCommandBufferUsageFlagBits {
  VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT,
  VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT,
  VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT,
  
}

/** ## VkQueryPipelineStatisticFlagBits ## */
export enum VkQueryPipelineStatisticFlagBits {
  VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT,
  VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT,
  VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT,
  
}

/** ## VkImageAspectFlagBits ## */
export enum VkImageAspectFlagBits {
  VK_IMAGE_ASPECT_COLOR_BIT,
  VK_IMAGE_ASPECT_DEPTH_BIT,
  VK_IMAGE_ASPECT_STENCIL_BIT,
  VK_IMAGE_ASPECT_METADATA_BIT,
  VK_IMAGE_ASPECT_PLANE_0_BIT_KHR,
  VK_IMAGE_ASPECT_PLANE_1_BIT_KHR,
  VK_IMAGE_ASPECT_PLANE_2_BIT_KHR,
  VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT,
  VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT,
  VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT,
  VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT,
  
}

/** ## VkSparseImageFormatFlagBits ## */
export enum VkSparseImageFormatFlagBits {
  VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT,
  VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT,
  VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT,
  
}

/** ## VkSparseMemoryBindFlagBits ## */
export enum VkSparseMemoryBindFlagBits {
  VK_SPARSE_MEMORY_BIND_METADATA_BIT,
  
}

/** ## VkPipelineStageFlagBits ## */
export enum VkPipelineStageFlagBits {
  VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,
  VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT,
  VK_PIPELINE_STAGE_VERTEX_INPUT_BIT,
  VK_PIPELINE_STAGE_VERTEX_SHADER_BIT,
  VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT,
  VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT,
  VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT,
  VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT,
  VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT,
  VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT,
  VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,
  VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT,
  VK_PIPELINE_STAGE_TRANSFER_BIT,
  VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,
  VK_PIPELINE_STAGE_HOST_BIT,
  VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT,
  VK_PIPELINE_STAGE_ALL_COMMANDS_BIT,
  VK_PIPELINE_STAGE_RESERVED_27_BIT_KHR,
  VK_PIPELINE_STAGE_RESERVED_26_BIT_KHR,
  VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT,
  VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT,
  VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX,
  VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV,
  VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV,
  VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV,
  VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV,
  VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV,
  VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT,
  
}

/** ## VkCommandPoolCreateFlagBits ## */
export enum VkCommandPoolCreateFlagBits {
  VK_COMMAND_POOL_CREATE_TRANSIENT_BIT,
  VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT,
  
}

/** ## VkCommandPoolResetFlagBits ## */
export enum VkCommandPoolResetFlagBits {
  VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT,
  
}

/** ## VkCommandBufferResetFlagBits ## */
export enum VkCommandBufferResetFlagBits {
  VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT,
  
}

/** ## VkSampleCountFlagBits ## */
export enum VkSampleCountFlagBits {
  VK_SAMPLE_COUNT_1_BIT,
  VK_SAMPLE_COUNT_2_BIT,
  VK_SAMPLE_COUNT_4_BIT,
  VK_SAMPLE_COUNT_8_BIT,
  VK_SAMPLE_COUNT_16_BIT,
  VK_SAMPLE_COUNT_32_BIT,
  VK_SAMPLE_COUNT_64_BIT,
  
}

/** ## VkAttachmentDescriptionFlagBits ## */
export enum VkAttachmentDescriptionFlagBits {
  VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT,
  
}

/** ## VkStencilFaceFlagBits ## */
export enum VkStencilFaceFlagBits {
  VK_STENCIL_FACE_FRONT_BIT,
  VK_STENCIL_FACE_BACK_BIT,
  VK_STENCIL_FRONT_AND_BACK,
  
}

/** ## VkDescriptorPoolCreateFlagBits ## */
export enum VkDescriptorPoolCreateFlagBits {
  VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT,
  VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT,
  
}

/** ## VkDependencyFlagBits ## */
export enum VkDependencyFlagBits {
  VK_DEPENDENCY_BY_REGION_BIT,
  VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR,
  VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR,
  
}

/** ## VkDisplayPlaneAlphaFlagBitsKHR ## */
export enum VkDisplayPlaneAlphaFlagBitsKHR {
  VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR,
  VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR,
  VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR,
  VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR,
  
}

/** ## VkCompositeAlphaFlagBitsKHR ## */
export enum VkCompositeAlphaFlagBitsKHR {
  VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR,
  VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR,
  VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR,
  VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR,
  
}

/** ## VkSurfaceTransformFlagBitsKHR ## */
export enum VkSurfaceTransformFlagBitsKHR {
  VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR,
  VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR,
  VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR,
  VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR,
  VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR,
  
}

/** ## VkDebugReportFlagBitsEXT ## */
export enum VkDebugReportFlagBitsEXT {
  VK_DEBUG_REPORT_INFORMATION_BIT_EXT,
  VK_DEBUG_REPORT_WARNING_BIT_EXT,
  VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT,
  VK_DEBUG_REPORT_ERROR_BIT_EXT,
  VK_DEBUG_REPORT_DEBUG_BIT_EXT,
  
}

/** ## VkExternalMemoryHandleTypeFlagBitsNV ## */
export enum VkExternalMemoryHandleTypeFlagBitsNV {
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV,
  
}

/** ## VkExternalMemoryFeatureFlagBitsNV ## */
export enum VkExternalMemoryFeatureFlagBitsNV {
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV,
  
}

/** ## VkSubgroupFeatureFlagBits ## */
export enum VkSubgroupFeatureFlagBits {
  VK_SUBGROUP_FEATURE_BASIC_BIT,
  VK_SUBGROUP_FEATURE_VOTE_BIT,
  VK_SUBGROUP_FEATURE_ARITHMETIC_BIT,
  VK_SUBGROUP_FEATURE_BALLOT_BIT,
  VK_SUBGROUP_FEATURE_SHUFFLE_BIT,
  VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT,
  VK_SUBGROUP_FEATURE_CLUSTERED_BIT,
  VK_SUBGROUP_FEATURE_QUAD_BIT,
  VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV,
  
}

/** ## VkIndirectCommandsLayoutUsageFlagBitsNVX ## */
export enum VkIndirectCommandsLayoutUsageFlagBitsNVX {
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NVX,
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_SPARSE_SEQUENCES_BIT_NVX,
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EMPTY_EXECUTIONS_BIT_NVX,
  VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NVX,
  
}

/** ## VkObjectEntryUsageFlagBitsNVX ## */
export enum VkObjectEntryUsageFlagBitsNVX {
  VK_OBJECT_ENTRY_USAGE_GRAPHICS_BIT_NVX,
  VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX,
  
}

/** ## VkDescriptorSetLayoutCreateFlagBits ## */
export enum VkDescriptorSetLayoutCreateFlagBits {
  VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR,
  VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT,
  
}

/** ## VkExternalMemoryHandleTypeFlagBits ## */
export enum VkExternalMemoryHandleTypeFlagBits {
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT,
  
}

/** ## VkExternalMemoryFeatureFlagBits ## */
export enum VkExternalMemoryFeatureFlagBits {
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR,
  
}

/** ## VkExternalSemaphoreHandleTypeFlagBits ## */
export enum VkExternalSemaphoreHandleTypeFlagBits {
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
  
}

/** ## VkExternalSemaphoreFeatureFlagBits ## */
export enum VkExternalSemaphoreFeatureFlagBits {
  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR,
  
}

/** ## VkSemaphoreImportFlagBits ## */
export enum VkSemaphoreImportFlagBits {
  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR,
  
}

/** ## VkExternalFenceHandleTypeFlagBits ## */
export enum VkExternalFenceHandleTypeFlagBits {
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
  
}

/** ## VkExternalFenceFeatureFlagBits ## */
export enum VkExternalFenceFeatureFlagBits {
  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR,
  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR,
  
}

/** ## VkFenceImportFlagBits ## */
export enum VkFenceImportFlagBits {
  VK_FENCE_IMPORT_TEMPORARY_BIT,
  VK_FENCE_IMPORT_TEMPORARY_BIT_KHR,
  
}

/** ## VkSurfaceCounterFlagBitsEXT ## */
export enum VkSurfaceCounterFlagBitsEXT {
  VK_SURFACE_COUNTER_VBLANK_EXT,
  
}

/** ## VkPeerMemoryFeatureFlagBits ## */
export enum VkPeerMemoryFeatureFlagBits {
  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR,
  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR,
  
}

/** ## VkMemoryAllocateFlagBits ## */
export enum VkMemoryAllocateFlagBits {
  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR,
  
}

/** ## VkDeviceGroupPresentModeFlagBitsKHR ## */
export enum VkDeviceGroupPresentModeFlagBitsKHR {
  VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR,
  VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR,
  VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR,
  VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR,
  
}

/** ## VkSwapchainCreateFlagBitsKHR ## */
export enum VkSwapchainCreateFlagBitsKHR {
  VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,
  VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR,
  VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR,
  
}

/** ## VkSubpassDescriptionFlagBits ## */
export enum VkSubpassDescriptionFlagBits {
  VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX,
  VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX,
  
}

/** ## VkDebugUtilsMessageSeverityFlagBitsEXT ## */
export enum VkDebugUtilsMessageSeverityFlagBitsEXT {
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT,
  
}

/** ## VkDebugUtilsMessageTypeFlagBitsEXT ## */
export enum VkDebugUtilsMessageTypeFlagBitsEXT {
  VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT,
  VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT,
  
}

/** ## VkDescriptorBindingFlagBitsEXT ## */
export enum VkDescriptorBindingFlagBitsEXT {
  VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT,
  VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT,
  VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT,
  VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT,
  
}

/** ## VkConditionalRenderingFlagBitsEXT ## */
export enum VkConditionalRenderingFlagBitsEXT {
  VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT,
  
}

/** ## VkResolveModeFlagBitsKHR ## */
export enum VkResolveModeFlagBitsKHR {
  VK_RESOLVE_MODE_NONE_KHR,
  VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR,
  VK_RESOLVE_MODE_AVERAGE_BIT_KHR,
  VK_RESOLVE_MODE_MIN_BIT_KHR,
  VK_RESOLVE_MODE_MAX_BIT_KHR,
  
}

/** ## VkGeometryInstanceFlagBitsNV ## */
export enum VkGeometryInstanceFlagBitsNV {
  VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV,
  VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV,
  VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV,
  VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV,
  
}

/** ## VkGeometryFlagBitsNV ## */
export enum VkGeometryFlagBitsNV {
  VK_GEOMETRY_OPAQUE_BIT_NV,
  VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV,
  
}

/** ## VkBuildAccelerationStructureFlagBitsNV ## */
export enum VkBuildAccelerationStructureFlagBitsNV {
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV,
  VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV,
  
}


/** #### HANDLES #### **/
/** ## VkDebugUtilsMessengerEXT ## */
interface VkDebugUtilsMessengerEXT {}

declare var VkDebugUtilsMessengerEXT: {
  prototype: VkDebugUtilsMessengerEXT;
  new(): VkDebugUtilsMessengerEXT;
}

export interface VkDebugUtilsMessengerEXT {}

/** ## VkDebugReportCallbackEXT ## */
interface VkDebugReportCallbackEXT {}

declare var VkDebugReportCallbackEXT: {
  prototype: VkDebugReportCallbackEXT;
  new(): VkDebugReportCallbackEXT;
}

export interface VkDebugReportCallbackEXT {}

/** ## VkSwapchainKHR ## */
interface VkSwapchainKHR {}

declare var VkSwapchainKHR: {
  prototype: VkSwapchainKHR;
  new(): VkSwapchainKHR;
}

export interface VkSwapchainKHR {}

/** ## VkSurfaceKHR ## */
interface VkSurfaceKHR {}

declare var VkSurfaceKHR: {
  prototype: VkSurfaceKHR;
  new(): VkSurfaceKHR;
}

export interface VkSurfaceKHR {}

/** ## VkDisplayModeKHR ## */
interface VkDisplayModeKHR {}

declare var VkDisplayModeKHR: {
  prototype: VkDisplayModeKHR;
  new(): VkDisplayModeKHR;
}

export interface VkDisplayModeKHR {}

/** ## VkDisplayKHR ## */
interface VkDisplayKHR {}

declare var VkDisplayKHR: {
  prototype: VkDisplayKHR;
  new(): VkDisplayKHR;
}

export interface VkDisplayKHR {}

/** ## VkAccelerationStructureNV ## */
interface VkAccelerationStructureNV {}

declare var VkAccelerationStructureNV: {
  prototype: VkAccelerationStructureNV;
  new(): VkAccelerationStructureNV;
}

export interface VkAccelerationStructureNV {}

/** ## VkValidationCacheEXT ## */
interface VkValidationCacheEXT {}

declare var VkValidationCacheEXT: {
  prototype: VkValidationCacheEXT;
  new(): VkValidationCacheEXT;
}

export interface VkValidationCacheEXT {}

/** ## VkSamplerYcbcrConversion ## */
interface VkSamplerYcbcrConversion {}

declare var VkSamplerYcbcrConversion: {
  prototype: VkSamplerYcbcrConversion;
  new(): VkSamplerYcbcrConversion;
}

export interface VkSamplerYcbcrConversion {}

/** ## VkDescriptorUpdateTemplate ## */
interface VkDescriptorUpdateTemplate {}

declare var VkDescriptorUpdateTemplate: {
  prototype: VkDescriptorUpdateTemplate;
  new(): VkDescriptorUpdateTemplate;
}

export interface VkDescriptorUpdateTemplate {}

/** ## VkIndirectCommandsLayoutNVX ## */
interface VkIndirectCommandsLayoutNVX {}

declare var VkIndirectCommandsLayoutNVX: {
  prototype: VkIndirectCommandsLayoutNVX;
  new(): VkIndirectCommandsLayoutNVX;
}

export interface VkIndirectCommandsLayoutNVX {}

/** ## VkObjectTableNVX ## */
interface VkObjectTableNVX {}

declare var VkObjectTableNVX: {
  prototype: VkObjectTableNVX;
  new(): VkObjectTableNVX;
}

export interface VkObjectTableNVX {}

/** ## VkPipelineCache ## */
interface VkPipelineCache {}

declare var VkPipelineCache: {
  prototype: VkPipelineCache;
  new(): VkPipelineCache;
}

export interface VkPipelineCache {}

/** ## VkRenderPass ## */
interface VkRenderPass {}

declare var VkRenderPass: {
  prototype: VkRenderPass;
  new(): VkRenderPass;
}

export interface VkRenderPass {}

/** ## VkFramebuffer ## */
interface VkFramebuffer {}

declare var VkFramebuffer: {
  prototype: VkFramebuffer;
  new(): VkFramebuffer;
}

export interface VkFramebuffer {}

/** ## VkQueryPool ## */
interface VkQueryPool {}

declare var VkQueryPool: {
  prototype: VkQueryPool;
  new(): VkQueryPool;
}

export interface VkQueryPool {}

/** ## VkEvent ## */
interface VkEvent {}

declare var VkEvent: {
  prototype: VkEvent;
  new(): VkEvent;
}

export interface VkEvent {}

/** ## VkSemaphore ## */
interface VkSemaphore {}

declare var VkSemaphore: {
  prototype: VkSemaphore;
  new(): VkSemaphore;
}

export interface VkSemaphore {}

/** ## VkFence ## */
interface VkFence {}

declare var VkFence: {
  prototype: VkFence;
  new(): VkFence;
}

export interface VkFence {}

/** ## VkDescriptorPool ## */
interface VkDescriptorPool {}

declare var VkDescriptorPool: {
  prototype: VkDescriptorPool;
  new(): VkDescriptorPool;
}

export interface VkDescriptorPool {}

/** ## VkDescriptorSetLayout ## */
interface VkDescriptorSetLayout {}

declare var VkDescriptorSetLayout: {
  prototype: VkDescriptorSetLayout;
  new(): VkDescriptorSetLayout;
}

export interface VkDescriptorSetLayout {}

/** ## VkDescriptorSet ## */
interface VkDescriptorSet {}

declare var VkDescriptorSet: {
  prototype: VkDescriptorSet;
  new(): VkDescriptorSet;
}

export interface VkDescriptorSet {}

/** ## VkSampler ## */
interface VkSampler {}

declare var VkSampler: {
  prototype: VkSampler;
  new(): VkSampler;
}

export interface VkSampler {}

/** ## VkPipelineLayout ## */
interface VkPipelineLayout {}

declare var VkPipelineLayout: {
  prototype: VkPipelineLayout;
  new(): VkPipelineLayout;
}

export interface VkPipelineLayout {}

/** ## VkPipeline ## */
interface VkPipeline {}

declare var VkPipeline: {
  prototype: VkPipeline;
  new(): VkPipeline;
}

export interface VkPipeline {}

/** ## VkShaderModule ## */
interface VkShaderModule {}

declare var VkShaderModule: {
  prototype: VkShaderModule;
  new(): VkShaderModule;
}

export interface VkShaderModule {}

/** ## VkImageView ## */
interface VkImageView {}

declare var VkImageView: {
  prototype: VkImageView;
  new(): VkImageView;
}

export interface VkImageView {}

/** ## VkImage ## */
interface VkImage {}

declare var VkImage: {
  prototype: VkImage;
  new(): VkImage;
}

export interface VkImage {}

/** ## VkBufferView ## */
interface VkBufferView {}

declare var VkBufferView: {
  prototype: VkBufferView;
  new(): VkBufferView;
}

export interface VkBufferView {}

/** ## VkBuffer ## */
interface VkBuffer {}

declare var VkBuffer: {
  prototype: VkBuffer;
  new(): VkBuffer;
}

export interface VkBuffer {}

/** ## VkCommandPool ## */
interface VkCommandPool {}

declare var VkCommandPool: {
  prototype: VkCommandPool;
  new(): VkCommandPool;
}

export interface VkCommandPool {}

/** ## VkDeviceMemory ## */
interface VkDeviceMemory {}

declare var VkDeviceMemory: {
  prototype: VkDeviceMemory;
  new(): VkDeviceMemory;
}

export interface VkDeviceMemory {}

/** ## VkCommandBuffer ## */
interface VkCommandBuffer {}

declare var VkCommandBuffer: {
  prototype: VkCommandBuffer;
  new(): VkCommandBuffer;
}

export interface VkCommandBuffer {}

/** ## VkQueue ## */
interface VkQueue {}

declare var VkQueue: {
  prototype: VkQueue;
  new(): VkQueue;
}

export interface VkQueue {}

/** ## VkDevice ## */
interface VkDevice {}

declare var VkDevice: {
  prototype: VkDevice;
  new(): VkDevice;
}

export interface VkDevice {}

/** ## VkPhysicalDevice ## */
interface VkPhysicalDevice {}

declare var VkPhysicalDevice: {
  prototype: VkPhysicalDevice;
  new(): VkPhysicalDevice;
}

export interface VkPhysicalDevice {}

/** ## VkInstance ## */
interface VkInstance {}

declare var VkInstance: {
  prototype: VkInstance;
  new(): VkInstance;
}

export interface VkInstance {}



/** #### STRUCTS #### **/






































/** ## VkClearValue ## */
interface VkClearValueInitializer {
  color?: VkClearColorValue | null;
  depthStencil?: VkClearDepthStencilValue | null;
}

declare var VkClearValue: {
  prototype: VkClearValue;
  new(param?: VkClearValueInitializer | null): VkClearValue;
  color: VkClearColorValue | null;
  depthStencil: VkClearDepthStencilValue | null;
}

export interface VkClearValue {
  color: VkClearColorValue | null;
  depthStencil: VkClearDepthStencilValue | null;
}


/** ## VkClearColorValue ## */
interface VkClearColorValueInitializer {
  float32?: number[] | null;
  int32?: number[] | null;
  uint32?: number[] | null;
}

declare var VkClearColorValue: {
  prototype: VkClearColorValue;
  new(param?: VkClearColorValueInitializer | null): VkClearColorValue;
  float32: number[] | null;
  int32: number[] | null;
  uint32: number[] | null;
}

export interface VkClearColorValue {
  float32: number[] | null;
  int32: number[] | null;
  uint32: number[] | null;
}


/** ## VkCooperativeMatrixPropertiesNV ## */
interface VkCooperativeMatrixPropertiesNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  MSize?: number;
  NSize?: number;
  KSize?: number;
  AType?: VkComponentTypeNV;
  BType?: VkComponentTypeNV;
  CType?: VkComponentTypeNV;
  DType?: VkComponentTypeNV;
  scope?: VkScopeNV;
}

declare var VkCooperativeMatrixPropertiesNV: {
  prototype: VkCooperativeMatrixPropertiesNV;
  new(param?: VkCooperativeMatrixPropertiesNVInitializer | null): VkCooperativeMatrixPropertiesNV;
  sType: VkStructureType;
  pNext: null;
  MSize: number;
  NSize: number;
  KSize: number;
  AType: VkComponentTypeNV;
  BType: VkComponentTypeNV;
  CType: VkComponentTypeNV;
  DType: VkComponentTypeNV;
  scope: VkScopeNV;
}

export interface VkCooperativeMatrixPropertiesNV {
  sType: VkStructureType;
  pNext: null;
  MSize: number;
  NSize: number;
  KSize: number;
  AType: VkComponentTypeNV;
  BType: VkComponentTypeNV;
  CType: VkComponentTypeNV;
  DType: VkComponentTypeNV;
  scope: VkScopeNV;
}


/** ## VkPhysicalDeviceCooperativeMatrixPropertiesNV ## */
interface VkPhysicalDeviceCooperativeMatrixPropertiesNVInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly cooperativeMatrixSupportedStages?: VkShaderStageFlagBits;
}

declare var VkPhysicalDeviceCooperativeMatrixPropertiesNV: {
  prototype: VkPhysicalDeviceCooperativeMatrixPropertiesNV;
  new(param?: VkPhysicalDeviceCooperativeMatrixPropertiesNVInitializer | null): VkPhysicalDeviceCooperativeMatrixPropertiesNV;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly cooperativeMatrixSupportedStages: VkShaderStageFlagBits;
}

export interface VkPhysicalDeviceCooperativeMatrixPropertiesNV {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly cooperativeMatrixSupportedStages: VkShaderStageFlagBits;
}


/** ## VkPhysicalDeviceCooperativeMatrixFeaturesNV ## */
interface VkPhysicalDeviceCooperativeMatrixFeaturesNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  cooperativeMatrix?: number;
  cooperativeMatrixRobustBufferAccess?: number;
}

declare var VkPhysicalDeviceCooperativeMatrixFeaturesNV: {
  prototype: VkPhysicalDeviceCooperativeMatrixFeaturesNV;
  new(param?: VkPhysicalDeviceCooperativeMatrixFeaturesNVInitializer | null): VkPhysicalDeviceCooperativeMatrixFeaturesNV;
  sType: VkStructureType;
  pNext: null;
  cooperativeMatrix: number;
  cooperativeMatrixRobustBufferAccess: number;
}

export interface VkPhysicalDeviceCooperativeMatrixFeaturesNV {
  sType: VkStructureType;
  pNext: null;
  cooperativeMatrix: number;
  cooperativeMatrixRobustBufferAccess: number;
}


/** ## VkFilterCubicImageViewImageFormatPropertiesEXT ## */
interface VkFilterCubicImageViewImageFormatPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly filterCubic?: number;
  readonly filterCubicMinmax?: number;
}

declare var VkFilterCubicImageViewImageFormatPropertiesEXT: {
  prototype: VkFilterCubicImageViewImageFormatPropertiesEXT;
  new(param?: VkFilterCubicImageViewImageFormatPropertiesEXTInitializer | null): VkFilterCubicImageViewImageFormatPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly filterCubic: number;
  readonly filterCubicMinmax: number;
}

export interface VkFilterCubicImageViewImageFormatPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly filterCubic: number;
  readonly filterCubicMinmax: number;
}


/** ## VkPhysicalDeviceImageViewImageFormatInfoEXT ## */
interface VkPhysicalDeviceImageViewImageFormatInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  imageViewType?: VkImageViewType;
}

declare var VkPhysicalDeviceImageViewImageFormatInfoEXT: {
  prototype: VkPhysicalDeviceImageViewImageFormatInfoEXT;
  new(param?: VkPhysicalDeviceImageViewImageFormatInfoEXTInitializer | null): VkPhysicalDeviceImageViewImageFormatInfoEXT;
  sType: VkStructureType;
  pNext: null;
  imageViewType: VkImageViewType;
}

export interface VkPhysicalDeviceImageViewImageFormatInfoEXT {
  sType: VkStructureType;
  pNext: null;
  imageViewType: VkImageViewType;
}


/** ## VkBufferDeviceAddressCreateInfoEXT ## */
interface VkBufferDeviceAddressCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  deviceAddress?: number;
}

declare var VkBufferDeviceAddressCreateInfoEXT: {
  prototype: VkBufferDeviceAddressCreateInfoEXT;
  new(param?: VkBufferDeviceAddressCreateInfoEXTInitializer | null): VkBufferDeviceAddressCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  deviceAddress: number;
}

export interface VkBufferDeviceAddressCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  deviceAddress: number;
}


/** ## VkBufferDeviceAddressInfoEXT ## */
interface VkBufferDeviceAddressInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  buffer?: VkBuffer | null;
}

declare var VkBufferDeviceAddressInfoEXT: {
  prototype: VkBufferDeviceAddressInfoEXT;
  new(param?: VkBufferDeviceAddressInfoEXTInitializer | null): VkBufferDeviceAddressInfoEXT;
  sType: VkStructureType;
  pNext: null;
  buffer: VkBuffer | null;
}

export interface VkBufferDeviceAddressInfoEXT {
  sType: VkStructureType;
  pNext: null;
  buffer: VkBuffer | null;
}


/** ## VkPhysicalDeviceBufferAddressFeaturesEXT ## */
interface VkPhysicalDeviceBufferAddressFeaturesEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  bufferDeviceAddress?: number;
  bufferDeviceAddressCaptureReplay?: number;
  bufferDeviceAddressMultiDevice?: number;
}

declare var VkPhysicalDeviceBufferAddressFeaturesEXT: {
  prototype: VkPhysicalDeviceBufferAddressFeaturesEXT;
  new(param?: VkPhysicalDeviceBufferAddressFeaturesEXTInitializer | null): VkPhysicalDeviceBufferAddressFeaturesEXT;
  sType: VkStructureType;
  pNext: null;
  bufferDeviceAddress: number;
  bufferDeviceAddressCaptureReplay: number;
  bufferDeviceAddressMultiDevice: number;
}

export interface VkPhysicalDeviceBufferAddressFeaturesEXT {
  sType: VkStructureType;
  pNext: null;
  bufferDeviceAddress: number;
  bufferDeviceAddressCaptureReplay: number;
  bufferDeviceAddressMultiDevice: number;
}


/** ## VkMemoryPriorityAllocateInfoEXT ## */
interface VkMemoryPriorityAllocateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  priority?: number;
}

declare var VkMemoryPriorityAllocateInfoEXT: {
  prototype: VkMemoryPriorityAllocateInfoEXT;
  new(param?: VkMemoryPriorityAllocateInfoEXTInitializer | null): VkMemoryPriorityAllocateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  priority: number;
}

export interface VkMemoryPriorityAllocateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  priority: number;
}


/** ## VkPhysicalDeviceMemoryPriorityFeaturesEXT ## */
interface VkPhysicalDeviceMemoryPriorityFeaturesEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  memoryPriority?: number;
}

declare var VkPhysicalDeviceMemoryPriorityFeaturesEXT: {
  prototype: VkPhysicalDeviceMemoryPriorityFeaturesEXT;
  new(param?: VkPhysicalDeviceMemoryPriorityFeaturesEXTInitializer | null): VkPhysicalDeviceMemoryPriorityFeaturesEXT;
  sType: VkStructureType;
  pNext: null;
  memoryPriority: number;
}

export interface VkPhysicalDeviceMemoryPriorityFeaturesEXT {
  sType: VkStructureType;
  pNext: null;
  memoryPriority: number;
}


/** ## VkPhysicalDeviceMemoryBudgetPropertiesEXT ## */
interface VkPhysicalDeviceMemoryBudgetPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly heapBudget?: number[] | null;
  readonly heapUsage?: number[] | null;
}

declare var VkPhysicalDeviceMemoryBudgetPropertiesEXT: {
  prototype: VkPhysicalDeviceMemoryBudgetPropertiesEXT;
  new(param?: VkPhysicalDeviceMemoryBudgetPropertiesEXTInitializer | null): VkPhysicalDeviceMemoryBudgetPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly heapBudget: number[] | null;
  readonly heapUsage: number[] | null;
}

export interface VkPhysicalDeviceMemoryBudgetPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly heapBudget: number[] | null;
  readonly heapUsage: number[] | null;
}


/** ## VkPipelineRasterizationDepthClipStateCreateInfoEXT ## */
interface VkPipelineRasterizationDepthClipStateCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  depthClipEnable?: number;
}

declare var VkPipelineRasterizationDepthClipStateCreateInfoEXT: {
  prototype: VkPipelineRasterizationDepthClipStateCreateInfoEXT;
  new(param?: VkPipelineRasterizationDepthClipStateCreateInfoEXTInitializer | null): VkPipelineRasterizationDepthClipStateCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  depthClipEnable: number;
}

export interface VkPipelineRasterizationDepthClipStateCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  depthClipEnable: number;
}


/** ## VkPhysicalDeviceDepthClipEnableFeaturesEXT ## */
interface VkPhysicalDeviceDepthClipEnableFeaturesEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  depthClipEnable?: number;
}

declare var VkPhysicalDeviceDepthClipEnableFeaturesEXT: {
  prototype: VkPhysicalDeviceDepthClipEnableFeaturesEXT;
  new(param?: VkPhysicalDeviceDepthClipEnableFeaturesEXTInitializer | null): VkPhysicalDeviceDepthClipEnableFeaturesEXT;
  sType: VkStructureType;
  pNext: null;
  depthClipEnable: number;
}

export interface VkPhysicalDeviceDepthClipEnableFeaturesEXT {
  sType: VkStructureType;
  pNext: null;
  depthClipEnable: number;
}


/** ## VkPhysicalDeviceScalarBlockLayoutFeaturesEXT ## */
interface VkPhysicalDeviceScalarBlockLayoutFeaturesEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  scalarBlockLayout?: number;
}

declare var VkPhysicalDeviceScalarBlockLayoutFeaturesEXT: {
  prototype: VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;
  new(param?: VkPhysicalDeviceScalarBlockLayoutFeaturesEXTInitializer | null): VkPhysicalDeviceScalarBlockLayoutFeaturesEXT;
  sType: VkStructureType;
  pNext: null;
  scalarBlockLayout: number;
}

export interface VkPhysicalDeviceScalarBlockLayoutFeaturesEXT {
  sType: VkStructureType;
  pNext: null;
  scalarBlockLayout: number;
}


/** ## VkRenderPassFragmentDensityMapCreateInfoEXT ## */
interface VkRenderPassFragmentDensityMapCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  fragmentDensityMapAttachment?: VkAttachmentReference | null;
}

declare var VkRenderPassFragmentDensityMapCreateInfoEXT: {
  prototype: VkRenderPassFragmentDensityMapCreateInfoEXT;
  new(param?: VkRenderPassFragmentDensityMapCreateInfoEXTInitializer | null): VkRenderPassFragmentDensityMapCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  fragmentDensityMapAttachment: VkAttachmentReference | null;
}

export interface VkRenderPassFragmentDensityMapCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  fragmentDensityMapAttachment: VkAttachmentReference | null;
}


/** ## VkPhysicalDeviceFragmentDensityMapPropertiesEXT ## */
interface VkPhysicalDeviceFragmentDensityMapPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly minFragmentDensityTexelSize?: VkExtent2D | null;
  readonly maxFragmentDensityTexelSize?: VkExtent2D | null;
  readonly fragmentDensityInvocations?: number;
}

declare var VkPhysicalDeviceFragmentDensityMapPropertiesEXT: {
  prototype: VkPhysicalDeviceFragmentDensityMapPropertiesEXT;
  new(param?: VkPhysicalDeviceFragmentDensityMapPropertiesEXTInitializer | null): VkPhysicalDeviceFragmentDensityMapPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly minFragmentDensityTexelSize: VkExtent2D | null;
  readonly maxFragmentDensityTexelSize: VkExtent2D | null;
  readonly fragmentDensityInvocations: number;
}

export interface VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly minFragmentDensityTexelSize: VkExtent2D | null;
  readonly maxFragmentDensityTexelSize: VkExtent2D | null;
  readonly fragmentDensityInvocations: number;
}


/** ## VkPhysicalDeviceFragmentDensityMapFeaturesEXT ## */
interface VkPhysicalDeviceFragmentDensityMapFeaturesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly fragmentDensityMap?: number;
  readonly fragmentDensityMapDynamic?: number;
  readonly fragmentDensityMapNonSubsampledImages?: number;
}

declare var VkPhysicalDeviceFragmentDensityMapFeaturesEXT: {
  prototype: VkPhysicalDeviceFragmentDensityMapFeaturesEXT;
  new(param?: VkPhysicalDeviceFragmentDensityMapFeaturesEXTInitializer | null): VkPhysicalDeviceFragmentDensityMapFeaturesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly fragmentDensityMap: number;
  readonly fragmentDensityMapDynamic: number;
  readonly fragmentDensityMapNonSubsampledImages: number;
}

export interface VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly fragmentDensityMap: number;
  readonly fragmentDensityMapDynamic: number;
  readonly fragmentDensityMapNonSubsampledImages: number;
}


/** ## VkDeviceMemoryOverallocationCreateInfoAMD ## */
interface VkDeviceMemoryOverallocationCreateInfoAMDInitializer {
  sType?: VkStructureType;
  pNext?: null;
  overallocationBehavior?: VkMemoryOverallocationBehaviorAMD;
}

declare var VkDeviceMemoryOverallocationCreateInfoAMD: {
  prototype: VkDeviceMemoryOverallocationCreateInfoAMD;
  new(param?: VkDeviceMemoryOverallocationCreateInfoAMDInitializer | null): VkDeviceMemoryOverallocationCreateInfoAMD;
  sType: VkStructureType;
  pNext: null;
  overallocationBehavior: VkMemoryOverallocationBehaviorAMD;
}

export interface VkDeviceMemoryOverallocationCreateInfoAMD {
  sType: VkStructureType;
  pNext: null;
  overallocationBehavior: VkMemoryOverallocationBehaviorAMD;
}


/** ## VkImageStencilUsageCreateInfoEXT ## */
interface VkImageStencilUsageCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  stencilUsage?: VkImageUsageFlagBits;
}

declare var VkImageStencilUsageCreateInfoEXT: {
  prototype: VkImageStencilUsageCreateInfoEXT;
  new(param?: VkImageStencilUsageCreateInfoEXTInitializer | null): VkImageStencilUsageCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  stencilUsage: VkImageUsageFlagBits;
}

export interface VkImageStencilUsageCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  stencilUsage: VkImageUsageFlagBits;
}


/** ## VkImageDrmFormatModifierPropertiesEXT ## */
interface VkImageDrmFormatModifierPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly drmFormatModifier?: number;
}

declare var VkImageDrmFormatModifierPropertiesEXT: {
  prototype: VkImageDrmFormatModifierPropertiesEXT;
  new(param?: VkImageDrmFormatModifierPropertiesEXTInitializer | null): VkImageDrmFormatModifierPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly drmFormatModifier: number;
}

export interface VkImageDrmFormatModifierPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly drmFormatModifier: number;
}


/** ## VkImageDrmFormatModifierExplicitCreateInfoEXT ## */
interface VkImageDrmFormatModifierExplicitCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  drmFormatModifier?: number;
  drmFormatModifierPlaneCount?: number;
  pPlaneLayouts?: VkSubresourceLayout[] | null;
}

declare var VkImageDrmFormatModifierExplicitCreateInfoEXT: {
  prototype: VkImageDrmFormatModifierExplicitCreateInfoEXT;
  new(param?: VkImageDrmFormatModifierExplicitCreateInfoEXTInitializer | null): VkImageDrmFormatModifierExplicitCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  drmFormatModifier: number;
  drmFormatModifierPlaneCount: number;
  pPlaneLayouts: VkSubresourceLayout[] | null;
}

export interface VkImageDrmFormatModifierExplicitCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  drmFormatModifier: number;
  drmFormatModifierPlaneCount: number;
  pPlaneLayouts: VkSubresourceLayout[] | null;
}


/** ## VkImageDrmFormatModifierListCreateInfoEXT ## */
interface VkImageDrmFormatModifierListCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  drmFormatModifierCount?: number;
  pDrmFormatModifiers?: BigUint64Array | null;
}

declare var VkImageDrmFormatModifierListCreateInfoEXT: {
  prototype: VkImageDrmFormatModifierListCreateInfoEXT;
  new(param?: VkImageDrmFormatModifierListCreateInfoEXTInitializer | null): VkImageDrmFormatModifierListCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  drmFormatModifierCount: number;
  pDrmFormatModifiers: BigUint64Array | null;
}

export interface VkImageDrmFormatModifierListCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  drmFormatModifierCount: number;
  pDrmFormatModifiers: BigUint64Array | null;
}


/** ## VkPhysicalDeviceImageDrmFormatModifierInfoEXT ## */
interface VkPhysicalDeviceImageDrmFormatModifierInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  drmFormatModifier?: number;
  sharingMode?: VkSharingMode;
  queueFamilyIndexCount?: number;
  pQueueFamilyIndices?: Uint32Array | null;
}

declare var VkPhysicalDeviceImageDrmFormatModifierInfoEXT: {
  prototype: VkPhysicalDeviceImageDrmFormatModifierInfoEXT;
  new(param?: VkPhysicalDeviceImageDrmFormatModifierInfoEXTInitializer | null): VkPhysicalDeviceImageDrmFormatModifierInfoEXT;
  sType: VkStructureType;
  pNext: null;
  drmFormatModifier: number;
  sharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
}

export interface VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
  sType: VkStructureType;
  pNext: null;
  drmFormatModifier: number;
  sharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
}


/** ## VkDrmFormatModifierPropertiesEXT ## */
interface VkDrmFormatModifierPropertiesEXTInitializer {
  readonly drmFormatModifier?: number;
  readonly drmFormatModifierPlaneCount?: number;
  readonly drmFormatModifierTilingFeatures?: VkFormatFeatureFlagBits;
}

declare var VkDrmFormatModifierPropertiesEXT: {
  prototype: VkDrmFormatModifierPropertiesEXT;
  new(param?: VkDrmFormatModifierPropertiesEXTInitializer | null): VkDrmFormatModifierPropertiesEXT;
  readonly drmFormatModifier: number;
  readonly drmFormatModifierPlaneCount: number;
  readonly drmFormatModifierTilingFeatures: VkFormatFeatureFlagBits;
}

export interface VkDrmFormatModifierPropertiesEXT {
  readonly drmFormatModifier: number;
  readonly drmFormatModifierPlaneCount: number;
  readonly drmFormatModifierTilingFeatures: VkFormatFeatureFlagBits;
}


/** ## VkDrmFormatModifierPropertiesListEXT ## */
interface VkDrmFormatModifierPropertiesListEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly drmFormatModifierCount?: number;
  readonly pDrmFormatModifierProperties?: VkDrmFormatModifierPropertiesEXT[] | null;
}

declare var VkDrmFormatModifierPropertiesListEXT: {
  prototype: VkDrmFormatModifierPropertiesListEXT;
  new(param?: VkDrmFormatModifierPropertiesListEXTInitializer | null): VkDrmFormatModifierPropertiesListEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly drmFormatModifierCount: number;
  readonly pDrmFormatModifierProperties: VkDrmFormatModifierPropertiesEXT[] | null;
}

export interface VkDrmFormatModifierPropertiesListEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly drmFormatModifierCount: number;
  readonly pDrmFormatModifierProperties: VkDrmFormatModifierPropertiesEXT[] | null;
}


/** ## VkPhysicalDeviceRayTracingPropertiesNV ## */
interface VkPhysicalDeviceRayTracingPropertiesNVInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly shaderGroupHandleSize?: number;
  readonly maxRecursionDepth?: number;
  readonly maxShaderGroupStride?: number;
  readonly shaderGroupBaseAlignment?: number;
  readonly maxGeometryCount?: number;
  readonly maxInstanceCount?: number;
  readonly maxTriangleCount?: number;
  readonly maxDescriptorSetAccelerationStructures?: number;
}

declare var VkPhysicalDeviceRayTracingPropertiesNV: {
  prototype: VkPhysicalDeviceRayTracingPropertiesNV;
  new(param?: VkPhysicalDeviceRayTracingPropertiesNVInitializer | null): VkPhysicalDeviceRayTracingPropertiesNV;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly shaderGroupHandleSize: number;
  readonly maxRecursionDepth: number;
  readonly maxShaderGroupStride: number;
  readonly shaderGroupBaseAlignment: number;
  readonly maxGeometryCount: number;
  readonly maxInstanceCount: number;
  readonly maxTriangleCount: number;
  readonly maxDescriptorSetAccelerationStructures: number;
}

export interface VkPhysicalDeviceRayTracingPropertiesNV {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly shaderGroupHandleSize: number;
  readonly maxRecursionDepth: number;
  readonly maxShaderGroupStride: number;
  readonly shaderGroupBaseAlignment: number;
  readonly maxGeometryCount: number;
  readonly maxInstanceCount: number;
  readonly maxTriangleCount: number;
  readonly maxDescriptorSetAccelerationStructures: number;
}


/** ## VkAccelerationStructureMemoryRequirementsInfoNV ## */
interface VkAccelerationStructureMemoryRequirementsInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  type?: VkAccelerationStructureMemoryRequirementsTypeNV;
  accelerationStructure?: VkAccelerationStructureNV | null;
}

declare var VkAccelerationStructureMemoryRequirementsInfoNV: {
  prototype: VkAccelerationStructureMemoryRequirementsInfoNV;
  new(param?: VkAccelerationStructureMemoryRequirementsInfoNVInitializer | null): VkAccelerationStructureMemoryRequirementsInfoNV;
  sType: VkStructureType;
  pNext: null;
  type: VkAccelerationStructureMemoryRequirementsTypeNV;
  accelerationStructure: VkAccelerationStructureNV | null;
}

export interface VkAccelerationStructureMemoryRequirementsInfoNV {
  sType: VkStructureType;
  pNext: null;
  type: VkAccelerationStructureMemoryRequirementsTypeNV;
  accelerationStructure: VkAccelerationStructureNV | null;
}


/** ## VkWriteDescriptorSetAccelerationStructureNV ## */
interface VkWriteDescriptorSetAccelerationStructureNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  accelerationStructureCount?: number;
  pAccelerationStructures?: VkAccelerationStructureNV[] | null;
}

declare var VkWriteDescriptorSetAccelerationStructureNV: {
  prototype: VkWriteDescriptorSetAccelerationStructureNV;
  new(param?: VkWriteDescriptorSetAccelerationStructureNVInitializer | null): VkWriteDescriptorSetAccelerationStructureNV;
  sType: VkStructureType;
  pNext: null;
  accelerationStructureCount: number;
  pAccelerationStructures: VkAccelerationStructureNV[] | null;
}

export interface VkWriteDescriptorSetAccelerationStructureNV {
  sType: VkStructureType;
  pNext: null;
  accelerationStructureCount: number;
  pAccelerationStructures: VkAccelerationStructureNV[] | null;
}


/** ## VkBindAccelerationStructureMemoryInfoNV ## */
interface VkBindAccelerationStructureMemoryInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  accelerationStructure?: VkAccelerationStructureNV | null;
  memory?: VkDeviceMemory | null;
  memoryOffset?: number;
  deviceIndexCount?: number;
  pDeviceIndices?: Uint32Array | null;
}

declare var VkBindAccelerationStructureMemoryInfoNV: {
  prototype: VkBindAccelerationStructureMemoryInfoNV;
  new(param?: VkBindAccelerationStructureMemoryInfoNVInitializer | null): VkBindAccelerationStructureMemoryInfoNV;
  sType: VkStructureType;
  pNext: null;
  accelerationStructure: VkAccelerationStructureNV | null;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
  deviceIndexCount: number;
  pDeviceIndices: Uint32Array | null;
}

export interface VkBindAccelerationStructureMemoryInfoNV {
  sType: VkStructureType;
  pNext: null;
  accelerationStructure: VkAccelerationStructureNV | null;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
  deviceIndexCount: number;
  pDeviceIndices: Uint32Array | null;
}


/** ## VkAccelerationStructureCreateInfoNV ## */
interface VkAccelerationStructureCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  compactedSize?: number;
  info?: VkAccelerationStructureInfoNV | null;
}

declare var VkAccelerationStructureCreateInfoNV: {
  prototype: VkAccelerationStructureCreateInfoNV;
  new(param?: VkAccelerationStructureCreateInfoNVInitializer | null): VkAccelerationStructureCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  compactedSize: number;
  info: VkAccelerationStructureInfoNV | null;
}

export interface VkAccelerationStructureCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  compactedSize: number;
  info: VkAccelerationStructureInfoNV | null;
}


/** ## VkAccelerationStructureInfoNV ## */
interface VkAccelerationStructureInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  type?: VkAccelerationStructureTypeNV;
  flags?: VkBuildAccelerationStructureFlagBitsNV;
  instanceCount?: number;
  geometryCount?: number;
  pGeometries?: VkGeometryNV[] | null;
}

declare var VkAccelerationStructureInfoNV: {
  prototype: VkAccelerationStructureInfoNV;
  new(param?: VkAccelerationStructureInfoNVInitializer | null): VkAccelerationStructureInfoNV;
  sType: VkStructureType;
  pNext: null;
  type: VkAccelerationStructureTypeNV;
  flags: VkBuildAccelerationStructureFlagBitsNV;
  instanceCount: number;
  geometryCount: number;
  pGeometries: VkGeometryNV[] | null;
}

export interface VkAccelerationStructureInfoNV {
  sType: VkStructureType;
  pNext: null;
  type: VkAccelerationStructureTypeNV;
  flags: VkBuildAccelerationStructureFlagBitsNV;
  instanceCount: number;
  geometryCount: number;
  pGeometries: VkGeometryNV[] | null;
}


/** ## VkGeometryNV ## */
interface VkGeometryNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  geometryType?: VkGeometryTypeNV;
  geometry?: VkGeometryDataNV | null;
  flags?: VkGeometryFlagBitsNV;
}

declare var VkGeometryNV: {
  prototype: VkGeometryNV;
  new(param?: VkGeometryNVInitializer | null): VkGeometryNV;
  sType: VkStructureType;
  pNext: null;
  geometryType: VkGeometryTypeNV;
  geometry: VkGeometryDataNV | null;
  flags: VkGeometryFlagBitsNV;
}

export interface VkGeometryNV {
  sType: VkStructureType;
  pNext: null;
  geometryType: VkGeometryTypeNV;
  geometry: VkGeometryDataNV | null;
  flags: VkGeometryFlagBitsNV;
}


/** ## VkGeometryDataNV ## */
interface VkGeometryDataNVInitializer {
  triangles?: VkGeometryTrianglesNV | null;
  aabbs?: VkGeometryAABBNV | null;
}

declare var VkGeometryDataNV: {
  prototype: VkGeometryDataNV;
  new(param?: VkGeometryDataNVInitializer | null): VkGeometryDataNV;
  triangles: VkGeometryTrianglesNV | null;
  aabbs: VkGeometryAABBNV | null;
}

export interface VkGeometryDataNV {
  triangles: VkGeometryTrianglesNV | null;
  aabbs: VkGeometryAABBNV | null;
}


/** ## VkGeometryAABBNV ## */
interface VkGeometryAABBNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  aabbData?: VkBuffer | null;
  numAABBs?: number;
  stride?: number;
  offset?: number;
}

declare var VkGeometryAABBNV: {
  prototype: VkGeometryAABBNV;
  new(param?: VkGeometryAABBNVInitializer | null): VkGeometryAABBNV;
  sType: VkStructureType;
  pNext: null;
  aabbData: VkBuffer | null;
  numAABBs: number;
  stride: number;
  offset: number;
}

export interface VkGeometryAABBNV {
  sType: VkStructureType;
  pNext: null;
  aabbData: VkBuffer | null;
  numAABBs: number;
  stride: number;
  offset: number;
}


/** ## VkGeometryTrianglesNV ## */
interface VkGeometryTrianglesNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  vertexData?: VkBuffer | null;
  vertexOffset?: number;
  vertexCount?: number;
  vertexStride?: number;
  vertexFormat?: VkFormat;
  indexData?: VkBuffer | null;
  indexOffset?: number;
  indexCount?: number;
  indexType?: VkIndexType;
  transformData?: VkBuffer | null;
  transformOffset?: number;
}

declare var VkGeometryTrianglesNV: {
  prototype: VkGeometryTrianglesNV;
  new(param?: VkGeometryTrianglesNVInitializer | null): VkGeometryTrianglesNV;
  sType: VkStructureType;
  pNext: null;
  vertexData: VkBuffer | null;
  vertexOffset: number;
  vertexCount: number;
  vertexStride: number;
  vertexFormat: VkFormat;
  indexData: VkBuffer | null;
  indexOffset: number;
  indexCount: number;
  indexType: VkIndexType;
  transformData: VkBuffer | null;
  transformOffset: number;
}

export interface VkGeometryTrianglesNV {
  sType: VkStructureType;
  pNext: null;
  vertexData: VkBuffer | null;
  vertexOffset: number;
  vertexCount: number;
  vertexStride: number;
  vertexFormat: VkFormat;
  indexData: VkBuffer | null;
  indexOffset: number;
  indexCount: number;
  indexType: VkIndexType;
  transformData: VkBuffer | null;
  transformOffset: number;
}


/** ## VkRayTracingPipelineCreateInfoNV ## */
interface VkRayTracingPipelineCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineCreateFlagBits;
  stageCount?: number;
  pStages?: VkPipelineShaderStageCreateInfo[] | null;
  groupCount?: number;
  pGroups?: VkRayTracingShaderGroupCreateInfoNV[] | null;
  maxRecursionDepth?: number;
  layout?: VkPipelineLayout | null;
  basePipelineHandle?: VkPipeline | null;
  basePipelineIndex?: number;
}

declare var VkRayTracingPipelineCreateInfoNV: {
  prototype: VkRayTracingPipelineCreateInfoNV;
  new(param?: VkRayTracingPipelineCreateInfoNVInitializer | null): VkRayTracingPipelineCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineCreateFlagBits;
  stageCount: number;
  pStages: VkPipelineShaderStageCreateInfo[] | null;
  groupCount: number;
  pGroups: VkRayTracingShaderGroupCreateInfoNV[] | null;
  maxRecursionDepth: number;
  layout: VkPipelineLayout | null;
  basePipelineHandle: VkPipeline | null;
  basePipelineIndex: number;
}

export interface VkRayTracingPipelineCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineCreateFlagBits;
  stageCount: number;
  pStages: VkPipelineShaderStageCreateInfo[] | null;
  groupCount: number;
  pGroups: VkRayTracingShaderGroupCreateInfoNV[] | null;
  maxRecursionDepth: number;
  layout: VkPipelineLayout | null;
  basePipelineHandle: VkPipeline | null;
  basePipelineIndex: number;
}


/** ## VkRayTracingShaderGroupCreateInfoNV ## */
interface VkRayTracingShaderGroupCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  type?: VkRayTracingShaderGroupTypeNV;
  generalShader?: number;
  closestHitShader?: number;
  anyHitShader?: number;
  intersectionShader?: number;
}

declare var VkRayTracingShaderGroupCreateInfoNV: {
  prototype: VkRayTracingShaderGroupCreateInfoNV;
  new(param?: VkRayTracingShaderGroupCreateInfoNVInitializer | null): VkRayTracingShaderGroupCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  type: VkRayTracingShaderGroupTypeNV;
  generalShader: number;
  closestHitShader: number;
  anyHitShader: number;
  intersectionShader: number;
}

export interface VkRayTracingShaderGroupCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  type: VkRayTracingShaderGroupTypeNV;
  generalShader: number;
  closestHitShader: number;
  anyHitShader: number;
  intersectionShader: number;
}


/** ## VkDrawMeshTasksIndirectCommandNV ## */
interface VkDrawMeshTasksIndirectCommandNVInitializer {
  taskCount?: number;
  firstTask?: number;
}

declare var VkDrawMeshTasksIndirectCommandNV: {
  prototype: VkDrawMeshTasksIndirectCommandNV;
  new(param?: VkDrawMeshTasksIndirectCommandNVInitializer | null): VkDrawMeshTasksIndirectCommandNV;
  taskCount: number;
  firstTask: number;
}

export interface VkDrawMeshTasksIndirectCommandNV {
  taskCount: number;
  firstTask: number;
}


/** ## VkPhysicalDeviceMeshShaderPropertiesNV ## */
interface VkPhysicalDeviceMeshShaderPropertiesNVInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly maxDrawMeshTasksCount?: number;
  readonly maxTaskWorkGroupInvocations?: number;
  readonly maxTaskWorkGroupSize?: number[] | null;
  readonly maxTaskTotalMemorySize?: number;
  readonly maxTaskOutputCount?: number;
  readonly maxMeshWorkGroupInvocations?: number;
  readonly maxMeshWorkGroupSize?: number[] | null;
  readonly maxMeshTotalMemorySize?: number;
  readonly maxMeshOutputVertices?: number;
  readonly maxMeshOutputPrimitives?: number;
  readonly maxMeshMultiviewViewCount?: number;
  readonly meshOutputPerVertexGranularity?: number;
  readonly meshOutputPerPrimitiveGranularity?: number;
}

declare var VkPhysicalDeviceMeshShaderPropertiesNV: {
  prototype: VkPhysicalDeviceMeshShaderPropertiesNV;
  new(param?: VkPhysicalDeviceMeshShaderPropertiesNVInitializer | null): VkPhysicalDeviceMeshShaderPropertiesNV;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxDrawMeshTasksCount: number;
  readonly maxTaskWorkGroupInvocations: number;
  readonly maxTaskWorkGroupSize: number[] | null;
  readonly maxTaskTotalMemorySize: number;
  readonly maxTaskOutputCount: number;
  readonly maxMeshWorkGroupInvocations: number;
  readonly maxMeshWorkGroupSize: number[] | null;
  readonly maxMeshTotalMemorySize: number;
  readonly maxMeshOutputVertices: number;
  readonly maxMeshOutputPrimitives: number;
  readonly maxMeshMultiviewViewCount: number;
  readonly meshOutputPerVertexGranularity: number;
  readonly meshOutputPerPrimitiveGranularity: number;
}

export interface VkPhysicalDeviceMeshShaderPropertiesNV {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxDrawMeshTasksCount: number;
  readonly maxTaskWorkGroupInvocations: number;
  readonly maxTaskWorkGroupSize: number[] | null;
  readonly maxTaskTotalMemorySize: number;
  readonly maxTaskOutputCount: number;
  readonly maxMeshWorkGroupInvocations: number;
  readonly maxMeshWorkGroupSize: number[] | null;
  readonly maxMeshTotalMemorySize: number;
  readonly maxMeshOutputVertices: number;
  readonly maxMeshOutputPrimitives: number;
  readonly maxMeshMultiviewViewCount: number;
  readonly meshOutputPerVertexGranularity: number;
  readonly meshOutputPerPrimitiveGranularity: number;
}


/** ## VkPhysicalDeviceMeshShaderFeaturesNV ## */
interface VkPhysicalDeviceMeshShaderFeaturesNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  taskShader?: number;
  meshShader?: number;
}

declare var VkPhysicalDeviceMeshShaderFeaturesNV: {
  prototype: VkPhysicalDeviceMeshShaderFeaturesNV;
  new(param?: VkPhysicalDeviceMeshShaderFeaturesNVInitializer | null): VkPhysicalDeviceMeshShaderFeaturesNV;
  sType: VkStructureType;
  pNext: null;
  taskShader: number;
  meshShader: number;
}

export interface VkPhysicalDeviceMeshShaderFeaturesNV {
  sType: VkStructureType;
  pNext: null;
  taskShader: number;
  meshShader: number;
}


/** ## VkPipelineViewportCoarseSampleOrderStateCreateInfoNV ## */
interface VkPipelineViewportCoarseSampleOrderStateCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  sampleOrderType?: VkCoarseSampleOrderTypeNV;
  customSampleOrderCount?: number;
  pCustomSampleOrders?: VkCoarseSampleOrderCustomNV[] | null;
}

declare var VkPipelineViewportCoarseSampleOrderStateCreateInfoNV: {
  prototype: VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
  new(param?: VkPipelineViewportCoarseSampleOrderStateCreateInfoNVInitializer | null): VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  sampleOrderType: VkCoarseSampleOrderTypeNV;
  customSampleOrderCount: number;
  pCustomSampleOrders: VkCoarseSampleOrderCustomNV[] | null;
}

export interface VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  sampleOrderType: VkCoarseSampleOrderTypeNV;
  customSampleOrderCount: number;
  pCustomSampleOrders: VkCoarseSampleOrderCustomNV[] | null;
}


/** ## VkCoarseSampleOrderCustomNV ## */
interface VkCoarseSampleOrderCustomNVInitializer {
  shadingRate?: VkShadingRatePaletteEntryNV;
  sampleCount?: number;
  sampleLocationCount?: number;
  pSampleLocations?: VkCoarseSampleLocationNV[] | null;
}

declare var VkCoarseSampleOrderCustomNV: {
  prototype: VkCoarseSampleOrderCustomNV;
  new(param?: VkCoarseSampleOrderCustomNVInitializer | null): VkCoarseSampleOrderCustomNV;
  shadingRate: VkShadingRatePaletteEntryNV;
  sampleCount: number;
  sampleLocationCount: number;
  pSampleLocations: VkCoarseSampleLocationNV[] | null;
}

export interface VkCoarseSampleOrderCustomNV {
  shadingRate: VkShadingRatePaletteEntryNV;
  sampleCount: number;
  sampleLocationCount: number;
  pSampleLocations: VkCoarseSampleLocationNV[] | null;
}


/** ## VkCoarseSampleLocationNV ## */
interface VkCoarseSampleLocationNVInitializer {
  pixelX?: number;
  pixelY?: number;
  sample?: number;
}

declare var VkCoarseSampleLocationNV: {
  prototype: VkCoarseSampleLocationNV;
  new(param?: VkCoarseSampleLocationNVInitializer | null): VkCoarseSampleLocationNV;
  pixelX: number;
  pixelY: number;
  sample: number;
}

export interface VkCoarseSampleLocationNV {
  pixelX: number;
  pixelY: number;
  sample: number;
}


/** ## VkPhysicalDeviceShadingRateImagePropertiesNV ## */
interface VkPhysicalDeviceShadingRateImagePropertiesNVInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly shadingRateTexelSize?: VkExtent2D | null;
  readonly shadingRatePaletteSize?: number;
  readonly shadingRateMaxCoarseSamples?: number;
}

declare var VkPhysicalDeviceShadingRateImagePropertiesNV: {
  prototype: VkPhysicalDeviceShadingRateImagePropertiesNV;
  new(param?: VkPhysicalDeviceShadingRateImagePropertiesNVInitializer | null): VkPhysicalDeviceShadingRateImagePropertiesNV;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly shadingRateTexelSize: VkExtent2D | null;
  readonly shadingRatePaletteSize: number;
  readonly shadingRateMaxCoarseSamples: number;
}

export interface VkPhysicalDeviceShadingRateImagePropertiesNV {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly shadingRateTexelSize: VkExtent2D | null;
  readonly shadingRatePaletteSize: number;
  readonly shadingRateMaxCoarseSamples: number;
}


/** ## VkPhysicalDeviceShadingRateImageFeaturesNV ## */
interface VkPhysicalDeviceShadingRateImageFeaturesNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  shadingRateImage?: number;
  shadingRateCoarseSampleOrder?: number;
}

declare var VkPhysicalDeviceShadingRateImageFeaturesNV: {
  prototype: VkPhysicalDeviceShadingRateImageFeaturesNV;
  new(param?: VkPhysicalDeviceShadingRateImageFeaturesNVInitializer | null): VkPhysicalDeviceShadingRateImageFeaturesNV;
  sType: VkStructureType;
  pNext: null;
  shadingRateImage: number;
  shadingRateCoarseSampleOrder: number;
}

export interface VkPhysicalDeviceShadingRateImageFeaturesNV {
  sType: VkStructureType;
  pNext: null;
  shadingRateImage: number;
  shadingRateCoarseSampleOrder: number;
}


/** ## VkPipelineViewportShadingRateImageStateCreateInfoNV ## */
interface VkPipelineViewportShadingRateImageStateCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  shadingRateImageEnable?: number;
  viewportCount?: number;
  pShadingRatePalettes?: VkShadingRatePaletteNV[] | null;
}

declare var VkPipelineViewportShadingRateImageStateCreateInfoNV: {
  prototype: VkPipelineViewportShadingRateImageStateCreateInfoNV;
  new(param?: VkPipelineViewportShadingRateImageStateCreateInfoNVInitializer | null): VkPipelineViewportShadingRateImageStateCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  shadingRateImageEnable: number;
  viewportCount: number;
  pShadingRatePalettes: VkShadingRatePaletteNV[] | null;
}

export interface VkPipelineViewportShadingRateImageStateCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  shadingRateImageEnable: number;
  viewportCount: number;
  pShadingRatePalettes: VkShadingRatePaletteNV[] | null;
}


/** ## VkShadingRatePaletteNV ## */
interface VkShadingRatePaletteNVInitializer {
  shadingRatePaletteEntryCount?: number;
  pShadingRatePaletteEntries?: Int32Array | null;
}

declare var VkShadingRatePaletteNV: {
  prototype: VkShadingRatePaletteNV;
  new(param?: VkShadingRatePaletteNVInitializer | null): VkShadingRatePaletteNV;
  shadingRatePaletteEntryCount: number;
  pShadingRatePaletteEntries: Int32Array | null;
}

export interface VkShadingRatePaletteNV {
  shadingRatePaletteEntryCount: number;
  pShadingRatePaletteEntries: Int32Array | null;
}


/** ## VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV ## */
interface VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  dedicatedAllocationImageAliasing?: number;
}

declare var VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV: {
  prototype: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
  new(param?: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNVInitializer | null): VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
  sType: VkStructureType;
  pNext: null;
  dedicatedAllocationImageAliasing: number;
}

export interface VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
  sType: VkStructureType;
  pNext: null;
  dedicatedAllocationImageAliasing: number;
}


/** ## VkPhysicalDeviceShaderImageFootprintFeaturesNV ## */
interface VkPhysicalDeviceShaderImageFootprintFeaturesNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  imageFootprint?: number;
}

declare var VkPhysicalDeviceShaderImageFootprintFeaturesNV: {
  prototype: VkPhysicalDeviceShaderImageFootprintFeaturesNV;
  new(param?: VkPhysicalDeviceShaderImageFootprintFeaturesNVInitializer | null): VkPhysicalDeviceShaderImageFootprintFeaturesNV;
  sType: VkStructureType;
  pNext: null;
  imageFootprint: number;
}

export interface VkPhysicalDeviceShaderImageFootprintFeaturesNV {
  sType: VkStructureType;
  pNext: null;
  imageFootprint: number;
}


/** ## VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV ## */
interface VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  fragmentShaderBarycentric?: number;
}

declare var VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV: {
  prototype: VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;
  new(param?: VkPhysicalDeviceFragmentShaderBarycentricFeaturesNVInitializer | null): VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV;
  sType: VkStructureType;
  pNext: null;
  fragmentShaderBarycentric: number;
}

export interface VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
  sType: VkStructureType;
  pNext: null;
  fragmentShaderBarycentric: number;
}


/** ## VkPhysicalDeviceComputeShaderDerivativesFeaturesNV ## */
interface VkPhysicalDeviceComputeShaderDerivativesFeaturesNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  computeDerivativeGroupQuads?: number;
  computeDerivativeGroupLinear?: number;
}

declare var VkPhysicalDeviceComputeShaderDerivativesFeaturesNV: {
  prototype: VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;
  new(param?: VkPhysicalDeviceComputeShaderDerivativesFeaturesNVInitializer | null): VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;
  sType: VkStructureType;
  pNext: null;
  computeDerivativeGroupQuads: number;
  computeDerivativeGroupLinear: number;
}

export interface VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
  sType: VkStructureType;
  pNext: null;
  computeDerivativeGroupQuads: number;
  computeDerivativeGroupLinear: number;
}


/** ## VkPhysicalDeviceCornerSampledImageFeaturesNV ## */
interface VkPhysicalDeviceCornerSampledImageFeaturesNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  cornerSampledImage?: number;
}

declare var VkPhysicalDeviceCornerSampledImageFeaturesNV: {
  prototype: VkPhysicalDeviceCornerSampledImageFeaturesNV;
  new(param?: VkPhysicalDeviceCornerSampledImageFeaturesNVInitializer | null): VkPhysicalDeviceCornerSampledImageFeaturesNV;
  sType: VkStructureType;
  pNext: null;
  cornerSampledImage: number;
}

export interface VkPhysicalDeviceCornerSampledImageFeaturesNV {
  sType: VkStructureType;
  pNext: null;
  cornerSampledImage: number;
}


/** ## VkPipelineViewportExclusiveScissorStateCreateInfoNV ## */
interface VkPipelineViewportExclusiveScissorStateCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  exclusiveScissorCount?: number;
  pExclusiveScissors?: VkRect2D[] | null;
}

declare var VkPipelineViewportExclusiveScissorStateCreateInfoNV: {
  prototype: VkPipelineViewportExclusiveScissorStateCreateInfoNV;
  new(param?: VkPipelineViewportExclusiveScissorStateCreateInfoNVInitializer | null): VkPipelineViewportExclusiveScissorStateCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  exclusiveScissorCount: number;
  pExclusiveScissors: VkRect2D[] | null;
}

export interface VkPipelineViewportExclusiveScissorStateCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  exclusiveScissorCount: number;
  pExclusiveScissors: VkRect2D[] | null;
}


/** ## VkPhysicalDeviceExclusiveScissorFeaturesNV ## */
interface VkPhysicalDeviceExclusiveScissorFeaturesNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  exclusiveScissor?: number;
}

declare var VkPhysicalDeviceExclusiveScissorFeaturesNV: {
  prototype: VkPhysicalDeviceExclusiveScissorFeaturesNV;
  new(param?: VkPhysicalDeviceExclusiveScissorFeaturesNVInitializer | null): VkPhysicalDeviceExclusiveScissorFeaturesNV;
  sType: VkStructureType;
  pNext: null;
  exclusiveScissor: number;
}

export interface VkPhysicalDeviceExclusiveScissorFeaturesNV {
  sType: VkStructureType;
  pNext: null;
  exclusiveScissor: number;
}


/** ## VkPipelineRepresentativeFragmentTestStateCreateInfoNV ## */
interface VkPipelineRepresentativeFragmentTestStateCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  representativeFragmentTestEnable?: number;
}

declare var VkPipelineRepresentativeFragmentTestStateCreateInfoNV: {
  prototype: VkPipelineRepresentativeFragmentTestStateCreateInfoNV;
  new(param?: VkPipelineRepresentativeFragmentTestStateCreateInfoNVInitializer | null): VkPipelineRepresentativeFragmentTestStateCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  representativeFragmentTestEnable: number;
}

export interface VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  representativeFragmentTestEnable: number;
}


/** ## VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV ## */
interface VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  representativeFragmentTest?: number;
}

declare var VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV: {
  prototype: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
  new(param?: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVInitializer | null): VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
  sType: VkStructureType;
  pNext: null;
  representativeFragmentTest: number;
}

export interface VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
  sType: VkStructureType;
  pNext: null;
  representativeFragmentTest: number;
}


/** ## VkPipelineRasterizationStateStreamCreateInfoEXT ## */
interface VkPipelineRasterizationStateStreamCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  rasterizationStream?: number;
}

declare var VkPipelineRasterizationStateStreamCreateInfoEXT: {
  prototype: VkPipelineRasterizationStateStreamCreateInfoEXT;
  new(param?: VkPipelineRasterizationStateStreamCreateInfoEXTInitializer | null): VkPipelineRasterizationStateStreamCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  rasterizationStream: number;
}

export interface VkPipelineRasterizationStateStreamCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  rasterizationStream: number;
}


/** ## VkPhysicalDeviceTransformFeedbackPropertiesEXT ## */
interface VkPhysicalDeviceTransformFeedbackPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly maxTransformFeedbackStreams?: number;
  readonly maxTransformFeedbackBuffers?: number;
  readonly maxTransformFeedbackBufferSize?: number;
  readonly maxTransformFeedbackStreamDataSize?: number;
  readonly maxTransformFeedbackBufferDataSize?: number;
  readonly maxTransformFeedbackBufferDataStride?: number;
  readonly transformFeedbackQueries?: number;
  readonly transformFeedbackStreamsLinesTriangles?: number;
  readonly transformFeedbackRasterizationStreamSelect?: number;
  readonly transformFeedbackDraw?: number;
}

declare var VkPhysicalDeviceTransformFeedbackPropertiesEXT: {
  prototype: VkPhysicalDeviceTransformFeedbackPropertiesEXT;
  new(param?: VkPhysicalDeviceTransformFeedbackPropertiesEXTInitializer | null): VkPhysicalDeviceTransformFeedbackPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxTransformFeedbackStreams: number;
  readonly maxTransformFeedbackBuffers: number;
  readonly maxTransformFeedbackBufferSize: number;
  readonly maxTransformFeedbackStreamDataSize: number;
  readonly maxTransformFeedbackBufferDataSize: number;
  readonly maxTransformFeedbackBufferDataStride: number;
  readonly transformFeedbackQueries: number;
  readonly transformFeedbackStreamsLinesTriangles: number;
  readonly transformFeedbackRasterizationStreamSelect: number;
  readonly transformFeedbackDraw: number;
}

export interface VkPhysicalDeviceTransformFeedbackPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxTransformFeedbackStreams: number;
  readonly maxTransformFeedbackBuffers: number;
  readonly maxTransformFeedbackBufferSize: number;
  readonly maxTransformFeedbackStreamDataSize: number;
  readonly maxTransformFeedbackBufferDataSize: number;
  readonly maxTransformFeedbackBufferDataStride: number;
  readonly transformFeedbackQueries: number;
  readonly transformFeedbackStreamsLinesTriangles: number;
  readonly transformFeedbackRasterizationStreamSelect: number;
  readonly transformFeedbackDraw: number;
}


/** ## VkPhysicalDeviceTransformFeedbackFeaturesEXT ## */
interface VkPhysicalDeviceTransformFeedbackFeaturesEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  transformFeedback?: number;
  geometryStreams?: number;
}

declare var VkPhysicalDeviceTransformFeedbackFeaturesEXT: {
  prototype: VkPhysicalDeviceTransformFeedbackFeaturesEXT;
  new(param?: VkPhysicalDeviceTransformFeedbackFeaturesEXTInitializer | null): VkPhysicalDeviceTransformFeedbackFeaturesEXT;
  sType: VkStructureType;
  pNext: null;
  transformFeedback: number;
  geometryStreams: number;
}

export interface VkPhysicalDeviceTransformFeedbackFeaturesEXT {
  sType: VkStructureType;
  pNext: null;
  transformFeedback: number;
  geometryStreams: number;
}


/** ## VkPhysicalDeviceASTCDecodeFeaturesEXT ## */
interface VkPhysicalDeviceASTCDecodeFeaturesEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  decodeModeSharedExponent?: number;
}

declare var VkPhysicalDeviceASTCDecodeFeaturesEXT: {
  prototype: VkPhysicalDeviceASTCDecodeFeaturesEXT;
  new(param?: VkPhysicalDeviceASTCDecodeFeaturesEXTInitializer | null): VkPhysicalDeviceASTCDecodeFeaturesEXT;
  sType: VkStructureType;
  pNext: null;
  decodeModeSharedExponent: number;
}

export interface VkPhysicalDeviceASTCDecodeFeaturesEXT {
  sType: VkStructureType;
  pNext: null;
  decodeModeSharedExponent: number;
}


/** ## VkImageViewASTCDecodeModeEXT ## */
interface VkImageViewASTCDecodeModeEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  decodeMode?: VkFormat;
}

declare var VkImageViewASTCDecodeModeEXT: {
  prototype: VkImageViewASTCDecodeModeEXT;
  new(param?: VkImageViewASTCDecodeModeEXTInitializer | null): VkImageViewASTCDecodeModeEXT;
  sType: VkStructureType;
  pNext: null;
  decodeMode: VkFormat;
}

export interface VkImageViewASTCDecodeModeEXT {
  sType: VkStructureType;
  pNext: null;
  decodeMode: VkFormat;
}


/** ## VkSubpassDescriptionDepthStencilResolveKHR ## */
interface VkSubpassDescriptionDepthStencilResolveKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  depthResolveMode?: VkResolveModeFlagBitsKHR;
  stencilResolveMode?: VkResolveModeFlagBitsKHR;
  pDepthStencilResolveAttachment?: VkAttachmentReference2KHR | null;
}

declare var VkSubpassDescriptionDepthStencilResolveKHR: {
  prototype: VkSubpassDescriptionDepthStencilResolveKHR;
  new(param?: VkSubpassDescriptionDepthStencilResolveKHRInitializer | null): VkSubpassDescriptionDepthStencilResolveKHR;
  sType: VkStructureType;
  pNext: null;
  depthResolveMode: VkResolveModeFlagBitsKHR;
  stencilResolveMode: VkResolveModeFlagBitsKHR;
  pDepthStencilResolveAttachment: VkAttachmentReference2KHR | null;
}

export interface VkSubpassDescriptionDepthStencilResolveKHR {
  sType: VkStructureType;
  pNext: null;
  depthResolveMode: VkResolveModeFlagBitsKHR;
  stencilResolveMode: VkResolveModeFlagBitsKHR;
  pDepthStencilResolveAttachment: VkAttachmentReference2KHR | null;
}


/** ## VkPhysicalDeviceDepthStencilResolvePropertiesKHR ## */
interface VkPhysicalDeviceDepthStencilResolvePropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly supportedDepthResolveModes?: VkResolveModeFlagBitsKHR;
  readonly supportedStencilResolveModes?: VkResolveModeFlagBitsKHR;
  readonly independentResolveNone?: number;
  readonly independentResolve?: number;
}

declare var VkPhysicalDeviceDepthStencilResolvePropertiesKHR: {
  prototype: VkPhysicalDeviceDepthStencilResolvePropertiesKHR;
  new(param?: VkPhysicalDeviceDepthStencilResolvePropertiesKHRInitializer | null): VkPhysicalDeviceDepthStencilResolvePropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly supportedDepthResolveModes: VkResolveModeFlagBitsKHR;
  readonly supportedStencilResolveModes: VkResolveModeFlagBitsKHR;
  readonly independentResolveNone: number;
  readonly independentResolve: number;
}

export interface VkPhysicalDeviceDepthStencilResolvePropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly supportedDepthResolveModes: VkResolveModeFlagBitsKHR;
  readonly supportedStencilResolveModes: VkResolveModeFlagBitsKHR;
  readonly independentResolveNone: number;
  readonly independentResolve: number;
}


/** ## VkCheckpointDataNV ## */
interface VkCheckpointDataNVInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly stage?: VkPipelineStageFlagBits;
  readonly pCheckpointMarker?: ArrayBuffer | null;
}

declare var VkCheckpointDataNV: {
  prototype: VkCheckpointDataNV;
  new(param?: VkCheckpointDataNVInitializer | null): VkCheckpointDataNV;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly stage: VkPipelineStageFlagBits;
  readonly pCheckpointMarker: ArrayBuffer | null;
}

export interface VkCheckpointDataNV {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly stage: VkPipelineStageFlagBits;
  readonly pCheckpointMarker: ArrayBuffer | null;
}


/** ## VkQueueFamilyCheckpointPropertiesNV ## */
interface VkQueueFamilyCheckpointPropertiesNVInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly checkpointExecutionStageMask?: VkPipelineStageFlagBits;
}

declare var VkQueueFamilyCheckpointPropertiesNV: {
  prototype: VkQueueFamilyCheckpointPropertiesNV;
  new(param?: VkQueueFamilyCheckpointPropertiesNVInitializer | null): VkQueueFamilyCheckpointPropertiesNV;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly checkpointExecutionStageMask: VkPipelineStageFlagBits;
}

export interface VkQueueFamilyCheckpointPropertiesNV {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly checkpointExecutionStageMask: VkPipelineStageFlagBits;
}


/** ## VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT ## */
interface VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  vertexAttributeInstanceRateDivisor?: number;
  vertexAttributeInstanceRateZeroDivisor?: number;
}

declare var VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT: {
  prototype: VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;
  new(param?: VkPhysicalDeviceVertexAttributeDivisorFeaturesEXTInitializer | null): VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;
  sType: VkStructureType;
  pNext: null;
  vertexAttributeInstanceRateDivisor: number;
  vertexAttributeInstanceRateZeroDivisor: number;
}

export interface VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
  sType: VkStructureType;
  pNext: null;
  vertexAttributeInstanceRateDivisor: number;
  vertexAttributeInstanceRateZeroDivisor: number;
}


/** ## VkPhysicalDeviceShaderAtomicInt64FeaturesKHR ## */
interface VkPhysicalDeviceShaderAtomicInt64FeaturesKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  shaderBufferInt64Atomics?: number;
  shaderSharedInt64Atomics?: number;
}

declare var VkPhysicalDeviceShaderAtomicInt64FeaturesKHR: {
  prototype: VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;
  new(param?: VkPhysicalDeviceShaderAtomicInt64FeaturesKHRInitializer | null): VkPhysicalDeviceShaderAtomicInt64FeaturesKHR;
  sType: VkStructureType;
  pNext: null;
  shaderBufferInt64Atomics: number;
  shaderSharedInt64Atomics: number;
}

export interface VkPhysicalDeviceShaderAtomicInt64FeaturesKHR {
  sType: VkStructureType;
  pNext: null;
  shaderBufferInt64Atomics: number;
  shaderSharedInt64Atomics: number;
}


/** ## VkPhysicalDeviceVulkanMemoryModelFeaturesKHR ## */
interface VkPhysicalDeviceVulkanMemoryModelFeaturesKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  vulkanMemoryModel?: number;
  vulkanMemoryModelDeviceScope?: number;
  vulkanMemoryModelAvailabilityVisibilityChains?: number;
}

declare var VkPhysicalDeviceVulkanMemoryModelFeaturesKHR: {
  prototype: VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;
  new(param?: VkPhysicalDeviceVulkanMemoryModelFeaturesKHRInitializer | null): VkPhysicalDeviceVulkanMemoryModelFeaturesKHR;
  sType: VkStructureType;
  pNext: null;
  vulkanMemoryModel: number;
  vulkanMemoryModelDeviceScope: number;
  vulkanMemoryModelAvailabilityVisibilityChains: number;
}

export interface VkPhysicalDeviceVulkanMemoryModelFeaturesKHR {
  sType: VkStructureType;
  pNext: null;
  vulkanMemoryModel: number;
  vulkanMemoryModelDeviceScope: number;
  vulkanMemoryModelAvailabilityVisibilityChains: number;
}


/** ## VkPhysicalDeviceConditionalRenderingFeaturesEXT ## */
interface VkPhysicalDeviceConditionalRenderingFeaturesEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  conditionalRendering?: number;
  inheritedConditionalRendering?: number;
}

declare var VkPhysicalDeviceConditionalRenderingFeaturesEXT: {
  prototype: VkPhysicalDeviceConditionalRenderingFeaturesEXT;
  new(param?: VkPhysicalDeviceConditionalRenderingFeaturesEXTInitializer | null): VkPhysicalDeviceConditionalRenderingFeaturesEXT;
  sType: VkStructureType;
  pNext: null;
  conditionalRendering: number;
  inheritedConditionalRendering: number;
}

export interface VkPhysicalDeviceConditionalRenderingFeaturesEXT {
  sType: VkStructureType;
  pNext: null;
  conditionalRendering: number;
  inheritedConditionalRendering: number;
}


/** ## VkPhysicalDevice8BitStorageFeaturesKHR ## */
interface VkPhysicalDevice8BitStorageFeaturesKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  storageBuffer8BitAccess?: number;
  uniformAndStorageBuffer8BitAccess?: number;
  storagePushConstant8?: number;
}

declare var VkPhysicalDevice8BitStorageFeaturesKHR: {
  prototype: VkPhysicalDevice8BitStorageFeaturesKHR;
  new(param?: VkPhysicalDevice8BitStorageFeaturesKHRInitializer | null): VkPhysicalDevice8BitStorageFeaturesKHR;
  sType: VkStructureType;
  pNext: null;
  storageBuffer8BitAccess: number;
  uniformAndStorageBuffer8BitAccess: number;
  storagePushConstant8: number;
}

export interface VkPhysicalDevice8BitStorageFeaturesKHR {
  sType: VkStructureType;
  pNext: null;
  storageBuffer8BitAccess: number;
  uniformAndStorageBuffer8BitAccess: number;
  storagePushConstant8: number;
}


/** ## VkCommandBufferInheritanceConditionalRenderingInfoEXT ## */
interface VkCommandBufferInheritanceConditionalRenderingInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  conditionalRenderingEnable?: number;
}

declare var VkCommandBufferInheritanceConditionalRenderingInfoEXT: {
  prototype: VkCommandBufferInheritanceConditionalRenderingInfoEXT;
  new(param?: VkCommandBufferInheritanceConditionalRenderingInfoEXTInitializer | null): VkCommandBufferInheritanceConditionalRenderingInfoEXT;
  sType: VkStructureType;
  pNext: null;
  conditionalRenderingEnable: number;
}

export interface VkCommandBufferInheritanceConditionalRenderingInfoEXT {
  sType: VkStructureType;
  pNext: null;
  conditionalRenderingEnable: number;
}


/** ## VkPhysicalDevicePCIBusInfoPropertiesEXT ## */
interface VkPhysicalDevicePCIBusInfoPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly pciDomain?: number;
  readonly pciBus?: number;
  readonly pciDevice?: number;
  readonly pciFunction?: number;
}

declare var VkPhysicalDevicePCIBusInfoPropertiesEXT: {
  prototype: VkPhysicalDevicePCIBusInfoPropertiesEXT;
  new(param?: VkPhysicalDevicePCIBusInfoPropertiesEXTInitializer | null): VkPhysicalDevicePCIBusInfoPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly pciDomain: number;
  readonly pciBus: number;
  readonly pciDevice: number;
  readonly pciFunction: number;
}

export interface VkPhysicalDevicePCIBusInfoPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly pciDomain: number;
  readonly pciBus: number;
  readonly pciDevice: number;
  readonly pciFunction: number;
}


/** ## VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT ## */
interface VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly maxVertexAttribDivisor?: number;
}

declare var VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT: {
  prototype: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
  new(param?: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXTInitializer | null): VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxVertexAttribDivisor: number;
}

export interface VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxVertexAttribDivisor: number;
}


/** ## VkPipelineVertexInputDivisorStateCreateInfoEXT ## */
interface VkPipelineVertexInputDivisorStateCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  vertexBindingDivisorCount?: number;
  pVertexBindingDivisors?: VkVertexInputBindingDivisorDescriptionEXT[] | null;
}

declare var VkPipelineVertexInputDivisorStateCreateInfoEXT: {
  prototype: VkPipelineVertexInputDivisorStateCreateInfoEXT;
  new(param?: VkPipelineVertexInputDivisorStateCreateInfoEXTInitializer | null): VkPipelineVertexInputDivisorStateCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  vertexBindingDivisorCount: number;
  pVertexBindingDivisors: VkVertexInputBindingDivisorDescriptionEXT[] | null;
}

export interface VkPipelineVertexInputDivisorStateCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  vertexBindingDivisorCount: number;
  pVertexBindingDivisors: VkVertexInputBindingDivisorDescriptionEXT[] | null;
}


/** ## VkVertexInputBindingDivisorDescriptionEXT ## */
interface VkVertexInputBindingDivisorDescriptionEXTInitializer {
  binding?: number;
  divisor?: number;
}

declare var VkVertexInputBindingDivisorDescriptionEXT: {
  prototype: VkVertexInputBindingDivisorDescriptionEXT;
  new(param?: VkVertexInputBindingDivisorDescriptionEXTInitializer | null): VkVertexInputBindingDivisorDescriptionEXT;
  binding: number;
  divisor: number;
}

export interface VkVertexInputBindingDivisorDescriptionEXT {
  binding: number;
  divisor: number;
}


/** ## VkSubpassEndInfoKHR ## */
interface VkSubpassEndInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
}

declare var VkSubpassEndInfoKHR: {
  prototype: VkSubpassEndInfoKHR;
  new(param?: VkSubpassEndInfoKHRInitializer | null): VkSubpassEndInfoKHR;
  sType: VkStructureType;
  pNext: null;
}

export interface VkSubpassEndInfoKHR {
  sType: VkStructureType;
  pNext: null;
}


/** ## VkSubpassBeginInfoKHR ## */
interface VkSubpassBeginInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  contents?: VkSubpassContents;
}

declare var VkSubpassBeginInfoKHR: {
  prototype: VkSubpassBeginInfoKHR;
  new(param?: VkSubpassBeginInfoKHRInitializer | null): VkSubpassBeginInfoKHR;
  sType: VkStructureType;
  pNext: null;
  contents: VkSubpassContents;
}

export interface VkSubpassBeginInfoKHR {
  sType: VkStructureType;
  pNext: null;
  contents: VkSubpassContents;
}


/** ## VkRenderPassCreateInfo2KHR ## */
interface VkRenderPassCreateInfo2KHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  attachmentCount?: number;
  pAttachments?: VkAttachmentDescription2KHR[] | null;
  subpassCount?: number;
  pSubpasses?: VkSubpassDescription2KHR[] | null;
  dependencyCount?: number;
  pDependencies?: VkSubpassDependency2KHR[] | null;
  correlatedViewMaskCount?: number;
  pCorrelatedViewMasks?: Uint32Array | null;
}

declare var VkRenderPassCreateInfo2KHR: {
  prototype: VkRenderPassCreateInfo2KHR;
  new(param?: VkRenderPassCreateInfo2KHRInitializer | null): VkRenderPassCreateInfo2KHR;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  attachmentCount: number;
  pAttachments: VkAttachmentDescription2KHR[] | null;
  subpassCount: number;
  pSubpasses: VkSubpassDescription2KHR[] | null;
  dependencyCount: number;
  pDependencies: VkSubpassDependency2KHR[] | null;
  correlatedViewMaskCount: number;
  pCorrelatedViewMasks: Uint32Array | null;
}

export interface VkRenderPassCreateInfo2KHR {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  attachmentCount: number;
  pAttachments: VkAttachmentDescription2KHR[] | null;
  subpassCount: number;
  pSubpasses: VkSubpassDescription2KHR[] | null;
  dependencyCount: number;
  pDependencies: VkSubpassDependency2KHR[] | null;
  correlatedViewMaskCount: number;
  pCorrelatedViewMasks: Uint32Array | null;
}


/** ## VkSubpassDependency2KHR ## */
interface VkSubpassDependency2KHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  srcSubpass?: number;
  dstSubpass?: number;
  srcStageMask?: VkPipelineStageFlagBits;
  dstStageMask?: VkPipelineStageFlagBits;
  srcAccessMask?: VkAccessFlagBits;
  dstAccessMask?: VkAccessFlagBits;
  dependencyFlags?: VkDependencyFlagBits;
  viewOffset?: number;
}

declare var VkSubpassDependency2KHR: {
  prototype: VkSubpassDependency2KHR;
  new(param?: VkSubpassDependency2KHRInitializer | null): VkSubpassDependency2KHR;
  sType: VkStructureType;
  pNext: null;
  srcSubpass: number;
  dstSubpass: number;
  srcStageMask: VkPipelineStageFlagBits;
  dstStageMask: VkPipelineStageFlagBits;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  dependencyFlags: VkDependencyFlagBits;
  viewOffset: number;
}

export interface VkSubpassDependency2KHR {
  sType: VkStructureType;
  pNext: null;
  srcSubpass: number;
  dstSubpass: number;
  srcStageMask: VkPipelineStageFlagBits;
  dstStageMask: VkPipelineStageFlagBits;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  dependencyFlags: VkDependencyFlagBits;
  viewOffset: number;
}


/** ## VkSubpassDescription2KHR ## */
interface VkSubpassDescription2KHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkSubpassDescriptionFlagBits;
  pipelineBindPoint?: VkPipelineBindPoint;
  viewMask?: number;
  inputAttachmentCount?: number;
  pInputAttachments?: VkAttachmentReference2KHR[] | null;
  colorAttachmentCount?: number;
  pColorAttachments?: VkAttachmentReference2KHR[] | null;
  pResolveAttachments?: VkAttachmentReference2KHR[] | null;
  pDepthStencilAttachment?: VkAttachmentReference2KHR | null;
  preserveAttachmentCount?: number;
  pPreserveAttachments?: Uint32Array | null;
}

declare var VkSubpassDescription2KHR: {
  prototype: VkSubpassDescription2KHR;
  new(param?: VkSubpassDescription2KHRInitializer | null): VkSubpassDescription2KHR;
  sType: VkStructureType;
  pNext: null;
  flags: VkSubpassDescriptionFlagBits;
  pipelineBindPoint: VkPipelineBindPoint;
  viewMask: number;
  inputAttachmentCount: number;
  pInputAttachments: VkAttachmentReference2KHR[] | null;
  colorAttachmentCount: number;
  pColorAttachments: VkAttachmentReference2KHR[] | null;
  pResolveAttachments: VkAttachmentReference2KHR[] | null;
  pDepthStencilAttachment: VkAttachmentReference2KHR | null;
  preserveAttachmentCount: number;
  pPreserveAttachments: Uint32Array | null;
}

export interface VkSubpassDescription2KHR {
  sType: VkStructureType;
  pNext: null;
  flags: VkSubpassDescriptionFlagBits;
  pipelineBindPoint: VkPipelineBindPoint;
  viewMask: number;
  inputAttachmentCount: number;
  pInputAttachments: VkAttachmentReference2KHR[] | null;
  colorAttachmentCount: number;
  pColorAttachments: VkAttachmentReference2KHR[] | null;
  pResolveAttachments: VkAttachmentReference2KHR[] | null;
  pDepthStencilAttachment: VkAttachmentReference2KHR | null;
  preserveAttachmentCount: number;
  pPreserveAttachments: Uint32Array | null;
}


/** ## VkAttachmentReference2KHR ## */
interface VkAttachmentReference2KHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  attachment?: number;
  layout?: VkImageLayout;
  aspectMask?: VkImageAspectFlagBits;
}

declare var VkAttachmentReference2KHR: {
  prototype: VkAttachmentReference2KHR;
  new(param?: VkAttachmentReference2KHRInitializer | null): VkAttachmentReference2KHR;
  sType: VkStructureType;
  pNext: null;
  attachment: number;
  layout: VkImageLayout;
  aspectMask: VkImageAspectFlagBits;
}

export interface VkAttachmentReference2KHR {
  sType: VkStructureType;
  pNext: null;
  attachment: number;
  layout: VkImageLayout;
  aspectMask: VkImageAspectFlagBits;
}


/** ## VkAttachmentDescription2KHR ## */
interface VkAttachmentDescription2KHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkAttachmentDescriptionFlagBits;
  format?: VkFormat;
  samples?: VkSampleCountFlagBits;
  loadOp?: VkAttachmentLoadOp;
  storeOp?: VkAttachmentStoreOp;
  stencilLoadOp?: VkAttachmentLoadOp;
  stencilStoreOp?: VkAttachmentStoreOp;
  initialLayout?: VkImageLayout;
  finalLayout?: VkImageLayout;
}

declare var VkAttachmentDescription2KHR: {
  prototype: VkAttachmentDescription2KHR;
  new(param?: VkAttachmentDescription2KHRInitializer | null): VkAttachmentDescription2KHR;
  sType: VkStructureType;
  pNext: null;
  flags: VkAttachmentDescriptionFlagBits;
  format: VkFormat;
  samples: VkSampleCountFlagBits;
  loadOp: VkAttachmentLoadOp;
  storeOp: VkAttachmentStoreOp;
  stencilLoadOp: VkAttachmentLoadOp;
  stencilStoreOp: VkAttachmentStoreOp;
  initialLayout: VkImageLayout;
  finalLayout: VkImageLayout;
}

export interface VkAttachmentDescription2KHR {
  sType: VkStructureType;
  pNext: null;
  flags: VkAttachmentDescriptionFlagBits;
  format: VkFormat;
  samples: VkSampleCountFlagBits;
  loadOp: VkAttachmentLoadOp;
  storeOp: VkAttachmentStoreOp;
  stencilLoadOp: VkAttachmentLoadOp;
  stencilStoreOp: VkAttachmentStoreOp;
  initialLayout: VkImageLayout;
  finalLayout: VkImageLayout;
}


/** ## VkDescriptorSetVariableDescriptorCountLayoutSupportEXT ## */
interface VkDescriptorSetVariableDescriptorCountLayoutSupportEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly maxVariableDescriptorCount?: number;
}

declare var VkDescriptorSetVariableDescriptorCountLayoutSupportEXT: {
  prototype: VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;
  new(param?: VkDescriptorSetVariableDescriptorCountLayoutSupportEXTInitializer | null): VkDescriptorSetVariableDescriptorCountLayoutSupportEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxVariableDescriptorCount: number;
}

export interface VkDescriptorSetVariableDescriptorCountLayoutSupportEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxVariableDescriptorCount: number;
}


/** ## VkDescriptorSetVariableDescriptorCountAllocateInfoEXT ## */
interface VkDescriptorSetVariableDescriptorCountAllocateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  descriptorSetCount?: number;
  pDescriptorCounts?: Uint32Array | null;
}

declare var VkDescriptorSetVariableDescriptorCountAllocateInfoEXT: {
  prototype: VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;
  new(param?: VkDescriptorSetVariableDescriptorCountAllocateInfoEXTInitializer | null): VkDescriptorSetVariableDescriptorCountAllocateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  descriptorSetCount: number;
  pDescriptorCounts: Uint32Array | null;
}

export interface VkDescriptorSetVariableDescriptorCountAllocateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  descriptorSetCount: number;
  pDescriptorCounts: Uint32Array | null;
}


/** ## VkDescriptorSetLayoutBindingFlagsCreateInfoEXT ## */
interface VkDescriptorSetLayoutBindingFlagsCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  bindingCount?: number;
  pBindingFlags?: Int32Array | null;
}

declare var VkDescriptorSetLayoutBindingFlagsCreateInfoEXT: {
  prototype: VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;
  new(param?: VkDescriptorSetLayoutBindingFlagsCreateInfoEXTInitializer | null): VkDescriptorSetLayoutBindingFlagsCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  bindingCount: number;
  pBindingFlags: Int32Array | null;
}

export interface VkDescriptorSetLayoutBindingFlagsCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  bindingCount: number;
  pBindingFlags: Int32Array | null;
}


/** ## VkPhysicalDeviceDescriptorIndexingPropertiesEXT ## */
interface VkPhysicalDeviceDescriptorIndexingPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly maxUpdateAfterBindDescriptorsInAllPools?: number;
  readonly shaderUniformBufferArrayNonUniformIndexingNative?: number;
  readonly shaderSampledImageArrayNonUniformIndexingNative?: number;
  readonly shaderStorageBufferArrayNonUniformIndexingNative?: number;
  readonly shaderStorageImageArrayNonUniformIndexingNative?: number;
  readonly shaderInputAttachmentArrayNonUniformIndexingNative?: number;
  readonly robustBufferAccessUpdateAfterBind?: number;
  readonly quadDivergentImplicitLod?: number;
  readonly maxPerStageDescriptorUpdateAfterBindSamplers?: number;
  readonly maxPerStageDescriptorUpdateAfterBindUniformBuffers?: number;
  readonly maxPerStageDescriptorUpdateAfterBindStorageBuffers?: number;
  readonly maxPerStageDescriptorUpdateAfterBindSampledImages?: number;
  readonly maxPerStageDescriptorUpdateAfterBindStorageImages?: number;
  readonly maxPerStageDescriptorUpdateAfterBindInputAttachments?: number;
  readonly maxPerStageUpdateAfterBindResources?: number;
  readonly maxDescriptorSetUpdateAfterBindSamplers?: number;
  readonly maxDescriptorSetUpdateAfterBindUniformBuffers?: number;
  readonly maxDescriptorSetUpdateAfterBindUniformBuffersDynamic?: number;
  readonly maxDescriptorSetUpdateAfterBindStorageBuffers?: number;
  readonly maxDescriptorSetUpdateAfterBindStorageBuffersDynamic?: number;
  readonly maxDescriptorSetUpdateAfterBindSampledImages?: number;
  readonly maxDescriptorSetUpdateAfterBindStorageImages?: number;
  readonly maxDescriptorSetUpdateAfterBindInputAttachments?: number;
}

declare var VkPhysicalDeviceDescriptorIndexingPropertiesEXT: {
  prototype: VkPhysicalDeviceDescriptorIndexingPropertiesEXT;
  new(param?: VkPhysicalDeviceDescriptorIndexingPropertiesEXTInitializer | null): VkPhysicalDeviceDescriptorIndexingPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxUpdateAfterBindDescriptorsInAllPools: number;
  readonly shaderUniformBufferArrayNonUniformIndexingNative: number;
  readonly shaderSampledImageArrayNonUniformIndexingNative: number;
  readonly shaderStorageBufferArrayNonUniformIndexingNative: number;
  readonly shaderStorageImageArrayNonUniformIndexingNative: number;
  readonly shaderInputAttachmentArrayNonUniformIndexingNative: number;
  readonly robustBufferAccessUpdateAfterBind: number;
  readonly quadDivergentImplicitLod: number;
  readonly maxPerStageDescriptorUpdateAfterBindSamplers: number;
  readonly maxPerStageDescriptorUpdateAfterBindUniformBuffers: number;
  readonly maxPerStageDescriptorUpdateAfterBindStorageBuffers: number;
  readonly maxPerStageDescriptorUpdateAfterBindSampledImages: number;
  readonly maxPerStageDescriptorUpdateAfterBindStorageImages: number;
  readonly maxPerStageDescriptorUpdateAfterBindInputAttachments: number;
  readonly maxPerStageUpdateAfterBindResources: number;
  readonly maxDescriptorSetUpdateAfterBindSamplers: number;
  readonly maxDescriptorSetUpdateAfterBindUniformBuffers: number;
  readonly maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: number;
  readonly maxDescriptorSetUpdateAfterBindStorageBuffers: number;
  readonly maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: number;
  readonly maxDescriptorSetUpdateAfterBindSampledImages: number;
  readonly maxDescriptorSetUpdateAfterBindStorageImages: number;
  readonly maxDescriptorSetUpdateAfterBindInputAttachments: number;
}

export interface VkPhysicalDeviceDescriptorIndexingPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxUpdateAfterBindDescriptorsInAllPools: number;
  readonly shaderUniformBufferArrayNonUniformIndexingNative: number;
  readonly shaderSampledImageArrayNonUniformIndexingNative: number;
  readonly shaderStorageBufferArrayNonUniformIndexingNative: number;
  readonly shaderStorageImageArrayNonUniformIndexingNative: number;
  readonly shaderInputAttachmentArrayNonUniformIndexingNative: number;
  readonly robustBufferAccessUpdateAfterBind: number;
  readonly quadDivergentImplicitLod: number;
  readonly maxPerStageDescriptorUpdateAfterBindSamplers: number;
  readonly maxPerStageDescriptorUpdateAfterBindUniformBuffers: number;
  readonly maxPerStageDescriptorUpdateAfterBindStorageBuffers: number;
  readonly maxPerStageDescriptorUpdateAfterBindSampledImages: number;
  readonly maxPerStageDescriptorUpdateAfterBindStorageImages: number;
  readonly maxPerStageDescriptorUpdateAfterBindInputAttachments: number;
  readonly maxPerStageUpdateAfterBindResources: number;
  readonly maxDescriptorSetUpdateAfterBindSamplers: number;
  readonly maxDescriptorSetUpdateAfterBindUniformBuffers: number;
  readonly maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: number;
  readonly maxDescriptorSetUpdateAfterBindStorageBuffers: number;
  readonly maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: number;
  readonly maxDescriptorSetUpdateAfterBindSampledImages: number;
  readonly maxDescriptorSetUpdateAfterBindStorageImages: number;
  readonly maxDescriptorSetUpdateAfterBindInputAttachments: number;
}


/** ## VkPhysicalDeviceDescriptorIndexingFeaturesEXT ## */
interface VkPhysicalDeviceDescriptorIndexingFeaturesEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  shaderInputAttachmentArrayDynamicIndexing?: number;
  shaderUniformTexelBufferArrayDynamicIndexing?: number;
  shaderStorageTexelBufferArrayDynamicIndexing?: number;
  shaderUniformBufferArrayNonUniformIndexing?: number;
  shaderSampledImageArrayNonUniformIndexing?: number;
  shaderStorageBufferArrayNonUniformIndexing?: number;
  shaderStorageImageArrayNonUniformIndexing?: number;
  shaderInputAttachmentArrayNonUniformIndexing?: number;
  shaderUniformTexelBufferArrayNonUniformIndexing?: number;
  shaderStorageTexelBufferArrayNonUniformIndexing?: number;
  descriptorBindingUniformBufferUpdateAfterBind?: number;
  descriptorBindingSampledImageUpdateAfterBind?: number;
  descriptorBindingStorageImageUpdateAfterBind?: number;
  descriptorBindingStorageBufferUpdateAfterBind?: number;
  descriptorBindingUniformTexelBufferUpdateAfterBind?: number;
  descriptorBindingStorageTexelBufferUpdateAfterBind?: number;
  descriptorBindingUpdateUnusedWhilePending?: number;
  descriptorBindingPartiallyBound?: number;
  descriptorBindingVariableDescriptorCount?: number;
  runtimeDescriptorArray?: number;
}

declare var VkPhysicalDeviceDescriptorIndexingFeaturesEXT: {
  prototype: VkPhysicalDeviceDescriptorIndexingFeaturesEXT;
  new(param?: VkPhysicalDeviceDescriptorIndexingFeaturesEXTInitializer | null): VkPhysicalDeviceDescriptorIndexingFeaturesEXT;
  sType: VkStructureType;
  pNext: null;
  shaderInputAttachmentArrayDynamicIndexing: number;
  shaderUniformTexelBufferArrayDynamicIndexing: number;
  shaderStorageTexelBufferArrayDynamicIndexing: number;
  shaderUniformBufferArrayNonUniformIndexing: number;
  shaderSampledImageArrayNonUniformIndexing: number;
  shaderStorageBufferArrayNonUniformIndexing: number;
  shaderStorageImageArrayNonUniformIndexing: number;
  shaderInputAttachmentArrayNonUniformIndexing: number;
  shaderUniformTexelBufferArrayNonUniformIndexing: number;
  shaderStorageTexelBufferArrayNonUniformIndexing: number;
  descriptorBindingUniformBufferUpdateAfterBind: number;
  descriptorBindingSampledImageUpdateAfterBind: number;
  descriptorBindingStorageImageUpdateAfterBind: number;
  descriptorBindingStorageBufferUpdateAfterBind: number;
  descriptorBindingUniformTexelBufferUpdateAfterBind: number;
  descriptorBindingStorageTexelBufferUpdateAfterBind: number;
  descriptorBindingUpdateUnusedWhilePending: number;
  descriptorBindingPartiallyBound: number;
  descriptorBindingVariableDescriptorCount: number;
  runtimeDescriptorArray: number;
}

export interface VkPhysicalDeviceDescriptorIndexingFeaturesEXT {
  sType: VkStructureType;
  pNext: null;
  shaderInputAttachmentArrayDynamicIndexing: number;
  shaderUniformTexelBufferArrayDynamicIndexing: number;
  shaderStorageTexelBufferArrayDynamicIndexing: number;
  shaderUniformBufferArrayNonUniformIndexing: number;
  shaderSampledImageArrayNonUniformIndexing: number;
  shaderStorageBufferArrayNonUniformIndexing: number;
  shaderStorageImageArrayNonUniformIndexing: number;
  shaderInputAttachmentArrayNonUniformIndexing: number;
  shaderUniformTexelBufferArrayNonUniformIndexing: number;
  shaderStorageTexelBufferArrayNonUniformIndexing: number;
  descriptorBindingUniformBufferUpdateAfterBind: number;
  descriptorBindingSampledImageUpdateAfterBind: number;
  descriptorBindingStorageImageUpdateAfterBind: number;
  descriptorBindingStorageBufferUpdateAfterBind: number;
  descriptorBindingUniformTexelBufferUpdateAfterBind: number;
  descriptorBindingStorageTexelBufferUpdateAfterBind: number;
  descriptorBindingUpdateUnusedWhilePending: number;
  descriptorBindingPartiallyBound: number;
  descriptorBindingVariableDescriptorCount: number;
  runtimeDescriptorArray: number;
}


/** ## VkPipelineRasterizationConservativeStateCreateInfoEXT ## */
interface VkPipelineRasterizationConservativeStateCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  conservativeRasterizationMode?: VkConservativeRasterizationModeEXT;
  extraPrimitiveOverestimationSize?: number;
}

declare var VkPipelineRasterizationConservativeStateCreateInfoEXT: {
  prototype: VkPipelineRasterizationConservativeStateCreateInfoEXT;
  new(param?: VkPipelineRasterizationConservativeStateCreateInfoEXTInitializer | null): VkPipelineRasterizationConservativeStateCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  conservativeRasterizationMode: VkConservativeRasterizationModeEXT;
  extraPrimitiveOverestimationSize: number;
}

export interface VkPipelineRasterizationConservativeStateCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  conservativeRasterizationMode: VkConservativeRasterizationModeEXT;
  extraPrimitiveOverestimationSize: number;
}


/** ## VkPhysicalDeviceShaderCorePropertiesAMD ## */
interface VkPhysicalDeviceShaderCorePropertiesAMDInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly shaderEngineCount?: number;
  readonly shaderArraysPerEngineCount?: number;
  readonly computeUnitsPerShaderArray?: number;
  readonly simdPerComputeUnit?: number;
  readonly wavefrontsPerSimd?: number;
  readonly wavefrontSize?: number;
  readonly sgprsPerSimd?: number;
  readonly minSgprAllocation?: number;
  readonly maxSgprAllocation?: number;
  readonly sgprAllocationGranularity?: number;
  readonly vgprsPerSimd?: number;
  readonly minVgprAllocation?: number;
  readonly maxVgprAllocation?: number;
  readonly vgprAllocationGranularity?: number;
}

declare var VkPhysicalDeviceShaderCorePropertiesAMD: {
  prototype: VkPhysicalDeviceShaderCorePropertiesAMD;
  new(param?: VkPhysicalDeviceShaderCorePropertiesAMDInitializer | null): VkPhysicalDeviceShaderCorePropertiesAMD;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly shaderEngineCount: number;
  readonly shaderArraysPerEngineCount: number;
  readonly computeUnitsPerShaderArray: number;
  readonly simdPerComputeUnit: number;
  readonly wavefrontsPerSimd: number;
  readonly wavefrontSize: number;
  readonly sgprsPerSimd: number;
  readonly minSgprAllocation: number;
  readonly maxSgprAllocation: number;
  readonly sgprAllocationGranularity: number;
  readonly vgprsPerSimd: number;
  readonly minVgprAllocation: number;
  readonly maxVgprAllocation: number;
  readonly vgprAllocationGranularity: number;
}

export interface VkPhysicalDeviceShaderCorePropertiesAMD {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly shaderEngineCount: number;
  readonly shaderArraysPerEngineCount: number;
  readonly computeUnitsPerShaderArray: number;
  readonly simdPerComputeUnit: number;
  readonly wavefrontsPerSimd: number;
  readonly wavefrontSize: number;
  readonly sgprsPerSimd: number;
  readonly minSgprAllocation: number;
  readonly maxSgprAllocation: number;
  readonly sgprAllocationGranularity: number;
  readonly vgprsPerSimd: number;
  readonly minVgprAllocation: number;
  readonly maxVgprAllocation: number;
  readonly vgprAllocationGranularity: number;
}


/** ## VkCalibratedTimestampInfoEXT ## */
interface VkCalibratedTimestampInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  timeDomain?: VkTimeDomainEXT;
}

declare var VkCalibratedTimestampInfoEXT: {
  prototype: VkCalibratedTimestampInfoEXT;
  new(param?: VkCalibratedTimestampInfoEXTInitializer | null): VkCalibratedTimestampInfoEXT;
  sType: VkStructureType;
  pNext: null;
  timeDomain: VkTimeDomainEXT;
}

export interface VkCalibratedTimestampInfoEXT {
  sType: VkStructureType;
  pNext: null;
  timeDomain: VkTimeDomainEXT;
}


/** ## VkPhysicalDeviceConservativeRasterizationPropertiesEXT ## */
interface VkPhysicalDeviceConservativeRasterizationPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly primitiveOverestimationSize?: number;
  readonly maxExtraPrimitiveOverestimationSize?: number;
  readonly extraPrimitiveOverestimationSizeGranularity?: number;
  readonly primitiveUnderestimation?: number;
  readonly conservativePointAndLineRasterization?: number;
  readonly degenerateTrianglesRasterized?: number;
  readonly degenerateLinesRasterized?: number;
  readonly fullyCoveredFragmentShaderInputVariable?: number;
  readonly conservativeRasterizationPostDepthCoverage?: number;
}

declare var VkPhysicalDeviceConservativeRasterizationPropertiesEXT: {
  prototype: VkPhysicalDeviceConservativeRasterizationPropertiesEXT;
  new(param?: VkPhysicalDeviceConservativeRasterizationPropertiesEXTInitializer | null): VkPhysicalDeviceConservativeRasterizationPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly primitiveOverestimationSize: number;
  readonly maxExtraPrimitiveOverestimationSize: number;
  readonly extraPrimitiveOverestimationSizeGranularity: number;
  readonly primitiveUnderestimation: number;
  readonly conservativePointAndLineRasterization: number;
  readonly degenerateTrianglesRasterized: number;
  readonly degenerateLinesRasterized: number;
  readonly fullyCoveredFragmentShaderInputVariable: number;
  readonly conservativeRasterizationPostDepthCoverage: number;
}

export interface VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly primitiveOverestimationSize: number;
  readonly maxExtraPrimitiveOverestimationSize: number;
  readonly extraPrimitiveOverestimationSizeGranularity: number;
  readonly primitiveUnderestimation: number;
  readonly conservativePointAndLineRasterization: number;
  readonly degenerateTrianglesRasterized: number;
  readonly degenerateLinesRasterized: number;
  readonly fullyCoveredFragmentShaderInputVariable: number;
  readonly conservativeRasterizationPostDepthCoverage: number;
}


/** ## VkPhysicalDeviceExternalMemoryHostPropertiesEXT ## */
interface VkPhysicalDeviceExternalMemoryHostPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly minImportedHostPointerAlignment?: number;
}

declare var VkPhysicalDeviceExternalMemoryHostPropertiesEXT: {
  prototype: VkPhysicalDeviceExternalMemoryHostPropertiesEXT;
  new(param?: VkPhysicalDeviceExternalMemoryHostPropertiesEXTInitializer | null): VkPhysicalDeviceExternalMemoryHostPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly minImportedHostPointerAlignment: number;
}

export interface VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly minImportedHostPointerAlignment: number;
}


/** ## VkMemoryHostPointerPropertiesEXT ## */
interface VkMemoryHostPointerPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly memoryTypeBits?: number;
}

declare var VkMemoryHostPointerPropertiesEXT: {
  prototype: VkMemoryHostPointerPropertiesEXT;
  new(param?: VkMemoryHostPointerPropertiesEXTInitializer | null): VkMemoryHostPointerPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryTypeBits: number;
}

export interface VkMemoryHostPointerPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryTypeBits: number;
}


/** ## VkImportMemoryHostPointerInfoEXT ## */
interface VkImportMemoryHostPointerInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleType?: VkExternalMemoryHandleTypeFlagBits;
  pHostPointer?: ArrayBuffer | null;
}

declare var VkImportMemoryHostPointerInfoEXT: {
  prototype: VkImportMemoryHostPointerInfoEXT;
  new(param?: VkImportMemoryHostPointerInfoEXTInitializer | null): VkImportMemoryHostPointerInfoEXT;
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalMemoryHandleTypeFlagBits;
  pHostPointer: ArrayBuffer | null;
}

export interface VkImportMemoryHostPointerInfoEXT {
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalMemoryHandleTypeFlagBits;
  pHostPointer: ArrayBuffer | null;
}


/** ## VkDebugUtilsMessengerCallbackDataEXT ## */
interface VkDebugUtilsMessengerCallbackDataEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  pMessageIdName?: string | null;
  messageIdNumber?: number;
  pMessage?: string | null;
  queueLabelCount?: number;
  pQueueLabels?: VkDebugUtilsLabelEXT[] | null;
  cmdBufLabelCount?: number;
  pCmdBufLabels?: VkDebugUtilsLabelEXT[] | null;
  objectCount?: number;
  pObjects?: VkDebugUtilsObjectNameInfoEXT[] | null;
}

declare var VkDebugUtilsMessengerCallbackDataEXT: {
  prototype: VkDebugUtilsMessengerCallbackDataEXT;
  new(param?: VkDebugUtilsMessengerCallbackDataEXTInitializer | null): VkDebugUtilsMessengerCallbackDataEXT;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  pMessageIdName: string | null;
  messageIdNumber: number;
  pMessage: string | null;
  queueLabelCount: number;
  pQueueLabels: VkDebugUtilsLabelEXT[] | null;
  cmdBufLabelCount: number;
  pCmdBufLabels: VkDebugUtilsLabelEXT[] | null;
  objectCount: number;
  pObjects: VkDebugUtilsObjectNameInfoEXT[] | null;
}

export interface VkDebugUtilsMessengerCallbackDataEXT {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  pMessageIdName: string | null;
  messageIdNumber: number;
  pMessage: string | null;
  queueLabelCount: number;
  pQueueLabels: VkDebugUtilsLabelEXT[] | null;
  cmdBufLabelCount: number;
  pCmdBufLabels: VkDebugUtilsLabelEXT[] | null;
  objectCount: number;
  pObjects: VkDebugUtilsObjectNameInfoEXT[] | null;
}


/** ## VkDebugUtilsMessengerCreateInfoEXT ## */
interface VkDebugUtilsMessengerCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  messageSeverity?: VkDebugUtilsMessageSeverityFlagBitsEXT;
  messageType?: VkDebugUtilsMessageTypeFlagBitsEXT;
  pfnUserCallback?: null;
  pUserData?: ArrayBuffer | null;
}

declare var VkDebugUtilsMessengerCreateInfoEXT: {
  prototype: VkDebugUtilsMessengerCreateInfoEXT;
  new(param?: VkDebugUtilsMessengerCreateInfoEXTInitializer | null): VkDebugUtilsMessengerCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT;
  messageType: VkDebugUtilsMessageTypeFlagBitsEXT;
  pfnUserCallback: null;
  pUserData: ArrayBuffer | null;
}

export interface VkDebugUtilsMessengerCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT;
  messageType: VkDebugUtilsMessageTypeFlagBitsEXT;
  pfnUserCallback: null;
  pUserData: ArrayBuffer | null;
}


/** ## VkDebugUtilsLabelEXT ## */
interface VkDebugUtilsLabelEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  pLabelName?: string | null;
  color?: number[] | null;
}

declare var VkDebugUtilsLabelEXT: {
  prototype: VkDebugUtilsLabelEXT;
  new(param?: VkDebugUtilsLabelEXTInitializer | null): VkDebugUtilsLabelEXT;
  sType: VkStructureType;
  pNext: null;
  pLabelName: string | null;
  color: number[] | null;
}

export interface VkDebugUtilsLabelEXT {
  sType: VkStructureType;
  pNext: null;
  pLabelName: string | null;
  color: number[] | null;
}


/** ## VkDebugUtilsObjectTagInfoEXT ## */
interface VkDebugUtilsObjectTagInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  objectType?: VkObjectType;
  objectHandle?: number;
  tagName?: number;
  tagSize?: number;
  pTag?: ArrayBuffer | null;
}

declare var VkDebugUtilsObjectTagInfoEXT: {
  prototype: VkDebugUtilsObjectTagInfoEXT;
  new(param?: VkDebugUtilsObjectTagInfoEXTInitializer | null): VkDebugUtilsObjectTagInfoEXT;
  sType: VkStructureType;
  pNext: null;
  objectType: VkObjectType;
  objectHandle: number;
  tagName: number;
  tagSize: number;
  pTag: ArrayBuffer | null;
}

export interface VkDebugUtilsObjectTagInfoEXT {
  sType: VkStructureType;
  pNext: null;
  objectType: VkObjectType;
  objectHandle: number;
  tagName: number;
  tagSize: number;
  pTag: ArrayBuffer | null;
}


/** ## VkDebugUtilsObjectNameInfoEXT ## */
interface VkDebugUtilsObjectNameInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  objectType?: VkObjectType;
  objectHandle?: number;
  pObjectName?: string | null;
}

declare var VkDebugUtilsObjectNameInfoEXT: {
  prototype: VkDebugUtilsObjectNameInfoEXT;
  new(param?: VkDebugUtilsObjectNameInfoEXTInitializer | null): VkDebugUtilsObjectNameInfoEXT;
  sType: VkStructureType;
  pNext: null;
  objectType: VkObjectType;
  objectHandle: number;
  pObjectName: string | null;
}

export interface VkDebugUtilsObjectNameInfoEXT {
  sType: VkStructureType;
  pNext: null;
  objectType: VkObjectType;
  objectHandle: number;
  pObjectName: string | null;
}


/** ## VkDeviceQueueGlobalPriorityCreateInfoEXT ## */
interface VkDeviceQueueGlobalPriorityCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  globalPriority?: VkQueueGlobalPriorityEXT;
}

declare var VkDeviceQueueGlobalPriorityCreateInfoEXT: {
  prototype: VkDeviceQueueGlobalPriorityCreateInfoEXT;
  new(param?: VkDeviceQueueGlobalPriorityCreateInfoEXTInitializer | null): VkDeviceQueueGlobalPriorityCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  globalPriority: VkQueueGlobalPriorityEXT;
}

export interface VkDeviceQueueGlobalPriorityCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  globalPriority: VkQueueGlobalPriorityEXT;
}


/** ## VkShaderStatisticsInfoAMD ## */
interface VkShaderStatisticsInfoAMDInitializer {
  readonly shaderStageMask?: VkShaderStageFlagBits;
  readonly resourceUsage?: VkShaderResourceUsageAMD | null;
  readonly numPhysicalVgprs?: number;
  readonly numPhysicalSgprs?: number;
  readonly numAvailableVgprs?: number;
  readonly numAvailableSgprs?: number;
  readonly computeWorkGroupSize?: number[] | null;
}

declare var VkShaderStatisticsInfoAMD: {
  prototype: VkShaderStatisticsInfoAMD;
  new(param?: VkShaderStatisticsInfoAMDInitializer | null): VkShaderStatisticsInfoAMD;
  readonly shaderStageMask: VkShaderStageFlagBits;
  readonly resourceUsage: VkShaderResourceUsageAMD | null;
  readonly numPhysicalVgprs: number;
  readonly numPhysicalSgprs: number;
  readonly numAvailableVgprs: number;
  readonly numAvailableSgprs: number;
  readonly computeWorkGroupSize: number[] | null;
}

export interface VkShaderStatisticsInfoAMD {
  readonly shaderStageMask: VkShaderStageFlagBits;
  readonly resourceUsage: VkShaderResourceUsageAMD | null;
  readonly numPhysicalVgprs: number;
  readonly numPhysicalSgprs: number;
  readonly numAvailableVgprs: number;
  readonly numAvailableSgprs: number;
  readonly computeWorkGroupSize: number[] | null;
}


/** ## VkShaderResourceUsageAMD ## */
interface VkShaderResourceUsageAMDInitializer {
  readonly numUsedVgprs?: number;
  readonly numUsedSgprs?: number;
  readonly ldsSizePerLocalWorkGroup?: number;
  readonly ldsUsageSizeInBytes?: number;
  readonly scratchMemUsageInBytes?: number;
}

declare var VkShaderResourceUsageAMD: {
  prototype: VkShaderResourceUsageAMD;
  new(param?: VkShaderResourceUsageAMDInitializer | null): VkShaderResourceUsageAMD;
  readonly numUsedVgprs: number;
  readonly numUsedSgprs: number;
  readonly ldsSizePerLocalWorkGroup: number;
  readonly ldsUsageSizeInBytes: number;
  readonly scratchMemUsageInBytes: number;
}

export interface VkShaderResourceUsageAMD {
  readonly numUsedVgprs: number;
  readonly numUsedSgprs: number;
  readonly ldsSizePerLocalWorkGroup: number;
  readonly ldsUsageSizeInBytes: number;
  readonly scratchMemUsageInBytes: number;
}


/** ## VkPhysicalDeviceFloatControlsPropertiesKHR ## */
interface VkPhysicalDeviceFloatControlsPropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly separateDenormSettings?: number;
  readonly separateRoundingModeSettings?: number;
  readonly shaderSignedZeroInfNanPreserveFloat16?: number;
  readonly shaderSignedZeroInfNanPreserveFloat32?: number;
  readonly shaderSignedZeroInfNanPreserveFloat64?: number;
  readonly shaderDenormPreserveFloat16?: number;
  readonly shaderDenormPreserveFloat32?: number;
  readonly shaderDenormPreserveFloat64?: number;
  readonly shaderDenormFlushToZeroFloat16?: number;
  readonly shaderDenormFlushToZeroFloat32?: number;
  readonly shaderDenormFlushToZeroFloat64?: number;
  readonly shaderRoundingModeRTEFloat16?: number;
  readonly shaderRoundingModeRTEFloat32?: number;
  readonly shaderRoundingModeRTEFloat64?: number;
  readonly shaderRoundingModeRTZFloat16?: number;
  readonly shaderRoundingModeRTZFloat32?: number;
  readonly shaderRoundingModeRTZFloat64?: number;
}

declare var VkPhysicalDeviceFloatControlsPropertiesKHR: {
  prototype: VkPhysicalDeviceFloatControlsPropertiesKHR;
  new(param?: VkPhysicalDeviceFloatControlsPropertiesKHRInitializer | null): VkPhysicalDeviceFloatControlsPropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly separateDenormSettings: number;
  readonly separateRoundingModeSettings: number;
  readonly shaderSignedZeroInfNanPreserveFloat16: number;
  readonly shaderSignedZeroInfNanPreserveFloat32: number;
  readonly shaderSignedZeroInfNanPreserveFloat64: number;
  readonly shaderDenormPreserveFloat16: number;
  readonly shaderDenormPreserveFloat32: number;
  readonly shaderDenormPreserveFloat64: number;
  readonly shaderDenormFlushToZeroFloat16: number;
  readonly shaderDenormFlushToZeroFloat32: number;
  readonly shaderDenormFlushToZeroFloat64: number;
  readonly shaderRoundingModeRTEFloat16: number;
  readonly shaderRoundingModeRTEFloat32: number;
  readonly shaderRoundingModeRTEFloat64: number;
  readonly shaderRoundingModeRTZFloat16: number;
  readonly shaderRoundingModeRTZFloat32: number;
  readonly shaderRoundingModeRTZFloat64: number;
}

export interface VkPhysicalDeviceFloatControlsPropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly separateDenormSettings: number;
  readonly separateRoundingModeSettings: number;
  readonly shaderSignedZeroInfNanPreserveFloat16: number;
  readonly shaderSignedZeroInfNanPreserveFloat32: number;
  readonly shaderSignedZeroInfNanPreserveFloat64: number;
  readonly shaderDenormPreserveFloat16: number;
  readonly shaderDenormPreserveFloat32: number;
  readonly shaderDenormPreserveFloat64: number;
  readonly shaderDenormFlushToZeroFloat16: number;
  readonly shaderDenormFlushToZeroFloat32: number;
  readonly shaderDenormFlushToZeroFloat64: number;
  readonly shaderRoundingModeRTEFloat16: number;
  readonly shaderRoundingModeRTEFloat32: number;
  readonly shaderRoundingModeRTEFloat64: number;
  readonly shaderRoundingModeRTZFloat16: number;
  readonly shaderRoundingModeRTZFloat32: number;
  readonly shaderRoundingModeRTZFloat64: number;
}


/** ## VkPhysicalDeviceFloat16Int8FeaturesKHR ## */
interface VkPhysicalDeviceFloat16Int8FeaturesKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  shaderFloat16?: number;
  shaderInt8?: number;
}

declare var VkPhysicalDeviceFloat16Int8FeaturesKHR: {
  prototype: VkPhysicalDeviceFloat16Int8FeaturesKHR;
  new(param?: VkPhysicalDeviceFloat16Int8FeaturesKHRInitializer | null): VkPhysicalDeviceFloat16Int8FeaturesKHR;
  sType: VkStructureType;
  pNext: null;
  shaderFloat16: number;
  shaderInt8: number;
}

export interface VkPhysicalDeviceFloat16Int8FeaturesKHR {
  sType: VkStructureType;
  pNext: null;
  shaderFloat16: number;
  shaderInt8: number;
}


/** ## VkPhysicalDeviceShaderDrawParameterFeatures ## */
interface VkPhysicalDeviceShaderDrawParameterFeaturesInitializer {
  sType?: VkStructureType;
  pNext?: null;
  shaderDrawParameters?: number;
}

declare var VkPhysicalDeviceShaderDrawParameterFeatures: {
  prototype: VkPhysicalDeviceShaderDrawParameterFeatures;
  new(param?: VkPhysicalDeviceShaderDrawParameterFeaturesInitializer | null): VkPhysicalDeviceShaderDrawParameterFeatures;
  sType: VkStructureType;
  pNext: null;
  shaderDrawParameters: number;
}

export interface VkPhysicalDeviceShaderDrawParameterFeatures {
  sType: VkStructureType;
  pNext: null;
  shaderDrawParameters: number;
}


/** ## VkDescriptorSetLayoutSupportKHR ## */
interface VkDescriptorSetLayoutSupportKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly supported?: number;
}

declare var VkDescriptorSetLayoutSupportKHR: {
  prototype: VkDescriptorSetLayoutSupportKHR;
  new(param?: VkDescriptorSetLayoutSupportKHRInitializer | null): VkDescriptorSetLayoutSupportKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly supported: number;
}

export interface VkDescriptorSetLayoutSupportKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly supported: number;
}


/** ## VkDescriptorSetLayoutSupport ## */
interface VkDescriptorSetLayoutSupportInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly supported?: number;
}

declare var VkDescriptorSetLayoutSupport: {
  prototype: VkDescriptorSetLayoutSupport;
  new(param?: VkDescriptorSetLayoutSupportInitializer | null): VkDescriptorSetLayoutSupport;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly supported: number;
}

export interface VkDescriptorSetLayoutSupport {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly supported: number;
}


/** ## VkPhysicalDeviceMaintenance3PropertiesKHR ## */
interface VkPhysicalDeviceMaintenance3PropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly maxPerSetDescriptors?: number;
  readonly maxMemoryAllocationSize?: number;
}

declare var VkPhysicalDeviceMaintenance3PropertiesKHR: {
  prototype: VkPhysicalDeviceMaintenance3PropertiesKHR;
  new(param?: VkPhysicalDeviceMaintenance3PropertiesKHRInitializer | null): VkPhysicalDeviceMaintenance3PropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxPerSetDescriptors: number;
  readonly maxMemoryAllocationSize: number;
}

export interface VkPhysicalDeviceMaintenance3PropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxPerSetDescriptors: number;
  readonly maxMemoryAllocationSize: number;
}


/** ## VkPhysicalDeviceMaintenance3Properties ## */
interface VkPhysicalDeviceMaintenance3PropertiesInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly maxPerSetDescriptors?: number;
  readonly maxMemoryAllocationSize?: number;
}

declare var VkPhysicalDeviceMaintenance3Properties: {
  prototype: VkPhysicalDeviceMaintenance3Properties;
  new(param?: VkPhysicalDeviceMaintenance3PropertiesInitializer | null): VkPhysicalDeviceMaintenance3Properties;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxPerSetDescriptors: number;
  readonly maxMemoryAllocationSize: number;
}

export interface VkPhysicalDeviceMaintenance3Properties {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxPerSetDescriptors: number;
  readonly maxMemoryAllocationSize: number;
}


/** ## VkShaderModuleValidationCacheCreateInfoEXT ## */
interface VkShaderModuleValidationCacheCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  validationCache?: VkValidationCacheEXT | null;
}

declare var VkShaderModuleValidationCacheCreateInfoEXT: {
  prototype: VkShaderModuleValidationCacheCreateInfoEXT;
  new(param?: VkShaderModuleValidationCacheCreateInfoEXTInitializer | null): VkShaderModuleValidationCacheCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  validationCache: VkValidationCacheEXT | null;
}

export interface VkShaderModuleValidationCacheCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  validationCache: VkValidationCacheEXT | null;
}


/** ## VkValidationCacheCreateInfoEXT ## */
interface VkValidationCacheCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  initialDataSize?: number;
  pInitialData?: ArrayBuffer | null;
}

declare var VkValidationCacheCreateInfoEXT: {
  prototype: VkValidationCacheCreateInfoEXT;
  new(param?: VkValidationCacheCreateInfoEXTInitializer | null): VkValidationCacheCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  initialDataSize: number;
  pInitialData: ArrayBuffer | null;
}

export interface VkValidationCacheCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  initialDataSize: number;
  pInitialData: ArrayBuffer | null;
}


/** ## VkImageFormatListCreateInfoKHR ## */
interface VkImageFormatListCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  viewFormatCount?: number;
  pViewFormats?: Int32Array | null;
}

declare var VkImageFormatListCreateInfoKHR: {
  prototype: VkImageFormatListCreateInfoKHR;
  new(param?: VkImageFormatListCreateInfoKHRInitializer | null): VkImageFormatListCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  viewFormatCount: number;
  pViewFormats: Int32Array | null;
}

export interface VkImageFormatListCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  viewFormatCount: number;
  pViewFormats: Int32Array | null;
}


/** ## VkPipelineCoverageModulationStateCreateInfoNV ## */
interface VkPipelineCoverageModulationStateCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  coverageModulationMode?: VkCoverageModulationModeNV;
  coverageModulationTableEnable?: number;
  coverageModulationTableCount?: number;
  pCoverageModulationTable?: Float32Array | null;
}

declare var VkPipelineCoverageModulationStateCreateInfoNV: {
  prototype: VkPipelineCoverageModulationStateCreateInfoNV;
  new(param?: VkPipelineCoverageModulationStateCreateInfoNVInitializer | null): VkPipelineCoverageModulationStateCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  coverageModulationMode: VkCoverageModulationModeNV;
  coverageModulationTableEnable: number;
  coverageModulationTableCount: number;
  pCoverageModulationTable: Float32Array | null;
}

export interface VkPipelineCoverageModulationStateCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  coverageModulationMode: VkCoverageModulationModeNV;
  coverageModulationTableEnable: number;
  coverageModulationTableCount: number;
  pCoverageModulationTable: Float32Array | null;
}


/** ## VkDescriptorPoolInlineUniformBlockCreateInfoEXT ## */
interface VkDescriptorPoolInlineUniformBlockCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  maxInlineUniformBlockBindings?: number;
}

declare var VkDescriptorPoolInlineUniformBlockCreateInfoEXT: {
  prototype: VkDescriptorPoolInlineUniformBlockCreateInfoEXT;
  new(param?: VkDescriptorPoolInlineUniformBlockCreateInfoEXTInitializer | null): VkDescriptorPoolInlineUniformBlockCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  maxInlineUniformBlockBindings: number;
}

export interface VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  maxInlineUniformBlockBindings: number;
}


/** ## VkWriteDescriptorSetInlineUniformBlockEXT ## */
interface VkWriteDescriptorSetInlineUniformBlockEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  dataSize?: number;
  pData?: ArrayBuffer | null;
}

declare var VkWriteDescriptorSetInlineUniformBlockEXT: {
  prototype: VkWriteDescriptorSetInlineUniformBlockEXT;
  new(param?: VkWriteDescriptorSetInlineUniformBlockEXTInitializer | null): VkWriteDescriptorSetInlineUniformBlockEXT;
  sType: VkStructureType;
  pNext: null;
  dataSize: number;
  pData: ArrayBuffer | null;
}

export interface VkWriteDescriptorSetInlineUniformBlockEXT {
  sType: VkStructureType;
  pNext: null;
  dataSize: number;
  pData: ArrayBuffer | null;
}


/** ## VkPhysicalDeviceInlineUniformBlockPropertiesEXT ## */
interface VkPhysicalDeviceInlineUniformBlockPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly maxInlineUniformBlockSize?: number;
  readonly maxPerStageDescriptorInlineUniformBlocks?: number;
  readonly maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks?: number;
  readonly maxDescriptorSetInlineUniformBlocks?: number;
  readonly maxDescriptorSetUpdateAfterBindInlineUniformBlocks?: number;
}

declare var VkPhysicalDeviceInlineUniformBlockPropertiesEXT: {
  prototype: VkPhysicalDeviceInlineUniformBlockPropertiesEXT;
  new(param?: VkPhysicalDeviceInlineUniformBlockPropertiesEXTInitializer | null): VkPhysicalDeviceInlineUniformBlockPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxInlineUniformBlockSize: number;
  readonly maxPerStageDescriptorInlineUniformBlocks: number;
  readonly maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: number;
  readonly maxDescriptorSetInlineUniformBlocks: number;
  readonly maxDescriptorSetUpdateAfterBindInlineUniformBlocks: number;
}

export interface VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxInlineUniformBlockSize: number;
  readonly maxPerStageDescriptorInlineUniformBlocks: number;
  readonly maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: number;
  readonly maxDescriptorSetInlineUniformBlocks: number;
  readonly maxDescriptorSetUpdateAfterBindInlineUniformBlocks: number;
}


/** ## VkPhysicalDeviceInlineUniformBlockFeaturesEXT ## */
interface VkPhysicalDeviceInlineUniformBlockFeaturesEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  inlineUniformBlock?: number;
  descriptorBindingInlineUniformBlockUpdateAfterBind?: number;
}

declare var VkPhysicalDeviceInlineUniformBlockFeaturesEXT: {
  prototype: VkPhysicalDeviceInlineUniformBlockFeaturesEXT;
  new(param?: VkPhysicalDeviceInlineUniformBlockFeaturesEXTInitializer | null): VkPhysicalDeviceInlineUniformBlockFeaturesEXT;
  sType: VkStructureType;
  pNext: null;
  inlineUniformBlock: number;
  descriptorBindingInlineUniformBlockUpdateAfterBind: number;
}

export interface VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
  sType: VkStructureType;
  pNext: null;
  inlineUniformBlock: number;
  descriptorBindingInlineUniformBlockUpdateAfterBind: number;
}


/** ## VkPipelineColorBlendAdvancedStateCreateInfoEXT ## */
interface VkPipelineColorBlendAdvancedStateCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  srcPremultiplied?: number;
  dstPremultiplied?: number;
  blendOverlap?: VkBlendOverlapEXT;
}

declare var VkPipelineColorBlendAdvancedStateCreateInfoEXT: {
  prototype: VkPipelineColorBlendAdvancedStateCreateInfoEXT;
  new(param?: VkPipelineColorBlendAdvancedStateCreateInfoEXTInitializer | null): VkPipelineColorBlendAdvancedStateCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  srcPremultiplied: number;
  dstPremultiplied: number;
  blendOverlap: VkBlendOverlapEXT;
}

export interface VkPipelineColorBlendAdvancedStateCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  srcPremultiplied: number;
  dstPremultiplied: number;
  blendOverlap: VkBlendOverlapEXT;
}


/** ## VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT ## */
interface VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly advancedBlendMaxColorAttachments?: number;
  readonly advancedBlendIndependentBlend?: number;
  readonly advancedBlendNonPremultipliedSrcColor?: number;
  readonly advancedBlendNonPremultipliedDstColor?: number;
  readonly advancedBlendCorrelatedOverlap?: number;
  readonly advancedBlendAllOperations?: number;
}

declare var VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT: {
  prototype: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
  new(param?: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXTInitializer | null): VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly advancedBlendMaxColorAttachments: number;
  readonly advancedBlendIndependentBlend: number;
  readonly advancedBlendNonPremultipliedSrcColor: number;
  readonly advancedBlendNonPremultipliedDstColor: number;
  readonly advancedBlendCorrelatedOverlap: number;
  readonly advancedBlendAllOperations: number;
}

export interface VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly advancedBlendMaxColorAttachments: number;
  readonly advancedBlendIndependentBlend: number;
  readonly advancedBlendNonPremultipliedSrcColor: number;
  readonly advancedBlendNonPremultipliedDstColor: number;
  readonly advancedBlendCorrelatedOverlap: number;
  readonly advancedBlendAllOperations: number;
}


/** ## VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT ## */
interface VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  advancedBlendCoherentOperations?: number;
}

declare var VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT: {
  prototype: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
  new(param?: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXTInitializer | null): VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
  sType: VkStructureType;
  pNext: null;
  advancedBlendCoherentOperations: number;
}

export interface VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
  sType: VkStructureType;
  pNext: null;
  advancedBlendCoherentOperations: number;
}


/** ## VkSamplerReductionModeCreateInfoEXT ## */
interface VkSamplerReductionModeCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  reductionMode?: VkSamplerReductionModeEXT;
}

declare var VkSamplerReductionModeCreateInfoEXT: {
  prototype: VkSamplerReductionModeCreateInfoEXT;
  new(param?: VkSamplerReductionModeCreateInfoEXTInitializer | null): VkSamplerReductionModeCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  reductionMode: VkSamplerReductionModeEXT;
}

export interface VkSamplerReductionModeCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  reductionMode: VkSamplerReductionModeEXT;
}


/** ## VkMultisamplePropertiesEXT ## */
interface VkMultisamplePropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly maxSampleLocationGridSize?: VkExtent2D | null;
}

declare var VkMultisamplePropertiesEXT: {
  prototype: VkMultisamplePropertiesEXT;
  new(param?: VkMultisamplePropertiesEXTInitializer | null): VkMultisamplePropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxSampleLocationGridSize: VkExtent2D | null;
}

export interface VkMultisamplePropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxSampleLocationGridSize: VkExtent2D | null;
}


/** ## VkPhysicalDeviceSampleLocationsPropertiesEXT ## */
interface VkPhysicalDeviceSampleLocationsPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly sampleLocationSampleCounts?: VkSampleCountFlagBits;
  readonly maxSampleLocationGridSize?: VkExtent2D | null;
  readonly sampleLocationCoordinateRange?: number[] | null;
  readonly sampleLocationSubPixelBits?: number;
  readonly variableSampleLocations?: number;
}

declare var VkPhysicalDeviceSampleLocationsPropertiesEXT: {
  prototype: VkPhysicalDeviceSampleLocationsPropertiesEXT;
  new(param?: VkPhysicalDeviceSampleLocationsPropertiesEXTInitializer | null): VkPhysicalDeviceSampleLocationsPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly sampleLocationSampleCounts: VkSampleCountFlagBits;
  readonly maxSampleLocationGridSize: VkExtent2D | null;
  readonly sampleLocationCoordinateRange: number[] | null;
  readonly sampleLocationSubPixelBits: number;
  readonly variableSampleLocations: number;
}

export interface VkPhysicalDeviceSampleLocationsPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly sampleLocationSampleCounts: VkSampleCountFlagBits;
  readonly maxSampleLocationGridSize: VkExtent2D | null;
  readonly sampleLocationCoordinateRange: number[] | null;
  readonly sampleLocationSubPixelBits: number;
  readonly variableSampleLocations: number;
}


/** ## VkPipelineSampleLocationsStateCreateInfoEXT ## */
interface VkPipelineSampleLocationsStateCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  sampleLocationsEnable?: number;
  sampleLocationsInfo?: VkSampleLocationsInfoEXT | null;
}

declare var VkPipelineSampleLocationsStateCreateInfoEXT: {
  prototype: VkPipelineSampleLocationsStateCreateInfoEXT;
  new(param?: VkPipelineSampleLocationsStateCreateInfoEXTInitializer | null): VkPipelineSampleLocationsStateCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  sampleLocationsEnable: number;
  sampleLocationsInfo: VkSampleLocationsInfoEXT | null;
}

export interface VkPipelineSampleLocationsStateCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  sampleLocationsEnable: number;
  sampleLocationsInfo: VkSampleLocationsInfoEXT | null;
}


/** ## VkRenderPassSampleLocationsBeginInfoEXT ## */
interface VkRenderPassSampleLocationsBeginInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  attachmentInitialSampleLocationsCount?: number;
  pAttachmentInitialSampleLocations?: VkAttachmentSampleLocationsEXT[] | null;
  postSubpassSampleLocationsCount?: number;
  pPostSubpassSampleLocations?: VkSubpassSampleLocationsEXT[] | null;
}

declare var VkRenderPassSampleLocationsBeginInfoEXT: {
  prototype: VkRenderPassSampleLocationsBeginInfoEXT;
  new(param?: VkRenderPassSampleLocationsBeginInfoEXTInitializer | null): VkRenderPassSampleLocationsBeginInfoEXT;
  sType: VkStructureType;
  pNext: null;
  attachmentInitialSampleLocationsCount: number;
  pAttachmentInitialSampleLocations: VkAttachmentSampleLocationsEXT[] | null;
  postSubpassSampleLocationsCount: number;
  pPostSubpassSampleLocations: VkSubpassSampleLocationsEXT[] | null;
}

export interface VkRenderPassSampleLocationsBeginInfoEXT {
  sType: VkStructureType;
  pNext: null;
  attachmentInitialSampleLocationsCount: number;
  pAttachmentInitialSampleLocations: VkAttachmentSampleLocationsEXT[] | null;
  postSubpassSampleLocationsCount: number;
  pPostSubpassSampleLocations: VkSubpassSampleLocationsEXT[] | null;
}


/** ## VkSubpassSampleLocationsEXT ## */
interface VkSubpassSampleLocationsEXTInitializer {
  subpassIndex?: number;
  sampleLocationsInfo?: VkSampleLocationsInfoEXT | null;
}

declare var VkSubpassSampleLocationsEXT: {
  prototype: VkSubpassSampleLocationsEXT;
  new(param?: VkSubpassSampleLocationsEXTInitializer | null): VkSubpassSampleLocationsEXT;
  subpassIndex: number;
  sampleLocationsInfo: VkSampleLocationsInfoEXT | null;
}

export interface VkSubpassSampleLocationsEXT {
  subpassIndex: number;
  sampleLocationsInfo: VkSampleLocationsInfoEXT | null;
}


/** ## VkAttachmentSampleLocationsEXT ## */
interface VkAttachmentSampleLocationsEXTInitializer {
  attachmentIndex?: number;
  sampleLocationsInfo?: VkSampleLocationsInfoEXT | null;
}

declare var VkAttachmentSampleLocationsEXT: {
  prototype: VkAttachmentSampleLocationsEXT;
  new(param?: VkAttachmentSampleLocationsEXTInitializer | null): VkAttachmentSampleLocationsEXT;
  attachmentIndex: number;
  sampleLocationsInfo: VkSampleLocationsInfoEXT | null;
}

export interface VkAttachmentSampleLocationsEXT {
  attachmentIndex: number;
  sampleLocationsInfo: VkSampleLocationsInfoEXT | null;
}


/** ## VkSampleLocationsInfoEXT ## */
interface VkSampleLocationsInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  sampleLocationsPerPixel?: VkSampleCountFlagBits;
  sampleLocationGridSize?: VkExtent2D | null;
  sampleLocationsCount?: number;
  pSampleLocations?: VkSampleLocationEXT[] | null;
}

declare var VkSampleLocationsInfoEXT: {
  prototype: VkSampleLocationsInfoEXT;
  new(param?: VkSampleLocationsInfoEXTInitializer | null): VkSampleLocationsInfoEXT;
  sType: VkStructureType;
  pNext: null;
  sampleLocationsPerPixel: VkSampleCountFlagBits;
  sampleLocationGridSize: VkExtent2D | null;
  sampleLocationsCount: number;
  pSampleLocations: VkSampleLocationEXT[] | null;
}

export interface VkSampleLocationsInfoEXT {
  sType: VkStructureType;
  pNext: null;
  sampleLocationsPerPixel: VkSampleCountFlagBits;
  sampleLocationGridSize: VkExtent2D | null;
  sampleLocationsCount: number;
  pSampleLocations: VkSampleLocationEXT[] | null;
}


/** ## VkSampleLocationEXT ## */
interface VkSampleLocationEXTInitializer {
  x?: number;
  y?: number;
}

declare var VkSampleLocationEXT: {
  prototype: VkSampleLocationEXT;
  new(param?: VkSampleLocationEXTInitializer | null): VkSampleLocationEXT;
  x: number;
  y: number;
}

export interface VkSampleLocationEXT {
  x: number;
  y: number;
}


/** ## VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT ## */
interface VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly filterMinmaxSingleComponentFormats?: number;
  readonly filterMinmaxImageComponentMapping?: number;
}

declare var VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT: {
  prototype: VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;
  new(param?: VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXTInitializer | null): VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly filterMinmaxSingleComponentFormats: number;
  readonly filterMinmaxImageComponentMapping: number;
}

export interface VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly filterMinmaxSingleComponentFormats: number;
  readonly filterMinmaxImageComponentMapping: number;
}


/** ## VkPipelineCoverageToColorStateCreateInfoNV ## */
interface VkPipelineCoverageToColorStateCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  coverageToColorEnable?: number;
  coverageToColorLocation?: number;
}

declare var VkPipelineCoverageToColorStateCreateInfoNV: {
  prototype: VkPipelineCoverageToColorStateCreateInfoNV;
  new(param?: VkPipelineCoverageToColorStateCreateInfoNVInitializer | null): VkPipelineCoverageToColorStateCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  coverageToColorEnable: number;
  coverageToColorLocation: number;
}

export interface VkPipelineCoverageToColorStateCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  coverageToColorEnable: number;
  coverageToColorLocation: number;
}


/** ## VkDeviceQueueInfo2 ## */
interface VkDeviceQueueInfo2Initializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkDeviceQueueCreateFlagBits;
  queueFamilyIndex?: number;
  queueIndex?: number;
}

declare var VkDeviceQueueInfo2: {
  prototype: VkDeviceQueueInfo2;
  new(param?: VkDeviceQueueInfo2Initializer | null): VkDeviceQueueInfo2;
  sType: VkStructureType;
  pNext: null;
  flags: VkDeviceQueueCreateFlagBits;
  queueFamilyIndex: number;
  queueIndex: number;
}

export interface VkDeviceQueueInfo2 {
  sType: VkStructureType;
  pNext: null;
  flags: VkDeviceQueueCreateFlagBits;
  queueFamilyIndex: number;
  queueIndex: number;
}


/** ## VkPhysicalDeviceProtectedMemoryProperties ## */
interface VkPhysicalDeviceProtectedMemoryPropertiesInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly protectedNoFault?: number;
}

declare var VkPhysicalDeviceProtectedMemoryProperties: {
  prototype: VkPhysicalDeviceProtectedMemoryProperties;
  new(param?: VkPhysicalDeviceProtectedMemoryPropertiesInitializer | null): VkPhysicalDeviceProtectedMemoryProperties;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly protectedNoFault: number;
}

export interface VkPhysicalDeviceProtectedMemoryProperties {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly protectedNoFault: number;
}


/** ## VkPhysicalDeviceProtectedMemoryFeatures ## */
interface VkPhysicalDeviceProtectedMemoryFeaturesInitializer {
  sType?: VkStructureType;
  pNext?: null;
  protectedMemory?: number;
}

declare var VkPhysicalDeviceProtectedMemoryFeatures: {
  prototype: VkPhysicalDeviceProtectedMemoryFeatures;
  new(param?: VkPhysicalDeviceProtectedMemoryFeaturesInitializer | null): VkPhysicalDeviceProtectedMemoryFeatures;
  sType: VkStructureType;
  pNext: null;
  protectedMemory: number;
}

export interface VkPhysicalDeviceProtectedMemoryFeatures {
  sType: VkStructureType;
  pNext: null;
  protectedMemory: number;
}


/** ## VkProtectedSubmitInfo ## */
interface VkProtectedSubmitInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  protectedSubmit?: number;
}

declare var VkProtectedSubmitInfo: {
  prototype: VkProtectedSubmitInfo;
  new(param?: VkProtectedSubmitInfoInitializer | null): VkProtectedSubmitInfo;
  sType: VkStructureType;
  pNext: null;
  protectedSubmit: number;
}

export interface VkProtectedSubmitInfo {
  sType: VkStructureType;
  pNext: null;
  protectedSubmit: number;
}


/** ## VkConditionalRenderingBeginInfoEXT ## */
interface VkConditionalRenderingBeginInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  buffer?: VkBuffer | null;
  offset?: number;
  flags?: VkConditionalRenderingFlagBitsEXT;
}

declare var VkConditionalRenderingBeginInfoEXT: {
  prototype: VkConditionalRenderingBeginInfoEXT;
  new(param?: VkConditionalRenderingBeginInfoEXTInitializer | null): VkConditionalRenderingBeginInfoEXT;
  sType: VkStructureType;
  pNext: null;
  buffer: VkBuffer | null;
  offset: number;
  flags: VkConditionalRenderingFlagBitsEXT;
}

export interface VkConditionalRenderingBeginInfoEXT {
  sType: VkStructureType;
  pNext: null;
  buffer: VkBuffer | null;
  offset: number;
  flags: VkConditionalRenderingFlagBitsEXT;
}


/** ## VkTextureLODGatherFormatPropertiesAMD ## */
interface VkTextureLODGatherFormatPropertiesAMDInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly supportsTextureGatherLODBiasAMD?: number;
}

declare var VkTextureLODGatherFormatPropertiesAMD: {
  prototype: VkTextureLODGatherFormatPropertiesAMD;
  new(param?: VkTextureLODGatherFormatPropertiesAMDInitializer | null): VkTextureLODGatherFormatPropertiesAMD;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly supportsTextureGatherLODBiasAMD: number;
}

export interface VkTextureLODGatherFormatPropertiesAMD {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly supportsTextureGatherLODBiasAMD: number;
}


/** ## VkSamplerYcbcrConversionImageFormatPropertiesKHR ## */
interface VkSamplerYcbcrConversionImageFormatPropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly combinedImageSamplerDescriptorCount?: number;
}

declare var VkSamplerYcbcrConversionImageFormatPropertiesKHR: {
  prototype: VkSamplerYcbcrConversionImageFormatPropertiesKHR;
  new(param?: VkSamplerYcbcrConversionImageFormatPropertiesKHRInitializer | null): VkSamplerYcbcrConversionImageFormatPropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly combinedImageSamplerDescriptorCount: number;
}

export interface VkSamplerYcbcrConversionImageFormatPropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly combinedImageSamplerDescriptorCount: number;
}


/** ## VkSamplerYcbcrConversionImageFormatProperties ## */
interface VkSamplerYcbcrConversionImageFormatPropertiesInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly combinedImageSamplerDescriptorCount?: number;
}

declare var VkSamplerYcbcrConversionImageFormatProperties: {
  prototype: VkSamplerYcbcrConversionImageFormatProperties;
  new(param?: VkSamplerYcbcrConversionImageFormatPropertiesInitializer | null): VkSamplerYcbcrConversionImageFormatProperties;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly combinedImageSamplerDescriptorCount: number;
}

export interface VkSamplerYcbcrConversionImageFormatProperties {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly combinedImageSamplerDescriptorCount: number;
}


/** ## VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR ## */
interface VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  samplerYcbcrConversion?: number;
}

declare var VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR: {
  prototype: VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;
  new(param?: VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHRInitializer | null): VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR;
  sType: VkStructureType;
  pNext: null;
  samplerYcbcrConversion: number;
}

export interface VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR {
  sType: VkStructureType;
  pNext: null;
  samplerYcbcrConversion: number;
}


/** ## VkPhysicalDeviceSamplerYcbcrConversionFeatures ## */
interface VkPhysicalDeviceSamplerYcbcrConversionFeaturesInitializer {
  sType?: VkStructureType;
  pNext?: null;
  samplerYcbcrConversion?: number;
}

declare var VkPhysicalDeviceSamplerYcbcrConversionFeatures: {
  prototype: VkPhysicalDeviceSamplerYcbcrConversionFeatures;
  new(param?: VkPhysicalDeviceSamplerYcbcrConversionFeaturesInitializer | null): VkPhysicalDeviceSamplerYcbcrConversionFeatures;
  sType: VkStructureType;
  pNext: null;
  samplerYcbcrConversion: number;
}

export interface VkPhysicalDeviceSamplerYcbcrConversionFeatures {
  sType: VkStructureType;
  pNext: null;
  samplerYcbcrConversion: number;
}


/** ## VkImagePlaneMemoryRequirementsInfoKHR ## */
interface VkImagePlaneMemoryRequirementsInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  planeAspect?: VkImageAspectFlagBits;
}

declare var VkImagePlaneMemoryRequirementsInfoKHR: {
  prototype: VkImagePlaneMemoryRequirementsInfoKHR;
  new(param?: VkImagePlaneMemoryRequirementsInfoKHRInitializer | null): VkImagePlaneMemoryRequirementsInfoKHR;
  sType: VkStructureType;
  pNext: null;
  planeAspect: VkImageAspectFlagBits;
}

export interface VkImagePlaneMemoryRequirementsInfoKHR {
  sType: VkStructureType;
  pNext: null;
  planeAspect: VkImageAspectFlagBits;
}


/** ## VkImagePlaneMemoryRequirementsInfo ## */
interface VkImagePlaneMemoryRequirementsInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  planeAspect?: VkImageAspectFlagBits;
}

declare var VkImagePlaneMemoryRequirementsInfo: {
  prototype: VkImagePlaneMemoryRequirementsInfo;
  new(param?: VkImagePlaneMemoryRequirementsInfoInitializer | null): VkImagePlaneMemoryRequirementsInfo;
  sType: VkStructureType;
  pNext: null;
  planeAspect: VkImageAspectFlagBits;
}

export interface VkImagePlaneMemoryRequirementsInfo {
  sType: VkStructureType;
  pNext: null;
  planeAspect: VkImageAspectFlagBits;
}


/** ## VkBindImagePlaneMemoryInfoKHR ## */
interface VkBindImagePlaneMemoryInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  planeAspect?: VkImageAspectFlagBits;
}

declare var VkBindImagePlaneMemoryInfoKHR: {
  prototype: VkBindImagePlaneMemoryInfoKHR;
  new(param?: VkBindImagePlaneMemoryInfoKHRInitializer | null): VkBindImagePlaneMemoryInfoKHR;
  sType: VkStructureType;
  pNext: null;
  planeAspect: VkImageAspectFlagBits;
}

export interface VkBindImagePlaneMemoryInfoKHR {
  sType: VkStructureType;
  pNext: null;
  planeAspect: VkImageAspectFlagBits;
}


/** ## VkBindImagePlaneMemoryInfo ## */
interface VkBindImagePlaneMemoryInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  planeAspect?: VkImageAspectFlagBits;
}

declare var VkBindImagePlaneMemoryInfo: {
  prototype: VkBindImagePlaneMemoryInfo;
  new(param?: VkBindImagePlaneMemoryInfoInitializer | null): VkBindImagePlaneMemoryInfo;
  sType: VkStructureType;
  pNext: null;
  planeAspect: VkImageAspectFlagBits;
}

export interface VkBindImagePlaneMemoryInfo {
  sType: VkStructureType;
  pNext: null;
  planeAspect: VkImageAspectFlagBits;
}


/** ## VkSamplerYcbcrConversionCreateInfoKHR ## */
interface VkSamplerYcbcrConversionCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  format?: VkFormat;
  ycbcrModel?: VkSamplerYcbcrModelConversion;
  ycbcrRange?: VkSamplerYcbcrRange;
  components?: VkComponentMapping | null;
  xChromaOffset?: VkChromaLocation;
  yChromaOffset?: VkChromaLocation;
  chromaFilter?: VkFilter;
  forceExplicitReconstruction?: number;
}

declare var VkSamplerYcbcrConversionCreateInfoKHR: {
  prototype: VkSamplerYcbcrConversionCreateInfoKHR;
  new(param?: VkSamplerYcbcrConversionCreateInfoKHRInitializer | null): VkSamplerYcbcrConversionCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  format: VkFormat;
  ycbcrModel: VkSamplerYcbcrModelConversion;
  ycbcrRange: VkSamplerYcbcrRange;
  components: VkComponentMapping | null;
  xChromaOffset: VkChromaLocation;
  yChromaOffset: VkChromaLocation;
  chromaFilter: VkFilter;
  forceExplicitReconstruction: number;
}

export interface VkSamplerYcbcrConversionCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  format: VkFormat;
  ycbcrModel: VkSamplerYcbcrModelConversion;
  ycbcrRange: VkSamplerYcbcrRange;
  components: VkComponentMapping | null;
  xChromaOffset: VkChromaLocation;
  yChromaOffset: VkChromaLocation;
  chromaFilter: VkFilter;
  forceExplicitReconstruction: number;
}


/** ## VkSamplerYcbcrConversionCreateInfo ## */
interface VkSamplerYcbcrConversionCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  format?: VkFormat;
  ycbcrModel?: VkSamplerYcbcrModelConversion;
  ycbcrRange?: VkSamplerYcbcrRange;
  components?: VkComponentMapping | null;
  xChromaOffset?: VkChromaLocation;
  yChromaOffset?: VkChromaLocation;
  chromaFilter?: VkFilter;
  forceExplicitReconstruction?: number;
}

declare var VkSamplerYcbcrConversionCreateInfo: {
  prototype: VkSamplerYcbcrConversionCreateInfo;
  new(param?: VkSamplerYcbcrConversionCreateInfoInitializer | null): VkSamplerYcbcrConversionCreateInfo;
  sType: VkStructureType;
  pNext: null;
  format: VkFormat;
  ycbcrModel: VkSamplerYcbcrModelConversion;
  ycbcrRange: VkSamplerYcbcrRange;
  components: VkComponentMapping | null;
  xChromaOffset: VkChromaLocation;
  yChromaOffset: VkChromaLocation;
  chromaFilter: VkFilter;
  forceExplicitReconstruction: number;
}

export interface VkSamplerYcbcrConversionCreateInfo {
  sType: VkStructureType;
  pNext: null;
  format: VkFormat;
  ycbcrModel: VkSamplerYcbcrModelConversion;
  ycbcrRange: VkSamplerYcbcrRange;
  components: VkComponentMapping | null;
  xChromaOffset: VkChromaLocation;
  yChromaOffset: VkChromaLocation;
  chromaFilter: VkFilter;
  forceExplicitReconstruction: number;
}


/** ## VkSamplerYcbcrConversionInfoKHR ## */
interface VkSamplerYcbcrConversionInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  conversion?: VkSamplerYcbcrConversion | null;
}

declare var VkSamplerYcbcrConversionInfoKHR: {
  prototype: VkSamplerYcbcrConversionInfoKHR;
  new(param?: VkSamplerYcbcrConversionInfoKHRInitializer | null): VkSamplerYcbcrConversionInfoKHR;
  sType: VkStructureType;
  pNext: null;
  conversion: VkSamplerYcbcrConversion | null;
}

export interface VkSamplerYcbcrConversionInfoKHR {
  sType: VkStructureType;
  pNext: null;
  conversion: VkSamplerYcbcrConversion | null;
}


/** ## VkSamplerYcbcrConversionInfo ## */
interface VkSamplerYcbcrConversionInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  conversion?: VkSamplerYcbcrConversion | null;
}

declare var VkSamplerYcbcrConversionInfo: {
  prototype: VkSamplerYcbcrConversionInfo;
  new(param?: VkSamplerYcbcrConversionInfoInitializer | null): VkSamplerYcbcrConversionInfo;
  sType: VkStructureType;
  pNext: null;
  conversion: VkSamplerYcbcrConversion | null;
}

export interface VkSamplerYcbcrConversionInfo {
  sType: VkStructureType;
  pNext: null;
  conversion: VkSamplerYcbcrConversion | null;
}


/** ## VkPipelineTessellationDomainOriginStateCreateInfoKHR ## */
interface VkPipelineTessellationDomainOriginStateCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  domainOrigin?: VkTessellationDomainOrigin;
}

declare var VkPipelineTessellationDomainOriginStateCreateInfoKHR: {
  prototype: VkPipelineTessellationDomainOriginStateCreateInfoKHR;
  new(param?: VkPipelineTessellationDomainOriginStateCreateInfoKHRInitializer | null): VkPipelineTessellationDomainOriginStateCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  domainOrigin: VkTessellationDomainOrigin;
}

export interface VkPipelineTessellationDomainOriginStateCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  domainOrigin: VkTessellationDomainOrigin;
}


/** ## VkPipelineTessellationDomainOriginStateCreateInfo ## */
interface VkPipelineTessellationDomainOriginStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  domainOrigin?: VkTessellationDomainOrigin;
}

declare var VkPipelineTessellationDomainOriginStateCreateInfo: {
  prototype: VkPipelineTessellationDomainOriginStateCreateInfo;
  new(param?: VkPipelineTessellationDomainOriginStateCreateInfoInitializer | null): VkPipelineTessellationDomainOriginStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  domainOrigin: VkTessellationDomainOrigin;
}

export interface VkPipelineTessellationDomainOriginStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  domainOrigin: VkTessellationDomainOrigin;
}


/** ## VkImageViewUsageCreateInfoKHR ## */
interface VkImageViewUsageCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  usage?: VkImageUsageFlagBits;
}

declare var VkImageViewUsageCreateInfoKHR: {
  prototype: VkImageViewUsageCreateInfoKHR;
  new(param?: VkImageViewUsageCreateInfoKHRInitializer | null): VkImageViewUsageCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  usage: VkImageUsageFlagBits;
}

export interface VkImageViewUsageCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  usage: VkImageUsageFlagBits;
}


/** ## VkImageViewUsageCreateInfo ## */
interface VkImageViewUsageCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  usage?: VkImageUsageFlagBits;
}

declare var VkImageViewUsageCreateInfo: {
  prototype: VkImageViewUsageCreateInfo;
  new(param?: VkImageViewUsageCreateInfoInitializer | null): VkImageViewUsageCreateInfo;
  sType: VkStructureType;
  pNext: null;
  usage: VkImageUsageFlagBits;
}

export interface VkImageViewUsageCreateInfo {
  sType: VkStructureType;
  pNext: null;
  usage: VkImageUsageFlagBits;
}


/** ## VkMemoryDedicatedAllocateInfoKHR ## */
interface VkMemoryDedicatedAllocateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  image?: VkImage | null;
  buffer?: VkBuffer | null;
}

declare var VkMemoryDedicatedAllocateInfoKHR: {
  prototype: VkMemoryDedicatedAllocateInfoKHR;
  new(param?: VkMemoryDedicatedAllocateInfoKHRInitializer | null): VkMemoryDedicatedAllocateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
  buffer: VkBuffer | null;
}

export interface VkMemoryDedicatedAllocateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
  buffer: VkBuffer | null;
}


/** ## VkMemoryDedicatedAllocateInfo ## */
interface VkMemoryDedicatedAllocateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  image?: VkImage | null;
  buffer?: VkBuffer | null;
}

declare var VkMemoryDedicatedAllocateInfo: {
  prototype: VkMemoryDedicatedAllocateInfo;
  new(param?: VkMemoryDedicatedAllocateInfoInitializer | null): VkMemoryDedicatedAllocateInfo;
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
  buffer: VkBuffer | null;
}

export interface VkMemoryDedicatedAllocateInfo {
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
  buffer: VkBuffer | null;
}


/** ## VkMemoryDedicatedRequirementsKHR ## */
interface VkMemoryDedicatedRequirementsKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly prefersDedicatedAllocation?: number;
  readonly requiresDedicatedAllocation?: number;
}

declare var VkMemoryDedicatedRequirementsKHR: {
  prototype: VkMemoryDedicatedRequirementsKHR;
  new(param?: VkMemoryDedicatedRequirementsKHRInitializer | null): VkMemoryDedicatedRequirementsKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly prefersDedicatedAllocation: number;
  readonly requiresDedicatedAllocation: number;
}

export interface VkMemoryDedicatedRequirementsKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly prefersDedicatedAllocation: number;
  readonly requiresDedicatedAllocation: number;
}


/** ## VkMemoryDedicatedRequirements ## */
interface VkMemoryDedicatedRequirementsInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly prefersDedicatedAllocation?: number;
  readonly requiresDedicatedAllocation?: number;
}

declare var VkMemoryDedicatedRequirements: {
  prototype: VkMemoryDedicatedRequirements;
  new(param?: VkMemoryDedicatedRequirementsInitializer | null): VkMemoryDedicatedRequirements;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly prefersDedicatedAllocation: number;
  readonly requiresDedicatedAllocation: number;
}

export interface VkMemoryDedicatedRequirements {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly prefersDedicatedAllocation: number;
  readonly requiresDedicatedAllocation: number;
}


/** ## VkPhysicalDevicePointClippingPropertiesKHR ## */
interface VkPhysicalDevicePointClippingPropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly pointClippingBehavior?: VkPointClippingBehavior;
}

declare var VkPhysicalDevicePointClippingPropertiesKHR: {
  prototype: VkPhysicalDevicePointClippingPropertiesKHR;
  new(param?: VkPhysicalDevicePointClippingPropertiesKHRInitializer | null): VkPhysicalDevicePointClippingPropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly pointClippingBehavior: VkPointClippingBehavior;
}

export interface VkPhysicalDevicePointClippingPropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly pointClippingBehavior: VkPointClippingBehavior;
}


/** ## VkPhysicalDevicePointClippingProperties ## */
interface VkPhysicalDevicePointClippingPropertiesInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly pointClippingBehavior?: VkPointClippingBehavior;
}

declare var VkPhysicalDevicePointClippingProperties: {
  prototype: VkPhysicalDevicePointClippingProperties;
  new(param?: VkPhysicalDevicePointClippingPropertiesInitializer | null): VkPhysicalDevicePointClippingProperties;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly pointClippingBehavior: VkPointClippingBehavior;
}

export interface VkPhysicalDevicePointClippingProperties {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly pointClippingBehavior: VkPointClippingBehavior;
}


/** ## VkSparseImageMemoryRequirements2KHR ## */
interface VkSparseImageMemoryRequirements2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly memoryRequirements?: VkSparseImageMemoryRequirements | null;
}

declare var VkSparseImageMemoryRequirements2KHR: {
  prototype: VkSparseImageMemoryRequirements2KHR;
  new(param?: VkSparseImageMemoryRequirements2KHRInitializer | null): VkSparseImageMemoryRequirements2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryRequirements: VkSparseImageMemoryRequirements | null;
}

export interface VkSparseImageMemoryRequirements2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryRequirements: VkSparseImageMemoryRequirements | null;
}


/** ## VkSparseImageMemoryRequirements2 ## */
interface VkSparseImageMemoryRequirements2Initializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly memoryRequirements?: VkSparseImageMemoryRequirements | null;
}

declare var VkSparseImageMemoryRequirements2: {
  prototype: VkSparseImageMemoryRequirements2;
  new(param?: VkSparseImageMemoryRequirements2Initializer | null): VkSparseImageMemoryRequirements2;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryRequirements: VkSparseImageMemoryRequirements | null;
}

export interface VkSparseImageMemoryRequirements2 {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryRequirements: VkSparseImageMemoryRequirements | null;
}


/** ## VkMemoryRequirements2KHR ## */
interface VkMemoryRequirements2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly memoryRequirements?: VkMemoryRequirements | null;
}

declare var VkMemoryRequirements2KHR: {
  prototype: VkMemoryRequirements2KHR;
  new(param?: VkMemoryRequirements2KHRInitializer | null): VkMemoryRequirements2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryRequirements: VkMemoryRequirements | null;
}

export interface VkMemoryRequirements2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryRequirements: VkMemoryRequirements | null;
}


/** ## VkMemoryRequirements2 ## */
interface VkMemoryRequirements2Initializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly memoryRequirements?: VkMemoryRequirements | null;
}

declare var VkMemoryRequirements2: {
  prototype: VkMemoryRequirements2;
  new(param?: VkMemoryRequirements2Initializer | null): VkMemoryRequirements2;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryRequirements: VkMemoryRequirements | null;
}

export interface VkMemoryRequirements2 {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryRequirements: VkMemoryRequirements | null;
}


/** ## VkImageSparseMemoryRequirementsInfo2KHR ## */
interface VkImageSparseMemoryRequirementsInfo2KHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  image?: VkImage | null;
}

declare var VkImageSparseMemoryRequirementsInfo2KHR: {
  prototype: VkImageSparseMemoryRequirementsInfo2KHR;
  new(param?: VkImageSparseMemoryRequirementsInfo2KHRInitializer | null): VkImageSparseMemoryRequirementsInfo2KHR;
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
}

export interface VkImageSparseMemoryRequirementsInfo2KHR {
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
}


/** ## VkImageSparseMemoryRequirementsInfo2 ## */
interface VkImageSparseMemoryRequirementsInfo2Initializer {
  sType?: VkStructureType;
  pNext?: null;
  image?: VkImage | null;
}

declare var VkImageSparseMemoryRequirementsInfo2: {
  prototype: VkImageSparseMemoryRequirementsInfo2;
  new(param?: VkImageSparseMemoryRequirementsInfo2Initializer | null): VkImageSparseMemoryRequirementsInfo2;
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
}

export interface VkImageSparseMemoryRequirementsInfo2 {
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
}


/** ## VkImageMemoryRequirementsInfo2KHR ## */
interface VkImageMemoryRequirementsInfo2KHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  image?: VkImage | null;
}

declare var VkImageMemoryRequirementsInfo2KHR: {
  prototype: VkImageMemoryRequirementsInfo2KHR;
  new(param?: VkImageMemoryRequirementsInfo2KHRInitializer | null): VkImageMemoryRequirementsInfo2KHR;
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
}

export interface VkImageMemoryRequirementsInfo2KHR {
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
}


/** ## VkImageMemoryRequirementsInfo2 ## */
interface VkImageMemoryRequirementsInfo2Initializer {
  sType?: VkStructureType;
  pNext?: null;
  image?: VkImage | null;
}

declare var VkImageMemoryRequirementsInfo2: {
  prototype: VkImageMemoryRequirementsInfo2;
  new(param?: VkImageMemoryRequirementsInfo2Initializer | null): VkImageMemoryRequirementsInfo2;
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
}

export interface VkImageMemoryRequirementsInfo2 {
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
}


/** ## VkBufferMemoryRequirementsInfo2KHR ## */
interface VkBufferMemoryRequirementsInfo2KHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  buffer?: VkBuffer | null;
}

declare var VkBufferMemoryRequirementsInfo2KHR: {
  prototype: VkBufferMemoryRequirementsInfo2KHR;
  new(param?: VkBufferMemoryRequirementsInfo2KHRInitializer | null): VkBufferMemoryRequirementsInfo2KHR;
  sType: VkStructureType;
  pNext: null;
  buffer: VkBuffer | null;
}

export interface VkBufferMemoryRequirementsInfo2KHR {
  sType: VkStructureType;
  pNext: null;
  buffer: VkBuffer | null;
}


/** ## VkBufferMemoryRequirementsInfo2 ## */
interface VkBufferMemoryRequirementsInfo2Initializer {
  sType?: VkStructureType;
  pNext?: null;
  buffer?: VkBuffer | null;
}

declare var VkBufferMemoryRequirementsInfo2: {
  prototype: VkBufferMemoryRequirementsInfo2;
  new(param?: VkBufferMemoryRequirementsInfo2Initializer | null): VkBufferMemoryRequirementsInfo2;
  sType: VkStructureType;
  pNext: null;
  buffer: VkBuffer | null;
}

export interface VkBufferMemoryRequirementsInfo2 {
  sType: VkStructureType;
  pNext: null;
  buffer: VkBuffer | null;
}


/** ## VkPhysicalDeviceSubgroupProperties ## */
interface VkPhysicalDeviceSubgroupPropertiesInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly subgroupSize?: number;
  readonly supportedStages?: VkShaderStageFlagBits;
  readonly supportedOperations?: VkSubgroupFeatureFlagBits;
  readonly quadOperationsInAllStages?: number;
}

declare var VkPhysicalDeviceSubgroupProperties: {
  prototype: VkPhysicalDeviceSubgroupProperties;
  new(param?: VkPhysicalDeviceSubgroupPropertiesInitializer | null): VkPhysicalDeviceSubgroupProperties;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly subgroupSize: number;
  readonly supportedStages: VkShaderStageFlagBits;
  readonly supportedOperations: VkSubgroupFeatureFlagBits;
  readonly quadOperationsInAllStages: number;
}

export interface VkPhysicalDeviceSubgroupProperties {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly subgroupSize: number;
  readonly supportedStages: VkShaderStageFlagBits;
  readonly supportedOperations: VkSubgroupFeatureFlagBits;
  readonly quadOperationsInAllStages: number;
}


/** ## VkPhysicalDevice16BitStorageFeaturesKHR ## */
interface VkPhysicalDevice16BitStorageFeaturesKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  storageBuffer16BitAccess?: number;
  uniformAndStorageBuffer16BitAccess?: number;
  storagePushConstant16?: number;
  storageInputOutput16?: number;
}

declare var VkPhysicalDevice16BitStorageFeaturesKHR: {
  prototype: VkPhysicalDevice16BitStorageFeaturesKHR;
  new(param?: VkPhysicalDevice16BitStorageFeaturesKHRInitializer | null): VkPhysicalDevice16BitStorageFeaturesKHR;
  sType: VkStructureType;
  pNext: null;
  storageBuffer16BitAccess: number;
  uniformAndStorageBuffer16BitAccess: number;
  storagePushConstant16: number;
  storageInputOutput16: number;
}

export interface VkPhysicalDevice16BitStorageFeaturesKHR {
  sType: VkStructureType;
  pNext: null;
  storageBuffer16BitAccess: number;
  uniformAndStorageBuffer16BitAccess: number;
  storagePushConstant16: number;
  storageInputOutput16: number;
}


/** ## VkPhysicalDevice16BitStorageFeatures ## */
interface VkPhysicalDevice16BitStorageFeaturesInitializer {
  sType?: VkStructureType;
  pNext?: null;
  storageBuffer16BitAccess?: number;
  uniformAndStorageBuffer16BitAccess?: number;
  storagePushConstant16?: number;
  storageInputOutput16?: number;
}

declare var VkPhysicalDevice16BitStorageFeatures: {
  prototype: VkPhysicalDevice16BitStorageFeatures;
  new(param?: VkPhysicalDevice16BitStorageFeaturesInitializer | null): VkPhysicalDevice16BitStorageFeatures;
  sType: VkStructureType;
  pNext: null;
  storageBuffer16BitAccess: number;
  uniformAndStorageBuffer16BitAccess: number;
  storagePushConstant16: number;
  storageInputOutput16: number;
}

export interface VkPhysicalDevice16BitStorageFeatures {
  sType: VkStructureType;
  pNext: null;
  storageBuffer16BitAccess: number;
  uniformAndStorageBuffer16BitAccess: number;
  storagePushConstant16: number;
  storageInputOutput16: number;
}


/** ## VkSharedPresentSurfaceCapabilitiesKHR ## */
interface VkSharedPresentSurfaceCapabilitiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly sharedPresentSupportedUsageFlags?: VkImageUsageFlagBits;
}

declare var VkSharedPresentSurfaceCapabilitiesKHR: {
  prototype: VkSharedPresentSurfaceCapabilitiesKHR;
  new(param?: VkSharedPresentSurfaceCapabilitiesKHRInitializer | null): VkSharedPresentSurfaceCapabilitiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly sharedPresentSupportedUsageFlags: VkImageUsageFlagBits;
}

export interface VkSharedPresentSurfaceCapabilitiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly sharedPresentSupportedUsageFlags: VkImageUsageFlagBits;
}


/** ## VkDisplayPlaneCapabilities2KHR ## */
interface VkDisplayPlaneCapabilities2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly capabilities?: VkDisplayPlaneCapabilitiesKHR | null;
}

declare var VkDisplayPlaneCapabilities2KHR: {
  prototype: VkDisplayPlaneCapabilities2KHR;
  new(param?: VkDisplayPlaneCapabilities2KHRInitializer | null): VkDisplayPlaneCapabilities2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly capabilities: VkDisplayPlaneCapabilitiesKHR | null;
}

export interface VkDisplayPlaneCapabilities2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly capabilities: VkDisplayPlaneCapabilitiesKHR | null;
}


/** ## VkDisplayPlaneInfo2KHR ## */
interface VkDisplayPlaneInfo2KHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  mode?: VkDisplayModeKHR | null;
  planeIndex?: number;
}

declare var VkDisplayPlaneInfo2KHR: {
  prototype: VkDisplayPlaneInfo2KHR;
  new(param?: VkDisplayPlaneInfo2KHRInitializer | null): VkDisplayPlaneInfo2KHR;
  sType: VkStructureType;
  pNext: null;
  mode: VkDisplayModeKHR | null;
  planeIndex: number;
}

export interface VkDisplayPlaneInfo2KHR {
  sType: VkStructureType;
  pNext: null;
  mode: VkDisplayModeKHR | null;
  planeIndex: number;
}


/** ## VkDisplayModeProperties2KHR ## */
interface VkDisplayModeProperties2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly displayModeProperties?: VkDisplayModePropertiesKHR | null;
}

declare var VkDisplayModeProperties2KHR: {
  prototype: VkDisplayModeProperties2KHR;
  new(param?: VkDisplayModeProperties2KHRInitializer | null): VkDisplayModeProperties2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly displayModeProperties: VkDisplayModePropertiesKHR | null;
}

export interface VkDisplayModeProperties2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly displayModeProperties: VkDisplayModePropertiesKHR | null;
}


/** ## VkDisplayPlaneProperties2KHR ## */
interface VkDisplayPlaneProperties2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly displayPlaneProperties?: VkDisplayPlanePropertiesKHR | null;
}

declare var VkDisplayPlaneProperties2KHR: {
  prototype: VkDisplayPlaneProperties2KHR;
  new(param?: VkDisplayPlaneProperties2KHRInitializer | null): VkDisplayPlaneProperties2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly displayPlaneProperties: VkDisplayPlanePropertiesKHR | null;
}

export interface VkDisplayPlaneProperties2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly displayPlaneProperties: VkDisplayPlanePropertiesKHR | null;
}


/** ## VkDisplayProperties2KHR ## */
interface VkDisplayProperties2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly displayProperties?: VkDisplayPropertiesKHR | null;
}

declare var VkDisplayProperties2KHR: {
  prototype: VkDisplayProperties2KHR;
  new(param?: VkDisplayProperties2KHRInitializer | null): VkDisplayProperties2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly displayProperties: VkDisplayPropertiesKHR | null;
}

export interface VkDisplayProperties2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly displayProperties: VkDisplayPropertiesKHR | null;
}


/** ## VkSurfaceFormat2KHR ## */
interface VkSurfaceFormat2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly surfaceFormat?: VkSurfaceFormatKHR | null;
}

declare var VkSurfaceFormat2KHR: {
  prototype: VkSurfaceFormat2KHR;
  new(param?: VkSurfaceFormat2KHRInitializer | null): VkSurfaceFormat2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly surfaceFormat: VkSurfaceFormatKHR | null;
}

export interface VkSurfaceFormat2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly surfaceFormat: VkSurfaceFormatKHR | null;
}


/** ## VkSurfaceCapabilities2KHR ## */
interface VkSurfaceCapabilities2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly surfaceCapabilities?: VkSurfaceCapabilitiesKHR | null;
}

declare var VkSurfaceCapabilities2KHR: {
  prototype: VkSurfaceCapabilities2KHR;
  new(param?: VkSurfaceCapabilities2KHRInitializer | null): VkSurfaceCapabilities2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly surfaceCapabilities: VkSurfaceCapabilitiesKHR | null;
}

export interface VkSurfaceCapabilities2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly surfaceCapabilities: VkSurfaceCapabilitiesKHR | null;
}


/** ## VkPhysicalDeviceSurfaceInfo2KHR ## */
interface VkPhysicalDeviceSurfaceInfo2KHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  surface?: VkSurfaceKHR | null;
}

declare var VkPhysicalDeviceSurfaceInfo2KHR: {
  prototype: VkPhysicalDeviceSurfaceInfo2KHR;
  new(param?: VkPhysicalDeviceSurfaceInfo2KHRInitializer | null): VkPhysicalDeviceSurfaceInfo2KHR;
  sType: VkStructureType;
  pNext: null;
  surface: VkSurfaceKHR | null;
}

export interface VkPhysicalDeviceSurfaceInfo2KHR {
  sType: VkStructureType;
  pNext: null;
  surface: VkSurfaceKHR | null;
}


/** ## VkRenderPassInputAttachmentAspectCreateInfoKHR ## */
interface VkRenderPassInputAttachmentAspectCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  aspectReferenceCount?: number;
  pAspectReferences?: VkInputAttachmentAspectReference[] | null;
}

declare var VkRenderPassInputAttachmentAspectCreateInfoKHR: {
  prototype: VkRenderPassInputAttachmentAspectCreateInfoKHR;
  new(param?: VkRenderPassInputAttachmentAspectCreateInfoKHRInitializer | null): VkRenderPassInputAttachmentAspectCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  aspectReferenceCount: number;
  pAspectReferences: VkInputAttachmentAspectReference[] | null;
}

export interface VkRenderPassInputAttachmentAspectCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  aspectReferenceCount: number;
  pAspectReferences: VkInputAttachmentAspectReference[] | null;
}


/** ## VkRenderPassInputAttachmentAspectCreateInfo ## */
interface VkRenderPassInputAttachmentAspectCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  aspectReferenceCount?: number;
  pAspectReferences?: VkInputAttachmentAspectReference[] | null;
}

declare var VkRenderPassInputAttachmentAspectCreateInfo: {
  prototype: VkRenderPassInputAttachmentAspectCreateInfo;
  new(param?: VkRenderPassInputAttachmentAspectCreateInfoInitializer | null): VkRenderPassInputAttachmentAspectCreateInfo;
  sType: VkStructureType;
  pNext: null;
  aspectReferenceCount: number;
  pAspectReferences: VkInputAttachmentAspectReference[] | null;
}

export interface VkRenderPassInputAttachmentAspectCreateInfo {
  sType: VkStructureType;
  pNext: null;
  aspectReferenceCount: number;
  pAspectReferences: VkInputAttachmentAspectReference[] | null;
}


/** ## VkInputAttachmentAspectReferenceKHR ## */
interface VkInputAttachmentAspectReferenceKHRInitializer {
  subpass?: number;
  inputAttachmentIndex?: number;
  aspectMask?: VkImageAspectFlagBits;
}

declare var VkInputAttachmentAspectReferenceKHR: {
  prototype: VkInputAttachmentAspectReferenceKHR;
  new(param?: VkInputAttachmentAspectReferenceKHRInitializer | null): VkInputAttachmentAspectReferenceKHR;
  subpass: number;
  inputAttachmentIndex: number;
  aspectMask: VkImageAspectFlagBits;
}

export interface VkInputAttachmentAspectReferenceKHR {
  subpass: number;
  inputAttachmentIndex: number;
  aspectMask: VkImageAspectFlagBits;
}


/** ## VkInputAttachmentAspectReference ## */
interface VkInputAttachmentAspectReferenceInitializer {
  subpass?: number;
  inputAttachmentIndex?: number;
  aspectMask?: VkImageAspectFlagBits;
}

declare var VkInputAttachmentAspectReference: {
  prototype: VkInputAttachmentAspectReference;
  new(param?: VkInputAttachmentAspectReferenceInitializer | null): VkInputAttachmentAspectReference;
  subpass: number;
  inputAttachmentIndex: number;
  aspectMask: VkImageAspectFlagBits;
}

export interface VkInputAttachmentAspectReference {
  subpass: number;
  inputAttachmentIndex: number;
  aspectMask: VkImageAspectFlagBits;
}


/** ## VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX ## */
interface VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly perViewPositionAllComponents?: number;
}

declare var VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX: {
  prototype: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
  new(param?: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVXInitializer | null): VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly perViewPositionAllComponents: number;
}

export interface VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly perViewPositionAllComponents: number;
}


/** ## VkPipelineDiscardRectangleStateCreateInfoEXT ## */
interface VkPipelineDiscardRectangleStateCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  discardRectangleMode?: VkDiscardRectangleModeEXT;
  discardRectangleCount?: number;
  pDiscardRectangles?: VkRect2D[] | null;
}

declare var VkPipelineDiscardRectangleStateCreateInfoEXT: {
  prototype: VkPipelineDiscardRectangleStateCreateInfoEXT;
  new(param?: VkPipelineDiscardRectangleStateCreateInfoEXTInitializer | null): VkPipelineDiscardRectangleStateCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  discardRectangleMode: VkDiscardRectangleModeEXT;
  discardRectangleCount: number;
  pDiscardRectangles: VkRect2D[] | null;
}

export interface VkPipelineDiscardRectangleStateCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  discardRectangleMode: VkDiscardRectangleModeEXT;
  discardRectangleCount: number;
  pDiscardRectangles: VkRect2D[] | null;
}


/** ## VkPhysicalDeviceDiscardRectanglePropertiesEXT ## */
interface VkPhysicalDeviceDiscardRectanglePropertiesEXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly maxDiscardRectangles?: number;
}

declare var VkPhysicalDeviceDiscardRectanglePropertiesEXT: {
  prototype: VkPhysicalDeviceDiscardRectanglePropertiesEXT;
  new(param?: VkPhysicalDeviceDiscardRectanglePropertiesEXTInitializer | null): VkPhysicalDeviceDiscardRectanglePropertiesEXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxDiscardRectangles: number;
}

export interface VkPhysicalDeviceDiscardRectanglePropertiesEXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxDiscardRectangles: number;
}


/** ## VkPipelineViewportSwizzleStateCreateInfoNV ## */
interface VkPipelineViewportSwizzleStateCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  viewportCount?: number;
  pViewportSwizzles?: VkViewportSwizzleNV[] | null;
}

declare var VkPipelineViewportSwizzleStateCreateInfoNV: {
  prototype: VkPipelineViewportSwizzleStateCreateInfoNV;
  new(param?: VkPipelineViewportSwizzleStateCreateInfoNVInitializer | null): VkPipelineViewportSwizzleStateCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  viewportCount: number;
  pViewportSwizzles: VkViewportSwizzleNV[] | null;
}

export interface VkPipelineViewportSwizzleStateCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  viewportCount: number;
  pViewportSwizzles: VkViewportSwizzleNV[] | null;
}


/** ## VkViewportSwizzleNV ## */
interface VkViewportSwizzleNVInitializer {
  x?: VkViewportCoordinateSwizzleNV;
  y?: VkViewportCoordinateSwizzleNV;
  z?: VkViewportCoordinateSwizzleNV;
  w?: VkViewportCoordinateSwizzleNV;
}

declare var VkViewportSwizzleNV: {
  prototype: VkViewportSwizzleNV;
  new(param?: VkViewportSwizzleNVInitializer | null): VkViewportSwizzleNV;
  x: VkViewportCoordinateSwizzleNV;
  y: VkViewportCoordinateSwizzleNV;
  z: VkViewportCoordinateSwizzleNV;
  w: VkViewportCoordinateSwizzleNV;
}

export interface VkViewportSwizzleNV {
  x: VkViewportCoordinateSwizzleNV;
  y: VkViewportCoordinateSwizzleNV;
  z: VkViewportCoordinateSwizzleNV;
  w: VkViewportCoordinateSwizzleNV;
}


/** ## VkPipelineViewportWScalingStateCreateInfoNV ## */
interface VkPipelineViewportWScalingStateCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  viewportWScalingEnable?: number;
  viewportCount?: number;
  pViewportWScalings?: VkViewportWScalingNV[] | null;
}

declare var VkPipelineViewportWScalingStateCreateInfoNV: {
  prototype: VkPipelineViewportWScalingStateCreateInfoNV;
  new(param?: VkPipelineViewportWScalingStateCreateInfoNVInitializer | null): VkPipelineViewportWScalingStateCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  viewportWScalingEnable: number;
  viewportCount: number;
  pViewportWScalings: VkViewportWScalingNV[] | null;
}

export interface VkPipelineViewportWScalingStateCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  viewportWScalingEnable: number;
  viewportCount: number;
  pViewportWScalings: VkViewportWScalingNV[] | null;
}


/** ## VkViewportWScalingNV ## */
interface VkViewportWScalingNVInitializer {
  xcoeff?: number;
  ycoeff?: number;
}

declare var VkViewportWScalingNV: {
  prototype: VkViewportWScalingNV;
  new(param?: VkViewportWScalingNVInitializer | null): VkViewportWScalingNV;
  xcoeff: number;
  ycoeff: number;
}

export interface VkViewportWScalingNV {
  xcoeff: number;
  ycoeff: number;
}


/** ## VkMacOSSurfaceCreateInfoMVK ## */
interface VkMacOSSurfaceCreateInfoMVKInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  pView?: ArrayBuffer | null;
}

declare var VkMacOSSurfaceCreateInfoMVK: {
  prototype: VkMacOSSurfaceCreateInfoMVK;
  new(param?: VkMacOSSurfaceCreateInfoMVKInitializer | null): VkMacOSSurfaceCreateInfoMVK;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  pView: ArrayBuffer | null;
}

export interface VkMacOSSurfaceCreateInfoMVK {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  pView: ArrayBuffer | null;
}


/** ## VkPresentTimeGOOGLE ## */
interface VkPresentTimeGOOGLEInitializer {
  presentID?: number;
  desiredPresentTime?: number;
}

declare var VkPresentTimeGOOGLE: {
  prototype: VkPresentTimeGOOGLE;
  new(param?: VkPresentTimeGOOGLEInitializer | null): VkPresentTimeGOOGLE;
  presentID: number;
  desiredPresentTime: number;
}

export interface VkPresentTimeGOOGLE {
  presentID: number;
  desiredPresentTime: number;
}


/** ## VkPresentTimesInfoGOOGLE ## */
interface VkPresentTimesInfoGOOGLEInitializer {
  sType?: VkStructureType;
  pNext?: null;
  swapchainCount?: number;
  pTimes?: VkPresentTimeGOOGLE[] | null;
}

declare var VkPresentTimesInfoGOOGLE: {
  prototype: VkPresentTimesInfoGOOGLE;
  new(param?: VkPresentTimesInfoGOOGLEInitializer | null): VkPresentTimesInfoGOOGLE;
  sType: VkStructureType;
  pNext: null;
  swapchainCount: number;
  pTimes: VkPresentTimeGOOGLE[] | null;
}

export interface VkPresentTimesInfoGOOGLE {
  sType: VkStructureType;
  pNext: null;
  swapchainCount: number;
  pTimes: VkPresentTimeGOOGLE[] | null;
}


/** ## VkPastPresentationTimingGOOGLE ## */
interface VkPastPresentationTimingGOOGLEInitializer {
  readonly presentID?: number;
  readonly desiredPresentTime?: number;
  readonly actualPresentTime?: number;
  readonly earliestPresentTime?: number;
  readonly presentMargin?: number;
}

declare var VkPastPresentationTimingGOOGLE: {
  prototype: VkPastPresentationTimingGOOGLE;
  new(param?: VkPastPresentationTimingGOOGLEInitializer | null): VkPastPresentationTimingGOOGLE;
  readonly presentID: number;
  readonly desiredPresentTime: number;
  readonly actualPresentTime: number;
  readonly earliestPresentTime: number;
  readonly presentMargin: number;
}

export interface VkPastPresentationTimingGOOGLE {
  readonly presentID: number;
  readonly desiredPresentTime: number;
  readonly actualPresentTime: number;
  readonly earliestPresentTime: number;
  readonly presentMargin: number;
}


/** ## VkRefreshCycleDurationGOOGLE ## */
interface VkRefreshCycleDurationGOOGLEInitializer {
  readonly refreshDuration?: number;
}

declare var VkRefreshCycleDurationGOOGLE: {
  prototype: VkRefreshCycleDurationGOOGLE;
  new(param?: VkRefreshCycleDurationGOOGLEInitializer | null): VkRefreshCycleDurationGOOGLE;
  readonly refreshDuration: number;
}

export interface VkRefreshCycleDurationGOOGLE {
  readonly refreshDuration: number;
}


/** ## VkHdrMetadataEXT ## */
interface VkHdrMetadataEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  displayPrimaryRed?: VkXYColorEXT | null;
  displayPrimaryGreen?: VkXYColorEXT | null;
  displayPrimaryBlue?: VkXYColorEXT | null;
  whitePoint?: VkXYColorEXT | null;
  maxLuminance?: number;
  minLuminance?: number;
  maxContentLightLevel?: number;
  maxFrameAverageLightLevel?: number;
}

declare var VkHdrMetadataEXT: {
  prototype: VkHdrMetadataEXT;
  new(param?: VkHdrMetadataEXTInitializer | null): VkHdrMetadataEXT;
  sType: VkStructureType;
  pNext: null;
  displayPrimaryRed: VkXYColorEXT | null;
  displayPrimaryGreen: VkXYColorEXT | null;
  displayPrimaryBlue: VkXYColorEXT | null;
  whitePoint: VkXYColorEXT | null;
  maxLuminance: number;
  minLuminance: number;
  maxContentLightLevel: number;
  maxFrameAverageLightLevel: number;
}

export interface VkHdrMetadataEXT {
  sType: VkStructureType;
  pNext: null;
  displayPrimaryRed: VkXYColorEXT | null;
  displayPrimaryGreen: VkXYColorEXT | null;
  displayPrimaryBlue: VkXYColorEXT | null;
  whitePoint: VkXYColorEXT | null;
  maxLuminance: number;
  minLuminance: number;
  maxContentLightLevel: number;
  maxFrameAverageLightLevel: number;
}


/** ## VkXYColorEXT ## */
interface VkXYColorEXTInitializer {
  x?: number;
  y?: number;
}

declare var VkXYColorEXT: {
  prototype: VkXYColorEXT;
  new(param?: VkXYColorEXTInitializer | null): VkXYColorEXT;
  x: number;
  y: number;
}

export interface VkXYColorEXT {
  x: number;
  y: number;
}


/** ## VkDescriptorUpdateTemplateCreateInfoKHR ## */
interface VkDescriptorUpdateTemplateCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  descriptorUpdateEntryCount?: number;
  pDescriptorUpdateEntries?: VkDescriptorUpdateTemplateEntry[] | null;
  templateType?: VkDescriptorUpdateTemplateType;
  descriptorSetLayout?: VkDescriptorSetLayout | null;
  pipelineBindPoint?: VkPipelineBindPoint;
  pipelineLayout?: VkPipelineLayout | null;
  set?: number;
}

declare var VkDescriptorUpdateTemplateCreateInfoKHR: {
  prototype: VkDescriptorUpdateTemplateCreateInfoKHR;
  new(param?: VkDescriptorUpdateTemplateCreateInfoKHRInitializer | null): VkDescriptorUpdateTemplateCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  descriptorUpdateEntryCount: number;
  pDescriptorUpdateEntries: VkDescriptorUpdateTemplateEntry[] | null;
  templateType: VkDescriptorUpdateTemplateType;
  descriptorSetLayout: VkDescriptorSetLayout | null;
  pipelineBindPoint: VkPipelineBindPoint;
  pipelineLayout: VkPipelineLayout | null;
  set: number;
}

export interface VkDescriptorUpdateTemplateCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  descriptorUpdateEntryCount: number;
  pDescriptorUpdateEntries: VkDescriptorUpdateTemplateEntry[] | null;
  templateType: VkDescriptorUpdateTemplateType;
  descriptorSetLayout: VkDescriptorSetLayout | null;
  pipelineBindPoint: VkPipelineBindPoint;
  pipelineLayout: VkPipelineLayout | null;
  set: number;
}


/** ## VkDescriptorUpdateTemplateCreateInfo ## */
interface VkDescriptorUpdateTemplateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  descriptorUpdateEntryCount?: number;
  pDescriptorUpdateEntries?: VkDescriptorUpdateTemplateEntry[] | null;
  templateType?: VkDescriptorUpdateTemplateType;
  descriptorSetLayout?: VkDescriptorSetLayout | null;
  pipelineBindPoint?: VkPipelineBindPoint;
  pipelineLayout?: VkPipelineLayout | null;
  set?: number;
}

declare var VkDescriptorUpdateTemplateCreateInfo: {
  prototype: VkDescriptorUpdateTemplateCreateInfo;
  new(param?: VkDescriptorUpdateTemplateCreateInfoInitializer | null): VkDescriptorUpdateTemplateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  descriptorUpdateEntryCount: number;
  pDescriptorUpdateEntries: VkDescriptorUpdateTemplateEntry[] | null;
  templateType: VkDescriptorUpdateTemplateType;
  descriptorSetLayout: VkDescriptorSetLayout | null;
  pipelineBindPoint: VkPipelineBindPoint;
  pipelineLayout: VkPipelineLayout | null;
  set: number;
}

export interface VkDescriptorUpdateTemplateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  descriptorUpdateEntryCount: number;
  pDescriptorUpdateEntries: VkDescriptorUpdateTemplateEntry[] | null;
  templateType: VkDescriptorUpdateTemplateType;
  descriptorSetLayout: VkDescriptorSetLayout | null;
  pipelineBindPoint: VkPipelineBindPoint;
  pipelineLayout: VkPipelineLayout | null;
  set: number;
}


/** ## VkDescriptorUpdateTemplateEntryKHR ## */
interface VkDescriptorUpdateTemplateEntryKHRInitializer {
  dstBinding?: number;
  dstArrayElement?: number;
  descriptorCount?: number;
  descriptorType?: VkDescriptorType;
  offset?: number;
  stride?: number;
}

declare var VkDescriptorUpdateTemplateEntryKHR: {
  prototype: VkDescriptorUpdateTemplateEntryKHR;
  new(param?: VkDescriptorUpdateTemplateEntryKHRInitializer | null): VkDescriptorUpdateTemplateEntryKHR;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
  descriptorType: VkDescriptorType;
  offset: number;
  stride: number;
}

export interface VkDescriptorUpdateTemplateEntryKHR {
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
  descriptorType: VkDescriptorType;
  offset: number;
  stride: number;
}


/** ## VkDescriptorUpdateTemplateEntry ## */
interface VkDescriptorUpdateTemplateEntryInitializer {
  dstBinding?: number;
  dstArrayElement?: number;
  descriptorCount?: number;
  descriptorType?: VkDescriptorType;
  offset?: number;
  stride?: number;
}

declare var VkDescriptorUpdateTemplateEntry: {
  prototype: VkDescriptorUpdateTemplateEntry;
  new(param?: VkDescriptorUpdateTemplateEntryInitializer | null): VkDescriptorUpdateTemplateEntry;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
  descriptorType: VkDescriptorType;
  offset: number;
  stride: number;
}

export interface VkDescriptorUpdateTemplateEntry {
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
  descriptorType: VkDescriptorType;
  offset: number;
  stride: number;
}


/** ## VkDeviceGroupSwapchainCreateInfoKHR ## */
interface VkDeviceGroupSwapchainCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  modes?: VkDeviceGroupPresentModeFlagBitsKHR;
}

declare var VkDeviceGroupSwapchainCreateInfoKHR: {
  prototype: VkDeviceGroupSwapchainCreateInfoKHR;
  new(param?: VkDeviceGroupSwapchainCreateInfoKHRInitializer | null): VkDeviceGroupSwapchainCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  modes: VkDeviceGroupPresentModeFlagBitsKHR;
}

export interface VkDeviceGroupSwapchainCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  modes: VkDeviceGroupPresentModeFlagBitsKHR;
}


/** ## VkDeviceGroupDeviceCreateInfoKHR ## */
interface VkDeviceGroupDeviceCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  physicalDeviceCount?: number;
  pPhysicalDevices?: VkPhysicalDevice[] | null;
}

declare var VkDeviceGroupDeviceCreateInfoKHR: {
  prototype: VkDeviceGroupDeviceCreateInfoKHR;
  new(param?: VkDeviceGroupDeviceCreateInfoKHRInitializer | null): VkDeviceGroupDeviceCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  physicalDeviceCount: number;
  pPhysicalDevices: VkPhysicalDevice[] | null;
}

export interface VkDeviceGroupDeviceCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  physicalDeviceCount: number;
  pPhysicalDevices: VkPhysicalDevice[] | null;
}


/** ## VkDeviceGroupDeviceCreateInfo ## */
interface VkDeviceGroupDeviceCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  physicalDeviceCount?: number;
  pPhysicalDevices?: VkPhysicalDevice[] | null;
}

declare var VkDeviceGroupDeviceCreateInfo: {
  prototype: VkDeviceGroupDeviceCreateInfo;
  new(param?: VkDeviceGroupDeviceCreateInfoInitializer | null): VkDeviceGroupDeviceCreateInfo;
  sType: VkStructureType;
  pNext: null;
  physicalDeviceCount: number;
  pPhysicalDevices: VkPhysicalDevice[] | null;
}

export interface VkDeviceGroupDeviceCreateInfo {
  sType: VkStructureType;
  pNext: null;
  physicalDeviceCount: number;
  pPhysicalDevices: VkPhysicalDevice[] | null;
}


/** ## VkDeviceGroupPresentInfoKHR ## */
interface VkDeviceGroupPresentInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  swapchainCount?: number;
  pDeviceMasks?: Uint32Array | null;
  mode?: VkDeviceGroupPresentModeFlagBitsKHR;
}

declare var VkDeviceGroupPresentInfoKHR: {
  prototype: VkDeviceGroupPresentInfoKHR;
  new(param?: VkDeviceGroupPresentInfoKHRInitializer | null): VkDeviceGroupPresentInfoKHR;
  sType: VkStructureType;
  pNext: null;
  swapchainCount: number;
  pDeviceMasks: Uint32Array | null;
  mode: VkDeviceGroupPresentModeFlagBitsKHR;
}

export interface VkDeviceGroupPresentInfoKHR {
  sType: VkStructureType;
  pNext: null;
  swapchainCount: number;
  pDeviceMasks: Uint32Array | null;
  mode: VkDeviceGroupPresentModeFlagBitsKHR;
}


/** ## VkAcquireNextImageInfoKHR ## */
interface VkAcquireNextImageInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  swapchain?: VkSwapchainKHR | null;
  timeout?: number;
  semaphore?: VkSemaphore | null;
  fence?: VkFence | null;
  deviceMask?: number;
}

declare var VkAcquireNextImageInfoKHR: {
  prototype: VkAcquireNextImageInfoKHR;
  new(param?: VkAcquireNextImageInfoKHRInitializer | null): VkAcquireNextImageInfoKHR;
  sType: VkStructureType;
  pNext: null;
  swapchain: VkSwapchainKHR | null;
  timeout: number;
  semaphore: VkSemaphore | null;
  fence: VkFence | null;
  deviceMask: number;
}

export interface VkAcquireNextImageInfoKHR {
  sType: VkStructureType;
  pNext: null;
  swapchain: VkSwapchainKHR | null;
  timeout: number;
  semaphore: VkSemaphore | null;
  fence: VkFence | null;
  deviceMask: number;
}


/** ## VkBindImageMemorySwapchainInfoKHR ## */
interface VkBindImageMemorySwapchainInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  swapchain?: VkSwapchainKHR | null;
  imageIndex?: number;
}

declare var VkBindImageMemorySwapchainInfoKHR: {
  prototype: VkBindImageMemorySwapchainInfoKHR;
  new(param?: VkBindImageMemorySwapchainInfoKHRInitializer | null): VkBindImageMemorySwapchainInfoKHR;
  sType: VkStructureType;
  pNext: null;
  swapchain: VkSwapchainKHR | null;
  imageIndex: number;
}

export interface VkBindImageMemorySwapchainInfoKHR {
  sType: VkStructureType;
  pNext: null;
  swapchain: VkSwapchainKHR | null;
  imageIndex: number;
}


/** ## VkImageSwapchainCreateInfoKHR ## */
interface VkImageSwapchainCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  swapchain?: VkSwapchainKHR | null;
}

declare var VkImageSwapchainCreateInfoKHR: {
  prototype: VkImageSwapchainCreateInfoKHR;
  new(param?: VkImageSwapchainCreateInfoKHRInitializer | null): VkImageSwapchainCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  swapchain: VkSwapchainKHR | null;
}

export interface VkImageSwapchainCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  swapchain: VkSwapchainKHR | null;
}


/** ## VkDeviceGroupPresentCapabilitiesKHR ## */
interface VkDeviceGroupPresentCapabilitiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly presentMask?: number[] | null;
  readonly modes?: VkDeviceGroupPresentModeFlagBitsKHR;
}

declare var VkDeviceGroupPresentCapabilitiesKHR: {
  prototype: VkDeviceGroupPresentCapabilitiesKHR;
  new(param?: VkDeviceGroupPresentCapabilitiesKHRInitializer | null): VkDeviceGroupPresentCapabilitiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly presentMask: number[] | null;
  readonly modes: VkDeviceGroupPresentModeFlagBitsKHR;
}

export interface VkDeviceGroupPresentCapabilitiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly presentMask: number[] | null;
  readonly modes: VkDeviceGroupPresentModeFlagBitsKHR;
}


/** ## VkDeviceGroupBindSparseInfoKHR ## */
interface VkDeviceGroupBindSparseInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  resourceDeviceIndex?: number;
  memoryDeviceIndex?: number;
}

declare var VkDeviceGroupBindSparseInfoKHR: {
  prototype: VkDeviceGroupBindSparseInfoKHR;
  new(param?: VkDeviceGroupBindSparseInfoKHRInitializer | null): VkDeviceGroupBindSparseInfoKHR;
  sType: VkStructureType;
  pNext: null;
  resourceDeviceIndex: number;
  memoryDeviceIndex: number;
}

export interface VkDeviceGroupBindSparseInfoKHR {
  sType: VkStructureType;
  pNext: null;
  resourceDeviceIndex: number;
  memoryDeviceIndex: number;
}


/** ## VkDeviceGroupBindSparseInfo ## */
interface VkDeviceGroupBindSparseInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  resourceDeviceIndex?: number;
  memoryDeviceIndex?: number;
}

declare var VkDeviceGroupBindSparseInfo: {
  prototype: VkDeviceGroupBindSparseInfo;
  new(param?: VkDeviceGroupBindSparseInfoInitializer | null): VkDeviceGroupBindSparseInfo;
  sType: VkStructureType;
  pNext: null;
  resourceDeviceIndex: number;
  memoryDeviceIndex: number;
}

export interface VkDeviceGroupBindSparseInfo {
  sType: VkStructureType;
  pNext: null;
  resourceDeviceIndex: number;
  memoryDeviceIndex: number;
}


/** ## VkDeviceGroupSubmitInfoKHR ## */
interface VkDeviceGroupSubmitInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  waitSemaphoreCount?: number;
  pWaitSemaphoreDeviceIndices?: Uint32Array | null;
  commandBufferCount?: number;
  pCommandBufferDeviceMasks?: Uint32Array | null;
  signalSemaphoreCount?: number;
  pSignalSemaphoreDeviceIndices?: Uint32Array | null;
}

declare var VkDeviceGroupSubmitInfoKHR: {
  prototype: VkDeviceGroupSubmitInfoKHR;
  new(param?: VkDeviceGroupSubmitInfoKHRInitializer | null): VkDeviceGroupSubmitInfoKHR;
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphoreDeviceIndices: Uint32Array | null;
  commandBufferCount: number;
  pCommandBufferDeviceMasks: Uint32Array | null;
  signalSemaphoreCount: number;
  pSignalSemaphoreDeviceIndices: Uint32Array | null;
}

export interface VkDeviceGroupSubmitInfoKHR {
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphoreDeviceIndices: Uint32Array | null;
  commandBufferCount: number;
  pCommandBufferDeviceMasks: Uint32Array | null;
  signalSemaphoreCount: number;
  pSignalSemaphoreDeviceIndices: Uint32Array | null;
}


/** ## VkDeviceGroupSubmitInfo ## */
interface VkDeviceGroupSubmitInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  waitSemaphoreCount?: number;
  pWaitSemaphoreDeviceIndices?: Uint32Array | null;
  commandBufferCount?: number;
  pCommandBufferDeviceMasks?: Uint32Array | null;
  signalSemaphoreCount?: number;
  pSignalSemaphoreDeviceIndices?: Uint32Array | null;
}

declare var VkDeviceGroupSubmitInfo: {
  prototype: VkDeviceGroupSubmitInfo;
  new(param?: VkDeviceGroupSubmitInfoInitializer | null): VkDeviceGroupSubmitInfo;
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphoreDeviceIndices: Uint32Array | null;
  commandBufferCount: number;
  pCommandBufferDeviceMasks: Uint32Array | null;
  signalSemaphoreCount: number;
  pSignalSemaphoreDeviceIndices: Uint32Array | null;
}

export interface VkDeviceGroupSubmitInfo {
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphoreDeviceIndices: Uint32Array | null;
  commandBufferCount: number;
  pCommandBufferDeviceMasks: Uint32Array | null;
  signalSemaphoreCount: number;
  pSignalSemaphoreDeviceIndices: Uint32Array | null;
}


/** ## VkDeviceGroupCommandBufferBeginInfoKHR ## */
interface VkDeviceGroupCommandBufferBeginInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  deviceMask?: number;
}

declare var VkDeviceGroupCommandBufferBeginInfoKHR: {
  prototype: VkDeviceGroupCommandBufferBeginInfoKHR;
  new(param?: VkDeviceGroupCommandBufferBeginInfoKHRInitializer | null): VkDeviceGroupCommandBufferBeginInfoKHR;
  sType: VkStructureType;
  pNext: null;
  deviceMask: number;
}

export interface VkDeviceGroupCommandBufferBeginInfoKHR {
  sType: VkStructureType;
  pNext: null;
  deviceMask: number;
}


/** ## VkDeviceGroupCommandBufferBeginInfo ## */
interface VkDeviceGroupCommandBufferBeginInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  deviceMask?: number;
}

declare var VkDeviceGroupCommandBufferBeginInfo: {
  prototype: VkDeviceGroupCommandBufferBeginInfo;
  new(param?: VkDeviceGroupCommandBufferBeginInfoInitializer | null): VkDeviceGroupCommandBufferBeginInfo;
  sType: VkStructureType;
  pNext: null;
  deviceMask: number;
}

export interface VkDeviceGroupCommandBufferBeginInfo {
  sType: VkStructureType;
  pNext: null;
  deviceMask: number;
}


/** ## VkDeviceGroupRenderPassBeginInfoKHR ## */
interface VkDeviceGroupRenderPassBeginInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  deviceMask?: number;
  deviceRenderAreaCount?: number;
  pDeviceRenderAreas?: VkRect2D[] | null;
}

declare var VkDeviceGroupRenderPassBeginInfoKHR: {
  prototype: VkDeviceGroupRenderPassBeginInfoKHR;
  new(param?: VkDeviceGroupRenderPassBeginInfoKHRInitializer | null): VkDeviceGroupRenderPassBeginInfoKHR;
  sType: VkStructureType;
  pNext: null;
  deviceMask: number;
  deviceRenderAreaCount: number;
  pDeviceRenderAreas: VkRect2D[] | null;
}

export interface VkDeviceGroupRenderPassBeginInfoKHR {
  sType: VkStructureType;
  pNext: null;
  deviceMask: number;
  deviceRenderAreaCount: number;
  pDeviceRenderAreas: VkRect2D[] | null;
}


/** ## VkDeviceGroupRenderPassBeginInfo ## */
interface VkDeviceGroupRenderPassBeginInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  deviceMask?: number;
  deviceRenderAreaCount?: number;
  pDeviceRenderAreas?: VkRect2D[] | null;
}

declare var VkDeviceGroupRenderPassBeginInfo: {
  prototype: VkDeviceGroupRenderPassBeginInfo;
  new(param?: VkDeviceGroupRenderPassBeginInfoInitializer | null): VkDeviceGroupRenderPassBeginInfo;
  sType: VkStructureType;
  pNext: null;
  deviceMask: number;
  deviceRenderAreaCount: number;
  pDeviceRenderAreas: VkRect2D[] | null;
}

export interface VkDeviceGroupRenderPassBeginInfo {
  sType: VkStructureType;
  pNext: null;
  deviceMask: number;
  deviceRenderAreaCount: number;
  pDeviceRenderAreas: VkRect2D[] | null;
}


/** ## VkBindImageMemoryDeviceGroupInfoKHR ## */
interface VkBindImageMemoryDeviceGroupInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  deviceIndexCount?: number;
  pDeviceIndices?: Uint32Array | null;
  splitInstanceBindRegionCount?: number;
  pSplitInstanceBindRegions?: VkRect2D[] | null;
}

declare var VkBindImageMemoryDeviceGroupInfoKHR: {
  prototype: VkBindImageMemoryDeviceGroupInfoKHR;
  new(param?: VkBindImageMemoryDeviceGroupInfoKHRInitializer | null): VkBindImageMemoryDeviceGroupInfoKHR;
  sType: VkStructureType;
  pNext: null;
  deviceIndexCount: number;
  pDeviceIndices: Uint32Array | null;
  splitInstanceBindRegionCount: number;
  pSplitInstanceBindRegions: VkRect2D[] | null;
}

export interface VkBindImageMemoryDeviceGroupInfoKHR {
  sType: VkStructureType;
  pNext: null;
  deviceIndexCount: number;
  pDeviceIndices: Uint32Array | null;
  splitInstanceBindRegionCount: number;
  pSplitInstanceBindRegions: VkRect2D[] | null;
}


/** ## VkBindImageMemoryDeviceGroupInfo ## */
interface VkBindImageMemoryDeviceGroupInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  deviceIndexCount?: number;
  pDeviceIndices?: Uint32Array | null;
  splitInstanceBindRegionCount?: number;
  pSplitInstanceBindRegions?: VkRect2D[] | null;
}

declare var VkBindImageMemoryDeviceGroupInfo: {
  prototype: VkBindImageMemoryDeviceGroupInfo;
  new(param?: VkBindImageMemoryDeviceGroupInfoInitializer | null): VkBindImageMemoryDeviceGroupInfo;
  sType: VkStructureType;
  pNext: null;
  deviceIndexCount: number;
  pDeviceIndices: Uint32Array | null;
  splitInstanceBindRegionCount: number;
  pSplitInstanceBindRegions: VkRect2D[] | null;
}

export interface VkBindImageMemoryDeviceGroupInfo {
  sType: VkStructureType;
  pNext: null;
  deviceIndexCount: number;
  pDeviceIndices: Uint32Array | null;
  splitInstanceBindRegionCount: number;
  pSplitInstanceBindRegions: VkRect2D[] | null;
}


/** ## VkBindImageMemoryInfoKHR ## */
interface VkBindImageMemoryInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  image?: VkImage | null;
  memory?: VkDeviceMemory | null;
  memoryOffset?: number;
}

declare var VkBindImageMemoryInfoKHR: {
  prototype: VkBindImageMemoryInfoKHR;
  new(param?: VkBindImageMemoryInfoKHRInitializer | null): VkBindImageMemoryInfoKHR;
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
}

export interface VkBindImageMemoryInfoKHR {
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
}


/** ## VkBindImageMemoryInfo ## */
interface VkBindImageMemoryInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  image?: VkImage | null;
  memory?: VkDeviceMemory | null;
  memoryOffset?: number;
}

declare var VkBindImageMemoryInfo: {
  prototype: VkBindImageMemoryInfo;
  new(param?: VkBindImageMemoryInfoInitializer | null): VkBindImageMemoryInfo;
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
}

export interface VkBindImageMemoryInfo {
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
}


/** ## VkBindBufferMemoryDeviceGroupInfoKHR ## */
interface VkBindBufferMemoryDeviceGroupInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  deviceIndexCount?: number;
  pDeviceIndices?: Uint32Array | null;
}

declare var VkBindBufferMemoryDeviceGroupInfoKHR: {
  prototype: VkBindBufferMemoryDeviceGroupInfoKHR;
  new(param?: VkBindBufferMemoryDeviceGroupInfoKHRInitializer | null): VkBindBufferMemoryDeviceGroupInfoKHR;
  sType: VkStructureType;
  pNext: null;
  deviceIndexCount: number;
  pDeviceIndices: Uint32Array | null;
}

export interface VkBindBufferMemoryDeviceGroupInfoKHR {
  sType: VkStructureType;
  pNext: null;
  deviceIndexCount: number;
  pDeviceIndices: Uint32Array | null;
}


/** ## VkBindBufferMemoryDeviceGroupInfo ## */
interface VkBindBufferMemoryDeviceGroupInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  deviceIndexCount?: number;
  pDeviceIndices?: Uint32Array | null;
}

declare var VkBindBufferMemoryDeviceGroupInfo: {
  prototype: VkBindBufferMemoryDeviceGroupInfo;
  new(param?: VkBindBufferMemoryDeviceGroupInfoInitializer | null): VkBindBufferMemoryDeviceGroupInfo;
  sType: VkStructureType;
  pNext: null;
  deviceIndexCount: number;
  pDeviceIndices: Uint32Array | null;
}

export interface VkBindBufferMemoryDeviceGroupInfo {
  sType: VkStructureType;
  pNext: null;
  deviceIndexCount: number;
  pDeviceIndices: Uint32Array | null;
}


/** ## VkBindBufferMemoryInfoKHR ## */
interface VkBindBufferMemoryInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  buffer?: VkBuffer | null;
  memory?: VkDeviceMemory | null;
  memoryOffset?: number;
}

declare var VkBindBufferMemoryInfoKHR: {
  prototype: VkBindBufferMemoryInfoKHR;
  new(param?: VkBindBufferMemoryInfoKHRInitializer | null): VkBindBufferMemoryInfoKHR;
  sType: VkStructureType;
  pNext: null;
  buffer: VkBuffer | null;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
}

export interface VkBindBufferMemoryInfoKHR {
  sType: VkStructureType;
  pNext: null;
  buffer: VkBuffer | null;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
}


/** ## VkBindBufferMemoryInfo ## */
interface VkBindBufferMemoryInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  buffer?: VkBuffer | null;
  memory?: VkDeviceMemory | null;
  memoryOffset?: number;
}

declare var VkBindBufferMemoryInfo: {
  prototype: VkBindBufferMemoryInfo;
  new(param?: VkBindBufferMemoryInfoInitializer | null): VkBindBufferMemoryInfo;
  sType: VkStructureType;
  pNext: null;
  buffer: VkBuffer | null;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
}

export interface VkBindBufferMemoryInfo {
  sType: VkStructureType;
  pNext: null;
  buffer: VkBuffer | null;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
}


/** ## VkMemoryAllocateFlagsInfoKHR ## */
interface VkMemoryAllocateFlagsInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkMemoryAllocateFlagBits;
  deviceMask?: number;
}

declare var VkMemoryAllocateFlagsInfoKHR: {
  prototype: VkMemoryAllocateFlagsInfoKHR;
  new(param?: VkMemoryAllocateFlagsInfoKHRInitializer | null): VkMemoryAllocateFlagsInfoKHR;
  sType: VkStructureType;
  pNext: null;
  flags: VkMemoryAllocateFlagBits;
  deviceMask: number;
}

export interface VkMemoryAllocateFlagsInfoKHR {
  sType: VkStructureType;
  pNext: null;
  flags: VkMemoryAllocateFlagBits;
  deviceMask: number;
}


/** ## VkMemoryAllocateFlagsInfo ## */
interface VkMemoryAllocateFlagsInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkMemoryAllocateFlagBits;
  deviceMask?: number;
}

declare var VkMemoryAllocateFlagsInfo: {
  prototype: VkMemoryAllocateFlagsInfo;
  new(param?: VkMemoryAllocateFlagsInfoInitializer | null): VkMemoryAllocateFlagsInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkMemoryAllocateFlagBits;
  deviceMask: number;
}

export interface VkMemoryAllocateFlagsInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkMemoryAllocateFlagBits;
  deviceMask: number;
}


/** ## VkPhysicalDeviceGroupPropertiesKHR ## */
interface VkPhysicalDeviceGroupPropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly physicalDeviceCount?: number;
  readonly physicalDevices?: number[] | null;
  readonly subsetAllocation?: number;
}

declare var VkPhysicalDeviceGroupPropertiesKHR: {
  prototype: VkPhysicalDeviceGroupPropertiesKHR;
  new(param?: VkPhysicalDeviceGroupPropertiesKHRInitializer | null): VkPhysicalDeviceGroupPropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly physicalDeviceCount: number;
  readonly physicalDevices: number[] | null;
  readonly subsetAllocation: number;
}

export interface VkPhysicalDeviceGroupPropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly physicalDeviceCount: number;
  readonly physicalDevices: number[] | null;
  readonly subsetAllocation: number;
}


/** ## VkPhysicalDeviceGroupProperties ## */
interface VkPhysicalDeviceGroupPropertiesInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly physicalDeviceCount?: number;
  readonly physicalDevices?: number[] | null;
  readonly subsetAllocation?: number;
}

declare var VkPhysicalDeviceGroupProperties: {
  prototype: VkPhysicalDeviceGroupProperties;
  new(param?: VkPhysicalDeviceGroupPropertiesInitializer | null): VkPhysicalDeviceGroupProperties;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly physicalDeviceCount: number;
  readonly physicalDevices: number[] | null;
  readonly subsetAllocation: number;
}

export interface VkPhysicalDeviceGroupProperties {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly physicalDeviceCount: number;
  readonly physicalDevices: number[] | null;
  readonly subsetAllocation: number;
}


/** ## VkSwapchainCounterCreateInfoEXT ## */
interface VkSwapchainCounterCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  surfaceCounters?: VkSurfaceCounterFlagBitsEXT;
}

declare var VkSwapchainCounterCreateInfoEXT: {
  prototype: VkSwapchainCounterCreateInfoEXT;
  new(param?: VkSwapchainCounterCreateInfoEXTInitializer | null): VkSwapchainCounterCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  surfaceCounters: VkSurfaceCounterFlagBitsEXT;
}

export interface VkSwapchainCounterCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  surfaceCounters: VkSurfaceCounterFlagBitsEXT;
}


/** ## VkDisplayEventInfoEXT ## */
interface VkDisplayEventInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  displayEvent?: VkDisplayEventTypeEXT;
}

declare var VkDisplayEventInfoEXT: {
  prototype: VkDisplayEventInfoEXT;
  new(param?: VkDisplayEventInfoEXTInitializer | null): VkDisplayEventInfoEXT;
  sType: VkStructureType;
  pNext: null;
  displayEvent: VkDisplayEventTypeEXT;
}

export interface VkDisplayEventInfoEXT {
  sType: VkStructureType;
  pNext: null;
  displayEvent: VkDisplayEventTypeEXT;
}


/** ## VkDeviceEventInfoEXT ## */
interface VkDeviceEventInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  deviceEvent?: VkDeviceEventTypeEXT;
}

declare var VkDeviceEventInfoEXT: {
  prototype: VkDeviceEventInfoEXT;
  new(param?: VkDeviceEventInfoEXTInitializer | null): VkDeviceEventInfoEXT;
  sType: VkStructureType;
  pNext: null;
  deviceEvent: VkDeviceEventTypeEXT;
}

export interface VkDeviceEventInfoEXT {
  sType: VkStructureType;
  pNext: null;
  deviceEvent: VkDeviceEventTypeEXT;
}


/** ## VkDisplayPowerInfoEXT ## */
interface VkDisplayPowerInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  powerState?: VkDisplayPowerStateEXT;
}

declare var VkDisplayPowerInfoEXT: {
  prototype: VkDisplayPowerInfoEXT;
  new(param?: VkDisplayPowerInfoEXTInitializer | null): VkDisplayPowerInfoEXT;
  sType: VkStructureType;
  pNext: null;
  powerState: VkDisplayPowerStateEXT;
}

export interface VkDisplayPowerInfoEXT {
  sType: VkStructureType;
  pNext: null;
  powerState: VkDisplayPowerStateEXT;
}


/** ## VkSurfaceCapabilities2EXT ## */
interface VkSurfaceCapabilities2EXTInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly minImageCount?: number;
  readonly maxImageCount?: number;
  readonly currentExtent?: VkExtent2D | null;
  readonly minImageExtent?: VkExtent2D | null;
  readonly maxImageExtent?: VkExtent2D | null;
  readonly maxImageArrayLayers?: number;
  readonly supportedTransforms?: VkSurfaceTransformFlagBitsKHR;
  readonly currentTransform?: VkSurfaceTransformFlagBitsKHR;
  readonly supportedCompositeAlpha?: VkCompositeAlphaFlagBitsKHR;
  readonly supportedUsageFlags?: VkImageUsageFlagBits;
  readonly supportedSurfaceCounters?: VkSurfaceCounterFlagBitsEXT;
}

declare var VkSurfaceCapabilities2EXT: {
  prototype: VkSurfaceCapabilities2EXT;
  new(param?: VkSurfaceCapabilities2EXTInitializer | null): VkSurfaceCapabilities2EXT;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly minImageCount: number;
  readonly maxImageCount: number;
  readonly currentExtent: VkExtent2D | null;
  readonly minImageExtent: VkExtent2D | null;
  readonly maxImageExtent: VkExtent2D | null;
  readonly maxImageArrayLayers: number;
  readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;
  readonly currentTransform: VkSurfaceTransformFlagBitsKHR;
  readonly supportedCompositeAlpha: VkCompositeAlphaFlagBitsKHR;
  readonly supportedUsageFlags: VkImageUsageFlagBits;
  readonly supportedSurfaceCounters: VkSurfaceCounterFlagBitsEXT;
}

export interface VkSurfaceCapabilities2EXT {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly minImageCount: number;
  readonly maxImageCount: number;
  readonly currentExtent: VkExtent2D | null;
  readonly minImageExtent: VkExtent2D | null;
  readonly maxImageExtent: VkExtent2D | null;
  readonly maxImageArrayLayers: number;
  readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;
  readonly currentTransform: VkSurfaceTransformFlagBitsKHR;
  readonly supportedCompositeAlpha: VkCompositeAlphaFlagBitsKHR;
  readonly supportedUsageFlags: VkImageUsageFlagBits;
  readonly supportedSurfaceCounters: VkSurfaceCounterFlagBitsEXT;
}


/** ## VkRenderPassMultiviewCreateInfoKHR ## */
interface VkRenderPassMultiviewCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  subpassCount?: number;
  pViewMasks?: Uint32Array | null;
  dependencyCount?: number;
  pViewOffsets?: Int32Array | null;
  correlationMaskCount?: number;
  pCorrelationMasks?: Uint32Array | null;
}

declare var VkRenderPassMultiviewCreateInfoKHR: {
  prototype: VkRenderPassMultiviewCreateInfoKHR;
  new(param?: VkRenderPassMultiviewCreateInfoKHRInitializer | null): VkRenderPassMultiviewCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  subpassCount: number;
  pViewMasks: Uint32Array | null;
  dependencyCount: number;
  pViewOffsets: Int32Array | null;
  correlationMaskCount: number;
  pCorrelationMasks: Uint32Array | null;
}

export interface VkRenderPassMultiviewCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  subpassCount: number;
  pViewMasks: Uint32Array | null;
  dependencyCount: number;
  pViewOffsets: Int32Array | null;
  correlationMaskCount: number;
  pCorrelationMasks: Uint32Array | null;
}


/** ## VkRenderPassMultiviewCreateInfo ## */
interface VkRenderPassMultiviewCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  subpassCount?: number;
  pViewMasks?: Uint32Array | null;
  dependencyCount?: number;
  pViewOffsets?: Int32Array | null;
  correlationMaskCount?: number;
  pCorrelationMasks?: Uint32Array | null;
}

declare var VkRenderPassMultiviewCreateInfo: {
  prototype: VkRenderPassMultiviewCreateInfo;
  new(param?: VkRenderPassMultiviewCreateInfoInitializer | null): VkRenderPassMultiviewCreateInfo;
  sType: VkStructureType;
  pNext: null;
  subpassCount: number;
  pViewMasks: Uint32Array | null;
  dependencyCount: number;
  pViewOffsets: Int32Array | null;
  correlationMaskCount: number;
  pCorrelationMasks: Uint32Array | null;
}

export interface VkRenderPassMultiviewCreateInfo {
  sType: VkStructureType;
  pNext: null;
  subpassCount: number;
  pViewMasks: Uint32Array | null;
  dependencyCount: number;
  pViewOffsets: Int32Array | null;
  correlationMaskCount: number;
  pCorrelationMasks: Uint32Array | null;
}


/** ## VkPhysicalDeviceMultiviewPropertiesKHR ## */
interface VkPhysicalDeviceMultiviewPropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly maxMultiviewViewCount?: number;
  readonly maxMultiviewInstanceIndex?: number;
}

declare var VkPhysicalDeviceMultiviewPropertiesKHR: {
  prototype: VkPhysicalDeviceMultiviewPropertiesKHR;
  new(param?: VkPhysicalDeviceMultiviewPropertiesKHRInitializer | null): VkPhysicalDeviceMultiviewPropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxMultiviewViewCount: number;
  readonly maxMultiviewInstanceIndex: number;
}

export interface VkPhysicalDeviceMultiviewPropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxMultiviewViewCount: number;
  readonly maxMultiviewInstanceIndex: number;
}


/** ## VkPhysicalDeviceMultiviewProperties ## */
interface VkPhysicalDeviceMultiviewPropertiesInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly maxMultiviewViewCount?: number;
  readonly maxMultiviewInstanceIndex?: number;
}

declare var VkPhysicalDeviceMultiviewProperties: {
  prototype: VkPhysicalDeviceMultiviewProperties;
  new(param?: VkPhysicalDeviceMultiviewPropertiesInitializer | null): VkPhysicalDeviceMultiviewProperties;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxMultiviewViewCount: number;
  readonly maxMultiviewInstanceIndex: number;
}

export interface VkPhysicalDeviceMultiviewProperties {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxMultiviewViewCount: number;
  readonly maxMultiviewInstanceIndex: number;
}


/** ## VkPhysicalDeviceMultiviewFeaturesKHR ## */
interface VkPhysicalDeviceMultiviewFeaturesKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  multiview?: number;
  multiviewGeometryShader?: number;
  multiviewTessellationShader?: number;
}

declare var VkPhysicalDeviceMultiviewFeaturesKHR: {
  prototype: VkPhysicalDeviceMultiviewFeaturesKHR;
  new(param?: VkPhysicalDeviceMultiviewFeaturesKHRInitializer | null): VkPhysicalDeviceMultiviewFeaturesKHR;
  sType: VkStructureType;
  pNext: null;
  multiview: number;
  multiviewGeometryShader: number;
  multiviewTessellationShader: number;
}

export interface VkPhysicalDeviceMultiviewFeaturesKHR {
  sType: VkStructureType;
  pNext: null;
  multiview: number;
  multiviewGeometryShader: number;
  multiviewTessellationShader: number;
}


/** ## VkPhysicalDeviceMultiviewFeatures ## */
interface VkPhysicalDeviceMultiviewFeaturesInitializer {
  sType?: VkStructureType;
  pNext?: null;
  multiview?: number;
  multiviewGeometryShader?: number;
  multiviewTessellationShader?: number;
}

declare var VkPhysicalDeviceMultiviewFeatures: {
  prototype: VkPhysicalDeviceMultiviewFeatures;
  new(param?: VkPhysicalDeviceMultiviewFeaturesInitializer | null): VkPhysicalDeviceMultiviewFeatures;
  sType: VkStructureType;
  pNext: null;
  multiview: number;
  multiviewGeometryShader: number;
  multiviewTessellationShader: number;
}

export interface VkPhysicalDeviceMultiviewFeatures {
  sType: VkStructureType;
  pNext: null;
  multiview: number;
  multiviewGeometryShader: number;
  multiviewTessellationShader: number;
}


/** ## VkFenceGetFdInfoKHR ## */
interface VkFenceGetFdInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  fence?: VkFence | null;
  handleType?: VkExternalFenceHandleTypeFlagBits;
}

declare var VkFenceGetFdInfoKHR: {
  prototype: VkFenceGetFdInfoKHR;
  new(param?: VkFenceGetFdInfoKHRInitializer | null): VkFenceGetFdInfoKHR;
  sType: VkStructureType;
  pNext: null;
  fence: VkFence | null;
  handleType: VkExternalFenceHandleTypeFlagBits;
}

export interface VkFenceGetFdInfoKHR {
  sType: VkStructureType;
  pNext: null;
  fence: VkFence | null;
  handleType: VkExternalFenceHandleTypeFlagBits;
}


/** ## VkImportFenceFdInfoKHR ## */
interface VkImportFenceFdInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  fence?: VkFence | null;
  flags?: VkFenceImportFlagBits;
  handleType?: VkExternalFenceHandleTypeFlagBits;
  fd?: number;
}

declare var VkImportFenceFdInfoKHR: {
  prototype: VkImportFenceFdInfoKHR;
  new(param?: VkImportFenceFdInfoKHRInitializer | null): VkImportFenceFdInfoKHR;
  sType: VkStructureType;
  pNext: null;
  fence: VkFence | null;
  flags: VkFenceImportFlagBits;
  handleType: VkExternalFenceHandleTypeFlagBits;
  fd: number;
}

export interface VkImportFenceFdInfoKHR {
  sType: VkStructureType;
  pNext: null;
  fence: VkFence | null;
  flags: VkFenceImportFlagBits;
  handleType: VkExternalFenceHandleTypeFlagBits;
  fd: number;
}


/** ## VkExportFenceCreateInfoKHR ## */
interface VkExportFenceCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleTypes?: VkExternalFenceHandleTypeFlagBits;
}

declare var VkExportFenceCreateInfoKHR: {
  prototype: VkExportFenceCreateInfoKHR;
  new(param?: VkExportFenceCreateInfoKHRInitializer | null): VkExportFenceCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalFenceHandleTypeFlagBits;
}

export interface VkExportFenceCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalFenceHandleTypeFlagBits;
}


/** ## VkExportFenceCreateInfo ## */
interface VkExportFenceCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleTypes?: VkExternalFenceHandleTypeFlagBits;
}

declare var VkExportFenceCreateInfo: {
  prototype: VkExportFenceCreateInfo;
  new(param?: VkExportFenceCreateInfoInitializer | null): VkExportFenceCreateInfo;
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalFenceHandleTypeFlagBits;
}

export interface VkExportFenceCreateInfo {
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalFenceHandleTypeFlagBits;
}


/** ## VkExternalFencePropertiesKHR ## */
interface VkExternalFencePropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly exportFromImportedHandleTypes?: VkExternalFenceHandleTypeFlagBits;
  readonly compatibleHandleTypes?: VkExternalFenceHandleTypeFlagBits;
  readonly externalFenceFeatures?: VkExternalFenceFeatureFlagBits;
}

declare var VkExternalFencePropertiesKHR: {
  prototype: VkExternalFencePropertiesKHR;
  new(param?: VkExternalFencePropertiesKHRInitializer | null): VkExternalFencePropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlagBits;
  readonly compatibleHandleTypes: VkExternalFenceHandleTypeFlagBits;
  readonly externalFenceFeatures: VkExternalFenceFeatureFlagBits;
}

export interface VkExternalFencePropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlagBits;
  readonly compatibleHandleTypes: VkExternalFenceHandleTypeFlagBits;
  readonly externalFenceFeatures: VkExternalFenceFeatureFlagBits;
}


/** ## VkExternalFenceProperties ## */
interface VkExternalFencePropertiesInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly exportFromImportedHandleTypes?: VkExternalFenceHandleTypeFlagBits;
  readonly compatibleHandleTypes?: VkExternalFenceHandleTypeFlagBits;
  readonly externalFenceFeatures?: VkExternalFenceFeatureFlagBits;
}

declare var VkExternalFenceProperties: {
  prototype: VkExternalFenceProperties;
  new(param?: VkExternalFencePropertiesInitializer | null): VkExternalFenceProperties;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlagBits;
  readonly compatibleHandleTypes: VkExternalFenceHandleTypeFlagBits;
  readonly externalFenceFeatures: VkExternalFenceFeatureFlagBits;
}

export interface VkExternalFenceProperties {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlagBits;
  readonly compatibleHandleTypes: VkExternalFenceHandleTypeFlagBits;
  readonly externalFenceFeatures: VkExternalFenceFeatureFlagBits;
}


/** ## VkPhysicalDeviceExternalFenceInfoKHR ## */
interface VkPhysicalDeviceExternalFenceInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleType?: VkExternalFenceHandleTypeFlagBits;
}

declare var VkPhysicalDeviceExternalFenceInfoKHR: {
  prototype: VkPhysicalDeviceExternalFenceInfoKHR;
  new(param?: VkPhysicalDeviceExternalFenceInfoKHRInitializer | null): VkPhysicalDeviceExternalFenceInfoKHR;
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalFenceHandleTypeFlagBits;
}

export interface VkPhysicalDeviceExternalFenceInfoKHR {
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalFenceHandleTypeFlagBits;
}


/** ## VkPhysicalDeviceExternalFenceInfo ## */
interface VkPhysicalDeviceExternalFenceInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleType?: VkExternalFenceHandleTypeFlagBits;
}

declare var VkPhysicalDeviceExternalFenceInfo: {
  prototype: VkPhysicalDeviceExternalFenceInfo;
  new(param?: VkPhysicalDeviceExternalFenceInfoInitializer | null): VkPhysicalDeviceExternalFenceInfo;
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalFenceHandleTypeFlagBits;
}

export interface VkPhysicalDeviceExternalFenceInfo {
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalFenceHandleTypeFlagBits;
}


/** ## VkSemaphoreGetFdInfoKHR ## */
interface VkSemaphoreGetFdInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  semaphore?: VkSemaphore | null;
  handleType?: VkExternalSemaphoreHandleTypeFlagBits;
}

declare var VkSemaphoreGetFdInfoKHR: {
  prototype: VkSemaphoreGetFdInfoKHR;
  new(param?: VkSemaphoreGetFdInfoKHRInitializer | null): VkSemaphoreGetFdInfoKHR;
  sType: VkStructureType;
  pNext: null;
  semaphore: VkSemaphore | null;
  handleType: VkExternalSemaphoreHandleTypeFlagBits;
}

export interface VkSemaphoreGetFdInfoKHR {
  sType: VkStructureType;
  pNext: null;
  semaphore: VkSemaphore | null;
  handleType: VkExternalSemaphoreHandleTypeFlagBits;
}


/** ## VkImportSemaphoreFdInfoKHR ## */
interface VkImportSemaphoreFdInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  semaphore?: VkSemaphore | null;
  flags?: VkSemaphoreImportFlagBits;
  handleType?: VkExternalSemaphoreHandleTypeFlagBits;
  fd?: number;
}

declare var VkImportSemaphoreFdInfoKHR: {
  prototype: VkImportSemaphoreFdInfoKHR;
  new(param?: VkImportSemaphoreFdInfoKHRInitializer | null): VkImportSemaphoreFdInfoKHR;
  sType: VkStructureType;
  pNext: null;
  semaphore: VkSemaphore | null;
  flags: VkSemaphoreImportFlagBits;
  handleType: VkExternalSemaphoreHandleTypeFlagBits;
  fd: number;
}

export interface VkImportSemaphoreFdInfoKHR {
  sType: VkStructureType;
  pNext: null;
  semaphore: VkSemaphore | null;
  flags: VkSemaphoreImportFlagBits;
  handleType: VkExternalSemaphoreHandleTypeFlagBits;
  fd: number;
}


/** ## VkExportSemaphoreCreateInfoKHR ## */
interface VkExportSemaphoreCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleTypes?: VkExternalSemaphoreHandleTypeFlagBits;
}

declare var VkExportSemaphoreCreateInfoKHR: {
  prototype: VkExportSemaphoreCreateInfoKHR;
  new(param?: VkExportSemaphoreCreateInfoKHRInitializer | null): VkExportSemaphoreCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalSemaphoreHandleTypeFlagBits;
}

export interface VkExportSemaphoreCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalSemaphoreHandleTypeFlagBits;
}


/** ## VkExportSemaphoreCreateInfo ## */
interface VkExportSemaphoreCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleTypes?: VkExternalSemaphoreHandleTypeFlagBits;
}

declare var VkExportSemaphoreCreateInfo: {
  prototype: VkExportSemaphoreCreateInfo;
  new(param?: VkExportSemaphoreCreateInfoInitializer | null): VkExportSemaphoreCreateInfo;
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalSemaphoreHandleTypeFlagBits;
}

export interface VkExportSemaphoreCreateInfo {
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalSemaphoreHandleTypeFlagBits;
}


/** ## VkExternalSemaphorePropertiesKHR ## */
interface VkExternalSemaphorePropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly exportFromImportedHandleTypes?: VkExternalSemaphoreHandleTypeFlagBits;
  readonly compatibleHandleTypes?: VkExternalSemaphoreHandleTypeFlagBits;
  readonly externalSemaphoreFeatures?: VkExternalSemaphoreFeatureFlagBits;
}

declare var VkExternalSemaphorePropertiesKHR: {
  prototype: VkExternalSemaphorePropertiesKHR;
  new(param?: VkExternalSemaphorePropertiesKHRInitializer | null): VkExternalSemaphorePropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;
  readonly compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;
  readonly externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlagBits;
}

export interface VkExternalSemaphorePropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;
  readonly compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;
  readonly externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlagBits;
}


/** ## VkExternalSemaphoreProperties ## */
interface VkExternalSemaphorePropertiesInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly exportFromImportedHandleTypes?: VkExternalSemaphoreHandleTypeFlagBits;
  readonly compatibleHandleTypes?: VkExternalSemaphoreHandleTypeFlagBits;
  readonly externalSemaphoreFeatures?: VkExternalSemaphoreFeatureFlagBits;
}

declare var VkExternalSemaphoreProperties: {
  prototype: VkExternalSemaphoreProperties;
  new(param?: VkExternalSemaphorePropertiesInitializer | null): VkExternalSemaphoreProperties;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;
  readonly compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;
  readonly externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlagBits;
}

export interface VkExternalSemaphoreProperties {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;
  readonly compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlagBits;
  readonly externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlagBits;
}


/** ## VkPhysicalDeviceExternalSemaphoreInfoKHR ## */
interface VkPhysicalDeviceExternalSemaphoreInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleType?: VkExternalSemaphoreHandleTypeFlagBits;
}

declare var VkPhysicalDeviceExternalSemaphoreInfoKHR: {
  prototype: VkPhysicalDeviceExternalSemaphoreInfoKHR;
  new(param?: VkPhysicalDeviceExternalSemaphoreInfoKHRInitializer | null): VkPhysicalDeviceExternalSemaphoreInfoKHR;
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalSemaphoreHandleTypeFlagBits;
}

export interface VkPhysicalDeviceExternalSemaphoreInfoKHR {
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalSemaphoreHandleTypeFlagBits;
}


/** ## VkPhysicalDeviceExternalSemaphoreInfo ## */
interface VkPhysicalDeviceExternalSemaphoreInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleType?: VkExternalSemaphoreHandleTypeFlagBits;
}

declare var VkPhysicalDeviceExternalSemaphoreInfo: {
  prototype: VkPhysicalDeviceExternalSemaphoreInfo;
  new(param?: VkPhysicalDeviceExternalSemaphoreInfoInitializer | null): VkPhysicalDeviceExternalSemaphoreInfo;
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalSemaphoreHandleTypeFlagBits;
}

export interface VkPhysicalDeviceExternalSemaphoreInfo {
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalSemaphoreHandleTypeFlagBits;
}


/** ## VkMemoryGetFdInfoKHR ## */
interface VkMemoryGetFdInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  memory?: VkDeviceMemory | null;
  handleType?: VkExternalMemoryHandleTypeFlagBits;
}

declare var VkMemoryGetFdInfoKHR: {
  prototype: VkMemoryGetFdInfoKHR;
  new(param?: VkMemoryGetFdInfoKHRInitializer | null): VkMemoryGetFdInfoKHR;
  sType: VkStructureType;
  pNext: null;
  memory: VkDeviceMemory | null;
  handleType: VkExternalMemoryHandleTypeFlagBits;
}

export interface VkMemoryGetFdInfoKHR {
  sType: VkStructureType;
  pNext: null;
  memory: VkDeviceMemory | null;
  handleType: VkExternalMemoryHandleTypeFlagBits;
}


/** ## VkMemoryFdPropertiesKHR ## */
interface VkMemoryFdPropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly memoryTypeBits?: number;
}

declare var VkMemoryFdPropertiesKHR: {
  prototype: VkMemoryFdPropertiesKHR;
  new(param?: VkMemoryFdPropertiesKHRInitializer | null): VkMemoryFdPropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryTypeBits: number;
}

export interface VkMemoryFdPropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryTypeBits: number;
}


/** ## VkImportMemoryFdInfoKHR ## */
interface VkImportMemoryFdInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleType?: VkExternalMemoryHandleTypeFlagBits;
  fd?: number;
}

declare var VkImportMemoryFdInfoKHR: {
  prototype: VkImportMemoryFdInfoKHR;
  new(param?: VkImportMemoryFdInfoKHRInitializer | null): VkImportMemoryFdInfoKHR;
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalMemoryHandleTypeFlagBits;
  fd: number;
}

export interface VkImportMemoryFdInfoKHR {
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalMemoryHandleTypeFlagBits;
  fd: number;
}


/** ## VkExportMemoryAllocateInfoKHR ## */
interface VkExportMemoryAllocateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare var VkExportMemoryAllocateInfoKHR: {
  prototype: VkExportMemoryAllocateInfoKHR;
  new(param?: VkExportMemoryAllocateInfoKHRInitializer | null): VkExportMemoryAllocateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBits;
}

export interface VkExportMemoryAllocateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBits;
}


/** ## VkExportMemoryAllocateInfo ## */
interface VkExportMemoryAllocateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare var VkExportMemoryAllocateInfo: {
  prototype: VkExportMemoryAllocateInfo;
  new(param?: VkExportMemoryAllocateInfoInitializer | null): VkExportMemoryAllocateInfo;
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBits;
}

export interface VkExportMemoryAllocateInfo {
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBits;
}


/** ## VkExternalMemoryBufferCreateInfoKHR ## */
interface VkExternalMemoryBufferCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare var VkExternalMemoryBufferCreateInfoKHR: {
  prototype: VkExternalMemoryBufferCreateInfoKHR;
  new(param?: VkExternalMemoryBufferCreateInfoKHRInitializer | null): VkExternalMemoryBufferCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBits;
}

export interface VkExternalMemoryBufferCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBits;
}


/** ## VkExternalMemoryBufferCreateInfo ## */
interface VkExternalMemoryBufferCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare var VkExternalMemoryBufferCreateInfo: {
  prototype: VkExternalMemoryBufferCreateInfo;
  new(param?: VkExternalMemoryBufferCreateInfoInitializer | null): VkExternalMemoryBufferCreateInfo;
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBits;
}

export interface VkExternalMemoryBufferCreateInfo {
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBits;
}


/** ## VkExternalMemoryImageCreateInfoKHR ## */
interface VkExternalMemoryImageCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare var VkExternalMemoryImageCreateInfoKHR: {
  prototype: VkExternalMemoryImageCreateInfoKHR;
  new(param?: VkExternalMemoryImageCreateInfoKHRInitializer | null): VkExternalMemoryImageCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBits;
}

export interface VkExternalMemoryImageCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBits;
}


/** ## VkExternalMemoryImageCreateInfo ## */
interface VkExternalMemoryImageCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare var VkExternalMemoryImageCreateInfo: {
  prototype: VkExternalMemoryImageCreateInfo;
  new(param?: VkExternalMemoryImageCreateInfoInitializer | null): VkExternalMemoryImageCreateInfo;
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBits;
}

export interface VkExternalMemoryImageCreateInfo {
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBits;
}


/** ## VkPhysicalDeviceIDPropertiesKHR ## */
interface VkPhysicalDeviceIDPropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly deviceUUID?: number[] | null;
  readonly driverUUID?: number[] | null;
  readonly deviceLUID?: number[] | null;
  readonly deviceNodeMask?: number;
  readonly deviceLUIDValid?: number;
}

declare var VkPhysicalDeviceIDPropertiesKHR: {
  prototype: VkPhysicalDeviceIDPropertiesKHR;
  new(param?: VkPhysicalDeviceIDPropertiesKHRInitializer | null): VkPhysicalDeviceIDPropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly deviceUUID: number[] | null;
  readonly driverUUID: number[] | null;
  readonly deviceLUID: number[] | null;
  readonly deviceNodeMask: number;
  readonly deviceLUIDValid: number;
}

export interface VkPhysicalDeviceIDPropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly deviceUUID: number[] | null;
  readonly driverUUID: number[] | null;
  readonly deviceLUID: number[] | null;
  readonly deviceNodeMask: number;
  readonly deviceLUIDValid: number;
}


/** ## VkPhysicalDeviceIDProperties ## */
interface VkPhysicalDeviceIDPropertiesInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly deviceUUID?: number[] | null;
  readonly driverUUID?: number[] | null;
  readonly deviceLUID?: number[] | null;
  readonly deviceNodeMask?: number;
  readonly deviceLUIDValid?: number;
}

declare var VkPhysicalDeviceIDProperties: {
  prototype: VkPhysicalDeviceIDProperties;
  new(param?: VkPhysicalDeviceIDPropertiesInitializer | null): VkPhysicalDeviceIDProperties;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly deviceUUID: number[] | null;
  readonly driverUUID: number[] | null;
  readonly deviceLUID: number[] | null;
  readonly deviceNodeMask: number;
  readonly deviceLUIDValid: number;
}

export interface VkPhysicalDeviceIDProperties {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly deviceUUID: number[] | null;
  readonly driverUUID: number[] | null;
  readonly deviceLUID: number[] | null;
  readonly deviceNodeMask: number;
  readonly deviceLUIDValid: number;
}


/** ## VkExternalBufferPropertiesKHR ## */
interface VkExternalBufferPropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly externalMemoryProperties?: VkExternalMemoryProperties | null;
}

declare var VkExternalBufferPropertiesKHR: {
  prototype: VkExternalBufferPropertiesKHR;
  new(param?: VkExternalBufferPropertiesKHRInitializer | null): VkExternalBufferPropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly externalMemoryProperties: VkExternalMemoryProperties | null;
}

export interface VkExternalBufferPropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly externalMemoryProperties: VkExternalMemoryProperties | null;
}


/** ## VkExternalBufferProperties ## */
interface VkExternalBufferPropertiesInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly externalMemoryProperties?: VkExternalMemoryProperties | null;
}

declare var VkExternalBufferProperties: {
  prototype: VkExternalBufferProperties;
  new(param?: VkExternalBufferPropertiesInitializer | null): VkExternalBufferProperties;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly externalMemoryProperties: VkExternalMemoryProperties | null;
}

export interface VkExternalBufferProperties {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly externalMemoryProperties: VkExternalMemoryProperties | null;
}


/** ## VkPhysicalDeviceExternalBufferInfoKHR ## */
interface VkPhysicalDeviceExternalBufferInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkBufferCreateFlagBits;
  usage?: VkBufferUsageFlagBits;
  handleType?: VkExternalMemoryHandleTypeFlagBits;
}

declare var VkPhysicalDeviceExternalBufferInfoKHR: {
  prototype: VkPhysicalDeviceExternalBufferInfoKHR;
  new(param?: VkPhysicalDeviceExternalBufferInfoKHRInitializer | null): VkPhysicalDeviceExternalBufferInfoKHR;
  sType: VkStructureType;
  pNext: null;
  flags: VkBufferCreateFlagBits;
  usage: VkBufferUsageFlagBits;
  handleType: VkExternalMemoryHandleTypeFlagBits;
}

export interface VkPhysicalDeviceExternalBufferInfoKHR {
  sType: VkStructureType;
  pNext: null;
  flags: VkBufferCreateFlagBits;
  usage: VkBufferUsageFlagBits;
  handleType: VkExternalMemoryHandleTypeFlagBits;
}


/** ## VkPhysicalDeviceExternalBufferInfo ## */
interface VkPhysicalDeviceExternalBufferInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkBufferCreateFlagBits;
  usage?: VkBufferUsageFlagBits;
  handleType?: VkExternalMemoryHandleTypeFlagBits;
}

declare var VkPhysicalDeviceExternalBufferInfo: {
  prototype: VkPhysicalDeviceExternalBufferInfo;
  new(param?: VkPhysicalDeviceExternalBufferInfoInitializer | null): VkPhysicalDeviceExternalBufferInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkBufferCreateFlagBits;
  usage: VkBufferUsageFlagBits;
  handleType: VkExternalMemoryHandleTypeFlagBits;
}

export interface VkPhysicalDeviceExternalBufferInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkBufferCreateFlagBits;
  usage: VkBufferUsageFlagBits;
  handleType: VkExternalMemoryHandleTypeFlagBits;
}


/** ## VkExternalImageFormatPropertiesKHR ## */
interface VkExternalImageFormatPropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly externalMemoryProperties?: VkExternalMemoryProperties | null;
}

declare var VkExternalImageFormatPropertiesKHR: {
  prototype: VkExternalImageFormatPropertiesKHR;
  new(param?: VkExternalImageFormatPropertiesKHRInitializer | null): VkExternalImageFormatPropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly externalMemoryProperties: VkExternalMemoryProperties | null;
}

export interface VkExternalImageFormatPropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly externalMemoryProperties: VkExternalMemoryProperties | null;
}


/** ## VkExternalImageFormatProperties ## */
interface VkExternalImageFormatPropertiesInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly externalMemoryProperties?: VkExternalMemoryProperties | null;
}

declare var VkExternalImageFormatProperties: {
  prototype: VkExternalImageFormatProperties;
  new(param?: VkExternalImageFormatPropertiesInitializer | null): VkExternalImageFormatProperties;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly externalMemoryProperties: VkExternalMemoryProperties | null;
}

export interface VkExternalImageFormatProperties {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly externalMemoryProperties: VkExternalMemoryProperties | null;
}


/** ## VkPhysicalDeviceExternalImageFormatInfoKHR ## */
interface VkPhysicalDeviceExternalImageFormatInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleType?: VkExternalMemoryHandleTypeFlagBits;
}

declare var VkPhysicalDeviceExternalImageFormatInfoKHR: {
  prototype: VkPhysicalDeviceExternalImageFormatInfoKHR;
  new(param?: VkPhysicalDeviceExternalImageFormatInfoKHRInitializer | null): VkPhysicalDeviceExternalImageFormatInfoKHR;
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalMemoryHandleTypeFlagBits;
}

export interface VkPhysicalDeviceExternalImageFormatInfoKHR {
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalMemoryHandleTypeFlagBits;
}


/** ## VkPhysicalDeviceExternalImageFormatInfo ## */
interface VkPhysicalDeviceExternalImageFormatInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleType?: VkExternalMemoryHandleTypeFlagBits;
}

declare var VkPhysicalDeviceExternalImageFormatInfo: {
  prototype: VkPhysicalDeviceExternalImageFormatInfo;
  new(param?: VkPhysicalDeviceExternalImageFormatInfoInitializer | null): VkPhysicalDeviceExternalImageFormatInfo;
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalMemoryHandleTypeFlagBits;
}

export interface VkPhysicalDeviceExternalImageFormatInfo {
  sType: VkStructureType;
  pNext: null;
  handleType: VkExternalMemoryHandleTypeFlagBits;
}


/** ## VkExternalMemoryPropertiesKHR ## */
interface VkExternalMemoryPropertiesKHRInitializer {
  readonly externalMemoryFeatures?: VkExternalMemoryFeatureFlagBits;
  readonly exportFromImportedHandleTypes?: VkExternalMemoryHandleTypeFlagBits;
  readonly compatibleHandleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare var VkExternalMemoryPropertiesKHR: {
  prototype: VkExternalMemoryPropertiesKHR;
  new(param?: VkExternalMemoryPropertiesKHRInitializer | null): VkExternalMemoryPropertiesKHR;
  readonly externalMemoryFeatures: VkExternalMemoryFeatureFlagBits;
  readonly exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagBits;
  readonly compatibleHandleTypes: VkExternalMemoryHandleTypeFlagBits;
}

export interface VkExternalMemoryPropertiesKHR {
  readonly externalMemoryFeatures: VkExternalMemoryFeatureFlagBits;
  readonly exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagBits;
  readonly compatibleHandleTypes: VkExternalMemoryHandleTypeFlagBits;
}


/** ## VkExternalMemoryProperties ## */
interface VkExternalMemoryPropertiesInitializer {
  readonly externalMemoryFeatures?: VkExternalMemoryFeatureFlagBits;
  readonly exportFromImportedHandleTypes?: VkExternalMemoryHandleTypeFlagBits;
  readonly compatibleHandleTypes?: VkExternalMemoryHandleTypeFlagBits;
}

declare var VkExternalMemoryProperties: {
  prototype: VkExternalMemoryProperties;
  new(param?: VkExternalMemoryPropertiesInitializer | null): VkExternalMemoryProperties;
  readonly externalMemoryFeatures: VkExternalMemoryFeatureFlagBits;
  readonly exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagBits;
  readonly compatibleHandleTypes: VkExternalMemoryHandleTypeFlagBits;
}

export interface VkExternalMemoryProperties {
  readonly externalMemoryFeatures: VkExternalMemoryFeatureFlagBits;
  readonly exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagBits;
  readonly compatibleHandleTypes: VkExternalMemoryHandleTypeFlagBits;
}


/** ## VkPhysicalDeviceVariablePointerFeaturesKHR ## */
interface VkPhysicalDeviceVariablePointerFeaturesKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  variablePointersStorageBuffer?: number;
  variablePointers?: number;
}

declare var VkPhysicalDeviceVariablePointerFeaturesKHR: {
  prototype: VkPhysicalDeviceVariablePointerFeaturesKHR;
  new(param?: VkPhysicalDeviceVariablePointerFeaturesKHRInitializer | null): VkPhysicalDeviceVariablePointerFeaturesKHR;
  sType: VkStructureType;
  pNext: null;
  variablePointersStorageBuffer: number;
  variablePointers: number;
}

export interface VkPhysicalDeviceVariablePointerFeaturesKHR {
  sType: VkStructureType;
  pNext: null;
  variablePointersStorageBuffer: number;
  variablePointers: number;
}


/** ## VkPhysicalDeviceVariablePointerFeatures ## */
interface VkPhysicalDeviceVariablePointerFeaturesInitializer {
  sType?: VkStructureType;
  pNext?: null;
  variablePointersStorageBuffer?: number;
  variablePointers?: number;
}

declare var VkPhysicalDeviceVariablePointerFeatures: {
  prototype: VkPhysicalDeviceVariablePointerFeatures;
  new(param?: VkPhysicalDeviceVariablePointerFeaturesInitializer | null): VkPhysicalDeviceVariablePointerFeatures;
  sType: VkStructureType;
  pNext: null;
  variablePointersStorageBuffer: number;
  variablePointers: number;
}

export interface VkPhysicalDeviceVariablePointerFeatures {
  sType: VkStructureType;
  pNext: null;
  variablePointersStorageBuffer: number;
  variablePointers: number;
}


/** ## VkRectLayerKHR ## */
interface VkRectLayerKHRInitializer {
  offset?: VkOffset2D | null;
  extent?: VkExtent2D | null;
  layer?: number;
}

declare var VkRectLayerKHR: {
  prototype: VkRectLayerKHR;
  new(param?: VkRectLayerKHRInitializer | null): VkRectLayerKHR;
  offset: VkOffset2D | null;
  extent: VkExtent2D | null;
  layer: number;
}

export interface VkRectLayerKHR {
  offset: VkOffset2D | null;
  extent: VkExtent2D | null;
  layer: number;
}


/** ## VkPresentRegionKHR ## */
interface VkPresentRegionKHRInitializer {
  rectangleCount?: number;
  pRectangles?: VkRectLayerKHR[] | null;
}

declare var VkPresentRegionKHR: {
  prototype: VkPresentRegionKHR;
  new(param?: VkPresentRegionKHRInitializer | null): VkPresentRegionKHR;
  rectangleCount: number;
  pRectangles: VkRectLayerKHR[] | null;
}

export interface VkPresentRegionKHR {
  rectangleCount: number;
  pRectangles: VkRectLayerKHR[] | null;
}


/** ## VkPresentRegionsKHR ## */
interface VkPresentRegionsKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  swapchainCount?: number;
  pRegions?: VkPresentRegionKHR[] | null;
}

declare var VkPresentRegionsKHR: {
  prototype: VkPresentRegionsKHR;
  new(param?: VkPresentRegionsKHRInitializer | null): VkPresentRegionsKHR;
  sType: VkStructureType;
  pNext: null;
  swapchainCount: number;
  pRegions: VkPresentRegionKHR[] | null;
}

export interface VkPresentRegionsKHR {
  sType: VkStructureType;
  pNext: null;
  swapchainCount: number;
  pRegions: VkPresentRegionKHR[] | null;
}


/** ## VkPhysicalDeviceDriverPropertiesKHR ## */
interface VkPhysicalDeviceDriverPropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly driverID?: VkDriverIdKHR;
  readonly driverName?: string | null;
  readonly driverInfo?: string | null;
  readonly conformanceVersion?: VkConformanceVersionKHR | null;
}

declare var VkPhysicalDeviceDriverPropertiesKHR: {
  prototype: VkPhysicalDeviceDriverPropertiesKHR;
  new(param?: VkPhysicalDeviceDriverPropertiesKHRInitializer | null): VkPhysicalDeviceDriverPropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly driverID: VkDriverIdKHR;
  readonly driverName: string | null;
  readonly driverInfo: string | null;
  readonly conformanceVersion: VkConformanceVersionKHR | null;
}

export interface VkPhysicalDeviceDriverPropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly driverID: VkDriverIdKHR;
  readonly driverName: string | null;
  readonly driverInfo: string | null;
  readonly conformanceVersion: VkConformanceVersionKHR | null;
}


/** ## VkConformanceVersionKHR ## */
interface VkConformanceVersionKHRInitializer {
  major?: number;
  minor?: number;
  subminor?: number;
  patch?: number;
}

declare var VkConformanceVersionKHR: {
  prototype: VkConformanceVersionKHR;
  new(param?: VkConformanceVersionKHRInitializer | null): VkConformanceVersionKHR;
  major: number;
  minor: number;
  subminor: number;
  patch: number;
}

export interface VkConformanceVersionKHR {
  major: number;
  minor: number;
  subminor: number;
  patch: number;
}


/** ## VkPhysicalDevicePushDescriptorPropertiesKHR ## */
interface VkPhysicalDevicePushDescriptorPropertiesKHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly maxPushDescriptors?: number;
}

declare var VkPhysicalDevicePushDescriptorPropertiesKHR: {
  prototype: VkPhysicalDevicePushDescriptorPropertiesKHR;
  new(param?: VkPhysicalDevicePushDescriptorPropertiesKHRInitializer | null): VkPhysicalDevicePushDescriptorPropertiesKHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxPushDescriptors: number;
}

export interface VkPhysicalDevicePushDescriptorPropertiesKHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly maxPushDescriptors: number;
}


/** ## VkPhysicalDeviceSparseImageFormatInfo2KHR ## */
interface VkPhysicalDeviceSparseImageFormatInfo2KHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  format?: VkFormat;
  type?: VkImageType;
  samples?: VkSampleCountFlagBits;
  usage?: VkImageUsageFlagBits;
  tiling?: VkImageTiling;
}

declare var VkPhysicalDeviceSparseImageFormatInfo2KHR: {
  prototype: VkPhysicalDeviceSparseImageFormatInfo2KHR;
  new(param?: VkPhysicalDeviceSparseImageFormatInfo2KHRInitializer | null): VkPhysicalDeviceSparseImageFormatInfo2KHR;
  sType: VkStructureType;
  pNext: null;
  format: VkFormat;
  type: VkImageType;
  samples: VkSampleCountFlagBits;
  usage: VkImageUsageFlagBits;
  tiling: VkImageTiling;
}

export interface VkPhysicalDeviceSparseImageFormatInfo2KHR {
  sType: VkStructureType;
  pNext: null;
  format: VkFormat;
  type: VkImageType;
  samples: VkSampleCountFlagBits;
  usage: VkImageUsageFlagBits;
  tiling: VkImageTiling;
}


/** ## VkPhysicalDeviceSparseImageFormatInfo2 ## */
interface VkPhysicalDeviceSparseImageFormatInfo2Initializer {
  sType?: VkStructureType;
  pNext?: null;
  format?: VkFormat;
  type?: VkImageType;
  samples?: VkSampleCountFlagBits;
  usage?: VkImageUsageFlagBits;
  tiling?: VkImageTiling;
}

declare var VkPhysicalDeviceSparseImageFormatInfo2: {
  prototype: VkPhysicalDeviceSparseImageFormatInfo2;
  new(param?: VkPhysicalDeviceSparseImageFormatInfo2Initializer | null): VkPhysicalDeviceSparseImageFormatInfo2;
  sType: VkStructureType;
  pNext: null;
  format: VkFormat;
  type: VkImageType;
  samples: VkSampleCountFlagBits;
  usage: VkImageUsageFlagBits;
  tiling: VkImageTiling;
}

export interface VkPhysicalDeviceSparseImageFormatInfo2 {
  sType: VkStructureType;
  pNext: null;
  format: VkFormat;
  type: VkImageType;
  samples: VkSampleCountFlagBits;
  usage: VkImageUsageFlagBits;
  tiling: VkImageTiling;
}


/** ## VkSparseImageFormatProperties2KHR ## */
interface VkSparseImageFormatProperties2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly properties?: VkSparseImageFormatProperties | null;
}

declare var VkSparseImageFormatProperties2KHR: {
  prototype: VkSparseImageFormatProperties2KHR;
  new(param?: VkSparseImageFormatProperties2KHRInitializer | null): VkSparseImageFormatProperties2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly properties: VkSparseImageFormatProperties | null;
}

export interface VkSparseImageFormatProperties2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly properties: VkSparseImageFormatProperties | null;
}


/** ## VkSparseImageFormatProperties2 ## */
interface VkSparseImageFormatProperties2Initializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly properties?: VkSparseImageFormatProperties | null;
}

declare var VkSparseImageFormatProperties2: {
  prototype: VkSparseImageFormatProperties2;
  new(param?: VkSparseImageFormatProperties2Initializer | null): VkSparseImageFormatProperties2;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly properties: VkSparseImageFormatProperties | null;
}

export interface VkSparseImageFormatProperties2 {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly properties: VkSparseImageFormatProperties | null;
}


/** ## VkPhysicalDeviceMemoryProperties2KHR ## */
interface VkPhysicalDeviceMemoryProperties2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly memoryProperties?: VkPhysicalDeviceMemoryProperties | null;
}

declare var VkPhysicalDeviceMemoryProperties2KHR: {
  prototype: VkPhysicalDeviceMemoryProperties2KHR;
  new(param?: VkPhysicalDeviceMemoryProperties2KHRInitializer | null): VkPhysicalDeviceMemoryProperties2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryProperties: VkPhysicalDeviceMemoryProperties | null;
}

export interface VkPhysicalDeviceMemoryProperties2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryProperties: VkPhysicalDeviceMemoryProperties | null;
}


/** ## VkPhysicalDeviceMemoryProperties2 ## */
interface VkPhysicalDeviceMemoryProperties2Initializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly memoryProperties?: VkPhysicalDeviceMemoryProperties | null;
}

declare var VkPhysicalDeviceMemoryProperties2: {
  prototype: VkPhysicalDeviceMemoryProperties2;
  new(param?: VkPhysicalDeviceMemoryProperties2Initializer | null): VkPhysicalDeviceMemoryProperties2;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryProperties: VkPhysicalDeviceMemoryProperties | null;
}

export interface VkPhysicalDeviceMemoryProperties2 {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly memoryProperties: VkPhysicalDeviceMemoryProperties | null;
}


/** ## VkQueueFamilyProperties2KHR ## */
interface VkQueueFamilyProperties2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly queueFamilyProperties?: VkQueueFamilyProperties | null;
}

declare var VkQueueFamilyProperties2KHR: {
  prototype: VkQueueFamilyProperties2KHR;
  new(param?: VkQueueFamilyProperties2KHRInitializer | null): VkQueueFamilyProperties2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly queueFamilyProperties: VkQueueFamilyProperties | null;
}

export interface VkQueueFamilyProperties2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly queueFamilyProperties: VkQueueFamilyProperties | null;
}


/** ## VkQueueFamilyProperties2 ## */
interface VkQueueFamilyProperties2Initializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly queueFamilyProperties?: VkQueueFamilyProperties | null;
}

declare var VkQueueFamilyProperties2: {
  prototype: VkQueueFamilyProperties2;
  new(param?: VkQueueFamilyProperties2Initializer | null): VkQueueFamilyProperties2;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly queueFamilyProperties: VkQueueFamilyProperties | null;
}

export interface VkQueueFamilyProperties2 {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly queueFamilyProperties: VkQueueFamilyProperties | null;
}


/** ## VkPhysicalDeviceImageFormatInfo2KHR ## */
interface VkPhysicalDeviceImageFormatInfo2KHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  format?: VkFormat;
  type?: VkImageType;
  tiling?: VkImageTiling;
  usage?: VkImageUsageFlagBits;
  flags?: VkImageCreateFlagBits;
}

declare var VkPhysicalDeviceImageFormatInfo2KHR: {
  prototype: VkPhysicalDeviceImageFormatInfo2KHR;
  new(param?: VkPhysicalDeviceImageFormatInfo2KHRInitializer | null): VkPhysicalDeviceImageFormatInfo2KHR;
  sType: VkStructureType;
  pNext: null;
  format: VkFormat;
  type: VkImageType;
  tiling: VkImageTiling;
  usage: VkImageUsageFlagBits;
  flags: VkImageCreateFlagBits;
}

export interface VkPhysicalDeviceImageFormatInfo2KHR {
  sType: VkStructureType;
  pNext: null;
  format: VkFormat;
  type: VkImageType;
  tiling: VkImageTiling;
  usage: VkImageUsageFlagBits;
  flags: VkImageCreateFlagBits;
}


/** ## VkPhysicalDeviceImageFormatInfo2 ## */
interface VkPhysicalDeviceImageFormatInfo2Initializer {
  sType?: VkStructureType;
  pNext?: null;
  format?: VkFormat;
  type?: VkImageType;
  tiling?: VkImageTiling;
  usage?: VkImageUsageFlagBits;
  flags?: VkImageCreateFlagBits;
}

declare var VkPhysicalDeviceImageFormatInfo2: {
  prototype: VkPhysicalDeviceImageFormatInfo2;
  new(param?: VkPhysicalDeviceImageFormatInfo2Initializer | null): VkPhysicalDeviceImageFormatInfo2;
  sType: VkStructureType;
  pNext: null;
  format: VkFormat;
  type: VkImageType;
  tiling: VkImageTiling;
  usage: VkImageUsageFlagBits;
  flags: VkImageCreateFlagBits;
}

export interface VkPhysicalDeviceImageFormatInfo2 {
  sType: VkStructureType;
  pNext: null;
  format: VkFormat;
  type: VkImageType;
  tiling: VkImageTiling;
  usage: VkImageUsageFlagBits;
  flags: VkImageCreateFlagBits;
}


/** ## VkImageFormatProperties2KHR ## */
interface VkImageFormatProperties2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly imageFormatProperties?: VkImageFormatProperties | null;
}

declare var VkImageFormatProperties2KHR: {
  prototype: VkImageFormatProperties2KHR;
  new(param?: VkImageFormatProperties2KHRInitializer | null): VkImageFormatProperties2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly imageFormatProperties: VkImageFormatProperties | null;
}

export interface VkImageFormatProperties2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly imageFormatProperties: VkImageFormatProperties | null;
}


/** ## VkImageFormatProperties2 ## */
interface VkImageFormatProperties2Initializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly imageFormatProperties?: VkImageFormatProperties | null;
}

declare var VkImageFormatProperties2: {
  prototype: VkImageFormatProperties2;
  new(param?: VkImageFormatProperties2Initializer | null): VkImageFormatProperties2;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly imageFormatProperties: VkImageFormatProperties | null;
}

export interface VkImageFormatProperties2 {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly imageFormatProperties: VkImageFormatProperties | null;
}


/** ## VkFormatProperties2KHR ## */
interface VkFormatProperties2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly formatProperties?: VkFormatProperties | null;
}

declare var VkFormatProperties2KHR: {
  prototype: VkFormatProperties2KHR;
  new(param?: VkFormatProperties2KHRInitializer | null): VkFormatProperties2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly formatProperties: VkFormatProperties | null;
}

export interface VkFormatProperties2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly formatProperties: VkFormatProperties | null;
}


/** ## VkFormatProperties2 ## */
interface VkFormatProperties2Initializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly formatProperties?: VkFormatProperties | null;
}

declare var VkFormatProperties2: {
  prototype: VkFormatProperties2;
  new(param?: VkFormatProperties2Initializer | null): VkFormatProperties2;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly formatProperties: VkFormatProperties | null;
}

export interface VkFormatProperties2 {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly formatProperties: VkFormatProperties | null;
}


/** ## VkPhysicalDeviceProperties2KHR ## */
interface VkPhysicalDeviceProperties2KHRInitializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly properties?: VkPhysicalDeviceProperties | null;
}

declare var VkPhysicalDeviceProperties2KHR: {
  prototype: VkPhysicalDeviceProperties2KHR;
  new(param?: VkPhysicalDeviceProperties2KHRInitializer | null): VkPhysicalDeviceProperties2KHR;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly properties: VkPhysicalDeviceProperties | null;
}

export interface VkPhysicalDeviceProperties2KHR {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly properties: VkPhysicalDeviceProperties | null;
}


/** ## VkPhysicalDeviceProperties2 ## */
interface VkPhysicalDeviceProperties2Initializer {
  readonly sType?: VkStructureType;
  readonly pNext?: null;
  readonly properties?: VkPhysicalDeviceProperties | null;
}

declare var VkPhysicalDeviceProperties2: {
  prototype: VkPhysicalDeviceProperties2;
  new(param?: VkPhysicalDeviceProperties2Initializer | null): VkPhysicalDeviceProperties2;
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly properties: VkPhysicalDeviceProperties | null;
}

export interface VkPhysicalDeviceProperties2 {
  readonly sType: VkStructureType;
  readonly pNext: null;
  readonly properties: VkPhysicalDeviceProperties | null;
}


/** ## VkPhysicalDeviceFeatures2KHR ## */
interface VkPhysicalDeviceFeatures2KHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  features?: VkPhysicalDeviceFeatures | null;
}

declare var VkPhysicalDeviceFeatures2KHR: {
  prototype: VkPhysicalDeviceFeatures2KHR;
  new(param?: VkPhysicalDeviceFeatures2KHRInitializer | null): VkPhysicalDeviceFeatures2KHR;
  sType: VkStructureType;
  pNext: null;
  features: VkPhysicalDeviceFeatures | null;
}

export interface VkPhysicalDeviceFeatures2KHR {
  sType: VkStructureType;
  pNext: null;
  features: VkPhysicalDeviceFeatures | null;
}


/** ## VkPhysicalDeviceFeatures2 ## */
interface VkPhysicalDeviceFeatures2Initializer {
  sType?: VkStructureType;
  pNext?: null;
  features?: VkPhysicalDeviceFeatures | null;
}

declare var VkPhysicalDeviceFeatures2: {
  prototype: VkPhysicalDeviceFeatures2;
  new(param?: VkPhysicalDeviceFeatures2Initializer | null): VkPhysicalDeviceFeatures2;
  sType: VkStructureType;
  pNext: null;
  features: VkPhysicalDeviceFeatures | null;
}

export interface VkPhysicalDeviceFeatures2 {
  sType: VkStructureType;
  pNext: null;
  features: VkPhysicalDeviceFeatures | null;
}


/** ## VkObjectTablePushConstantEntryNVX ## */
interface VkObjectTablePushConstantEntryNVXInitializer {
  type?: VkObjectEntryTypeNVX;
  flags?: VkObjectEntryUsageFlagBitsNVX;
  pipelineLayout?: VkPipelineLayout | null;
  stageFlags?: VkShaderStageFlagBits;
}

declare var VkObjectTablePushConstantEntryNVX: {
  prototype: VkObjectTablePushConstantEntryNVX;
  new(param?: VkObjectTablePushConstantEntryNVXInitializer | null): VkObjectTablePushConstantEntryNVX;
  type: VkObjectEntryTypeNVX;
  flags: VkObjectEntryUsageFlagBitsNVX;
  pipelineLayout: VkPipelineLayout | null;
  stageFlags: VkShaderStageFlagBits;
}

export interface VkObjectTablePushConstantEntryNVX {
  type: VkObjectEntryTypeNVX;
  flags: VkObjectEntryUsageFlagBitsNVX;
  pipelineLayout: VkPipelineLayout | null;
  stageFlags: VkShaderStageFlagBits;
}


/** ## VkObjectTableIndexBufferEntryNVX ## */
interface VkObjectTableIndexBufferEntryNVXInitializer {
  type?: VkObjectEntryTypeNVX;
  flags?: VkObjectEntryUsageFlagBitsNVX;
  buffer?: VkBuffer | null;
  indexType?: VkIndexType;
}

declare var VkObjectTableIndexBufferEntryNVX: {
  prototype: VkObjectTableIndexBufferEntryNVX;
  new(param?: VkObjectTableIndexBufferEntryNVXInitializer | null): VkObjectTableIndexBufferEntryNVX;
  type: VkObjectEntryTypeNVX;
  flags: VkObjectEntryUsageFlagBitsNVX;
  buffer: VkBuffer | null;
  indexType: VkIndexType;
}

export interface VkObjectTableIndexBufferEntryNVX {
  type: VkObjectEntryTypeNVX;
  flags: VkObjectEntryUsageFlagBitsNVX;
  buffer: VkBuffer | null;
  indexType: VkIndexType;
}


/** ## VkObjectTableVertexBufferEntryNVX ## */
interface VkObjectTableVertexBufferEntryNVXInitializer {
  type?: VkObjectEntryTypeNVX;
  flags?: VkObjectEntryUsageFlagBitsNVX;
  buffer?: VkBuffer | null;
}

declare var VkObjectTableVertexBufferEntryNVX: {
  prototype: VkObjectTableVertexBufferEntryNVX;
  new(param?: VkObjectTableVertexBufferEntryNVXInitializer | null): VkObjectTableVertexBufferEntryNVX;
  type: VkObjectEntryTypeNVX;
  flags: VkObjectEntryUsageFlagBitsNVX;
  buffer: VkBuffer | null;
}

export interface VkObjectTableVertexBufferEntryNVX {
  type: VkObjectEntryTypeNVX;
  flags: VkObjectEntryUsageFlagBitsNVX;
  buffer: VkBuffer | null;
}


/** ## VkObjectTableDescriptorSetEntryNVX ## */
interface VkObjectTableDescriptorSetEntryNVXInitializer {
  type?: VkObjectEntryTypeNVX;
  flags?: VkObjectEntryUsageFlagBitsNVX;
  pipelineLayout?: VkPipelineLayout | null;
  descriptorSet?: VkDescriptorSet | null;
}

declare var VkObjectTableDescriptorSetEntryNVX: {
  prototype: VkObjectTableDescriptorSetEntryNVX;
  new(param?: VkObjectTableDescriptorSetEntryNVXInitializer | null): VkObjectTableDescriptorSetEntryNVX;
  type: VkObjectEntryTypeNVX;
  flags: VkObjectEntryUsageFlagBitsNVX;
  pipelineLayout: VkPipelineLayout | null;
  descriptorSet: VkDescriptorSet | null;
}

export interface VkObjectTableDescriptorSetEntryNVX {
  type: VkObjectEntryTypeNVX;
  flags: VkObjectEntryUsageFlagBitsNVX;
  pipelineLayout: VkPipelineLayout | null;
  descriptorSet: VkDescriptorSet | null;
}


/** ## VkObjectTablePipelineEntryNVX ## */
interface VkObjectTablePipelineEntryNVXInitializer {
  type?: VkObjectEntryTypeNVX;
  flags?: VkObjectEntryUsageFlagBitsNVX;
  pipeline?: VkPipeline | null;
}

declare var VkObjectTablePipelineEntryNVX: {
  prototype: VkObjectTablePipelineEntryNVX;
  new(param?: VkObjectTablePipelineEntryNVXInitializer | null): VkObjectTablePipelineEntryNVX;
  type: VkObjectEntryTypeNVX;
  flags: VkObjectEntryUsageFlagBitsNVX;
  pipeline: VkPipeline | null;
}

export interface VkObjectTablePipelineEntryNVX {
  type: VkObjectEntryTypeNVX;
  flags: VkObjectEntryUsageFlagBitsNVX;
  pipeline: VkPipeline | null;
}


/** ## VkObjectTableEntryNVX ## */
interface VkObjectTableEntryNVXInitializer {
  type?: VkObjectEntryTypeNVX;
  flags?: VkObjectEntryUsageFlagBitsNVX;
}

declare var VkObjectTableEntryNVX: {
  prototype: VkObjectTableEntryNVX;
  new(param?: VkObjectTableEntryNVXInitializer | null): VkObjectTableEntryNVX;
  type: VkObjectEntryTypeNVX;
  flags: VkObjectEntryUsageFlagBitsNVX;
}

export interface VkObjectTableEntryNVX {
  type: VkObjectEntryTypeNVX;
  flags: VkObjectEntryUsageFlagBitsNVX;
}


/** ## VkObjectTableCreateInfoNVX ## */
interface VkObjectTableCreateInfoNVXInitializer {
  sType?: VkStructureType;
  pNext?: null;
  objectCount?: number;
  pObjectEntryTypes?: Int32Array | null;
  pObjectEntryCounts?: Uint32Array | null;
  pObjectEntryUsageFlags?: Int32Array | null;
  maxUniformBuffersPerDescriptor?: number;
  maxStorageBuffersPerDescriptor?: number;
  maxStorageImagesPerDescriptor?: number;
  maxSampledImagesPerDescriptor?: number;
  maxPipelineLayouts?: number;
}

declare var VkObjectTableCreateInfoNVX: {
  prototype: VkObjectTableCreateInfoNVX;
  new(param?: VkObjectTableCreateInfoNVXInitializer | null): VkObjectTableCreateInfoNVX;
  sType: VkStructureType;
  pNext: null;
  objectCount: number;
  pObjectEntryTypes: Int32Array | null;
  pObjectEntryCounts: Uint32Array | null;
  pObjectEntryUsageFlags: Int32Array | null;
  maxUniformBuffersPerDescriptor: number;
  maxStorageBuffersPerDescriptor: number;
  maxStorageImagesPerDescriptor: number;
  maxSampledImagesPerDescriptor: number;
  maxPipelineLayouts: number;
}

export interface VkObjectTableCreateInfoNVX {
  sType: VkStructureType;
  pNext: null;
  objectCount: number;
  pObjectEntryTypes: Int32Array | null;
  pObjectEntryCounts: Uint32Array | null;
  pObjectEntryUsageFlags: Int32Array | null;
  maxUniformBuffersPerDescriptor: number;
  maxStorageBuffersPerDescriptor: number;
  maxStorageImagesPerDescriptor: number;
  maxSampledImagesPerDescriptor: number;
  maxPipelineLayouts: number;
}


/** ## VkCmdReserveSpaceForCommandsInfoNVX ## */
interface VkCmdReserveSpaceForCommandsInfoNVXInitializer {
  sType?: VkStructureType;
  pNext?: null;
  objectTable?: VkObjectTableNVX | null;
  indirectCommandsLayout?: VkIndirectCommandsLayoutNVX | null;
  maxSequencesCount?: number;
}

declare var VkCmdReserveSpaceForCommandsInfoNVX: {
  prototype: VkCmdReserveSpaceForCommandsInfoNVX;
  new(param?: VkCmdReserveSpaceForCommandsInfoNVXInitializer | null): VkCmdReserveSpaceForCommandsInfoNVX;
  sType: VkStructureType;
  pNext: null;
  objectTable: VkObjectTableNVX | null;
  indirectCommandsLayout: VkIndirectCommandsLayoutNVX | null;
  maxSequencesCount: number;
}

export interface VkCmdReserveSpaceForCommandsInfoNVX {
  sType: VkStructureType;
  pNext: null;
  objectTable: VkObjectTableNVX | null;
  indirectCommandsLayout: VkIndirectCommandsLayoutNVX | null;
  maxSequencesCount: number;
}


/** ## VkCmdProcessCommandsInfoNVX ## */
interface VkCmdProcessCommandsInfoNVXInitializer {
  sType?: VkStructureType;
  pNext?: null;
  objectTable?: VkObjectTableNVX | null;
  indirectCommandsLayout?: VkIndirectCommandsLayoutNVX | null;
  indirectCommandsTokenCount?: number;
  pIndirectCommandsTokens?: VkIndirectCommandsTokenNVX[] | null;
  maxSequencesCount?: number;
  targetCommandBuffer?: VkCommandBuffer | null;
  sequencesCountBuffer?: VkBuffer | null;
  sequencesCountOffset?: number;
  sequencesIndexBuffer?: VkBuffer | null;
  sequencesIndexOffset?: number;
}

declare var VkCmdProcessCommandsInfoNVX: {
  prototype: VkCmdProcessCommandsInfoNVX;
  new(param?: VkCmdProcessCommandsInfoNVXInitializer | null): VkCmdProcessCommandsInfoNVX;
  sType: VkStructureType;
  pNext: null;
  objectTable: VkObjectTableNVX | null;
  indirectCommandsLayout: VkIndirectCommandsLayoutNVX | null;
  indirectCommandsTokenCount: number;
  pIndirectCommandsTokens: VkIndirectCommandsTokenNVX[] | null;
  maxSequencesCount: number;
  targetCommandBuffer: VkCommandBuffer | null;
  sequencesCountBuffer: VkBuffer | null;
  sequencesCountOffset: number;
  sequencesIndexBuffer: VkBuffer | null;
  sequencesIndexOffset: number;
}

export interface VkCmdProcessCommandsInfoNVX {
  sType: VkStructureType;
  pNext: null;
  objectTable: VkObjectTableNVX | null;
  indirectCommandsLayout: VkIndirectCommandsLayoutNVX | null;
  indirectCommandsTokenCount: number;
  pIndirectCommandsTokens: VkIndirectCommandsTokenNVX[] | null;
  maxSequencesCount: number;
  targetCommandBuffer: VkCommandBuffer | null;
  sequencesCountBuffer: VkBuffer | null;
  sequencesCountOffset: number;
  sequencesIndexBuffer: VkBuffer | null;
  sequencesIndexOffset: number;
}


/** ## VkIndirectCommandsLayoutCreateInfoNVX ## */
interface VkIndirectCommandsLayoutCreateInfoNVXInitializer {
  sType?: VkStructureType;
  pNext?: null;
  pipelineBindPoint?: VkPipelineBindPoint;
  flags?: VkIndirectCommandsLayoutUsageFlagBitsNVX;
  tokenCount?: number;
  pTokens?: VkIndirectCommandsLayoutTokenNVX[] | null;
}

declare var VkIndirectCommandsLayoutCreateInfoNVX: {
  prototype: VkIndirectCommandsLayoutCreateInfoNVX;
  new(param?: VkIndirectCommandsLayoutCreateInfoNVXInitializer | null): VkIndirectCommandsLayoutCreateInfoNVX;
  sType: VkStructureType;
  pNext: null;
  pipelineBindPoint: VkPipelineBindPoint;
  flags: VkIndirectCommandsLayoutUsageFlagBitsNVX;
  tokenCount: number;
  pTokens: VkIndirectCommandsLayoutTokenNVX[] | null;
}

export interface VkIndirectCommandsLayoutCreateInfoNVX {
  sType: VkStructureType;
  pNext: null;
  pipelineBindPoint: VkPipelineBindPoint;
  flags: VkIndirectCommandsLayoutUsageFlagBitsNVX;
  tokenCount: number;
  pTokens: VkIndirectCommandsLayoutTokenNVX[] | null;
}


/** ## VkIndirectCommandsLayoutTokenNVX ## */
interface VkIndirectCommandsLayoutTokenNVXInitializer {
  tokenType?: VkIndirectCommandsTokenTypeNVX;
  bindingUnit?: number;
  dynamicCount?: number;
  divisor?: number;
}

declare var VkIndirectCommandsLayoutTokenNVX: {
  prototype: VkIndirectCommandsLayoutTokenNVX;
  new(param?: VkIndirectCommandsLayoutTokenNVXInitializer | null): VkIndirectCommandsLayoutTokenNVX;
  tokenType: VkIndirectCommandsTokenTypeNVX;
  bindingUnit: number;
  dynamicCount: number;
  divisor: number;
}

export interface VkIndirectCommandsLayoutTokenNVX {
  tokenType: VkIndirectCommandsTokenTypeNVX;
  bindingUnit: number;
  dynamicCount: number;
  divisor: number;
}


/** ## VkIndirectCommandsTokenNVX ## */
interface VkIndirectCommandsTokenNVXInitializer {
  tokenType?: VkIndirectCommandsTokenTypeNVX;
  buffer?: VkBuffer | null;
  offset?: number;
}

declare var VkIndirectCommandsTokenNVX: {
  prototype: VkIndirectCommandsTokenNVX;
  new(param?: VkIndirectCommandsTokenNVXInitializer | null): VkIndirectCommandsTokenNVX;
  tokenType: VkIndirectCommandsTokenTypeNVX;
  buffer: VkBuffer | null;
  offset: number;
}

export interface VkIndirectCommandsTokenNVX {
  tokenType: VkIndirectCommandsTokenTypeNVX;
  buffer: VkBuffer | null;
  offset: number;
}


/** ## VkDeviceGeneratedCommandsLimitsNVX ## */
interface VkDeviceGeneratedCommandsLimitsNVXInitializer {
  sType?: VkStructureType;
  pNext?: null;
  maxIndirectCommandsLayoutTokenCount?: number;
  maxObjectEntryCounts?: number;
  minSequenceCountBufferOffsetAlignment?: number;
  minSequenceIndexBufferOffsetAlignment?: number;
  minCommandsTokenBufferOffsetAlignment?: number;
}

declare var VkDeviceGeneratedCommandsLimitsNVX: {
  prototype: VkDeviceGeneratedCommandsLimitsNVX;
  new(param?: VkDeviceGeneratedCommandsLimitsNVXInitializer | null): VkDeviceGeneratedCommandsLimitsNVX;
  sType: VkStructureType;
  pNext: null;
  maxIndirectCommandsLayoutTokenCount: number;
  maxObjectEntryCounts: number;
  minSequenceCountBufferOffsetAlignment: number;
  minSequenceIndexBufferOffsetAlignment: number;
  minCommandsTokenBufferOffsetAlignment: number;
}

export interface VkDeviceGeneratedCommandsLimitsNVX {
  sType: VkStructureType;
  pNext: null;
  maxIndirectCommandsLayoutTokenCount: number;
  maxObjectEntryCounts: number;
  minSequenceCountBufferOffsetAlignment: number;
  minSequenceIndexBufferOffsetAlignment: number;
  minCommandsTokenBufferOffsetAlignment: number;
}


/** ## VkDeviceGeneratedCommandsFeaturesNVX ## */
interface VkDeviceGeneratedCommandsFeaturesNVXInitializer {
  sType?: VkStructureType;
  pNext?: null;
  computeBindingPointSupport?: number;
}

declare var VkDeviceGeneratedCommandsFeaturesNVX: {
  prototype: VkDeviceGeneratedCommandsFeaturesNVX;
  new(param?: VkDeviceGeneratedCommandsFeaturesNVXInitializer | null): VkDeviceGeneratedCommandsFeaturesNVX;
  sType: VkStructureType;
  pNext: null;
  computeBindingPointSupport: number;
}

export interface VkDeviceGeneratedCommandsFeaturesNVX {
  sType: VkStructureType;
  pNext: null;
  computeBindingPointSupport: number;
}


/** ## VkExportMemoryAllocateInfoNV ## */
interface VkExportMemoryAllocateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleTypes?: VkExternalMemoryHandleTypeFlagBitsNV;
}

declare var VkExportMemoryAllocateInfoNV: {
  prototype: VkExportMemoryAllocateInfoNV;
  new(param?: VkExportMemoryAllocateInfoNVInitializer | null): VkExportMemoryAllocateInfoNV;
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBitsNV;
}

export interface VkExportMemoryAllocateInfoNV {
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBitsNV;
}


/** ## VkExternalMemoryImageCreateInfoNV ## */
interface VkExternalMemoryImageCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  handleTypes?: VkExternalMemoryHandleTypeFlagBitsNV;
}

declare var VkExternalMemoryImageCreateInfoNV: {
  prototype: VkExternalMemoryImageCreateInfoNV;
  new(param?: VkExternalMemoryImageCreateInfoNVInitializer | null): VkExternalMemoryImageCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBitsNV;
}

export interface VkExternalMemoryImageCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  handleTypes: VkExternalMemoryHandleTypeFlagBitsNV;
}


/** ## VkExternalImageFormatPropertiesNV ## */
interface VkExternalImageFormatPropertiesNVInitializer {
  readonly imageFormatProperties?: VkImageFormatProperties | null;
  readonly externalMemoryFeatures?: VkExternalMemoryFeatureFlagBitsNV;
  readonly exportFromImportedHandleTypes?: VkExternalMemoryHandleTypeFlagBitsNV;
  readonly compatibleHandleTypes?: VkExternalMemoryHandleTypeFlagBitsNV;
}

declare var VkExternalImageFormatPropertiesNV: {
  prototype: VkExternalImageFormatPropertiesNV;
  new(param?: VkExternalImageFormatPropertiesNVInitializer | null): VkExternalImageFormatPropertiesNV;
  readonly imageFormatProperties: VkImageFormatProperties | null;
  readonly externalMemoryFeatures: VkExternalMemoryFeatureFlagBitsNV;
  readonly exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagBitsNV;
  readonly compatibleHandleTypes: VkExternalMemoryHandleTypeFlagBitsNV;
}

export interface VkExternalImageFormatPropertiesNV {
  readonly imageFormatProperties: VkImageFormatProperties | null;
  readonly externalMemoryFeatures: VkExternalMemoryFeatureFlagBitsNV;
  readonly exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagBitsNV;
  readonly compatibleHandleTypes: VkExternalMemoryHandleTypeFlagBitsNV;
}


/** ## VkDedicatedAllocationMemoryAllocateInfoNV ## */
interface VkDedicatedAllocationMemoryAllocateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  image?: VkImage | null;
  buffer?: VkBuffer | null;
}

declare var VkDedicatedAllocationMemoryAllocateInfoNV: {
  prototype: VkDedicatedAllocationMemoryAllocateInfoNV;
  new(param?: VkDedicatedAllocationMemoryAllocateInfoNVInitializer | null): VkDedicatedAllocationMemoryAllocateInfoNV;
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
  buffer: VkBuffer | null;
}

export interface VkDedicatedAllocationMemoryAllocateInfoNV {
  sType: VkStructureType;
  pNext: null;
  image: VkImage | null;
  buffer: VkBuffer | null;
}


/** ## VkDedicatedAllocationBufferCreateInfoNV ## */
interface VkDedicatedAllocationBufferCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  dedicatedAllocation?: number;
}

declare var VkDedicatedAllocationBufferCreateInfoNV: {
  prototype: VkDedicatedAllocationBufferCreateInfoNV;
  new(param?: VkDedicatedAllocationBufferCreateInfoNVInitializer | null): VkDedicatedAllocationBufferCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  dedicatedAllocation: number;
}

export interface VkDedicatedAllocationBufferCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  dedicatedAllocation: number;
}


/** ## VkDedicatedAllocationImageCreateInfoNV ## */
interface VkDedicatedAllocationImageCreateInfoNVInitializer {
  sType?: VkStructureType;
  pNext?: null;
  dedicatedAllocation?: number;
}

declare var VkDedicatedAllocationImageCreateInfoNV: {
  prototype: VkDedicatedAllocationImageCreateInfoNV;
  new(param?: VkDedicatedAllocationImageCreateInfoNVInitializer | null): VkDedicatedAllocationImageCreateInfoNV;
  sType: VkStructureType;
  pNext: null;
  dedicatedAllocation: number;
}

export interface VkDedicatedAllocationImageCreateInfoNV {
  sType: VkStructureType;
  pNext: null;
  dedicatedAllocation: number;
}


/** ## VkDebugMarkerMarkerInfoEXT ## */
interface VkDebugMarkerMarkerInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  pMarkerName?: string | null;
  color?: number[] | null;
}

declare var VkDebugMarkerMarkerInfoEXT: {
  prototype: VkDebugMarkerMarkerInfoEXT;
  new(param?: VkDebugMarkerMarkerInfoEXTInitializer | null): VkDebugMarkerMarkerInfoEXT;
  sType: VkStructureType;
  pNext: null;
  pMarkerName: string | null;
  color: number[] | null;
}

export interface VkDebugMarkerMarkerInfoEXT {
  sType: VkStructureType;
  pNext: null;
  pMarkerName: string | null;
  color: number[] | null;
}


/** ## VkDebugMarkerObjectTagInfoEXT ## */
interface VkDebugMarkerObjectTagInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  objectType?: VkDebugReportObjectTypeEXT;
  object?: number;
  tagName?: number;
  tagSize?: number;
  pTag?: ArrayBuffer | null;
}

declare var VkDebugMarkerObjectTagInfoEXT: {
  prototype: VkDebugMarkerObjectTagInfoEXT;
  new(param?: VkDebugMarkerObjectTagInfoEXTInitializer | null): VkDebugMarkerObjectTagInfoEXT;
  sType: VkStructureType;
  pNext: null;
  objectType: VkDebugReportObjectTypeEXT;
  object: number;
  tagName: number;
  tagSize: number;
  pTag: ArrayBuffer | null;
}

export interface VkDebugMarkerObjectTagInfoEXT {
  sType: VkStructureType;
  pNext: null;
  objectType: VkDebugReportObjectTypeEXT;
  object: number;
  tagName: number;
  tagSize: number;
  pTag: ArrayBuffer | null;
}


/** ## VkDebugMarkerObjectNameInfoEXT ## */
interface VkDebugMarkerObjectNameInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  objectType?: VkDebugReportObjectTypeEXT;
  object?: number;
  pObjectName?: string | null;
}

declare var VkDebugMarkerObjectNameInfoEXT: {
  prototype: VkDebugMarkerObjectNameInfoEXT;
  new(param?: VkDebugMarkerObjectNameInfoEXTInitializer | null): VkDebugMarkerObjectNameInfoEXT;
  sType: VkStructureType;
  pNext: null;
  objectType: VkDebugReportObjectTypeEXT;
  object: number;
  pObjectName: string | null;
}

export interface VkDebugMarkerObjectNameInfoEXT {
  sType: VkStructureType;
  pNext: null;
  objectType: VkDebugReportObjectTypeEXT;
  object: number;
  pObjectName: string | null;
}


/** ## VkPipelineRasterizationStateRasterizationOrderAMD ## */
interface VkPipelineRasterizationStateRasterizationOrderAMDInitializer {
  sType?: VkStructureType;
  pNext?: null;
  rasterizationOrder?: VkRasterizationOrderAMD;
}

declare var VkPipelineRasterizationStateRasterizationOrderAMD: {
  prototype: VkPipelineRasterizationStateRasterizationOrderAMD;
  new(param?: VkPipelineRasterizationStateRasterizationOrderAMDInitializer | null): VkPipelineRasterizationStateRasterizationOrderAMD;
  sType: VkStructureType;
  pNext: null;
  rasterizationOrder: VkRasterizationOrderAMD;
}

export interface VkPipelineRasterizationStateRasterizationOrderAMD {
  sType: VkStructureType;
  pNext: null;
  rasterizationOrder: VkRasterizationOrderAMD;
}


/** ## VkValidationFeaturesEXT ## */
interface VkValidationFeaturesEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  enabledValidationFeatureCount?: number;
  pEnabledValidationFeatures?: Int32Array | null;
  disabledValidationFeatureCount?: number;
  pDisabledValidationFeatures?: Int32Array | null;
}

declare var VkValidationFeaturesEXT: {
  prototype: VkValidationFeaturesEXT;
  new(param?: VkValidationFeaturesEXTInitializer | null): VkValidationFeaturesEXT;
  sType: VkStructureType;
  pNext: null;
  enabledValidationFeatureCount: number;
  pEnabledValidationFeatures: Int32Array | null;
  disabledValidationFeatureCount: number;
  pDisabledValidationFeatures: Int32Array | null;
}

export interface VkValidationFeaturesEXT {
  sType: VkStructureType;
  pNext: null;
  enabledValidationFeatureCount: number;
  pEnabledValidationFeatures: Int32Array | null;
  disabledValidationFeatureCount: number;
  pDisabledValidationFeatures: Int32Array | null;
}


/** ## VkValidationFlagsEXT ## */
interface VkValidationFlagsEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  disabledValidationCheckCount?: number;
  pDisabledValidationChecks?: Int32Array | null;
}

declare var VkValidationFlagsEXT: {
  prototype: VkValidationFlagsEXT;
  new(param?: VkValidationFlagsEXTInitializer | null): VkValidationFlagsEXT;
  sType: VkStructureType;
  pNext: null;
  disabledValidationCheckCount: number;
  pDisabledValidationChecks: Int32Array | null;
}

export interface VkValidationFlagsEXT {
  sType: VkStructureType;
  pNext: null;
  disabledValidationCheckCount: number;
  pDisabledValidationChecks: Int32Array | null;
}


/** ## VkDebugReportCallbackCreateInfoEXT ## */
interface VkDebugReportCallbackCreateInfoEXTInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkDebugReportFlagBitsEXT;
  pfnCallback?: null;
  pUserData?: ArrayBuffer | null;
}

declare var VkDebugReportCallbackCreateInfoEXT: {
  prototype: VkDebugReportCallbackCreateInfoEXT;
  new(param?: VkDebugReportCallbackCreateInfoEXTInitializer | null): VkDebugReportCallbackCreateInfoEXT;
  sType: VkStructureType;
  pNext: null;
  flags: VkDebugReportFlagBitsEXT;
  pfnCallback: null;
  pUserData: ArrayBuffer | null;
}

export interface VkDebugReportCallbackCreateInfoEXT {
  sType: VkStructureType;
  pNext: null;
  flags: VkDebugReportFlagBitsEXT;
  pfnCallback: null;
  pUserData: ArrayBuffer | null;
}


/** ## VkPresentInfoKHR ## */
interface VkPresentInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  waitSemaphoreCount?: number;
  pWaitSemaphores?: VkSemaphore[] | null;
  swapchainCount?: number;
  pSwapchains?: VkSwapchainKHR[] | null;
  pImageIndices?: Uint32Array | null;
  pResults?: Int32Array | null;
}

declare var VkPresentInfoKHR: {
  prototype: VkPresentInfoKHR;
  new(param?: VkPresentInfoKHRInitializer | null): VkPresentInfoKHR;
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  swapchainCount: number;
  pSwapchains: VkSwapchainKHR[] | null;
  pImageIndices: Uint32Array | null;
  pResults: Int32Array | null;
}

export interface VkPresentInfoKHR {
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  swapchainCount: number;
  pSwapchains: VkSwapchainKHR[] | null;
  pImageIndices: Uint32Array | null;
  pResults: Int32Array | null;
}


/** ## VkSwapchainCreateInfoKHR ## */
interface VkSwapchainCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkSwapchainCreateFlagBitsKHR;
  surface?: VkSurfaceKHR | null;
  minImageCount?: number;
  imageFormat?: VkFormat;
  imageColorSpace?: VkColorSpaceKHR;
  imageExtent?: VkExtent2D | null;
  imageArrayLayers?: number;
  imageUsage?: VkImageUsageFlagBits;
  imageSharingMode?: VkSharingMode;
  queueFamilyIndexCount?: number;
  pQueueFamilyIndices?: Uint32Array | null;
  preTransform?: VkSurfaceTransformFlagBitsKHR;
  compositeAlpha?: VkCompositeAlphaFlagBitsKHR;
  presentMode?: VkPresentModeKHR;
  clipped?: number;
  oldSwapchain?: VkSwapchainKHR | null;
}

declare var VkSwapchainCreateInfoKHR: {
  prototype: VkSwapchainCreateInfoKHR;
  new(param?: VkSwapchainCreateInfoKHRInitializer | null): VkSwapchainCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  flags: VkSwapchainCreateFlagBitsKHR;
  surface: VkSurfaceKHR | null;
  minImageCount: number;
  imageFormat: VkFormat;
  imageColorSpace: VkColorSpaceKHR;
  imageExtent: VkExtent2D | null;
  imageArrayLayers: number;
  imageUsage: VkImageUsageFlagBits;
  imageSharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
  preTransform: VkSurfaceTransformFlagBitsKHR;
  compositeAlpha: VkCompositeAlphaFlagBitsKHR;
  presentMode: VkPresentModeKHR;
  clipped: number;
  oldSwapchain: VkSwapchainKHR | null;
}

export interface VkSwapchainCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  flags: VkSwapchainCreateFlagBitsKHR;
  surface: VkSurfaceKHR | null;
  minImageCount: number;
  imageFormat: VkFormat;
  imageColorSpace: VkColorSpaceKHR;
  imageExtent: VkExtent2D | null;
  imageArrayLayers: number;
  imageUsage: VkImageUsageFlagBits;
  imageSharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
  preTransform: VkSurfaceTransformFlagBitsKHR;
  compositeAlpha: VkCompositeAlphaFlagBitsKHR;
  presentMode: VkPresentModeKHR;
  clipped: number;
  oldSwapchain: VkSwapchainKHR | null;
}


/** ## VkSurfaceFormatKHR ## */
interface VkSurfaceFormatKHRInitializer {
  readonly format?: VkFormat;
  readonly colorSpace?: VkColorSpaceKHR;
}

declare var VkSurfaceFormatKHR: {
  prototype: VkSurfaceFormatKHR;
  new(param?: VkSurfaceFormatKHRInitializer | null): VkSurfaceFormatKHR;
  readonly format: VkFormat;
  readonly colorSpace: VkColorSpaceKHR;
}

export interface VkSurfaceFormatKHR {
  readonly format: VkFormat;
  readonly colorSpace: VkColorSpaceKHR;
}


/** ## VkSurfaceCapabilitiesKHR ## */
interface VkSurfaceCapabilitiesKHRInitializer {
  readonly minImageCount?: number;
  readonly maxImageCount?: number;
  readonly currentExtent?: VkExtent2D | null;
  readonly minImageExtent?: VkExtent2D | null;
  readonly maxImageExtent?: VkExtent2D | null;
  readonly maxImageArrayLayers?: number;
  readonly supportedTransforms?: VkSurfaceTransformFlagBitsKHR;
  readonly currentTransform?: VkSurfaceTransformFlagBitsKHR;
  readonly supportedCompositeAlpha?: VkCompositeAlphaFlagBitsKHR;
  readonly supportedUsageFlags?: VkImageUsageFlagBits;
}

declare var VkSurfaceCapabilitiesKHR: {
  prototype: VkSurfaceCapabilitiesKHR;
  new(param?: VkSurfaceCapabilitiesKHRInitializer | null): VkSurfaceCapabilitiesKHR;
  readonly minImageCount: number;
  readonly maxImageCount: number;
  readonly currentExtent: VkExtent2D | null;
  readonly minImageExtent: VkExtent2D | null;
  readonly maxImageExtent: VkExtent2D | null;
  readonly maxImageArrayLayers: number;
  readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;
  readonly currentTransform: VkSurfaceTransformFlagBitsKHR;
  readonly supportedCompositeAlpha: VkCompositeAlphaFlagBitsKHR;
  readonly supportedUsageFlags: VkImageUsageFlagBits;
}

export interface VkSurfaceCapabilitiesKHR {
  readonly minImageCount: number;
  readonly maxImageCount: number;
  readonly currentExtent: VkExtent2D | null;
  readonly minImageExtent: VkExtent2D | null;
  readonly maxImageExtent: VkExtent2D | null;
  readonly maxImageArrayLayers: number;
  readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;
  readonly currentTransform: VkSurfaceTransformFlagBitsKHR;
  readonly supportedCompositeAlpha: VkCompositeAlphaFlagBitsKHR;
  readonly supportedUsageFlags: VkImageUsageFlagBits;
}


/** ## VkDisplayPresentInfoKHR ## */
interface VkDisplayPresentInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  srcRect?: VkRect2D | null;
  dstRect?: VkRect2D | null;
  persistent?: number;
}

declare var VkDisplayPresentInfoKHR: {
  prototype: VkDisplayPresentInfoKHR;
  new(param?: VkDisplayPresentInfoKHRInitializer | null): VkDisplayPresentInfoKHR;
  sType: VkStructureType;
  pNext: null;
  srcRect: VkRect2D | null;
  dstRect: VkRect2D | null;
  persistent: number;
}

export interface VkDisplayPresentInfoKHR {
  sType: VkStructureType;
  pNext: null;
  srcRect: VkRect2D | null;
  dstRect: VkRect2D | null;
  persistent: number;
}


/** ## VkDisplaySurfaceCreateInfoKHR ## */
interface VkDisplaySurfaceCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  displayMode?: VkDisplayModeKHR | null;
  planeIndex?: number;
  planeStackIndex?: number;
  transform?: VkSurfaceTransformFlagBitsKHR;
  globalAlpha?: number;
  alphaMode?: VkDisplayPlaneAlphaFlagBitsKHR;
  imageExtent?: VkExtent2D | null;
}

declare var VkDisplaySurfaceCreateInfoKHR: {
  prototype: VkDisplaySurfaceCreateInfoKHR;
  new(param?: VkDisplaySurfaceCreateInfoKHRInitializer | null): VkDisplaySurfaceCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  displayMode: VkDisplayModeKHR | null;
  planeIndex: number;
  planeStackIndex: number;
  transform: VkSurfaceTransformFlagBitsKHR;
  globalAlpha: number;
  alphaMode: VkDisplayPlaneAlphaFlagBitsKHR;
  imageExtent: VkExtent2D | null;
}

export interface VkDisplaySurfaceCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  displayMode: VkDisplayModeKHR | null;
  planeIndex: number;
  planeStackIndex: number;
  transform: VkSurfaceTransformFlagBitsKHR;
  globalAlpha: number;
  alphaMode: VkDisplayPlaneAlphaFlagBitsKHR;
  imageExtent: VkExtent2D | null;
}


/** ## VkDisplayPlaneCapabilitiesKHR ## */
interface VkDisplayPlaneCapabilitiesKHRInitializer {
  readonly supportedAlpha?: VkDisplayPlaneAlphaFlagBitsKHR;
  readonly minSrcPosition?: VkOffset2D | null;
  readonly maxSrcPosition?: VkOffset2D | null;
  readonly minSrcExtent?: VkExtent2D | null;
  readonly maxSrcExtent?: VkExtent2D | null;
  readonly minDstPosition?: VkOffset2D | null;
  readonly maxDstPosition?: VkOffset2D | null;
  readonly minDstExtent?: VkExtent2D | null;
  readonly maxDstExtent?: VkExtent2D | null;
}

declare var VkDisplayPlaneCapabilitiesKHR: {
  prototype: VkDisplayPlaneCapabilitiesKHR;
  new(param?: VkDisplayPlaneCapabilitiesKHRInitializer | null): VkDisplayPlaneCapabilitiesKHR;
  readonly supportedAlpha: VkDisplayPlaneAlphaFlagBitsKHR;
  readonly minSrcPosition: VkOffset2D | null;
  readonly maxSrcPosition: VkOffset2D | null;
  readonly minSrcExtent: VkExtent2D | null;
  readonly maxSrcExtent: VkExtent2D | null;
  readonly minDstPosition: VkOffset2D | null;
  readonly maxDstPosition: VkOffset2D | null;
  readonly minDstExtent: VkExtent2D | null;
  readonly maxDstExtent: VkExtent2D | null;
}

export interface VkDisplayPlaneCapabilitiesKHR {
  readonly supportedAlpha: VkDisplayPlaneAlphaFlagBitsKHR;
  readonly minSrcPosition: VkOffset2D | null;
  readonly maxSrcPosition: VkOffset2D | null;
  readonly minSrcExtent: VkExtent2D | null;
  readonly maxSrcExtent: VkExtent2D | null;
  readonly minDstPosition: VkOffset2D | null;
  readonly maxDstPosition: VkOffset2D | null;
  readonly minDstExtent: VkExtent2D | null;
  readonly maxDstExtent: VkExtent2D | null;
}


/** ## VkDisplayModeCreateInfoKHR ## */
interface VkDisplayModeCreateInfoKHRInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  parameters?: VkDisplayModeParametersKHR | null;
}

declare var VkDisplayModeCreateInfoKHR: {
  prototype: VkDisplayModeCreateInfoKHR;
  new(param?: VkDisplayModeCreateInfoKHRInitializer | null): VkDisplayModeCreateInfoKHR;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  parameters: VkDisplayModeParametersKHR | null;
}

export interface VkDisplayModeCreateInfoKHR {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  parameters: VkDisplayModeParametersKHR | null;
}


/** ## VkDisplayModePropertiesKHR ## */
interface VkDisplayModePropertiesKHRInitializer {
  readonly displayMode?: VkDisplayModeKHR | null;
  readonly parameters?: VkDisplayModeParametersKHR | null;
}

declare var VkDisplayModePropertiesKHR: {
  prototype: VkDisplayModePropertiesKHR;
  new(param?: VkDisplayModePropertiesKHRInitializer | null): VkDisplayModePropertiesKHR;
  readonly displayMode: VkDisplayModeKHR | null;
  readonly parameters: VkDisplayModeParametersKHR | null;
}

export interface VkDisplayModePropertiesKHR {
  readonly displayMode: VkDisplayModeKHR | null;
  readonly parameters: VkDisplayModeParametersKHR | null;
}


/** ## VkDisplayModeParametersKHR ## */
interface VkDisplayModeParametersKHRInitializer {
  visibleRegion?: VkExtent2D | null;
  refreshRate?: number;
}

declare var VkDisplayModeParametersKHR: {
  prototype: VkDisplayModeParametersKHR;
  new(param?: VkDisplayModeParametersKHRInitializer | null): VkDisplayModeParametersKHR;
  visibleRegion: VkExtent2D | null;
  refreshRate: number;
}

export interface VkDisplayModeParametersKHR {
  visibleRegion: VkExtent2D | null;
  refreshRate: number;
}


/** ## VkDisplayPlanePropertiesKHR ## */
interface VkDisplayPlanePropertiesKHRInitializer {
  readonly currentDisplay?: VkDisplayKHR | null;
  readonly currentStackIndex?: number;
}

declare var VkDisplayPlanePropertiesKHR: {
  prototype: VkDisplayPlanePropertiesKHR;
  new(param?: VkDisplayPlanePropertiesKHRInitializer | null): VkDisplayPlanePropertiesKHR;
  readonly currentDisplay: VkDisplayKHR | null;
  readonly currentStackIndex: number;
}

export interface VkDisplayPlanePropertiesKHR {
  readonly currentDisplay: VkDisplayKHR | null;
  readonly currentStackIndex: number;
}


/** ## VkDisplayPropertiesKHR ## */
interface VkDisplayPropertiesKHRInitializer {
  readonly display?: VkDisplayKHR | null;
  readonly displayName?: string | null;
  readonly physicalDimensions?: VkExtent2D | null;
  readonly physicalResolution?: VkExtent2D | null;
  readonly supportedTransforms?: VkSurfaceTransformFlagBitsKHR;
  readonly planeReorderPossible?: number;
  readonly persistentContent?: number;
}

declare var VkDisplayPropertiesKHR: {
  prototype: VkDisplayPropertiesKHR;
  new(param?: VkDisplayPropertiesKHRInitializer | null): VkDisplayPropertiesKHR;
  readonly display: VkDisplayKHR | null;
  readonly displayName: string | null;
  readonly physicalDimensions: VkExtent2D | null;
  readonly physicalResolution: VkExtent2D | null;
  readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;
  readonly planeReorderPossible: number;
  readonly persistentContent: number;
}

export interface VkDisplayPropertiesKHR {
  readonly display: VkDisplayKHR | null;
  readonly displayName: string | null;
  readonly physicalDimensions: VkExtent2D | null;
  readonly physicalResolution: VkExtent2D | null;
  readonly supportedTransforms: VkSurfaceTransformFlagBitsKHR;
  readonly planeReorderPossible: number;
  readonly persistentContent: number;
}


/** ## VkSubmitInfo ## */
interface VkSubmitInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  waitSemaphoreCount?: number;
  pWaitSemaphores?: VkSemaphore[] | null;
  pWaitDstStageMask?: Int32Array | null;
  commandBufferCount?: number;
  pCommandBuffers?: VkCommandBuffer[] | null;
  signalSemaphoreCount?: number;
  pSignalSemaphores?: VkSemaphore[] | null;
}

declare var VkSubmitInfo: {
  prototype: VkSubmitInfo;
  new(param?: VkSubmitInfoInitializer | null): VkSubmitInfo;
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  pWaitDstStageMask: Int32Array | null;
  commandBufferCount: number;
  pCommandBuffers: VkCommandBuffer[] | null;
  signalSemaphoreCount: number;
  pSignalSemaphores: VkSemaphore[] | null;
}

export interface VkSubmitInfo {
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  pWaitDstStageMask: Int32Array | null;
  commandBufferCount: number;
  pCommandBuffers: VkCommandBuffer[] | null;
  signalSemaphoreCount: number;
  pSignalSemaphores: VkSemaphore[] | null;
}


/** ## VkDispatchIndirectCommand ## */
interface VkDispatchIndirectCommandInitializer {
  x?: number;
  y?: number;
  z?: number;
}

declare var VkDispatchIndirectCommand: {
  prototype: VkDispatchIndirectCommand;
  new(param?: VkDispatchIndirectCommandInitializer | null): VkDispatchIndirectCommand;
  x: number;
  y: number;
  z: number;
}

export interface VkDispatchIndirectCommand {
  x: number;
  y: number;
  z: number;
}


/** ## VkDrawIndexedIndirectCommand ## */
interface VkDrawIndexedIndirectCommandInitializer {
  indexCount?: number;
  instanceCount?: number;
  firstIndex?: number;
  vertexOffset?: number;
  firstInstance?: number;
}

declare var VkDrawIndexedIndirectCommand: {
  prototype: VkDrawIndexedIndirectCommand;
  new(param?: VkDrawIndexedIndirectCommandInitializer | null): VkDrawIndexedIndirectCommand;
  indexCount: number;
  instanceCount: number;
  firstIndex: number;
  vertexOffset: number;
  firstInstance: number;
}

export interface VkDrawIndexedIndirectCommand {
  indexCount: number;
  instanceCount: number;
  firstIndex: number;
  vertexOffset: number;
  firstInstance: number;
}


/** ## VkDrawIndirectCommand ## */
interface VkDrawIndirectCommandInitializer {
  vertexCount?: number;
  instanceCount?: number;
  firstVertex?: number;
  firstInstance?: number;
}

declare var VkDrawIndirectCommand: {
  prototype: VkDrawIndirectCommand;
  new(param?: VkDrawIndirectCommandInitializer | null): VkDrawIndirectCommand;
  vertexCount: number;
  instanceCount: number;
  firstVertex: number;
  firstInstance: number;
}

export interface VkDrawIndirectCommand {
  vertexCount: number;
  instanceCount: number;
  firstVertex: number;
  firstInstance: number;
}


/** ## VkFramebufferCreateInfo ## */
interface VkFramebufferCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  renderPass?: VkRenderPass | null;
  attachmentCount?: number;
  pAttachments?: VkImageView[] | null;
  width?: number;
  height?: number;
  layers?: number;
}

declare var VkFramebufferCreateInfo: {
  prototype: VkFramebufferCreateInfo;
  new(param?: VkFramebufferCreateInfoInitializer | null): VkFramebufferCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  renderPass: VkRenderPass | null;
  attachmentCount: number;
  pAttachments: VkImageView[] | null;
  width: number;
  height: number;
  layers: number;
}

export interface VkFramebufferCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  renderPass: VkRenderPass | null;
  attachmentCount: number;
  pAttachments: VkImageView[] | null;
  width: number;
  height: number;
  layers: number;
}


/** ## VkQueryPoolCreateInfo ## */
interface VkQueryPoolCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  queryType?: VkQueryType;
  queryCount?: number;
  pipelineStatistics?: VkQueryPipelineStatisticFlagBits;
}

declare var VkQueryPoolCreateInfo: {
  prototype: VkQueryPoolCreateInfo;
  new(param?: VkQueryPoolCreateInfoInitializer | null): VkQueryPoolCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  queryType: VkQueryType;
  queryCount: number;
  pipelineStatistics: VkQueryPipelineStatisticFlagBits;
}

export interface VkQueryPoolCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  queryType: VkQueryType;
  queryCount: number;
  pipelineStatistics: VkQueryPipelineStatisticFlagBits;
}


/** ## VkSemaphoreCreateInfo ## */
interface VkSemaphoreCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
}

declare var VkSemaphoreCreateInfo: {
  prototype: VkSemaphoreCreateInfo;
  new(param?: VkSemaphoreCreateInfoInitializer | null): VkSemaphoreCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
}

export interface VkSemaphoreCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
}


/** ## VkPhysicalDeviceLimits ## */
interface VkPhysicalDeviceLimitsInitializer {
  readonly maxImageDimension1D?: number;
  readonly maxImageDimension2D?: number;
  readonly maxImageDimension3D?: number;
  readonly maxImageDimensionCube?: number;
  readonly maxImageArrayLayers?: number;
  readonly maxTexelBufferElements?: number;
  readonly maxUniformBufferRange?: number;
  readonly maxStorageBufferRange?: number;
  readonly maxPushConstantsSize?: number;
  readonly maxMemoryAllocationCount?: number;
  readonly maxSamplerAllocationCount?: number;
  readonly bufferImageGranularity?: number;
  readonly sparseAddressSpaceSize?: number;
  readonly maxBoundDescriptorSets?: number;
  readonly maxPerStageDescriptorSamplers?: number;
  readonly maxPerStageDescriptorUniformBuffers?: number;
  readonly maxPerStageDescriptorStorageBuffers?: number;
  readonly maxPerStageDescriptorSampledImages?: number;
  readonly maxPerStageDescriptorStorageImages?: number;
  readonly maxPerStageDescriptorInputAttachments?: number;
  readonly maxPerStageResources?: number;
  readonly maxDescriptorSetSamplers?: number;
  readonly maxDescriptorSetUniformBuffers?: number;
  readonly maxDescriptorSetUniformBuffersDynamic?: number;
  readonly maxDescriptorSetStorageBuffers?: number;
  readonly maxDescriptorSetStorageBuffersDynamic?: number;
  readonly maxDescriptorSetSampledImages?: number;
  readonly maxDescriptorSetStorageImages?: number;
  readonly maxDescriptorSetInputAttachments?: number;
  readonly maxVertexInputAttributes?: number;
  readonly maxVertexInputBindings?: number;
  readonly maxVertexInputAttributeOffset?: number;
  readonly maxVertexInputBindingStride?: number;
  readonly maxVertexOutputComponents?: number;
  readonly maxTessellationGenerationLevel?: number;
  readonly maxTessellationPatchSize?: number;
  readonly maxTessellationControlPerVertexInputComponents?: number;
  readonly maxTessellationControlPerVertexOutputComponents?: number;
  readonly maxTessellationControlPerPatchOutputComponents?: number;
  readonly maxTessellationControlTotalOutputComponents?: number;
  readonly maxTessellationEvaluationInputComponents?: number;
  readonly maxTessellationEvaluationOutputComponents?: number;
  readonly maxGeometryShaderInvocations?: number;
  readonly maxGeometryInputComponents?: number;
  readonly maxGeometryOutputComponents?: number;
  readonly maxGeometryOutputVertices?: number;
  readonly maxGeometryTotalOutputComponents?: number;
  readonly maxFragmentInputComponents?: number;
  readonly maxFragmentOutputAttachments?: number;
  readonly maxFragmentDualSrcAttachments?: number;
  readonly maxFragmentCombinedOutputResources?: number;
  readonly maxComputeSharedMemorySize?: number;
  readonly maxComputeWorkGroupCount?: number[] | null;
  readonly maxComputeWorkGroupInvocations?: number;
  readonly maxComputeWorkGroupSize?: number[] | null;
  readonly subPixelPrecisionBits?: number;
  readonly subTexelPrecisionBits?: number;
  readonly mipmapPrecisionBits?: number;
  readonly maxDrawIndexedIndexValue?: number;
  readonly maxDrawIndirectCount?: number;
  readonly maxSamplerLodBias?: number;
  readonly maxSamplerAnisotropy?: number;
  readonly maxViewports?: number;
  readonly maxViewportDimensions?: number[] | null;
  readonly viewportBoundsRange?: number[] | null;
  readonly viewportSubPixelBits?: number;
  readonly minMemoryMapAlignment?: number;
  readonly minTexelBufferOffsetAlignment?: number;
  readonly minUniformBufferOffsetAlignment?: number;
  readonly minStorageBufferOffsetAlignment?: number;
  readonly minTexelOffset?: number;
  readonly maxTexelOffset?: number;
  readonly minTexelGatherOffset?: number;
  readonly maxTexelGatherOffset?: number;
  readonly minInterpolationOffset?: number;
  readonly maxInterpolationOffset?: number;
  readonly subPixelInterpolationOffsetBits?: number;
  readonly maxFramebufferWidth?: number;
  readonly maxFramebufferHeight?: number;
  readonly maxFramebufferLayers?: number;
  readonly framebufferColorSampleCounts?: VkSampleCountFlagBits;
  readonly framebufferDepthSampleCounts?: VkSampleCountFlagBits;
  readonly framebufferStencilSampleCounts?: VkSampleCountFlagBits;
  readonly framebufferNoAttachmentsSampleCounts?: VkSampleCountFlagBits;
  readonly maxColorAttachments?: number;
  readonly sampledImageColorSampleCounts?: VkSampleCountFlagBits;
  readonly sampledImageIntegerSampleCounts?: VkSampleCountFlagBits;
  readonly sampledImageDepthSampleCounts?: VkSampleCountFlagBits;
  readonly sampledImageStencilSampleCounts?: VkSampleCountFlagBits;
  readonly storageImageSampleCounts?: VkSampleCountFlagBits;
  readonly maxSampleMaskWords?: number;
  readonly timestampComputeAndGraphics?: number;
  readonly timestampPeriod?: number;
  readonly maxClipDistances?: number;
  readonly maxCullDistances?: number;
  readonly maxCombinedClipAndCullDistances?: number;
  readonly discreteQueuePriorities?: number;
  readonly pointSizeRange?: number[] | null;
  readonly lineWidthRange?: number[] | null;
  readonly pointSizeGranularity?: number;
  readonly lineWidthGranularity?: number;
  readonly strictLines?: number;
  readonly standardSampleLocations?: number;
  readonly optimalBufferCopyOffsetAlignment?: number;
  readonly optimalBufferCopyRowPitchAlignment?: number;
  readonly nonCoherentAtomSize?: number;
}

declare var VkPhysicalDeviceLimits: {
  prototype: VkPhysicalDeviceLimits;
  new(param?: VkPhysicalDeviceLimitsInitializer | null): VkPhysicalDeviceLimits;
  readonly maxImageDimension1D: number;
  readonly maxImageDimension2D: number;
  readonly maxImageDimension3D: number;
  readonly maxImageDimensionCube: number;
  readonly maxImageArrayLayers: number;
  readonly maxTexelBufferElements: number;
  readonly maxUniformBufferRange: number;
  readonly maxStorageBufferRange: number;
  readonly maxPushConstantsSize: number;
  readonly maxMemoryAllocationCount: number;
  readonly maxSamplerAllocationCount: number;
  readonly bufferImageGranularity: number;
  readonly sparseAddressSpaceSize: number;
  readonly maxBoundDescriptorSets: number;
  readonly maxPerStageDescriptorSamplers: number;
  readonly maxPerStageDescriptorUniformBuffers: number;
  readonly maxPerStageDescriptorStorageBuffers: number;
  readonly maxPerStageDescriptorSampledImages: number;
  readonly maxPerStageDescriptorStorageImages: number;
  readonly maxPerStageDescriptorInputAttachments: number;
  readonly maxPerStageResources: number;
  readonly maxDescriptorSetSamplers: number;
  readonly maxDescriptorSetUniformBuffers: number;
  readonly maxDescriptorSetUniformBuffersDynamic: number;
  readonly maxDescriptorSetStorageBuffers: number;
  readonly maxDescriptorSetStorageBuffersDynamic: number;
  readonly maxDescriptorSetSampledImages: number;
  readonly maxDescriptorSetStorageImages: number;
  readonly maxDescriptorSetInputAttachments: number;
  readonly maxVertexInputAttributes: number;
  readonly maxVertexInputBindings: number;
  readonly maxVertexInputAttributeOffset: number;
  readonly maxVertexInputBindingStride: number;
  readonly maxVertexOutputComponents: number;
  readonly maxTessellationGenerationLevel: number;
  readonly maxTessellationPatchSize: number;
  readonly maxTessellationControlPerVertexInputComponents: number;
  readonly maxTessellationControlPerVertexOutputComponents: number;
  readonly maxTessellationControlPerPatchOutputComponents: number;
  readonly maxTessellationControlTotalOutputComponents: number;
  readonly maxTessellationEvaluationInputComponents: number;
  readonly maxTessellationEvaluationOutputComponents: number;
  readonly maxGeometryShaderInvocations: number;
  readonly maxGeometryInputComponents: number;
  readonly maxGeometryOutputComponents: number;
  readonly maxGeometryOutputVertices: number;
  readonly maxGeometryTotalOutputComponents: number;
  readonly maxFragmentInputComponents: number;
  readonly maxFragmentOutputAttachments: number;
  readonly maxFragmentDualSrcAttachments: number;
  readonly maxFragmentCombinedOutputResources: number;
  readonly maxComputeSharedMemorySize: number;
  readonly maxComputeWorkGroupCount: number[] | null;
  readonly maxComputeWorkGroupInvocations: number;
  readonly maxComputeWorkGroupSize: number[] | null;
  readonly subPixelPrecisionBits: number;
  readonly subTexelPrecisionBits: number;
  readonly mipmapPrecisionBits: number;
  readonly maxDrawIndexedIndexValue: number;
  readonly maxDrawIndirectCount: number;
  readonly maxSamplerLodBias: number;
  readonly maxSamplerAnisotropy: number;
  readonly maxViewports: number;
  readonly maxViewportDimensions: number[] | null;
  readonly viewportBoundsRange: number[] | null;
  readonly viewportSubPixelBits: number;
  readonly minMemoryMapAlignment: number;
  readonly minTexelBufferOffsetAlignment: number;
  readonly minUniformBufferOffsetAlignment: number;
  readonly minStorageBufferOffsetAlignment: number;
  readonly minTexelOffset: number;
  readonly maxTexelOffset: number;
  readonly minTexelGatherOffset: number;
  readonly maxTexelGatherOffset: number;
  readonly minInterpolationOffset: number;
  readonly maxInterpolationOffset: number;
  readonly subPixelInterpolationOffsetBits: number;
  readonly maxFramebufferWidth: number;
  readonly maxFramebufferHeight: number;
  readonly maxFramebufferLayers: number;
  readonly framebufferColorSampleCounts: VkSampleCountFlagBits;
  readonly framebufferDepthSampleCounts: VkSampleCountFlagBits;
  readonly framebufferStencilSampleCounts: VkSampleCountFlagBits;
  readonly framebufferNoAttachmentsSampleCounts: VkSampleCountFlagBits;
  readonly maxColorAttachments: number;
  readonly sampledImageColorSampleCounts: VkSampleCountFlagBits;
  readonly sampledImageIntegerSampleCounts: VkSampleCountFlagBits;
  readonly sampledImageDepthSampleCounts: VkSampleCountFlagBits;
  readonly sampledImageStencilSampleCounts: VkSampleCountFlagBits;
  readonly storageImageSampleCounts: VkSampleCountFlagBits;
  readonly maxSampleMaskWords: number;
  readonly timestampComputeAndGraphics: number;
  readonly timestampPeriod: number;
  readonly maxClipDistances: number;
  readonly maxCullDistances: number;
  readonly maxCombinedClipAndCullDistances: number;
  readonly discreteQueuePriorities: number;
  readonly pointSizeRange: number[] | null;
  readonly lineWidthRange: number[] | null;
  readonly pointSizeGranularity: number;
  readonly lineWidthGranularity: number;
  readonly strictLines: number;
  readonly standardSampleLocations: number;
  readonly optimalBufferCopyOffsetAlignment: number;
  readonly optimalBufferCopyRowPitchAlignment: number;
  readonly nonCoherentAtomSize: number;
}

export interface VkPhysicalDeviceLimits {
  readonly maxImageDimension1D: number;
  readonly maxImageDimension2D: number;
  readonly maxImageDimension3D: number;
  readonly maxImageDimensionCube: number;
  readonly maxImageArrayLayers: number;
  readonly maxTexelBufferElements: number;
  readonly maxUniformBufferRange: number;
  readonly maxStorageBufferRange: number;
  readonly maxPushConstantsSize: number;
  readonly maxMemoryAllocationCount: number;
  readonly maxSamplerAllocationCount: number;
  readonly bufferImageGranularity: number;
  readonly sparseAddressSpaceSize: number;
  readonly maxBoundDescriptorSets: number;
  readonly maxPerStageDescriptorSamplers: number;
  readonly maxPerStageDescriptorUniformBuffers: number;
  readonly maxPerStageDescriptorStorageBuffers: number;
  readonly maxPerStageDescriptorSampledImages: number;
  readonly maxPerStageDescriptorStorageImages: number;
  readonly maxPerStageDescriptorInputAttachments: number;
  readonly maxPerStageResources: number;
  readonly maxDescriptorSetSamplers: number;
  readonly maxDescriptorSetUniformBuffers: number;
  readonly maxDescriptorSetUniformBuffersDynamic: number;
  readonly maxDescriptorSetStorageBuffers: number;
  readonly maxDescriptorSetStorageBuffersDynamic: number;
  readonly maxDescriptorSetSampledImages: number;
  readonly maxDescriptorSetStorageImages: number;
  readonly maxDescriptorSetInputAttachments: number;
  readonly maxVertexInputAttributes: number;
  readonly maxVertexInputBindings: number;
  readonly maxVertexInputAttributeOffset: number;
  readonly maxVertexInputBindingStride: number;
  readonly maxVertexOutputComponents: number;
  readonly maxTessellationGenerationLevel: number;
  readonly maxTessellationPatchSize: number;
  readonly maxTessellationControlPerVertexInputComponents: number;
  readonly maxTessellationControlPerVertexOutputComponents: number;
  readonly maxTessellationControlPerPatchOutputComponents: number;
  readonly maxTessellationControlTotalOutputComponents: number;
  readonly maxTessellationEvaluationInputComponents: number;
  readonly maxTessellationEvaluationOutputComponents: number;
  readonly maxGeometryShaderInvocations: number;
  readonly maxGeometryInputComponents: number;
  readonly maxGeometryOutputComponents: number;
  readonly maxGeometryOutputVertices: number;
  readonly maxGeometryTotalOutputComponents: number;
  readonly maxFragmentInputComponents: number;
  readonly maxFragmentOutputAttachments: number;
  readonly maxFragmentDualSrcAttachments: number;
  readonly maxFragmentCombinedOutputResources: number;
  readonly maxComputeSharedMemorySize: number;
  readonly maxComputeWorkGroupCount: number[] | null;
  readonly maxComputeWorkGroupInvocations: number;
  readonly maxComputeWorkGroupSize: number[] | null;
  readonly subPixelPrecisionBits: number;
  readonly subTexelPrecisionBits: number;
  readonly mipmapPrecisionBits: number;
  readonly maxDrawIndexedIndexValue: number;
  readonly maxDrawIndirectCount: number;
  readonly maxSamplerLodBias: number;
  readonly maxSamplerAnisotropy: number;
  readonly maxViewports: number;
  readonly maxViewportDimensions: number[] | null;
  readonly viewportBoundsRange: number[] | null;
  readonly viewportSubPixelBits: number;
  readonly minMemoryMapAlignment: number;
  readonly minTexelBufferOffsetAlignment: number;
  readonly minUniformBufferOffsetAlignment: number;
  readonly minStorageBufferOffsetAlignment: number;
  readonly minTexelOffset: number;
  readonly maxTexelOffset: number;
  readonly minTexelGatherOffset: number;
  readonly maxTexelGatherOffset: number;
  readonly minInterpolationOffset: number;
  readonly maxInterpolationOffset: number;
  readonly subPixelInterpolationOffsetBits: number;
  readonly maxFramebufferWidth: number;
  readonly maxFramebufferHeight: number;
  readonly maxFramebufferLayers: number;
  readonly framebufferColorSampleCounts: VkSampleCountFlagBits;
  readonly framebufferDepthSampleCounts: VkSampleCountFlagBits;
  readonly framebufferStencilSampleCounts: VkSampleCountFlagBits;
  readonly framebufferNoAttachmentsSampleCounts: VkSampleCountFlagBits;
  readonly maxColorAttachments: number;
  readonly sampledImageColorSampleCounts: VkSampleCountFlagBits;
  readonly sampledImageIntegerSampleCounts: VkSampleCountFlagBits;
  readonly sampledImageDepthSampleCounts: VkSampleCountFlagBits;
  readonly sampledImageStencilSampleCounts: VkSampleCountFlagBits;
  readonly storageImageSampleCounts: VkSampleCountFlagBits;
  readonly maxSampleMaskWords: number;
  readonly timestampComputeAndGraphics: number;
  readonly timestampPeriod: number;
  readonly maxClipDistances: number;
  readonly maxCullDistances: number;
  readonly maxCombinedClipAndCullDistances: number;
  readonly discreteQueuePriorities: number;
  readonly pointSizeRange: number[] | null;
  readonly lineWidthRange: number[] | null;
  readonly pointSizeGranularity: number;
  readonly lineWidthGranularity: number;
  readonly strictLines: number;
  readonly standardSampleLocations: number;
  readonly optimalBufferCopyOffsetAlignment: number;
  readonly optimalBufferCopyRowPitchAlignment: number;
  readonly nonCoherentAtomSize: number;
}


/** ## VkPhysicalDeviceSparseProperties ## */
interface VkPhysicalDeviceSparsePropertiesInitializer {
  readonly residencyStandard2DBlockShape?: number;
  readonly residencyStandard2DMultisampleBlockShape?: number;
  readonly residencyStandard3DBlockShape?: number;
  readonly residencyAlignedMipSize?: number;
  readonly residencyNonResidentStrict?: number;
}

declare var VkPhysicalDeviceSparseProperties: {
  prototype: VkPhysicalDeviceSparseProperties;
  new(param?: VkPhysicalDeviceSparsePropertiesInitializer | null): VkPhysicalDeviceSparseProperties;
  readonly residencyStandard2DBlockShape: number;
  readonly residencyStandard2DMultisampleBlockShape: number;
  readonly residencyStandard3DBlockShape: number;
  readonly residencyAlignedMipSize: number;
  readonly residencyNonResidentStrict: number;
}

export interface VkPhysicalDeviceSparseProperties {
  readonly residencyStandard2DBlockShape: number;
  readonly residencyStandard2DMultisampleBlockShape: number;
  readonly residencyStandard3DBlockShape: number;
  readonly residencyAlignedMipSize: number;
  readonly residencyNonResidentStrict: number;
}


/** ## VkPhysicalDeviceFeatures ## */
interface VkPhysicalDeviceFeaturesInitializer {
  robustBufferAccess?: number;
  fullDrawIndexUint32?: number;
  imageCubeArray?: number;
  independentBlend?: number;
  geometryShader?: number;
  tessellationShader?: number;
  sampleRateShading?: number;
  dualSrcBlend?: number;
  logicOp?: number;
  multiDrawIndirect?: number;
  drawIndirectFirstInstance?: number;
  depthClamp?: number;
  depthBiasClamp?: number;
  fillModeNonSolid?: number;
  depthBounds?: number;
  wideLines?: number;
  largePoints?: number;
  alphaToOne?: number;
  multiViewport?: number;
  samplerAnisotropy?: number;
  textureCompressionETC2?: number;
  textureCompressionASTC_LDR?: number;
  textureCompressionBC?: number;
  occlusionQueryPrecise?: number;
  pipelineStatisticsQuery?: number;
  vertexPipelineStoresAndAtomics?: number;
  fragmentStoresAndAtomics?: number;
  shaderTessellationAndGeometryPointSize?: number;
  shaderImageGatherExtended?: number;
  shaderStorageImageExtendedFormats?: number;
  shaderStorageImageMultisample?: number;
  shaderStorageImageReadWithoutFormat?: number;
  shaderStorageImageWriteWithoutFormat?: number;
  shaderUniformBufferArrayDynamicIndexing?: number;
  shaderSampledImageArrayDynamicIndexing?: number;
  shaderStorageBufferArrayDynamicIndexing?: number;
  shaderStorageImageArrayDynamicIndexing?: number;
  shaderClipDistance?: number;
  shaderCullDistance?: number;
  shaderFloat64?: number;
  shaderInt64?: number;
  shaderInt16?: number;
  shaderResourceResidency?: number;
  shaderResourceMinLod?: number;
  sparseBinding?: number;
  sparseResidencyBuffer?: number;
  sparseResidencyImage2D?: number;
  sparseResidencyImage3D?: number;
  sparseResidency2Samples?: number;
  sparseResidency4Samples?: number;
  sparseResidency8Samples?: number;
  sparseResidency16Samples?: number;
  sparseResidencyAliased?: number;
  variableMultisampleRate?: number;
  inheritedQueries?: number;
}

declare var VkPhysicalDeviceFeatures: {
  prototype: VkPhysicalDeviceFeatures;
  new(param?: VkPhysicalDeviceFeaturesInitializer | null): VkPhysicalDeviceFeatures;
  robustBufferAccess: number;
  fullDrawIndexUint32: number;
  imageCubeArray: number;
  independentBlend: number;
  geometryShader: number;
  tessellationShader: number;
  sampleRateShading: number;
  dualSrcBlend: number;
  logicOp: number;
  multiDrawIndirect: number;
  drawIndirectFirstInstance: number;
  depthClamp: number;
  depthBiasClamp: number;
  fillModeNonSolid: number;
  depthBounds: number;
  wideLines: number;
  largePoints: number;
  alphaToOne: number;
  multiViewport: number;
  samplerAnisotropy: number;
  textureCompressionETC2: number;
  textureCompressionASTC_LDR: number;
  textureCompressionBC: number;
  occlusionQueryPrecise: number;
  pipelineStatisticsQuery: number;
  vertexPipelineStoresAndAtomics: number;
  fragmentStoresAndAtomics: number;
  shaderTessellationAndGeometryPointSize: number;
  shaderImageGatherExtended: number;
  shaderStorageImageExtendedFormats: number;
  shaderStorageImageMultisample: number;
  shaderStorageImageReadWithoutFormat: number;
  shaderStorageImageWriteWithoutFormat: number;
  shaderUniformBufferArrayDynamicIndexing: number;
  shaderSampledImageArrayDynamicIndexing: number;
  shaderStorageBufferArrayDynamicIndexing: number;
  shaderStorageImageArrayDynamicIndexing: number;
  shaderClipDistance: number;
  shaderCullDistance: number;
  shaderFloat64: number;
  shaderInt64: number;
  shaderInt16: number;
  shaderResourceResidency: number;
  shaderResourceMinLod: number;
  sparseBinding: number;
  sparseResidencyBuffer: number;
  sparseResidencyImage2D: number;
  sparseResidencyImage3D: number;
  sparseResidency2Samples: number;
  sparseResidency4Samples: number;
  sparseResidency8Samples: number;
  sparseResidency16Samples: number;
  sparseResidencyAliased: number;
  variableMultisampleRate: number;
  inheritedQueries: number;
}

export interface VkPhysicalDeviceFeatures {
  robustBufferAccess: number;
  fullDrawIndexUint32: number;
  imageCubeArray: number;
  independentBlend: number;
  geometryShader: number;
  tessellationShader: number;
  sampleRateShading: number;
  dualSrcBlend: number;
  logicOp: number;
  multiDrawIndirect: number;
  drawIndirectFirstInstance: number;
  depthClamp: number;
  depthBiasClamp: number;
  fillModeNonSolid: number;
  depthBounds: number;
  wideLines: number;
  largePoints: number;
  alphaToOne: number;
  multiViewport: number;
  samplerAnisotropy: number;
  textureCompressionETC2: number;
  textureCompressionASTC_LDR: number;
  textureCompressionBC: number;
  occlusionQueryPrecise: number;
  pipelineStatisticsQuery: number;
  vertexPipelineStoresAndAtomics: number;
  fragmentStoresAndAtomics: number;
  shaderTessellationAndGeometryPointSize: number;
  shaderImageGatherExtended: number;
  shaderStorageImageExtendedFormats: number;
  shaderStorageImageMultisample: number;
  shaderStorageImageReadWithoutFormat: number;
  shaderStorageImageWriteWithoutFormat: number;
  shaderUniformBufferArrayDynamicIndexing: number;
  shaderSampledImageArrayDynamicIndexing: number;
  shaderStorageBufferArrayDynamicIndexing: number;
  shaderStorageImageArrayDynamicIndexing: number;
  shaderClipDistance: number;
  shaderCullDistance: number;
  shaderFloat64: number;
  shaderInt64: number;
  shaderInt16: number;
  shaderResourceResidency: number;
  shaderResourceMinLod: number;
  sparseBinding: number;
  sparseResidencyBuffer: number;
  sparseResidencyImage2D: number;
  sparseResidencyImage3D: number;
  sparseResidency2Samples: number;
  sparseResidency4Samples: number;
  sparseResidency8Samples: number;
  sparseResidency16Samples: number;
  sparseResidencyAliased: number;
  variableMultisampleRate: number;
  inheritedQueries: number;
}


/** ## VkFenceCreateInfo ## */
interface VkFenceCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkFenceCreateFlagBits;
}

declare var VkFenceCreateInfo: {
  prototype: VkFenceCreateInfo;
  new(param?: VkFenceCreateInfoInitializer | null): VkFenceCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkFenceCreateFlagBits;
}

export interface VkFenceCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkFenceCreateFlagBits;
}


/** ## VkEventCreateInfo ## */
interface VkEventCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
}

declare var VkEventCreateInfo: {
  prototype: VkEventCreateInfo;
  new(param?: VkEventCreateInfoInitializer | null): VkEventCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
}

export interface VkEventCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
}


/** ## VkRenderPassCreateInfo ## */
interface VkRenderPassCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  attachmentCount?: number;
  pAttachments?: VkAttachmentDescription[] | null;
  subpassCount?: number;
  pSubpasses?: VkSubpassDescription[] | null;
  dependencyCount?: number;
  pDependencies?: VkSubpassDependency[] | null;
}

declare var VkRenderPassCreateInfo: {
  prototype: VkRenderPassCreateInfo;
  new(param?: VkRenderPassCreateInfoInitializer | null): VkRenderPassCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  attachmentCount: number;
  pAttachments: VkAttachmentDescription[] | null;
  subpassCount: number;
  pSubpasses: VkSubpassDescription[] | null;
  dependencyCount: number;
  pDependencies: VkSubpassDependency[] | null;
}

export interface VkRenderPassCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  attachmentCount: number;
  pAttachments: VkAttachmentDescription[] | null;
  subpassCount: number;
  pSubpasses: VkSubpassDescription[] | null;
  dependencyCount: number;
  pDependencies: VkSubpassDependency[] | null;
}


/** ## VkSubpassDependency ## */
interface VkSubpassDependencyInitializer {
  srcSubpass?: number;
  dstSubpass?: number;
  srcStageMask?: VkPipelineStageFlagBits;
  dstStageMask?: VkPipelineStageFlagBits;
  srcAccessMask?: VkAccessFlagBits;
  dstAccessMask?: VkAccessFlagBits;
  dependencyFlags?: VkDependencyFlagBits;
}

declare var VkSubpassDependency: {
  prototype: VkSubpassDependency;
  new(param?: VkSubpassDependencyInitializer | null): VkSubpassDependency;
  srcSubpass: number;
  dstSubpass: number;
  srcStageMask: VkPipelineStageFlagBits;
  dstStageMask: VkPipelineStageFlagBits;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  dependencyFlags: VkDependencyFlagBits;
}

export interface VkSubpassDependency {
  srcSubpass: number;
  dstSubpass: number;
  srcStageMask: VkPipelineStageFlagBits;
  dstStageMask: VkPipelineStageFlagBits;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  dependencyFlags: VkDependencyFlagBits;
}


/** ## VkSubpassDescription ## */
interface VkSubpassDescriptionInitializer {
  flags?: VkSubpassDescriptionFlagBits;
  pipelineBindPoint?: VkPipelineBindPoint;
  inputAttachmentCount?: number;
  pInputAttachments?: VkAttachmentReference[] | null;
  colorAttachmentCount?: number;
  pColorAttachments?: VkAttachmentReference[] | null;
  pResolveAttachments?: VkAttachmentReference[] | null;
  pDepthStencilAttachment?: VkAttachmentReference | null;
  preserveAttachmentCount?: number;
  pPreserveAttachments?: Uint32Array | null;
}

declare var VkSubpassDescription: {
  prototype: VkSubpassDescription;
  new(param?: VkSubpassDescriptionInitializer | null): VkSubpassDescription;
  flags: VkSubpassDescriptionFlagBits;
  pipelineBindPoint: VkPipelineBindPoint;
  inputAttachmentCount: number;
  pInputAttachments: VkAttachmentReference[] | null;
  colorAttachmentCount: number;
  pColorAttachments: VkAttachmentReference[] | null;
  pResolveAttachments: VkAttachmentReference[] | null;
  pDepthStencilAttachment: VkAttachmentReference | null;
  preserveAttachmentCount: number;
  pPreserveAttachments: Uint32Array | null;
}

export interface VkSubpassDescription {
  flags: VkSubpassDescriptionFlagBits;
  pipelineBindPoint: VkPipelineBindPoint;
  inputAttachmentCount: number;
  pInputAttachments: VkAttachmentReference[] | null;
  colorAttachmentCount: number;
  pColorAttachments: VkAttachmentReference[] | null;
  pResolveAttachments: VkAttachmentReference[] | null;
  pDepthStencilAttachment: VkAttachmentReference | null;
  preserveAttachmentCount: number;
  pPreserveAttachments: Uint32Array | null;
}


/** ## VkAttachmentReference ## */
interface VkAttachmentReferenceInitializer {
  attachment?: number;
  layout?: VkImageLayout;
}

declare var VkAttachmentReference: {
  prototype: VkAttachmentReference;
  new(param?: VkAttachmentReferenceInitializer | null): VkAttachmentReference;
  attachment: number;
  layout: VkImageLayout;
}

export interface VkAttachmentReference {
  attachment: number;
  layout: VkImageLayout;
}


/** ## VkAttachmentDescription ## */
interface VkAttachmentDescriptionInitializer {
  flags?: VkAttachmentDescriptionFlagBits;
  format?: VkFormat;
  samples?: VkSampleCountFlagBits;
  loadOp?: VkAttachmentLoadOp;
  storeOp?: VkAttachmentStoreOp;
  stencilLoadOp?: VkAttachmentLoadOp;
  stencilStoreOp?: VkAttachmentStoreOp;
  initialLayout?: VkImageLayout;
  finalLayout?: VkImageLayout;
}

declare var VkAttachmentDescription: {
  prototype: VkAttachmentDescription;
  new(param?: VkAttachmentDescriptionInitializer | null): VkAttachmentDescription;
  flags: VkAttachmentDescriptionFlagBits;
  format: VkFormat;
  samples: VkSampleCountFlagBits;
  loadOp: VkAttachmentLoadOp;
  storeOp: VkAttachmentStoreOp;
  stencilLoadOp: VkAttachmentLoadOp;
  stencilStoreOp: VkAttachmentStoreOp;
  initialLayout: VkImageLayout;
  finalLayout: VkImageLayout;
}

export interface VkAttachmentDescription {
  flags: VkAttachmentDescriptionFlagBits;
  format: VkFormat;
  samples: VkSampleCountFlagBits;
  loadOp: VkAttachmentLoadOp;
  storeOp: VkAttachmentStoreOp;
  stencilLoadOp: VkAttachmentLoadOp;
  stencilStoreOp: VkAttachmentStoreOp;
  initialLayout: VkImageLayout;
  finalLayout: VkImageLayout;
}


/** ## VkClearAttachment ## */
interface VkClearAttachmentInitializer {
  aspectMask?: VkImageAspectFlagBits;
  colorAttachment?: number;
  clearValue?: VkClearValue | null;
}

declare var VkClearAttachment: {
  prototype: VkClearAttachment;
  new(param?: VkClearAttachmentInitializer | null): VkClearAttachment;
  aspectMask: VkImageAspectFlagBits;
  colorAttachment: number;
  clearValue: VkClearValue | null;
}

export interface VkClearAttachment {
  aspectMask: VkImageAspectFlagBits;
  colorAttachment: number;
  clearValue: VkClearValue | null;
}


/** ## VkClearDepthStencilValue ## */
interface VkClearDepthStencilValueInitializer {
  depth?: number;
  stencil?: number;
}

declare var VkClearDepthStencilValue: {
  prototype: VkClearDepthStencilValue;
  new(param?: VkClearDepthStencilValueInitializer | null): VkClearDepthStencilValue;
  depth: number;
  stencil: number;
}

export interface VkClearDepthStencilValue {
  depth: number;
  stencil: number;
}


/** ## VkRenderPassBeginInfo ## */
interface VkRenderPassBeginInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  renderPass?: VkRenderPass | null;
  framebuffer?: VkFramebuffer | null;
  renderArea?: VkRect2D | null;
  clearValueCount?: number;
  pClearValues?: VkClearValue[] | null;
}

declare var VkRenderPassBeginInfo: {
  prototype: VkRenderPassBeginInfo;
  new(param?: VkRenderPassBeginInfoInitializer | null): VkRenderPassBeginInfo;
  sType: VkStructureType;
  pNext: null;
  renderPass: VkRenderPass | null;
  framebuffer: VkFramebuffer | null;
  renderArea: VkRect2D | null;
  clearValueCount: number;
  pClearValues: VkClearValue[] | null;
}

export interface VkRenderPassBeginInfo {
  sType: VkStructureType;
  pNext: null;
  renderPass: VkRenderPass | null;
  framebuffer: VkFramebuffer | null;
  renderArea: VkRect2D | null;
  clearValueCount: number;
  pClearValues: VkClearValue[] | null;
}


/** ## VkCommandBufferBeginInfo ## */
interface VkCommandBufferBeginInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkCommandBufferUsageFlagBits;
  pInheritanceInfo?: VkCommandBufferInheritanceInfo | null;
}

declare var VkCommandBufferBeginInfo: {
  prototype: VkCommandBufferBeginInfo;
  new(param?: VkCommandBufferBeginInfoInitializer | null): VkCommandBufferBeginInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkCommandBufferUsageFlagBits;
  pInheritanceInfo: VkCommandBufferInheritanceInfo | null;
}

export interface VkCommandBufferBeginInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkCommandBufferUsageFlagBits;
  pInheritanceInfo: VkCommandBufferInheritanceInfo | null;
}


/** ## VkCommandBufferInheritanceInfo ## */
interface VkCommandBufferInheritanceInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  renderPass?: VkRenderPass | null;
  subpass?: number;
  framebuffer?: VkFramebuffer | null;
  occlusionQueryEnable?: number;
  queryFlags?: VkQueryControlFlagBits;
  pipelineStatistics?: VkQueryPipelineStatisticFlagBits;
}

declare var VkCommandBufferInheritanceInfo: {
  prototype: VkCommandBufferInheritanceInfo;
  new(param?: VkCommandBufferInheritanceInfoInitializer | null): VkCommandBufferInheritanceInfo;
  sType: VkStructureType;
  pNext: null;
  renderPass: VkRenderPass | null;
  subpass: number;
  framebuffer: VkFramebuffer | null;
  occlusionQueryEnable: number;
  queryFlags: VkQueryControlFlagBits;
  pipelineStatistics: VkQueryPipelineStatisticFlagBits;
}

export interface VkCommandBufferInheritanceInfo {
  sType: VkStructureType;
  pNext: null;
  renderPass: VkRenderPass | null;
  subpass: number;
  framebuffer: VkFramebuffer | null;
  occlusionQueryEnable: number;
  queryFlags: VkQueryControlFlagBits;
  pipelineStatistics: VkQueryPipelineStatisticFlagBits;
}


/** ## VkCommandBufferAllocateInfo ## */
interface VkCommandBufferAllocateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  commandPool?: VkCommandPool | null;
  level?: VkCommandBufferLevel;
  commandBufferCount?: number;
}

declare var VkCommandBufferAllocateInfo: {
  prototype: VkCommandBufferAllocateInfo;
  new(param?: VkCommandBufferAllocateInfoInitializer | null): VkCommandBufferAllocateInfo;
  sType: VkStructureType;
  pNext: null;
  commandPool: VkCommandPool | null;
  level: VkCommandBufferLevel;
  commandBufferCount: number;
}

export interface VkCommandBufferAllocateInfo {
  sType: VkStructureType;
  pNext: null;
  commandPool: VkCommandPool | null;
  level: VkCommandBufferLevel;
  commandBufferCount: number;
}


/** ## VkCommandPoolCreateInfo ## */
interface VkCommandPoolCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkCommandPoolCreateFlagBits;
  queueFamilyIndex?: number;
}

declare var VkCommandPoolCreateInfo: {
  prototype: VkCommandPoolCreateInfo;
  new(param?: VkCommandPoolCreateInfoInitializer | null): VkCommandPoolCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkCommandPoolCreateFlagBits;
  queueFamilyIndex: number;
}

export interface VkCommandPoolCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkCommandPoolCreateFlagBits;
  queueFamilyIndex: number;
}


/** ## VkSamplerCreateInfo ## */
interface VkSamplerCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkSamplerCreateFlagBits;
  magFilter?: VkFilter;
  minFilter?: VkFilter;
  mipmapMode?: VkSamplerMipmapMode;
  addressModeU?: VkSamplerAddressMode;
  addressModeV?: VkSamplerAddressMode;
  addressModeW?: VkSamplerAddressMode;
  mipLodBias?: number;
  anisotropyEnable?: number;
  maxAnisotropy?: number;
  compareEnable?: number;
  compareOp?: VkCompareOp;
  minLod?: number;
  maxLod?: number;
  borderColor?: VkBorderColor;
  unnormalizedCoordinates?: number;
}

declare var VkSamplerCreateInfo: {
  prototype: VkSamplerCreateInfo;
  new(param?: VkSamplerCreateInfoInitializer | null): VkSamplerCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkSamplerCreateFlagBits;
  magFilter: VkFilter;
  minFilter: VkFilter;
  mipmapMode: VkSamplerMipmapMode;
  addressModeU: VkSamplerAddressMode;
  addressModeV: VkSamplerAddressMode;
  addressModeW: VkSamplerAddressMode;
  mipLodBias: number;
  anisotropyEnable: number;
  maxAnisotropy: number;
  compareEnable: number;
  compareOp: VkCompareOp;
  minLod: number;
  maxLod: number;
  borderColor: VkBorderColor;
  unnormalizedCoordinates: number;
}

export interface VkSamplerCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkSamplerCreateFlagBits;
  magFilter: VkFilter;
  minFilter: VkFilter;
  mipmapMode: VkSamplerMipmapMode;
  addressModeU: VkSamplerAddressMode;
  addressModeV: VkSamplerAddressMode;
  addressModeW: VkSamplerAddressMode;
  mipLodBias: number;
  anisotropyEnable: number;
  maxAnisotropy: number;
  compareEnable: number;
  compareOp: VkCompareOp;
  minLod: number;
  maxLod: number;
  borderColor: VkBorderColor;
  unnormalizedCoordinates: number;
}


/** ## VkPipelineLayoutCreateInfo ## */
interface VkPipelineLayoutCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  setLayoutCount?: number;
  pSetLayouts?: VkDescriptorSetLayout[] | null;
  pushConstantRangeCount?: number;
  pPushConstantRanges?: VkPushConstantRange[] | null;
}

declare var VkPipelineLayoutCreateInfo: {
  prototype: VkPipelineLayoutCreateInfo;
  new(param?: VkPipelineLayoutCreateInfoInitializer | null): VkPipelineLayoutCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  setLayoutCount: number;
  pSetLayouts: VkDescriptorSetLayout[] | null;
  pushConstantRangeCount: number;
  pPushConstantRanges: VkPushConstantRange[] | null;
}

export interface VkPipelineLayoutCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  setLayoutCount: number;
  pSetLayouts: VkDescriptorSetLayout[] | null;
  pushConstantRangeCount: number;
  pPushConstantRanges: VkPushConstantRange[] | null;
}


/** ## VkPushConstantRange ## */
interface VkPushConstantRangeInitializer {
  stageFlags?: VkShaderStageFlagBits;
  offset?: number;
  size?: number;
}

declare var VkPushConstantRange: {
  prototype: VkPushConstantRange;
  new(param?: VkPushConstantRangeInitializer | null): VkPushConstantRange;
  stageFlags: VkShaderStageFlagBits;
  offset: number;
  size: number;
}

export interface VkPushConstantRange {
  stageFlags: VkShaderStageFlagBits;
  offset: number;
  size: number;
}


/** ## VkPipelineCacheCreateInfo ## */
interface VkPipelineCacheCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  initialDataSize?: number;
  pInitialData?: ArrayBuffer | null;
}

declare var VkPipelineCacheCreateInfo: {
  prototype: VkPipelineCacheCreateInfo;
  new(param?: VkPipelineCacheCreateInfoInitializer | null): VkPipelineCacheCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  initialDataSize: number;
  pInitialData: ArrayBuffer | null;
}

export interface VkPipelineCacheCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  initialDataSize: number;
  pInitialData: ArrayBuffer | null;
}


/** ## VkGraphicsPipelineCreateInfo ## */
interface VkGraphicsPipelineCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineCreateFlagBits;
  stageCount?: number;
  pStages?: VkPipelineShaderStageCreateInfo[] | null;
  pVertexInputState?: VkPipelineVertexInputStateCreateInfo | null;
  pInputAssemblyState?: VkPipelineInputAssemblyStateCreateInfo | null;
  pTessellationState?: VkPipelineTessellationStateCreateInfo | null;
  pViewportState?: VkPipelineViewportStateCreateInfo | null;
  pRasterizationState?: VkPipelineRasterizationStateCreateInfo | null;
  pMultisampleState?: VkPipelineMultisampleStateCreateInfo | null;
  pDepthStencilState?: VkPipelineDepthStencilStateCreateInfo | null;
  pColorBlendState?: VkPipelineColorBlendStateCreateInfo | null;
  pDynamicState?: VkPipelineDynamicStateCreateInfo | null;
  layout?: VkPipelineLayout | null;
  renderPass?: VkRenderPass | null;
  subpass?: number;
  basePipelineHandle?: VkPipeline | null;
  basePipelineIndex?: number;
}

declare var VkGraphicsPipelineCreateInfo: {
  prototype: VkGraphicsPipelineCreateInfo;
  new(param?: VkGraphicsPipelineCreateInfoInitializer | null): VkGraphicsPipelineCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineCreateFlagBits;
  stageCount: number;
  pStages: VkPipelineShaderStageCreateInfo[] | null;
  pVertexInputState: VkPipelineVertexInputStateCreateInfo | null;
  pInputAssemblyState: VkPipelineInputAssemblyStateCreateInfo | null;
  pTessellationState: VkPipelineTessellationStateCreateInfo | null;
  pViewportState: VkPipelineViewportStateCreateInfo | null;
  pRasterizationState: VkPipelineRasterizationStateCreateInfo | null;
  pMultisampleState: VkPipelineMultisampleStateCreateInfo | null;
  pDepthStencilState: VkPipelineDepthStencilStateCreateInfo | null;
  pColorBlendState: VkPipelineColorBlendStateCreateInfo | null;
  pDynamicState: VkPipelineDynamicStateCreateInfo | null;
  layout: VkPipelineLayout | null;
  renderPass: VkRenderPass | null;
  subpass: number;
  basePipelineHandle: VkPipeline | null;
  basePipelineIndex: number;
}

export interface VkGraphicsPipelineCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineCreateFlagBits;
  stageCount: number;
  pStages: VkPipelineShaderStageCreateInfo[] | null;
  pVertexInputState: VkPipelineVertexInputStateCreateInfo | null;
  pInputAssemblyState: VkPipelineInputAssemblyStateCreateInfo | null;
  pTessellationState: VkPipelineTessellationStateCreateInfo | null;
  pViewportState: VkPipelineViewportStateCreateInfo | null;
  pRasterizationState: VkPipelineRasterizationStateCreateInfo | null;
  pMultisampleState: VkPipelineMultisampleStateCreateInfo | null;
  pDepthStencilState: VkPipelineDepthStencilStateCreateInfo | null;
  pColorBlendState: VkPipelineColorBlendStateCreateInfo | null;
  pDynamicState: VkPipelineDynamicStateCreateInfo | null;
  layout: VkPipelineLayout | null;
  renderPass: VkRenderPass | null;
  subpass: number;
  basePipelineHandle: VkPipeline | null;
  basePipelineIndex: number;
}


/** ## VkPipelineDepthStencilStateCreateInfo ## */
interface VkPipelineDepthStencilStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  depthTestEnable?: number;
  depthWriteEnable?: number;
  depthCompareOp?: VkCompareOp;
  depthBoundsTestEnable?: number;
  stencilTestEnable?: number;
  front?: VkStencilOpState | null;
  back?: VkStencilOpState | null;
  minDepthBounds?: number;
  maxDepthBounds?: number;
}

declare var VkPipelineDepthStencilStateCreateInfo: {
  prototype: VkPipelineDepthStencilStateCreateInfo;
  new(param?: VkPipelineDepthStencilStateCreateInfoInitializer | null): VkPipelineDepthStencilStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  depthTestEnable: number;
  depthWriteEnable: number;
  depthCompareOp: VkCompareOp;
  depthBoundsTestEnable: number;
  stencilTestEnable: number;
  front: VkStencilOpState | null;
  back: VkStencilOpState | null;
  minDepthBounds: number;
  maxDepthBounds: number;
}

export interface VkPipelineDepthStencilStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  depthTestEnable: number;
  depthWriteEnable: number;
  depthCompareOp: VkCompareOp;
  depthBoundsTestEnable: number;
  stencilTestEnable: number;
  front: VkStencilOpState | null;
  back: VkStencilOpState | null;
  minDepthBounds: number;
  maxDepthBounds: number;
}


/** ## VkStencilOpState ## */
interface VkStencilOpStateInitializer {
  failOp?: VkStencilOp;
  passOp?: VkStencilOp;
  depthFailOp?: VkStencilOp;
  compareOp?: VkCompareOp;
  compareMask?: number;
  writeMask?: number;
  reference?: number;
}

declare var VkStencilOpState: {
  prototype: VkStencilOpState;
  new(param?: VkStencilOpStateInitializer | null): VkStencilOpState;
  failOp: VkStencilOp;
  passOp: VkStencilOp;
  depthFailOp: VkStencilOp;
  compareOp: VkCompareOp;
  compareMask: number;
  writeMask: number;
  reference: number;
}

export interface VkStencilOpState {
  failOp: VkStencilOp;
  passOp: VkStencilOp;
  depthFailOp: VkStencilOp;
  compareOp: VkCompareOp;
  compareMask: number;
  writeMask: number;
  reference: number;
}


/** ## VkPipelineDynamicStateCreateInfo ## */
interface VkPipelineDynamicStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  dynamicStateCount?: number;
  pDynamicStates?: Int32Array | null;
}

declare var VkPipelineDynamicStateCreateInfo: {
  prototype: VkPipelineDynamicStateCreateInfo;
  new(param?: VkPipelineDynamicStateCreateInfoInitializer | null): VkPipelineDynamicStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  dynamicStateCount: number;
  pDynamicStates: Int32Array | null;
}

export interface VkPipelineDynamicStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  dynamicStateCount: number;
  pDynamicStates: Int32Array | null;
}


/** ## VkPipelineColorBlendStateCreateInfo ## */
interface VkPipelineColorBlendStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  logicOpEnable?: number;
  logicOp?: VkLogicOp;
  attachmentCount?: number;
  pAttachments?: VkPipelineColorBlendAttachmentState[] | null;
  blendConstants?: number[] | null;
}

declare var VkPipelineColorBlendStateCreateInfo: {
  prototype: VkPipelineColorBlendStateCreateInfo;
  new(param?: VkPipelineColorBlendStateCreateInfoInitializer | null): VkPipelineColorBlendStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  logicOpEnable: number;
  logicOp: VkLogicOp;
  attachmentCount: number;
  pAttachments: VkPipelineColorBlendAttachmentState[] | null;
  blendConstants: number[] | null;
}

export interface VkPipelineColorBlendStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  logicOpEnable: number;
  logicOp: VkLogicOp;
  attachmentCount: number;
  pAttachments: VkPipelineColorBlendAttachmentState[] | null;
  blendConstants: number[] | null;
}


/** ## VkPipelineColorBlendAttachmentState ## */
interface VkPipelineColorBlendAttachmentStateInitializer {
  blendEnable?: number;
  srcColorBlendFactor?: VkBlendFactor;
  dstColorBlendFactor?: VkBlendFactor;
  colorBlendOp?: VkBlendOp;
  srcAlphaBlendFactor?: VkBlendFactor;
  dstAlphaBlendFactor?: VkBlendFactor;
  alphaBlendOp?: VkBlendOp;
  colorWriteMask?: VkColorComponentFlagBits;
}

declare var VkPipelineColorBlendAttachmentState: {
  prototype: VkPipelineColorBlendAttachmentState;
  new(param?: VkPipelineColorBlendAttachmentStateInitializer | null): VkPipelineColorBlendAttachmentState;
  blendEnable: number;
  srcColorBlendFactor: VkBlendFactor;
  dstColorBlendFactor: VkBlendFactor;
  colorBlendOp: VkBlendOp;
  srcAlphaBlendFactor: VkBlendFactor;
  dstAlphaBlendFactor: VkBlendFactor;
  alphaBlendOp: VkBlendOp;
  colorWriteMask: VkColorComponentFlagBits;
}

export interface VkPipelineColorBlendAttachmentState {
  blendEnable: number;
  srcColorBlendFactor: VkBlendFactor;
  dstColorBlendFactor: VkBlendFactor;
  colorBlendOp: VkBlendOp;
  srcAlphaBlendFactor: VkBlendFactor;
  dstAlphaBlendFactor: VkBlendFactor;
  alphaBlendOp: VkBlendOp;
  colorWriteMask: VkColorComponentFlagBits;
}


/** ## VkPipelineMultisampleStateCreateInfo ## */
interface VkPipelineMultisampleStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  rasterizationSamples?: VkSampleCountFlagBits;
  sampleShadingEnable?: number;
  minSampleShading?: number;
  pSampleMask?: Uint32Array | null;
  alphaToCoverageEnable?: number;
  alphaToOneEnable?: number;
}

declare var VkPipelineMultisampleStateCreateInfo: {
  prototype: VkPipelineMultisampleStateCreateInfo;
  new(param?: VkPipelineMultisampleStateCreateInfoInitializer | null): VkPipelineMultisampleStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  rasterizationSamples: VkSampleCountFlagBits;
  sampleShadingEnable: number;
  minSampleShading: number;
  pSampleMask: Uint32Array | null;
  alphaToCoverageEnable: number;
  alphaToOneEnable: number;
}

export interface VkPipelineMultisampleStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  rasterizationSamples: VkSampleCountFlagBits;
  sampleShadingEnable: number;
  minSampleShading: number;
  pSampleMask: Uint32Array | null;
  alphaToCoverageEnable: number;
  alphaToOneEnable: number;
}


/** ## VkPipelineRasterizationStateCreateInfo ## */
interface VkPipelineRasterizationStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  depthClampEnable?: number;
  rasterizerDiscardEnable?: number;
  polygonMode?: VkPolygonMode;
  cullMode?: VkCullModeFlagBits;
  frontFace?: VkFrontFace;
  depthBiasEnable?: number;
  depthBiasConstantFactor?: number;
  depthBiasClamp?: number;
  depthBiasSlopeFactor?: number;
  lineWidth?: number;
}

declare var VkPipelineRasterizationStateCreateInfo: {
  prototype: VkPipelineRasterizationStateCreateInfo;
  new(param?: VkPipelineRasterizationStateCreateInfoInitializer | null): VkPipelineRasterizationStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  depthClampEnable: number;
  rasterizerDiscardEnable: number;
  polygonMode: VkPolygonMode;
  cullMode: VkCullModeFlagBits;
  frontFace: VkFrontFace;
  depthBiasEnable: number;
  depthBiasConstantFactor: number;
  depthBiasClamp: number;
  depthBiasSlopeFactor: number;
  lineWidth: number;
}

export interface VkPipelineRasterizationStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  depthClampEnable: number;
  rasterizerDiscardEnable: number;
  polygonMode: VkPolygonMode;
  cullMode: VkCullModeFlagBits;
  frontFace: VkFrontFace;
  depthBiasEnable: number;
  depthBiasConstantFactor: number;
  depthBiasClamp: number;
  depthBiasSlopeFactor: number;
  lineWidth: number;
}


/** ## VkPipelineViewportStateCreateInfo ## */
interface VkPipelineViewportStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  viewportCount?: number;
  pViewports?: VkViewport[] | null;
  scissorCount?: number;
  pScissors?: VkRect2D[] | null;
}

declare var VkPipelineViewportStateCreateInfo: {
  prototype: VkPipelineViewportStateCreateInfo;
  new(param?: VkPipelineViewportStateCreateInfoInitializer | null): VkPipelineViewportStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  viewportCount: number;
  pViewports: VkViewport[] | null;
  scissorCount: number;
  pScissors: VkRect2D[] | null;
}

export interface VkPipelineViewportStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  viewportCount: number;
  pViewports: VkViewport[] | null;
  scissorCount: number;
  pScissors: VkRect2D[] | null;
}


/** ## VkPipelineTessellationStateCreateInfo ## */
interface VkPipelineTessellationStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  patchControlPoints?: number;
}

declare var VkPipelineTessellationStateCreateInfo: {
  prototype: VkPipelineTessellationStateCreateInfo;
  new(param?: VkPipelineTessellationStateCreateInfoInitializer | null): VkPipelineTessellationStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  patchControlPoints: number;
}

export interface VkPipelineTessellationStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  patchControlPoints: number;
}


/** ## VkPipelineInputAssemblyStateCreateInfo ## */
interface VkPipelineInputAssemblyStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  topology?: VkPrimitiveTopology;
  primitiveRestartEnable?: number;
}

declare var VkPipelineInputAssemblyStateCreateInfo: {
  prototype: VkPipelineInputAssemblyStateCreateInfo;
  new(param?: VkPipelineInputAssemblyStateCreateInfoInitializer | null): VkPipelineInputAssemblyStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  topology: VkPrimitiveTopology;
  primitiveRestartEnable: number;
}

export interface VkPipelineInputAssemblyStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  topology: VkPrimitiveTopology;
  primitiveRestartEnable: number;
}


/** ## VkPipelineVertexInputStateCreateInfo ## */
interface VkPipelineVertexInputStateCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  vertexBindingDescriptionCount?: number;
  pVertexBindingDescriptions?: VkVertexInputBindingDescription[] | null;
  vertexAttributeDescriptionCount?: number;
  pVertexAttributeDescriptions?: VkVertexInputAttributeDescription[] | null;
}

declare var VkPipelineVertexInputStateCreateInfo: {
  prototype: VkPipelineVertexInputStateCreateInfo;
  new(param?: VkPipelineVertexInputStateCreateInfoInitializer | null): VkPipelineVertexInputStateCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  vertexBindingDescriptionCount: number;
  pVertexBindingDescriptions: VkVertexInputBindingDescription[] | null;
  vertexAttributeDescriptionCount: number;
  pVertexAttributeDescriptions: VkVertexInputAttributeDescription[] | null;
}

export interface VkPipelineVertexInputStateCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  vertexBindingDescriptionCount: number;
  pVertexBindingDescriptions: VkVertexInputBindingDescription[] | null;
  vertexAttributeDescriptionCount: number;
  pVertexAttributeDescriptions: VkVertexInputAttributeDescription[] | null;
}


/** ## VkVertexInputAttributeDescription ## */
interface VkVertexInputAttributeDescriptionInitializer {
  location?: number;
  binding?: number;
  format?: VkFormat;
  offset?: number;
}

declare var VkVertexInputAttributeDescription: {
  prototype: VkVertexInputAttributeDescription;
  new(param?: VkVertexInputAttributeDescriptionInitializer | null): VkVertexInputAttributeDescription;
  location: number;
  binding: number;
  format: VkFormat;
  offset: number;
}

export interface VkVertexInputAttributeDescription {
  location: number;
  binding: number;
  format: VkFormat;
  offset: number;
}


/** ## VkVertexInputBindingDescription ## */
interface VkVertexInputBindingDescriptionInitializer {
  binding?: number;
  stride?: number;
  inputRate?: VkVertexInputRate;
}

declare var VkVertexInputBindingDescription: {
  prototype: VkVertexInputBindingDescription;
  new(param?: VkVertexInputBindingDescriptionInitializer | null): VkVertexInputBindingDescription;
  binding: number;
  stride: number;
  inputRate: VkVertexInputRate;
}

export interface VkVertexInputBindingDescription {
  binding: number;
  stride: number;
  inputRate: VkVertexInputRate;
}


/** ## VkComputePipelineCreateInfo ## */
interface VkComputePipelineCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkPipelineCreateFlagBits;
  stage?: VkPipelineShaderStageCreateInfo | null;
  layout?: VkPipelineLayout | null;
  basePipelineHandle?: VkPipeline | null;
  basePipelineIndex?: number;
}

declare var VkComputePipelineCreateInfo: {
  prototype: VkComputePipelineCreateInfo;
  new(param?: VkComputePipelineCreateInfoInitializer | null): VkComputePipelineCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineCreateFlagBits;
  stage: VkPipelineShaderStageCreateInfo | null;
  layout: VkPipelineLayout | null;
  basePipelineHandle: VkPipeline | null;
  basePipelineIndex: number;
}

export interface VkComputePipelineCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkPipelineCreateFlagBits;
  stage: VkPipelineShaderStageCreateInfo | null;
  layout: VkPipelineLayout | null;
  basePipelineHandle: VkPipeline | null;
  basePipelineIndex: number;
}


/** ## VkPipelineShaderStageCreateInfo ## */
interface VkPipelineShaderStageCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  stage?: VkShaderStageFlagBits;
  module?: VkShaderModule | null;
  pName?: string | null;
  pSpecializationInfo?: VkSpecializationInfo | null;
}

declare var VkPipelineShaderStageCreateInfo: {
  prototype: VkPipelineShaderStageCreateInfo;
  new(param?: VkPipelineShaderStageCreateInfoInitializer | null): VkPipelineShaderStageCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  stage: VkShaderStageFlagBits;
  module: VkShaderModule | null;
  pName: string | null;
  pSpecializationInfo: VkSpecializationInfo | null;
}

export interface VkPipelineShaderStageCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  stage: VkShaderStageFlagBits;
  module: VkShaderModule | null;
  pName: string | null;
  pSpecializationInfo: VkSpecializationInfo | null;
}


/** ## VkSpecializationInfo ## */
interface VkSpecializationInfoInitializer {
  mapEntryCount?: number;
  pMapEntries?: VkSpecializationMapEntry[] | null;
  dataSize?: number;
  pData?: ArrayBuffer | null;
}

declare var VkSpecializationInfo: {
  prototype: VkSpecializationInfo;
  new(param?: VkSpecializationInfoInitializer | null): VkSpecializationInfo;
  mapEntryCount: number;
  pMapEntries: VkSpecializationMapEntry[] | null;
  dataSize: number;
  pData: ArrayBuffer | null;
}

export interface VkSpecializationInfo {
  mapEntryCount: number;
  pMapEntries: VkSpecializationMapEntry[] | null;
  dataSize: number;
  pData: ArrayBuffer | null;
}


/** ## VkSpecializationMapEntry ## */
interface VkSpecializationMapEntryInitializer {
  constantID?: number;
  offset?: number;
  size?: number;
}

declare var VkSpecializationMapEntry: {
  prototype: VkSpecializationMapEntry;
  new(param?: VkSpecializationMapEntryInitializer | null): VkSpecializationMapEntry;
  constantID: number;
  offset: number;
  size: number;
}

export interface VkSpecializationMapEntry {
  constantID: number;
  offset: number;
  size: number;
}


/** ## VkDescriptorSetAllocateInfo ## */
interface VkDescriptorSetAllocateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  descriptorPool?: VkDescriptorPool | null;
  descriptorSetCount?: number;
  pSetLayouts?: VkDescriptorSetLayout[] | null;
}

declare var VkDescriptorSetAllocateInfo: {
  prototype: VkDescriptorSetAllocateInfo;
  new(param?: VkDescriptorSetAllocateInfoInitializer | null): VkDescriptorSetAllocateInfo;
  sType: VkStructureType;
  pNext: null;
  descriptorPool: VkDescriptorPool | null;
  descriptorSetCount: number;
  pSetLayouts: VkDescriptorSetLayout[] | null;
}

export interface VkDescriptorSetAllocateInfo {
  sType: VkStructureType;
  pNext: null;
  descriptorPool: VkDescriptorPool | null;
  descriptorSetCount: number;
  pSetLayouts: VkDescriptorSetLayout[] | null;
}


/** ## VkDescriptorPoolCreateInfo ## */
interface VkDescriptorPoolCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkDescriptorPoolCreateFlagBits;
  maxSets?: number;
  poolSizeCount?: number;
  pPoolSizes?: VkDescriptorPoolSize[] | null;
}

declare var VkDescriptorPoolCreateInfo: {
  prototype: VkDescriptorPoolCreateInfo;
  new(param?: VkDescriptorPoolCreateInfoInitializer | null): VkDescriptorPoolCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkDescriptorPoolCreateFlagBits;
  maxSets: number;
  poolSizeCount: number;
  pPoolSizes: VkDescriptorPoolSize[] | null;
}

export interface VkDescriptorPoolCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkDescriptorPoolCreateFlagBits;
  maxSets: number;
  poolSizeCount: number;
  pPoolSizes: VkDescriptorPoolSize[] | null;
}


/** ## VkDescriptorPoolSize ## */
interface VkDescriptorPoolSizeInitializer {
  type?: VkDescriptorType;
  descriptorCount?: number;
}

declare var VkDescriptorPoolSize: {
  prototype: VkDescriptorPoolSize;
  new(param?: VkDescriptorPoolSizeInitializer | null): VkDescriptorPoolSize;
  type: VkDescriptorType;
  descriptorCount: number;
}

export interface VkDescriptorPoolSize {
  type: VkDescriptorType;
  descriptorCount: number;
}


/** ## VkDescriptorSetLayoutCreateInfo ## */
interface VkDescriptorSetLayoutCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkDescriptorSetLayoutCreateFlagBits;
  bindingCount?: number;
  pBindings?: VkDescriptorSetLayoutBinding[] | null;
}

declare var VkDescriptorSetLayoutCreateInfo: {
  prototype: VkDescriptorSetLayoutCreateInfo;
  new(param?: VkDescriptorSetLayoutCreateInfoInitializer | null): VkDescriptorSetLayoutCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkDescriptorSetLayoutCreateFlagBits;
  bindingCount: number;
  pBindings: VkDescriptorSetLayoutBinding[] | null;
}

export interface VkDescriptorSetLayoutCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkDescriptorSetLayoutCreateFlagBits;
  bindingCount: number;
  pBindings: VkDescriptorSetLayoutBinding[] | null;
}


/** ## VkDescriptorSetLayoutBinding ## */
interface VkDescriptorSetLayoutBindingInitializer {
  binding?: number;
  descriptorType?: VkDescriptorType;
  descriptorCount?: number;
  stageFlags?: VkShaderStageFlagBits;
  pImmutableSamplers?: VkSampler[] | null;
}

declare var VkDescriptorSetLayoutBinding: {
  prototype: VkDescriptorSetLayoutBinding;
  new(param?: VkDescriptorSetLayoutBindingInitializer | null): VkDescriptorSetLayoutBinding;
  binding: number;
  descriptorType: VkDescriptorType;
  descriptorCount: number;
  stageFlags: VkShaderStageFlagBits;
  pImmutableSamplers: VkSampler[] | null;
}

export interface VkDescriptorSetLayoutBinding {
  binding: number;
  descriptorType: VkDescriptorType;
  descriptorCount: number;
  stageFlags: VkShaderStageFlagBits;
  pImmutableSamplers: VkSampler[] | null;
}


/** ## VkShaderModuleCreateInfo ## */
interface VkShaderModuleCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  codeSize?: number;
  pCode?: Uint8Array | null;
}

declare var VkShaderModuleCreateInfo: {
  prototype: VkShaderModuleCreateInfo;
  new(param?: VkShaderModuleCreateInfoInitializer | null): VkShaderModuleCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  codeSize: number;
  pCode: Uint8Array | null;
}

export interface VkShaderModuleCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  codeSize: number;
  pCode: Uint8Array | null;
}


/** ## VkImageResolve ## */
interface VkImageResolveInitializer {
  srcSubresource?: VkImageSubresourceLayers | null;
  srcOffset?: VkOffset3D | null;
  dstSubresource?: VkImageSubresourceLayers | null;
  dstOffset?: VkOffset3D | null;
  extent?: VkExtent3D | null;
}

declare var VkImageResolve: {
  prototype: VkImageResolve;
  new(param?: VkImageResolveInitializer | null): VkImageResolve;
  srcSubresource: VkImageSubresourceLayers | null;
  srcOffset: VkOffset3D | null;
  dstSubresource: VkImageSubresourceLayers | null;
  dstOffset: VkOffset3D | null;
  extent: VkExtent3D | null;
}

export interface VkImageResolve {
  srcSubresource: VkImageSubresourceLayers | null;
  srcOffset: VkOffset3D | null;
  dstSubresource: VkImageSubresourceLayers | null;
  dstOffset: VkOffset3D | null;
  extent: VkExtent3D | null;
}


/** ## VkBufferImageCopy ## */
interface VkBufferImageCopyInitializer {
  bufferOffset?: number;
  bufferRowLength?: number;
  bufferImageHeight?: number;
  imageSubresource?: VkImageSubresourceLayers | null;
  imageOffset?: VkOffset3D | null;
  imageExtent?: VkExtent3D | null;
}

declare var VkBufferImageCopy: {
  prototype: VkBufferImageCopy;
  new(param?: VkBufferImageCopyInitializer | null): VkBufferImageCopy;
  bufferOffset: number;
  bufferRowLength: number;
  bufferImageHeight: number;
  imageSubresource: VkImageSubresourceLayers | null;
  imageOffset: VkOffset3D | null;
  imageExtent: VkExtent3D | null;
}

export interface VkBufferImageCopy {
  bufferOffset: number;
  bufferRowLength: number;
  bufferImageHeight: number;
  imageSubresource: VkImageSubresourceLayers | null;
  imageOffset: VkOffset3D | null;
  imageExtent: VkExtent3D | null;
}


/** ## VkImageBlit ## */
interface VkImageBlitInitializer {
  srcSubresource?: VkImageSubresourceLayers | null;
  srcOffsets?: number[] | null;
  dstSubresource?: VkImageSubresourceLayers | null;
  dstOffsets?: number[] | null;
}

declare var VkImageBlit: {
  prototype: VkImageBlit;
  new(param?: VkImageBlitInitializer | null): VkImageBlit;
  srcSubresource: VkImageSubresourceLayers | null;
  srcOffsets: number[] | null;
  dstSubresource: VkImageSubresourceLayers | null;
  dstOffsets: number[] | null;
}

export interface VkImageBlit {
  srcSubresource: VkImageSubresourceLayers | null;
  srcOffsets: number[] | null;
  dstSubresource: VkImageSubresourceLayers | null;
  dstOffsets: number[] | null;
}


/** ## VkImageCopy ## */
interface VkImageCopyInitializer {
  srcSubresource?: VkImageSubresourceLayers | null;
  srcOffset?: VkOffset3D | null;
  dstSubresource?: VkImageSubresourceLayers | null;
  dstOffset?: VkOffset3D | null;
  extent?: VkExtent3D | null;
}

declare var VkImageCopy: {
  prototype: VkImageCopy;
  new(param?: VkImageCopyInitializer | null): VkImageCopy;
  srcSubresource: VkImageSubresourceLayers | null;
  srcOffset: VkOffset3D | null;
  dstSubresource: VkImageSubresourceLayers | null;
  dstOffset: VkOffset3D | null;
  extent: VkExtent3D | null;
}

export interface VkImageCopy {
  srcSubresource: VkImageSubresourceLayers | null;
  srcOffset: VkOffset3D | null;
  dstSubresource: VkImageSubresourceLayers | null;
  dstOffset: VkOffset3D | null;
  extent: VkExtent3D | null;
}


/** ## VkBindSparseInfo ## */
interface VkBindSparseInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  waitSemaphoreCount?: number;
  pWaitSemaphores?: VkSemaphore[] | null;
  bufferBindCount?: number;
  pBufferBinds?: VkSparseBufferMemoryBindInfo[] | null;
  imageOpaqueBindCount?: number;
  pImageOpaqueBinds?: VkSparseImageOpaqueMemoryBindInfo[] | null;
  imageBindCount?: number;
  pImageBinds?: VkSparseImageMemoryBindInfo[] | null;
  signalSemaphoreCount?: number;
  pSignalSemaphores?: VkSemaphore[] | null;
}

declare var VkBindSparseInfo: {
  prototype: VkBindSparseInfo;
  new(param?: VkBindSparseInfoInitializer | null): VkBindSparseInfo;
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  bufferBindCount: number;
  pBufferBinds: VkSparseBufferMemoryBindInfo[] | null;
  imageOpaqueBindCount: number;
  pImageOpaqueBinds: VkSparseImageOpaqueMemoryBindInfo[] | null;
  imageBindCount: number;
  pImageBinds: VkSparseImageMemoryBindInfo[] | null;
  signalSemaphoreCount: number;
  pSignalSemaphores: VkSemaphore[] | null;
}

export interface VkBindSparseInfo {
  sType: VkStructureType;
  pNext: null;
  waitSemaphoreCount: number;
  pWaitSemaphores: VkSemaphore[] | null;
  bufferBindCount: number;
  pBufferBinds: VkSparseBufferMemoryBindInfo[] | null;
  imageOpaqueBindCount: number;
  pImageOpaqueBinds: VkSparseImageOpaqueMemoryBindInfo[] | null;
  imageBindCount: number;
  pImageBinds: VkSparseImageMemoryBindInfo[] | null;
  signalSemaphoreCount: number;
  pSignalSemaphores: VkSemaphore[] | null;
}


/** ## VkSparseImageMemoryBindInfo ## */
interface VkSparseImageMemoryBindInfoInitializer {
  image?: VkImage | null;
  bindCount?: number;
  pBinds?: VkSparseImageMemoryBind[] | null;
}

declare var VkSparseImageMemoryBindInfo: {
  prototype: VkSparseImageMemoryBindInfo;
  new(param?: VkSparseImageMemoryBindInfoInitializer | null): VkSparseImageMemoryBindInfo;
  image: VkImage | null;
  bindCount: number;
  pBinds: VkSparseImageMemoryBind[] | null;
}

export interface VkSparseImageMemoryBindInfo {
  image: VkImage | null;
  bindCount: number;
  pBinds: VkSparseImageMemoryBind[] | null;
}


/** ## VkSparseImageOpaqueMemoryBindInfo ## */
interface VkSparseImageOpaqueMemoryBindInfoInitializer {
  image?: VkImage | null;
  bindCount?: number;
  pBinds?: VkSparseMemoryBind[] | null;
}

declare var VkSparseImageOpaqueMemoryBindInfo: {
  prototype: VkSparseImageOpaqueMemoryBindInfo;
  new(param?: VkSparseImageOpaqueMemoryBindInfoInitializer | null): VkSparseImageOpaqueMemoryBindInfo;
  image: VkImage | null;
  bindCount: number;
  pBinds: VkSparseMemoryBind[] | null;
}

export interface VkSparseImageOpaqueMemoryBindInfo {
  image: VkImage | null;
  bindCount: number;
  pBinds: VkSparseMemoryBind[] | null;
}


/** ## VkSparseBufferMemoryBindInfo ## */
interface VkSparseBufferMemoryBindInfoInitializer {
  buffer?: VkBuffer | null;
  bindCount?: number;
  pBinds?: VkSparseMemoryBind[] | null;
}

declare var VkSparseBufferMemoryBindInfo: {
  prototype: VkSparseBufferMemoryBindInfo;
  new(param?: VkSparseBufferMemoryBindInfoInitializer | null): VkSparseBufferMemoryBindInfo;
  buffer: VkBuffer | null;
  bindCount: number;
  pBinds: VkSparseMemoryBind[] | null;
}

export interface VkSparseBufferMemoryBindInfo {
  buffer: VkBuffer | null;
  bindCount: number;
  pBinds: VkSparseMemoryBind[] | null;
}


/** ## VkSparseImageMemoryBind ## */
interface VkSparseImageMemoryBindInitializer {
  subresource?: VkImageSubresource | null;
  offset?: VkOffset3D | null;
  extent?: VkExtent3D | null;
  memory?: VkDeviceMemory | null;
  memoryOffset?: number;
  flags?: VkSparseMemoryBindFlagBits;
}

declare var VkSparseImageMemoryBind: {
  prototype: VkSparseImageMemoryBind;
  new(param?: VkSparseImageMemoryBindInitializer | null): VkSparseImageMemoryBind;
  subresource: VkImageSubresource | null;
  offset: VkOffset3D | null;
  extent: VkExtent3D | null;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
  flags: VkSparseMemoryBindFlagBits;
}

export interface VkSparseImageMemoryBind {
  subresource: VkImageSubresource | null;
  offset: VkOffset3D | null;
  extent: VkExtent3D | null;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
  flags: VkSparseMemoryBindFlagBits;
}


/** ## VkSparseMemoryBind ## */
interface VkSparseMemoryBindInitializer {
  resourceOffset?: number;
  size?: number;
  memory?: VkDeviceMemory | null;
  memoryOffset?: number;
  flags?: VkSparseMemoryBindFlagBits;
}

declare var VkSparseMemoryBind: {
  prototype: VkSparseMemoryBind;
  new(param?: VkSparseMemoryBindInitializer | null): VkSparseMemoryBind;
  resourceOffset: number;
  size: number;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
  flags: VkSparseMemoryBindFlagBits;
}

export interface VkSparseMemoryBind {
  resourceOffset: number;
  size: number;
  memory: VkDeviceMemory | null;
  memoryOffset: number;
  flags: VkSparseMemoryBindFlagBits;
}


/** ## VkBufferCopy ## */
interface VkBufferCopyInitializer {
  srcOffset?: number;
  dstOffset?: number;
  size?: number;
}

declare var VkBufferCopy: {
  prototype: VkBufferCopy;
  new(param?: VkBufferCopyInitializer | null): VkBufferCopy;
  srcOffset: number;
  dstOffset: number;
  size: number;
}

export interface VkBufferCopy {
  srcOffset: number;
  dstOffset: number;
  size: number;
}


/** ## VkImageViewCreateInfo ## */
interface VkImageViewCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkImageViewCreateFlagBits;
  image?: VkImage | null;
  viewType?: VkImageViewType;
  format?: VkFormat;
  components?: VkComponentMapping | null;
  subresourceRange?: VkImageSubresourceRange | null;
}

declare var VkImageViewCreateInfo: {
  prototype: VkImageViewCreateInfo;
  new(param?: VkImageViewCreateInfoInitializer | null): VkImageViewCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkImageViewCreateFlagBits;
  image: VkImage | null;
  viewType: VkImageViewType;
  format: VkFormat;
  components: VkComponentMapping | null;
  subresourceRange: VkImageSubresourceRange | null;
}

export interface VkImageViewCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkImageViewCreateFlagBits;
  image: VkImage | null;
  viewType: VkImageViewType;
  format: VkFormat;
  components: VkComponentMapping | null;
  subresourceRange: VkImageSubresourceRange | null;
}


/** ## VkSubresourceLayout ## */
interface VkSubresourceLayoutInitializer {
  readonly offset?: number;
  readonly size?: number;
  readonly rowPitch?: number;
  readonly arrayPitch?: number;
  readonly depthPitch?: number;
}

declare var VkSubresourceLayout: {
  prototype: VkSubresourceLayout;
  new(param?: VkSubresourceLayoutInitializer | null): VkSubresourceLayout;
  readonly offset: number;
  readonly size: number;
  readonly rowPitch: number;
  readonly arrayPitch: number;
  readonly depthPitch: number;
}

export interface VkSubresourceLayout {
  readonly offset: number;
  readonly size: number;
  readonly rowPitch: number;
  readonly arrayPitch: number;
  readonly depthPitch: number;
}


/** ## VkImageCreateInfo ## */
interface VkImageCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkImageCreateFlagBits;
  imageType?: VkImageType;
  format?: VkFormat;
  extent?: VkExtent3D | null;
  mipLevels?: number;
  arrayLayers?: number;
  samples?: VkSampleCountFlagBits;
  tiling?: VkImageTiling;
  usage?: VkImageUsageFlagBits;
  sharingMode?: VkSharingMode;
  queueFamilyIndexCount?: number;
  pQueueFamilyIndices?: Uint32Array | null;
  initialLayout?: VkImageLayout;
}

declare var VkImageCreateInfo: {
  prototype: VkImageCreateInfo;
  new(param?: VkImageCreateInfoInitializer | null): VkImageCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkImageCreateFlagBits;
  imageType: VkImageType;
  format: VkFormat;
  extent: VkExtent3D | null;
  mipLevels: number;
  arrayLayers: number;
  samples: VkSampleCountFlagBits;
  tiling: VkImageTiling;
  usage: VkImageUsageFlagBits;
  sharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
  initialLayout: VkImageLayout;
}

export interface VkImageCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkImageCreateFlagBits;
  imageType: VkImageType;
  format: VkFormat;
  extent: VkExtent3D | null;
  mipLevels: number;
  arrayLayers: number;
  samples: VkSampleCountFlagBits;
  tiling: VkImageTiling;
  usage: VkImageUsageFlagBits;
  sharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
  initialLayout: VkImageLayout;
}


/** ## VkImageMemoryBarrier ## */
interface VkImageMemoryBarrierInitializer {
  sType?: VkStructureType;
  pNext?: null;
  srcAccessMask?: VkAccessFlagBits;
  dstAccessMask?: VkAccessFlagBits;
  oldLayout?: VkImageLayout;
  newLayout?: VkImageLayout;
  srcQueueFamilyIndex?: number;
  dstQueueFamilyIndex?: number;
  image?: VkImage | null;
  subresourceRange?: VkImageSubresourceRange | null;
}

declare var VkImageMemoryBarrier: {
  prototype: VkImageMemoryBarrier;
  new(param?: VkImageMemoryBarrierInitializer | null): VkImageMemoryBarrier;
  sType: VkStructureType;
  pNext: null;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  oldLayout: VkImageLayout;
  newLayout: VkImageLayout;
  srcQueueFamilyIndex: number;
  dstQueueFamilyIndex: number;
  image: VkImage | null;
  subresourceRange: VkImageSubresourceRange | null;
}

export interface VkImageMemoryBarrier {
  sType: VkStructureType;
  pNext: null;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  oldLayout: VkImageLayout;
  newLayout: VkImageLayout;
  srcQueueFamilyIndex: number;
  dstQueueFamilyIndex: number;
  image: VkImage | null;
  subresourceRange: VkImageSubresourceRange | null;
}


/** ## VkBufferMemoryBarrier ## */
interface VkBufferMemoryBarrierInitializer {
  sType?: VkStructureType;
  pNext?: null;
  srcAccessMask?: VkAccessFlagBits;
  dstAccessMask?: VkAccessFlagBits;
  srcQueueFamilyIndex?: number;
  dstQueueFamilyIndex?: number;
  buffer?: VkBuffer | null;
  offset?: number;
  size?: number;
}

declare var VkBufferMemoryBarrier: {
  prototype: VkBufferMemoryBarrier;
  new(param?: VkBufferMemoryBarrierInitializer | null): VkBufferMemoryBarrier;
  sType: VkStructureType;
  pNext: null;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  srcQueueFamilyIndex: number;
  dstQueueFamilyIndex: number;
  buffer: VkBuffer | null;
  offset: number;
  size: number;
}

export interface VkBufferMemoryBarrier {
  sType: VkStructureType;
  pNext: null;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
  srcQueueFamilyIndex: number;
  dstQueueFamilyIndex: number;
  buffer: VkBuffer | null;
  offset: number;
  size: number;
}


/** ## VkMemoryBarrier ## */
interface VkMemoryBarrierInitializer {
  sType?: VkStructureType;
  pNext?: null;
  srcAccessMask?: VkAccessFlagBits;
  dstAccessMask?: VkAccessFlagBits;
}

declare var VkMemoryBarrier: {
  prototype: VkMemoryBarrier;
  new(param?: VkMemoryBarrierInitializer | null): VkMemoryBarrier;
  sType: VkStructureType;
  pNext: null;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
}

export interface VkMemoryBarrier {
  sType: VkStructureType;
  pNext: null;
  srcAccessMask: VkAccessFlagBits;
  dstAccessMask: VkAccessFlagBits;
}


/** ## VkImageSubresourceRange ## */
interface VkImageSubresourceRangeInitializer {
  aspectMask?: VkImageAspectFlagBits;
  baseMipLevel?: number;
  levelCount?: number;
  baseArrayLayer?: number;
  layerCount?: number;
}

declare var VkImageSubresourceRange: {
  prototype: VkImageSubresourceRange;
  new(param?: VkImageSubresourceRangeInitializer | null): VkImageSubresourceRange;
  aspectMask: VkImageAspectFlagBits;
  baseMipLevel: number;
  levelCount: number;
  baseArrayLayer: number;
  layerCount: number;
}

export interface VkImageSubresourceRange {
  aspectMask: VkImageAspectFlagBits;
  baseMipLevel: number;
  levelCount: number;
  baseArrayLayer: number;
  layerCount: number;
}


/** ## VkImageSubresourceLayers ## */
interface VkImageSubresourceLayersInitializer {
  aspectMask?: VkImageAspectFlagBits;
  mipLevel?: number;
  baseArrayLayer?: number;
  layerCount?: number;
}

declare var VkImageSubresourceLayers: {
  prototype: VkImageSubresourceLayers;
  new(param?: VkImageSubresourceLayersInitializer | null): VkImageSubresourceLayers;
  aspectMask: VkImageAspectFlagBits;
  mipLevel: number;
  baseArrayLayer: number;
  layerCount: number;
}

export interface VkImageSubresourceLayers {
  aspectMask: VkImageAspectFlagBits;
  mipLevel: number;
  baseArrayLayer: number;
  layerCount: number;
}


/** ## VkImageSubresource ## */
interface VkImageSubresourceInitializer {
  aspectMask?: VkImageAspectFlagBits;
  mipLevel?: number;
  arrayLayer?: number;
}

declare var VkImageSubresource: {
  prototype: VkImageSubresource;
  new(param?: VkImageSubresourceInitializer | null): VkImageSubresource;
  aspectMask: VkImageAspectFlagBits;
  mipLevel: number;
  arrayLayer: number;
}

export interface VkImageSubresource {
  aspectMask: VkImageAspectFlagBits;
  mipLevel: number;
  arrayLayer: number;
}


/** ## VkBufferViewCreateInfo ## */
interface VkBufferViewCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  buffer?: VkBuffer | null;
  format?: VkFormat;
  offset?: number;
  range?: number;
}

declare var VkBufferViewCreateInfo: {
  prototype: VkBufferViewCreateInfo;
  new(param?: VkBufferViewCreateInfoInitializer | null): VkBufferViewCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  buffer: VkBuffer | null;
  format: VkFormat;
  offset: number;
  range: number;
}

export interface VkBufferViewCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  buffer: VkBuffer | null;
  format: VkFormat;
  offset: number;
  range: number;
}


/** ## VkBufferCreateInfo ## */
interface VkBufferCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkBufferCreateFlagBits;
  size?: number;
  usage?: VkBufferUsageFlagBits;
  sharingMode?: VkSharingMode;
  queueFamilyIndexCount?: number;
  pQueueFamilyIndices?: Uint32Array | null;
}

declare var VkBufferCreateInfo: {
  prototype: VkBufferCreateInfo;
  new(param?: VkBufferCreateInfoInitializer | null): VkBufferCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkBufferCreateFlagBits;
  size: number;
  usage: VkBufferUsageFlagBits;
  sharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
}

export interface VkBufferCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkBufferCreateFlagBits;
  size: number;
  usage: VkBufferUsageFlagBits;
  sharingMode: VkSharingMode;
  queueFamilyIndexCount: number;
  pQueueFamilyIndices: Uint32Array | null;
}


/** ## VkCopyDescriptorSet ## */
interface VkCopyDescriptorSetInitializer {
  sType?: VkStructureType;
  pNext?: null;
  srcSet?: VkDescriptorSet | null;
  srcBinding?: number;
  srcArrayElement?: number;
  dstSet?: VkDescriptorSet | null;
  dstBinding?: number;
  dstArrayElement?: number;
  descriptorCount?: number;
}

declare var VkCopyDescriptorSet: {
  prototype: VkCopyDescriptorSet;
  new(param?: VkCopyDescriptorSetInitializer | null): VkCopyDescriptorSet;
  sType: VkStructureType;
  pNext: null;
  srcSet: VkDescriptorSet | null;
  srcBinding: number;
  srcArrayElement: number;
  dstSet: VkDescriptorSet | null;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
}

export interface VkCopyDescriptorSet {
  sType: VkStructureType;
  pNext: null;
  srcSet: VkDescriptorSet | null;
  srcBinding: number;
  srcArrayElement: number;
  dstSet: VkDescriptorSet | null;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
}


/** ## VkWriteDescriptorSet ## */
interface VkWriteDescriptorSetInitializer {
  sType?: VkStructureType;
  pNext?: null;
  dstSet?: VkDescriptorSet | null;
  dstBinding?: number;
  dstArrayElement?: number;
  descriptorCount?: number;
  descriptorType?: VkDescriptorType;
  pImageInfo?: VkDescriptorImageInfo[] | null;
  pBufferInfo?: VkDescriptorBufferInfo[] | null;
  pTexelBufferView?: VkBufferView[] | null;
}

declare var VkWriteDescriptorSet: {
  prototype: VkWriteDescriptorSet;
  new(param?: VkWriteDescriptorSetInitializer | null): VkWriteDescriptorSet;
  sType: VkStructureType;
  pNext: null;
  dstSet: VkDescriptorSet | null;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
  descriptorType: VkDescriptorType;
  pImageInfo: VkDescriptorImageInfo[] | null;
  pBufferInfo: VkDescriptorBufferInfo[] | null;
  pTexelBufferView: VkBufferView[] | null;
}

export interface VkWriteDescriptorSet {
  sType: VkStructureType;
  pNext: null;
  dstSet: VkDescriptorSet | null;
  dstBinding: number;
  dstArrayElement: number;
  descriptorCount: number;
  descriptorType: VkDescriptorType;
  pImageInfo: VkDescriptorImageInfo[] | null;
  pBufferInfo: VkDescriptorBufferInfo[] | null;
  pTexelBufferView: VkBufferView[] | null;
}


/** ## VkDescriptorImageInfo ## */
interface VkDescriptorImageInfoInitializer {
  sampler?: VkSampler | null;
  imageView?: VkImageView | null;
  imageLayout?: VkImageLayout;
}

declare var VkDescriptorImageInfo: {
  prototype: VkDescriptorImageInfo;
  new(param?: VkDescriptorImageInfoInitializer | null): VkDescriptorImageInfo;
  sampler: VkSampler | null;
  imageView: VkImageView | null;
  imageLayout: VkImageLayout;
}

export interface VkDescriptorImageInfo {
  sampler: VkSampler | null;
  imageView: VkImageView | null;
  imageLayout: VkImageLayout;
}


/** ## VkDescriptorBufferInfo ## */
interface VkDescriptorBufferInfoInitializer {
  buffer?: VkBuffer | null;
  offset?: number;
  range?: number;
}

declare var VkDescriptorBufferInfo: {
  prototype: VkDescriptorBufferInfo;
  new(param?: VkDescriptorBufferInfoInitializer | null): VkDescriptorBufferInfo;
  buffer: VkBuffer | null;
  offset: number;
  range: number;
}

export interface VkDescriptorBufferInfo {
  buffer: VkBuffer | null;
  offset: number;
  range: number;
}


/** ## VkImageFormatProperties ## */
interface VkImageFormatPropertiesInitializer {
  readonly maxExtent?: VkExtent3D | null;
  readonly maxMipLevels?: number;
  readonly maxArrayLayers?: number;
  readonly sampleCounts?: VkSampleCountFlagBits;
  readonly maxResourceSize?: number;
}

declare var VkImageFormatProperties: {
  prototype: VkImageFormatProperties;
  new(param?: VkImageFormatPropertiesInitializer | null): VkImageFormatProperties;
  readonly maxExtent: VkExtent3D | null;
  readonly maxMipLevels: number;
  readonly maxArrayLayers: number;
  readonly sampleCounts: VkSampleCountFlagBits;
  readonly maxResourceSize: number;
}

export interface VkImageFormatProperties {
  readonly maxExtent: VkExtent3D | null;
  readonly maxMipLevels: number;
  readonly maxArrayLayers: number;
  readonly sampleCounts: VkSampleCountFlagBits;
  readonly maxResourceSize: number;
}


/** ## VkFormatProperties ## */
interface VkFormatPropertiesInitializer {
  readonly linearTilingFeatures?: VkFormatFeatureFlagBits;
  readonly optimalTilingFeatures?: VkFormatFeatureFlagBits;
  readonly bufferFeatures?: VkFormatFeatureFlagBits;
}

declare var VkFormatProperties: {
  prototype: VkFormatProperties;
  new(param?: VkFormatPropertiesInitializer | null): VkFormatProperties;
  readonly linearTilingFeatures: VkFormatFeatureFlagBits;
  readonly optimalTilingFeatures: VkFormatFeatureFlagBits;
  readonly bufferFeatures: VkFormatFeatureFlagBits;
}

export interface VkFormatProperties {
  readonly linearTilingFeatures: VkFormatFeatureFlagBits;
  readonly optimalTilingFeatures: VkFormatFeatureFlagBits;
  readonly bufferFeatures: VkFormatFeatureFlagBits;
}


/** ## VkMappedMemoryRange ## */
interface VkMappedMemoryRangeInitializer {
  sType?: VkStructureType;
  pNext?: null;
  memory?: VkDeviceMemory | null;
  offset?: number;
  size?: number;
}

declare var VkMappedMemoryRange: {
  prototype: VkMappedMemoryRange;
  new(param?: VkMappedMemoryRangeInitializer | null): VkMappedMemoryRange;
  sType: VkStructureType;
  pNext: null;
  memory: VkDeviceMemory | null;
  offset: number;
  size: number;
}

export interface VkMappedMemoryRange {
  sType: VkStructureType;
  pNext: null;
  memory: VkDeviceMemory | null;
  offset: number;
  size: number;
}


/** ## VkMemoryHeap ## */
interface VkMemoryHeapInitializer {
  readonly size?: number;
  readonly flags?: VkMemoryHeapFlagBits;
}

declare var VkMemoryHeap: {
  prototype: VkMemoryHeap;
  new(param?: VkMemoryHeapInitializer | null): VkMemoryHeap;
  readonly size: number;
  readonly flags: VkMemoryHeapFlagBits;
}

export interface VkMemoryHeap {
  readonly size: number;
  readonly flags: VkMemoryHeapFlagBits;
}


/** ## VkMemoryType ## */
interface VkMemoryTypeInitializer {
  readonly propertyFlags?: VkMemoryPropertyFlagBits;
  readonly heapIndex?: number;
}

declare var VkMemoryType: {
  prototype: VkMemoryType;
  new(param?: VkMemoryTypeInitializer | null): VkMemoryType;
  readonly propertyFlags: VkMemoryPropertyFlagBits;
  readonly heapIndex: number;
}

export interface VkMemoryType {
  readonly propertyFlags: VkMemoryPropertyFlagBits;
  readonly heapIndex: number;
}


/** ## VkSparseImageMemoryRequirements ## */
interface VkSparseImageMemoryRequirementsInitializer {
  readonly formatProperties?: VkSparseImageFormatProperties | null;
  readonly imageMipTailFirstLod?: number;
  readonly imageMipTailSize?: number;
  readonly imageMipTailOffset?: number;
  readonly imageMipTailStride?: number;
}

declare var VkSparseImageMemoryRequirements: {
  prototype: VkSparseImageMemoryRequirements;
  new(param?: VkSparseImageMemoryRequirementsInitializer | null): VkSparseImageMemoryRequirements;
  readonly formatProperties: VkSparseImageFormatProperties | null;
  readonly imageMipTailFirstLod: number;
  readonly imageMipTailSize: number;
  readonly imageMipTailOffset: number;
  readonly imageMipTailStride: number;
}

export interface VkSparseImageMemoryRequirements {
  readonly formatProperties: VkSparseImageFormatProperties | null;
  readonly imageMipTailFirstLod: number;
  readonly imageMipTailSize: number;
  readonly imageMipTailOffset: number;
  readonly imageMipTailStride: number;
}


/** ## VkSparseImageFormatProperties ## */
interface VkSparseImageFormatPropertiesInitializer {
  readonly aspectMask?: VkImageAspectFlagBits;
  readonly imageGranularity?: VkExtent3D | null;
  readonly flags?: VkSparseImageFormatFlagBits;
}

declare var VkSparseImageFormatProperties: {
  prototype: VkSparseImageFormatProperties;
  new(param?: VkSparseImageFormatPropertiesInitializer | null): VkSparseImageFormatProperties;
  readonly aspectMask: VkImageAspectFlagBits;
  readonly imageGranularity: VkExtent3D | null;
  readonly flags: VkSparseImageFormatFlagBits;
}

export interface VkSparseImageFormatProperties {
  readonly aspectMask: VkImageAspectFlagBits;
  readonly imageGranularity: VkExtent3D | null;
  readonly flags: VkSparseImageFormatFlagBits;
}


/** ## VkMemoryRequirements ## */
interface VkMemoryRequirementsInitializer {
  readonly size?: number;
  readonly alignment?: number;
  readonly memoryTypeBits?: number;
}

declare var VkMemoryRequirements: {
  prototype: VkMemoryRequirements;
  new(param?: VkMemoryRequirementsInitializer | null): VkMemoryRequirements;
  readonly size: number;
  readonly alignment: number;
  readonly memoryTypeBits: number;
}

export interface VkMemoryRequirements {
  readonly size: number;
  readonly alignment: number;
  readonly memoryTypeBits: number;
}


/** ## VkMemoryAllocateInfo ## */
interface VkMemoryAllocateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  allocationSize?: number;
  memoryTypeIndex?: number;
}

declare var VkMemoryAllocateInfo: {
  prototype: VkMemoryAllocateInfo;
  new(param?: VkMemoryAllocateInfoInitializer | null): VkMemoryAllocateInfo;
  sType: VkStructureType;
  pNext: null;
  allocationSize: number;
  memoryTypeIndex: number;
}

export interface VkMemoryAllocateInfo {
  sType: VkStructureType;
  pNext: null;
  allocationSize: number;
  memoryTypeIndex: number;
}


/** ## VkPhysicalDeviceMemoryProperties ## */
interface VkPhysicalDeviceMemoryPropertiesInitializer {
  readonly memoryTypeCount?: number;
  readonly memoryTypes?: number[] | null;
  readonly memoryHeapCount?: number;
  readonly memoryHeaps?: number[] | null;
}

declare var VkPhysicalDeviceMemoryProperties: {
  prototype: VkPhysicalDeviceMemoryProperties;
  new(param?: VkPhysicalDeviceMemoryPropertiesInitializer | null): VkPhysicalDeviceMemoryProperties;
  readonly memoryTypeCount: number;
  readonly memoryTypes: number[] | null;
  readonly memoryHeapCount: number;
  readonly memoryHeaps: number[] | null;
}

export interface VkPhysicalDeviceMemoryProperties {
  readonly memoryTypeCount: number;
  readonly memoryTypes: number[] | null;
  readonly memoryHeapCount: number;
  readonly memoryHeaps: number[] | null;
}


/** ## VkQueueFamilyProperties ## */
interface VkQueueFamilyPropertiesInitializer {
  readonly queueFlags?: VkQueueFlagBits;
  readonly queueCount?: number;
  readonly timestampValidBits?: number;
  readonly minImageTransferGranularity?: VkExtent3D | null;
}

declare var VkQueueFamilyProperties: {
  prototype: VkQueueFamilyProperties;
  new(param?: VkQueueFamilyPropertiesInitializer | null): VkQueueFamilyProperties;
  readonly queueFlags: VkQueueFlagBits;
  readonly queueCount: number;
  readonly timestampValidBits: number;
  readonly minImageTransferGranularity: VkExtent3D | null;
}

export interface VkQueueFamilyProperties {
  readonly queueFlags: VkQueueFlagBits;
  readonly queueCount: number;
  readonly timestampValidBits: number;
  readonly minImageTransferGranularity: VkExtent3D | null;
}


/** ## VkInstanceCreateInfo ## */
interface VkInstanceCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  pApplicationInfo?: VkApplicationInfo | null;
  enabledLayerCount?: number;
  ppEnabledLayerNames?: string[] | null;
  enabledExtensionCount?: number;
  ppEnabledExtensionNames?: string[] | null;
}

declare var VkInstanceCreateInfo: {
  prototype: VkInstanceCreateInfo;
  new(param?: VkInstanceCreateInfoInitializer | null): VkInstanceCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  pApplicationInfo: VkApplicationInfo | null;
  enabledLayerCount: number;
  ppEnabledLayerNames: string[] | null;
  enabledExtensionCount: number;
  ppEnabledExtensionNames: string[] | null;
}

export interface VkInstanceCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  pApplicationInfo: VkApplicationInfo | null;
  enabledLayerCount: number;
  ppEnabledLayerNames: string[] | null;
  enabledExtensionCount: number;
  ppEnabledExtensionNames: string[] | null;
}


/** ## VkDeviceCreateInfo ## */
interface VkDeviceCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: null;
  queueCreateInfoCount?: number;
  pQueueCreateInfos?: VkDeviceQueueCreateInfo[] | null;
  enabledLayerCount?: number;
  ppEnabledLayerNames?: string[] | null;
  enabledExtensionCount?: number;
  ppEnabledExtensionNames?: string[] | null;
  pEnabledFeatures?: VkPhysicalDeviceFeatures | null;
}

declare var VkDeviceCreateInfo: {
  prototype: VkDeviceCreateInfo;
  new(param?: VkDeviceCreateInfoInitializer | null): VkDeviceCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: null;
  queueCreateInfoCount: number;
  pQueueCreateInfos: VkDeviceQueueCreateInfo[] | null;
  enabledLayerCount: number;
  ppEnabledLayerNames: string[] | null;
  enabledExtensionCount: number;
  ppEnabledExtensionNames: string[] | null;
  pEnabledFeatures: VkPhysicalDeviceFeatures | null;
}

export interface VkDeviceCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: null;
  queueCreateInfoCount: number;
  pQueueCreateInfos: VkDeviceQueueCreateInfo[] | null;
  enabledLayerCount: number;
  ppEnabledLayerNames: string[] | null;
  enabledExtensionCount: number;
  ppEnabledExtensionNames: string[] | null;
  pEnabledFeatures: VkPhysicalDeviceFeatures | null;
}


/** ## VkDeviceQueueCreateInfo ## */
interface VkDeviceQueueCreateInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  flags?: VkDeviceQueueCreateFlagBits;
  queueFamilyIndex?: number;
  queueCount?: number;
  pQueuePriorities?: Float32Array | null;
}

declare var VkDeviceQueueCreateInfo: {
  prototype: VkDeviceQueueCreateInfo;
  new(param?: VkDeviceQueueCreateInfoInitializer | null): VkDeviceQueueCreateInfo;
  sType: VkStructureType;
  pNext: null;
  flags: VkDeviceQueueCreateFlagBits;
  queueFamilyIndex: number;
  queueCount: number;
  pQueuePriorities: Float32Array | null;
}

export interface VkDeviceQueueCreateInfo {
  sType: VkStructureType;
  pNext: null;
  flags: VkDeviceQueueCreateFlagBits;
  queueFamilyIndex: number;
  queueCount: number;
  pQueuePriorities: Float32Array | null;
}


/** ## VkAllocationCallbacks ## */
interface VkAllocationCallbacksInitializer {
  pUserData?: ArrayBuffer | null;
  pfnAllocation?: null;
  pfnReallocation?: null;
  pfnFree?: null;
  pfnInternalAllocation?: null;
  pfnInternalFree?: null;
}

declare var VkAllocationCallbacks: {
  prototype: VkAllocationCallbacks;
  new(param?: VkAllocationCallbacksInitializer | null): VkAllocationCallbacks;
  pUserData: ArrayBuffer | null;
  pfnAllocation: null;
  pfnReallocation: null;
  pfnFree: null;
  pfnInternalAllocation: null;
  pfnInternalFree: null;
}

export interface VkAllocationCallbacks {
  pUserData: ArrayBuffer | null;
  pfnAllocation: null;
  pfnReallocation: null;
  pfnFree: null;
  pfnInternalAllocation: null;
  pfnInternalFree: null;
}


/** ## VkApplicationInfo ## */
interface VkApplicationInfoInitializer {
  sType?: VkStructureType;
  pNext?: null;
  pApplicationName?: string | null;
  applicationVersion?: number;
  pEngineName?: string | null;
  engineVersion?: number;
  apiVersion?: number;
}

declare var VkApplicationInfo: {
  prototype: VkApplicationInfo;
  new(param?: VkApplicationInfoInitializer | null): VkApplicationInfo;
  sType: VkStructureType;
  pNext: null;
  pApplicationName: string | null;
  applicationVersion: number;
  pEngineName: string | null;
  engineVersion: number;
  apiVersion: number;
}

export interface VkApplicationInfo {
  sType: VkStructureType;
  pNext: null;
  pApplicationName: string | null;
  applicationVersion: number;
  pEngineName: string | null;
  engineVersion: number;
  apiVersion: number;
}


/** ## VkLayerProperties ## */
interface VkLayerPropertiesInitializer {
  readonly layerName?: string | null;
  readonly specVersion?: number;
  readonly implementationVersion?: number;
  readonly description?: string | null;
}

declare var VkLayerProperties: {
  prototype: VkLayerProperties;
  new(param?: VkLayerPropertiesInitializer | null): VkLayerProperties;
  readonly layerName: string | null;
  readonly specVersion: number;
  readonly implementationVersion: number;
  readonly description: string | null;
}

export interface VkLayerProperties {
  readonly layerName: string | null;
  readonly specVersion: number;
  readonly implementationVersion: number;
  readonly description: string | null;
}


/** ## VkExtensionProperties ## */
interface VkExtensionPropertiesInitializer {
  readonly extensionName?: string | null;
  readonly specVersion?: number;
}

declare var VkExtensionProperties: {
  prototype: VkExtensionProperties;
  new(param?: VkExtensionPropertiesInitializer | null): VkExtensionProperties;
  readonly extensionName: string | null;
  readonly specVersion: number;
}

export interface VkExtensionProperties {
  readonly extensionName: string | null;
  readonly specVersion: number;
}


/** ## VkPhysicalDeviceProperties ## */
interface VkPhysicalDevicePropertiesInitializer {
  readonly apiVersion?: number;
  readonly driverVersion?: number;
  readonly vendorID?: number;
  readonly deviceID?: number;
  readonly deviceType?: VkPhysicalDeviceType;
  readonly deviceName?: string | null;
  readonly pipelineCacheUUID?: number[] | null;
  readonly limits?: VkPhysicalDeviceLimits | null;
  readonly sparseProperties?: VkPhysicalDeviceSparseProperties | null;
}

declare var VkPhysicalDeviceProperties: {
  prototype: VkPhysicalDeviceProperties;
  new(param?: VkPhysicalDevicePropertiesInitializer | null): VkPhysicalDeviceProperties;
  readonly apiVersion: number;
  readonly driverVersion: number;
  readonly vendorID: number;
  readonly deviceID: number;
  readonly deviceType: VkPhysicalDeviceType;
  readonly deviceName: string | null;
  readonly pipelineCacheUUID: number[] | null;
  readonly limits: VkPhysicalDeviceLimits | null;
  readonly sparseProperties: VkPhysicalDeviceSparseProperties | null;
}

export interface VkPhysicalDeviceProperties {
  readonly apiVersion: number;
  readonly driverVersion: number;
  readonly vendorID: number;
  readonly deviceID: number;
  readonly deviceType: VkPhysicalDeviceType;
  readonly deviceName: string | null;
  readonly pipelineCacheUUID: number[] | null;
  readonly limits: VkPhysicalDeviceLimits | null;
  readonly sparseProperties: VkPhysicalDeviceSparseProperties | null;
}


/** ## VkComponentMapping ## */
interface VkComponentMappingInitializer {
  r?: VkComponentSwizzle;
  g?: VkComponentSwizzle;
  b?: VkComponentSwizzle;
  a?: VkComponentSwizzle;
}

declare var VkComponentMapping: {
  prototype: VkComponentMapping;
  new(param?: VkComponentMappingInitializer | null): VkComponentMapping;
  r: VkComponentSwizzle;
  g: VkComponentSwizzle;
  b: VkComponentSwizzle;
  a: VkComponentSwizzle;
}

export interface VkComponentMapping {
  r: VkComponentSwizzle;
  g: VkComponentSwizzle;
  b: VkComponentSwizzle;
  a: VkComponentSwizzle;
}


/** ## VkClearRect ## */
interface VkClearRectInitializer {
  rect?: VkRect2D | null;
  baseArrayLayer?: number;
  layerCount?: number;
}

declare var VkClearRect: {
  prototype: VkClearRect;
  new(param?: VkClearRectInitializer | null): VkClearRect;
  rect: VkRect2D | null;
  baseArrayLayer: number;
  layerCount: number;
}

export interface VkClearRect {
  rect: VkRect2D | null;
  baseArrayLayer: number;
  layerCount: number;
}


/** ## VkRect2D ## */
interface VkRect2DInitializer {
  offset?: VkOffset2D | null;
  extent?: VkExtent2D | null;
}

declare var VkRect2D: {
  prototype: VkRect2D;
  new(param?: VkRect2DInitializer | null): VkRect2D;
  offset: VkOffset2D | null;
  extent: VkExtent2D | null;
}

export interface VkRect2D {
  offset: VkOffset2D | null;
  extent: VkExtent2D | null;
}


/** ## VkViewport ## */
interface VkViewportInitializer {
  x?: number;
  y?: number;
  width?: number;
  height?: number;
  minDepth?: number;
  maxDepth?: number;
}

declare var VkViewport: {
  prototype: VkViewport;
  new(param?: VkViewportInitializer | null): VkViewport;
  x: number;
  y: number;
  width: number;
  height: number;
  minDepth: number;
  maxDepth: number;
}

export interface VkViewport {
  x: number;
  y: number;
  width: number;
  height: number;
  minDepth: number;
  maxDepth: number;
}


/** ## VkExtent3D ## */
interface VkExtent3DInitializer {
  width?: number;
  height?: number;
  depth?: number;
}

declare var VkExtent3D: {
  prototype: VkExtent3D;
  new(param?: VkExtent3DInitializer | null): VkExtent3D;
  width: number;
  height: number;
  depth: number;
}

export interface VkExtent3D {
  width: number;
  height: number;
  depth: number;
}


/** ## VkExtent2D ## */
interface VkExtent2DInitializer {
  width?: number;
  height?: number;
}

declare var VkExtent2D: {
  prototype: VkExtent2D;
  new(param?: VkExtent2DInitializer | null): VkExtent2D;
  width: number;
  height: number;
}

export interface VkExtent2D {
  width: number;
  height: number;
}


/** ## VkOffset3D ## */
interface VkOffset3DInitializer {
  x?: number;
  y?: number;
  z?: number;
}

declare var VkOffset3D: {
  prototype: VkOffset3D;
  new(param?: VkOffset3DInitializer | null): VkOffset3D;
  x: number;
  y: number;
  z: number;
}

export interface VkOffset3D {
  x: number;
  y: number;
  z: number;
}


/** ## VkOffset2D ## */
interface VkOffset2DInitializer {
  x?: number;
  y?: number;
}

declare var VkOffset2D: {
  prototype: VkOffset2D;
  new(param?: VkOffset2DInitializer | null): VkOffset2D;
  x: number;
  y: number;
}

export interface VkOffset2D {
  x: number;
  y: number;
}


/** ## VkBaseInStructure ## */
interface VkBaseInStructureInitializer {
  sType?: VkStructureType;
  pNext?: VkBaseInStructure | null;
}

declare var VkBaseInStructure: {
  prototype: VkBaseInStructure;
  new(param?: VkBaseInStructureInitializer | null): VkBaseInStructure;
  sType: VkStructureType;
  pNext: VkBaseInStructure | null;
}

export interface VkBaseInStructure {
  sType: VkStructureType;
  pNext: VkBaseInStructure | null;
}


/** ## VkBaseOutStructure ## */
interface VkBaseOutStructureInitializer {
  sType?: VkStructureType;
  pNext?: VkBaseOutStructure | null;
}

declare var VkBaseOutStructure: {
  prototype: VkBaseOutStructure;
  new(param?: VkBaseOutStructureInitializer | null): VkBaseOutStructure;
  sType: VkStructureType;
  pNext: VkBaseOutStructure | null;
}

export interface VkBaseOutStructure {
  sType: VkStructureType;
  pNext: VkBaseOutStructure | null;
}




/** #### CALLS #### **/
declare function vkCreateInstance(pCreateInfo: VkInstanceCreateInfo | null, pAllocator: null, pInstance: VkInstance | null): number;
declare function vkDestroyInstance(instance: VkInstance | null, pAllocator: null): void;
declare function vkEnumeratePhysicalDevices(instance: VkInstance | null, pPhysicalDeviceCount: VkInout, pPhysicalDevices: VkPhysicalDevice[] | null): number;


declare function vkGetPhysicalDeviceProperties(physicalDevice: VkPhysicalDevice | null, pProperties: VkPhysicalDeviceProperties | null): void;
declare function vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice: VkPhysicalDevice | null, pQueueFamilyPropertyCount: VkInout, pQueueFamilyProperties: VkQueueFamilyProperties[] | null): void;
declare function vkGetPhysicalDeviceMemoryProperties(physicalDevice: VkPhysicalDevice | null, pMemoryProperties: VkPhysicalDeviceMemoryProperties | null): void;
declare function vkGetPhysicalDeviceFeatures(physicalDevice: VkPhysicalDevice | null, pFeatures: VkPhysicalDeviceFeatures | null): void;
declare function vkGetPhysicalDeviceFormatProperties(physicalDevice: VkPhysicalDevice | null, format: VkFormat, pFormatProperties: VkFormatProperties | null): void;
declare function vkGetPhysicalDeviceImageFormatProperties(physicalDevice: VkPhysicalDevice | null, format: VkFormat, type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlagBits, flags: VkImageCreateFlagBits, pImageFormatProperties: VkImageFormatProperties | null): number;
declare function vkCreateDevice(physicalDevice: VkPhysicalDevice | null, pCreateInfo: VkDeviceCreateInfo | null, pAllocator: null, pDevice: VkDevice | null): number;
declare function vkDestroyDevice(device: VkDevice | null, pAllocator: null): void;
declare function vkEnumerateInstanceVersion(pApiVersion: VkInout): number;
declare function vkEnumerateInstanceLayerProperties(pPropertyCount: VkInout, pProperties: VkLayerProperties[] | null): number;
declare function vkEnumerateInstanceExtensionProperties(pLayerName: string | null, pPropertyCount: VkInout, pProperties: VkExtensionProperties[] | null): number;
declare function vkEnumerateDeviceLayerProperties(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout, pProperties: VkLayerProperties[] | null): number;
declare function vkEnumerateDeviceExtensionProperties(physicalDevice: VkPhysicalDevice | null, pLayerName: string | null, pPropertyCount: VkInout, pProperties: VkExtensionProperties[] | null): number;
declare function vkGetDeviceQueue(device: VkDevice | null, queueFamilyIndex: number, queueIndex: number, pQueue: VkQueue | null): void;
declare function vkQueueSubmit(queue: VkQueue | null, submitCount: number, pSubmits: VkSubmitInfo[] | null, fence: VkFence | null): number;
declare function vkQueueWaitIdle(queue: VkQueue | null): number;
declare function vkDeviceWaitIdle(device: VkDevice | null): number;
declare function vkAllocateMemory(device: VkDevice | null, pAllocateInfo: VkMemoryAllocateInfo | null, pAllocator: null, pMemory: VkDeviceMemory | null): number;
declare function vkFreeMemory(device: VkDevice | null, memory: VkDeviceMemory | null, pAllocator: null): void;
declare function vkMapMemory(device: VkDevice | null, memory: VkDeviceMemory | null, offset: number, size: number, flags: null, ppData: VkInoutAddress): number;
declare function vkUnmapMemory(device: VkDevice | null, memory: VkDeviceMemory | null): void;
declare function vkFlushMappedMemoryRanges(device: VkDevice | null, memoryRangeCount: number, pMemoryRanges: VkMappedMemoryRange[] | null): number;
declare function vkInvalidateMappedMemoryRanges(device: VkDevice | null, memoryRangeCount: number, pMemoryRanges: VkMappedMemoryRange[] | null): number;
declare function vkGetDeviceMemoryCommitment(device: VkDevice | null, memory: VkDeviceMemory | null, pCommittedMemoryInBytes: VkInout): void;
declare function vkGetBufferMemoryRequirements(device: VkDevice | null, buffer: VkBuffer | null, pMemoryRequirements: VkMemoryRequirements | null): void;
declare function vkBindBufferMemory(device: VkDevice | null, buffer: VkBuffer | null, memory: VkDeviceMemory | null, memoryOffset: number): number;
declare function vkGetImageMemoryRequirements(device: VkDevice | null, image: VkImage | null, pMemoryRequirements: VkMemoryRequirements | null): void;
declare function vkBindImageMemory(device: VkDevice | null, image: VkImage | null, memory: VkDeviceMemory | null, memoryOffset: number): number;
declare function vkGetImageSparseMemoryRequirements(device: VkDevice | null, image: VkImage | null, pSparseMemoryRequirementCount: VkInout, pSparseMemoryRequirements: VkSparseImageMemoryRequirements[] | null): void;
declare function vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice: VkPhysicalDevice | null, format: VkFormat, type: VkImageType, samples: number, usage: VkImageUsageFlagBits, tiling: VkImageTiling, pPropertyCount: VkInout, pProperties: VkSparseImageFormatProperties[] | null): void;
declare function vkQueueBindSparse(queue: VkQueue | null, bindInfoCount: number, pBindInfo: VkBindSparseInfo[] | null, fence: VkFence | null): number;
declare function vkCreateFence(device: VkDevice | null, pCreateInfo: VkFenceCreateInfo | null, pAllocator: null, pFence: VkFence | null): number;
declare function vkDestroyFence(device: VkDevice | null, fence: VkFence | null, pAllocator: null): void;
declare function vkResetFences(device: VkDevice | null, fenceCount: number, pFences: VkFence[] | null): number;
declare function vkGetFenceStatus(device: VkDevice | null, fence: VkFence | null): number;
declare function vkWaitForFences(device: VkDevice | null, fenceCount: number, pFences: VkFence[] | null, waitAll: number, timeout: number): number;
declare function vkCreateSemaphore(device: VkDevice | null, pCreateInfo: VkSemaphoreCreateInfo | null, pAllocator: null, pSemaphore: VkSemaphore | null): number;
declare function vkDestroySemaphore(device: VkDevice | null, semaphore: VkSemaphore | null, pAllocator: null): void;
declare function vkCreateEvent(device: VkDevice | null, pCreateInfo: VkEventCreateInfo | null, pAllocator: null, pEvent: VkEvent | null): number;
declare function vkDestroyEvent(device: VkDevice | null, event: VkEvent | null, pAllocator: null): void;
declare function vkGetEventStatus(device: VkDevice | null, event: VkEvent | null): number;
declare function vkSetEvent(device: VkDevice | null, event: VkEvent | null): number;
declare function vkResetEvent(device: VkDevice | null, event: VkEvent | null): number;
declare function vkCreateQueryPool(device: VkDevice | null, pCreateInfo: VkQueryPoolCreateInfo | null, pAllocator: null, pQueryPool: VkQueryPool | null): number;
declare function vkDestroyQueryPool(device: VkDevice | null, queryPool: VkQueryPool | null, pAllocator: null): void;
declare function vkGetQueryPoolResults(device: VkDevice | null, queryPool: VkQueryPool | null, firstQuery: number, queryCount: number, dataSize: number, pData: ArrayBuffer | null, stride: number, flags: VkQueryResultFlagBits): number;
declare function vkCreateBuffer(device: VkDevice | null, pCreateInfo: VkBufferCreateInfo | null, pAllocator: null, pBuffer: VkBuffer | null): number;
declare function vkDestroyBuffer(device: VkDevice | null, buffer: VkBuffer | null, pAllocator: null): void;
declare function vkCreateBufferView(device: VkDevice | null, pCreateInfo: VkBufferViewCreateInfo | null, pAllocator: null, pView: VkBufferView | null): number;
declare function vkDestroyBufferView(device: VkDevice | null, bufferView: VkBufferView | null, pAllocator: null): void;
declare function vkCreateImage(device: VkDevice | null, pCreateInfo: VkImageCreateInfo | null, pAllocator: null, pImage: VkImage | null): number;
declare function vkDestroyImage(device: VkDevice | null, image: VkImage | null, pAllocator: null): void;
declare function vkGetImageSubresourceLayout(device: VkDevice | null, image: VkImage | null, pSubresource: VkImageSubresource | null, pLayout: VkSubresourceLayout | null): void;
declare function vkCreateImageView(device: VkDevice | null, pCreateInfo: VkImageViewCreateInfo | null, pAllocator: null, pView: VkImageView | null): number;
declare function vkDestroyImageView(device: VkDevice | null, imageView: VkImageView | null, pAllocator: null): void;
declare function vkCreateShaderModule(device: VkDevice | null, pCreateInfo: VkShaderModuleCreateInfo | null, pAllocator: null, pShaderModule: VkShaderModule | null): number;
declare function vkDestroyShaderModule(device: VkDevice | null, shaderModule: VkShaderModule | null, pAllocator: null): void;
declare function vkCreatePipelineCache(device: VkDevice | null, pCreateInfo: VkPipelineCacheCreateInfo | null, pAllocator: null, pPipelineCache: VkPipelineCache | null): number;
declare function vkDestroyPipelineCache(device: VkDevice | null, pipelineCache: VkPipelineCache | null, pAllocator: null): void;
declare function vkGetPipelineCacheData(device: VkDevice | null, pipelineCache: VkPipelineCache | null, pDataSize: VkInout, pData: ArrayBuffer | null): number;
declare function vkMergePipelineCaches(device: VkDevice | null, dstCache: VkPipelineCache | null, srcCacheCount: number, pSrcCaches: VkPipelineCache[] | null): number;
declare function vkCreateGraphicsPipelines(device: VkDevice | null, pipelineCache: VkPipelineCache | null, createInfoCount: number, pCreateInfos: VkGraphicsPipelineCreateInfo[] | null, pAllocator: null, pPipelines: VkPipeline[] | null): number;
declare function vkCreateComputePipelines(device: VkDevice | null, pipelineCache: VkPipelineCache | null, createInfoCount: number, pCreateInfos: VkComputePipelineCreateInfo[] | null, pAllocator: null, pPipelines: VkPipeline[] | null): number;
declare function vkDestroyPipeline(device: VkDevice | null, pipeline: VkPipeline | null, pAllocator: null): void;
declare function vkCreatePipelineLayout(device: VkDevice | null, pCreateInfo: VkPipelineLayoutCreateInfo | null, pAllocator: null, pPipelineLayout: VkPipelineLayout | null): number;
declare function vkDestroyPipelineLayout(device: VkDevice | null, pipelineLayout: VkPipelineLayout | null, pAllocator: null): void;
declare function vkCreateSampler(device: VkDevice | null, pCreateInfo: VkSamplerCreateInfo | null, pAllocator: null, pSampler: VkSampler | null): number;
declare function vkDestroySampler(device: VkDevice | null, sampler: VkSampler | null, pAllocator: null): void;
declare function vkCreateDescriptorSetLayout(device: VkDevice | null, pCreateInfo: VkDescriptorSetLayoutCreateInfo | null, pAllocator: null, pSetLayout: VkDescriptorSetLayout | null): number;
declare function vkDestroyDescriptorSetLayout(device: VkDevice | null, descriptorSetLayout: VkDescriptorSetLayout | null, pAllocator: null): void;
declare function vkCreateDescriptorPool(device: VkDevice | null, pCreateInfo: VkDescriptorPoolCreateInfo | null, pAllocator: null, pDescriptorPool: VkDescriptorPool | null): number;
declare function vkDestroyDescriptorPool(device: VkDevice | null, descriptorPool: VkDescriptorPool | null, pAllocator: null): void;
declare function vkResetDescriptorPool(device: VkDevice | null, descriptorPool: VkDescriptorPool | null, flags: null): number;
declare function vkAllocateDescriptorSets(device: VkDevice | null, pAllocateInfo: VkDescriptorSetAllocateInfo | null, pDescriptorSets: VkDescriptorSet[] | null): number;
declare function vkFreeDescriptorSets(device: VkDevice | null, descriptorPool: VkDescriptorPool | null, descriptorSetCount: number, pDescriptorSets: VkDescriptorSet[] | null): number;
declare function vkUpdateDescriptorSets(device: VkDevice | null, descriptorWriteCount: number, pDescriptorWrites: VkWriteDescriptorSet[] | null, descriptorCopyCount: number, pDescriptorCopies: VkCopyDescriptorSet[] | null): void;
declare function vkCreateFramebuffer(device: VkDevice | null, pCreateInfo: VkFramebufferCreateInfo | null, pAllocator: null, pFramebuffer: VkFramebuffer | null): number;
declare function vkDestroyFramebuffer(device: VkDevice | null, framebuffer: VkFramebuffer | null, pAllocator: null): void;
declare function vkCreateRenderPass(device: VkDevice | null, pCreateInfo: VkRenderPassCreateInfo | null, pAllocator: null, pRenderPass: VkRenderPass | null): number;
declare function vkDestroyRenderPass(device: VkDevice | null, renderPass: VkRenderPass | null, pAllocator: null): void;
declare function vkGetRenderAreaGranularity(device: VkDevice | null, renderPass: VkRenderPass | null, pGranularity: VkExtent2D | null): void;
declare function vkCreateCommandPool(device: VkDevice | null, pCreateInfo: VkCommandPoolCreateInfo | null, pAllocator: null, pCommandPool: VkCommandPool | null): number;
declare function vkDestroyCommandPool(device: VkDevice | null, commandPool: VkCommandPool | null, pAllocator: null): void;
declare function vkResetCommandPool(device: VkDevice | null, commandPool: VkCommandPool | null, flags: VkCommandPoolResetFlagBits): number;
declare function vkAllocateCommandBuffers(device: VkDevice | null, pAllocateInfo: VkCommandBufferAllocateInfo | null, pCommandBuffers: VkCommandBuffer[] | null): number;
declare function vkFreeCommandBuffers(device: VkDevice | null, commandPool: VkCommandPool | null, commandBufferCount: number, pCommandBuffers: VkCommandBuffer[] | null): void;
declare function vkBeginCommandBuffer(commandBuffer: VkCommandBuffer | null, pBeginInfo: VkCommandBufferBeginInfo | null): number;
declare function vkEndCommandBuffer(commandBuffer: VkCommandBuffer | null): number;
declare function vkResetCommandBuffer(commandBuffer: VkCommandBuffer | null, flags: VkCommandBufferResetFlagBits): number;
declare function vkCmdBindPipeline(commandBuffer: VkCommandBuffer | null, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline | null): void;
declare function vkCmdSetViewport(commandBuffer: VkCommandBuffer | null, firstViewport: number, viewportCount: number, pViewports: VkViewport[] | null): void;
declare function vkCmdSetScissor(commandBuffer: VkCommandBuffer | null, firstScissor: number, scissorCount: number, pScissors: VkRect2D[] | null): void;
declare function vkCmdSetLineWidth(commandBuffer: VkCommandBuffer | null, lineWidth: number): void;
declare function vkCmdSetDepthBias(commandBuffer: VkCommandBuffer | null, depthBiasConstantFactor: number, depthBiasClamp: number, depthBiasSlopeFactor: number): void;
declare function vkCmdSetBlendConstants(commandBuffer: VkCommandBuffer | null, blendConstants: number[] | null): void;
declare function vkCmdSetDepthBounds(commandBuffer: VkCommandBuffer | null, minDepthBounds: number, maxDepthBounds: number): void;
declare function vkCmdSetStencilCompareMask(commandBuffer: VkCommandBuffer | null, faceMask: VkStencilFaceFlagBits, compareMask: number): void;
declare function vkCmdSetStencilWriteMask(commandBuffer: VkCommandBuffer | null, faceMask: VkStencilFaceFlagBits, writeMask: number): void;
declare function vkCmdSetStencilReference(commandBuffer: VkCommandBuffer | null, faceMask: VkStencilFaceFlagBits, reference: number): void;
declare function vkCmdBindDescriptorSets(commandBuffer: VkCommandBuffer | null, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout | null, firstSet: number, descriptorSetCount: number, pDescriptorSets: VkDescriptorSet[] | null, dynamicOffsetCount: number, pDynamicOffsets: VkInout): void;
declare function vkCmdBindIndexBuffer(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: number, indexType: VkIndexType): void;
declare function vkCmdBindVertexBuffers(commandBuffer: VkCommandBuffer | null, firstBinding: number, bindingCount: number, pBuffers: VkBuffer[] | null, pOffsets: VkInout): void;
declare function vkCmdDraw(commandBuffer: VkCommandBuffer | null, vertexCount: number, instanceCount: number, firstVertex: number, firstInstance: number): void;
declare function vkCmdDrawIndexed(commandBuffer: VkCommandBuffer | null, indexCount: number, instanceCount: number, firstIndex: number, vertexOffset: number, firstInstance: number): void;
declare function vkCmdDrawIndirect(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: number, drawCount: number, stride: number): void;
declare function vkCmdDrawIndexedIndirect(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: number, drawCount: number, stride: number): void;
declare function vkCmdDispatch(commandBuffer: VkCommandBuffer | null, groupCountX: number, groupCountY: number, groupCountZ: number): void;
declare function vkCmdDispatchIndirect(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: number): void;
declare function vkCmdCopyBuffer(commandBuffer: VkCommandBuffer | null, srcBuffer: VkBuffer | null, dstBuffer: VkBuffer | null, regionCount: number, pRegions: VkBufferCopy[] | null): void;
declare function vkCmdCopyImage(commandBuffer: VkCommandBuffer | null, srcImage: VkImage | null, srcImageLayout: VkImageLayout, dstImage: VkImage | null, dstImageLayout: VkImageLayout, regionCount: number, pRegions: VkImageCopy[] | null): void;
declare function vkCmdBlitImage(commandBuffer: VkCommandBuffer | null, srcImage: VkImage | null, srcImageLayout: VkImageLayout, dstImage: VkImage | null, dstImageLayout: VkImageLayout, regionCount: number, pRegions: VkImageBlit[] | null, filter: VkFilter): void;
declare function vkCmdCopyBufferToImage(commandBuffer: VkCommandBuffer | null, srcBuffer: VkBuffer | null, dstImage: VkImage | null, dstImageLayout: VkImageLayout, regionCount: number, pRegions: VkBufferImageCopy[] | null): void;
declare function vkCmdCopyImageToBuffer(commandBuffer: VkCommandBuffer | null, srcImage: VkImage | null, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer | null, regionCount: number, pRegions: VkBufferImageCopy[] | null): void;
declare function vkCmdUpdateBuffer(commandBuffer: VkCommandBuffer | null, dstBuffer: VkBuffer | null, dstOffset: number, dataSize: number, pData: ArrayBuffer | null): void;
declare function vkCmdFillBuffer(commandBuffer: VkCommandBuffer | null, dstBuffer: VkBuffer | null, dstOffset: number, size: number, data: number): void;
declare function vkCmdClearColorImage(commandBuffer: VkCommandBuffer | null, image: VkImage | null, imageLayout: VkImageLayout, pColor: VkClearColorValue | null, rangeCount: number, pRanges: VkImageSubresourceRange[] | null): void;
declare function vkCmdClearDepthStencilImage(commandBuffer: VkCommandBuffer | null, image: VkImage | null, imageLayout: VkImageLayout, pDepthStencil: VkClearDepthStencilValue | null, rangeCount: number, pRanges: VkImageSubresourceRange[] | null): void;
declare function vkCmdClearAttachments(commandBuffer: VkCommandBuffer | null, attachmentCount: number, pAttachments: VkClearAttachment[] | null, rectCount: number, pRects: VkClearRect[] | null): void;
declare function vkCmdResolveImage(commandBuffer: VkCommandBuffer | null, srcImage: VkImage | null, srcImageLayout: VkImageLayout, dstImage: VkImage | null, dstImageLayout: VkImageLayout, regionCount: number, pRegions: VkImageResolve[] | null): void;
declare function vkCmdSetEvent(commandBuffer: VkCommandBuffer | null, event: VkEvent | null, stageMask: VkPipelineStageFlagBits): void;
declare function vkCmdResetEvent(commandBuffer: VkCommandBuffer | null, event: VkEvent | null, stageMask: VkPipelineStageFlagBits): void;
declare function vkCmdWaitEvents(commandBuffer: VkCommandBuffer | null, eventCount: number, pEvents: VkEvent[] | null, srcStageMask: VkPipelineStageFlagBits, dstStageMask: VkPipelineStageFlagBits, memoryBarrierCount: number, pMemoryBarriers: VkMemoryBarrier[] | null, bufferMemoryBarrierCount: number, pBufferMemoryBarriers: VkBufferMemoryBarrier[] | null, imageMemoryBarrierCount: number, pImageMemoryBarriers: VkImageMemoryBarrier[] | null): void;
declare function vkCmdPipelineBarrier(commandBuffer: VkCommandBuffer | null, srcStageMask: VkPipelineStageFlagBits, dstStageMask: VkPipelineStageFlagBits, dependencyFlags: VkDependencyFlagBits, memoryBarrierCount: number, pMemoryBarriers: VkMemoryBarrier[] | null, bufferMemoryBarrierCount: number, pBufferMemoryBarriers: VkBufferMemoryBarrier[] | null, imageMemoryBarrierCount: number, pImageMemoryBarriers: VkImageMemoryBarrier[] | null): void;
declare function vkCmdBeginQuery(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, query: number, flags: VkQueryControlFlagBits): void;
declare function vkCmdEndQuery(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, query: number): void;
declare function vkCmdBeginConditionalRenderingEXT(commandBuffer: VkCommandBuffer | null, pConditionalRenderingBegin: VkConditionalRenderingBeginInfoEXT | null): void;
declare function vkCmdEndConditionalRenderingEXT(commandBuffer: VkCommandBuffer | null): void;
declare function vkCmdResetQueryPool(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, firstQuery: number, queryCount: number): void;
declare function vkCmdWriteTimestamp(commandBuffer: VkCommandBuffer | null, pipelineStage: number, queryPool: VkQueryPool | null, query: number): void;
declare function vkCmdCopyQueryPoolResults(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, firstQuery: number, queryCount: number, dstBuffer: VkBuffer | null, dstOffset: number, stride: number, flags: VkQueryResultFlagBits): void;
declare function vkCmdPushConstants(commandBuffer: VkCommandBuffer | null, layout: VkPipelineLayout | null, stageFlags: VkShaderStageFlagBits, offset: number, size: number, pValues: ArrayBuffer | null): void;
declare function vkCmdBeginRenderPass(commandBuffer: VkCommandBuffer | null, pRenderPassBegin: VkRenderPassBeginInfo | null, contents: VkSubpassContents): void;
declare function vkCmdNextSubpass(commandBuffer: VkCommandBuffer | null, contents: VkSubpassContents): void;
declare function vkCmdEndRenderPass(commandBuffer: VkCommandBuffer | null): void;
declare function vkCmdExecuteCommands(commandBuffer: VkCommandBuffer | null, commandBufferCount: number, pCommandBuffers: VkCommandBuffer[] | null): void;
declare function vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout, pProperties: VkDisplayPropertiesKHR[] | null): number;
declare function vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout, pProperties: VkDisplayPlanePropertiesKHR[] | null): number;
declare function vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice: VkPhysicalDevice | null, planeIndex: number, pDisplayCount: VkInout, pDisplays: VkDisplayKHR[] | null): number;
declare function vkGetDisplayModePropertiesKHR(physicalDevice: VkPhysicalDevice | null, display: VkDisplayKHR | null, pPropertyCount: VkInout, pProperties: VkDisplayModePropertiesKHR[] | null): number;
declare function vkCreateDisplayModeKHR(physicalDevice: VkPhysicalDevice | null, display: VkDisplayKHR | null, pCreateInfo: VkDisplayModeCreateInfoKHR | null, pAllocator: null, pMode: VkDisplayModeKHR | null): number;
declare function vkGetDisplayPlaneCapabilitiesKHR(physicalDevice: VkPhysicalDevice | null, mode: VkDisplayModeKHR | null, planeIndex: number, pCapabilities: VkDisplayPlaneCapabilitiesKHR | null): number;
declare function vkCreateDisplayPlaneSurfaceKHR(instance: VkInstance | null, pCreateInfo: VkDisplaySurfaceCreateInfoKHR | null, pAllocator: null, pSurface: VkSurfaceKHR | null): number;
declare function vkCreateSharedSwapchainsKHR(device: VkDevice | null, swapchainCount: number, pCreateInfos: VkSwapchainCreateInfoKHR[] | null, pAllocator: null, pSwapchains: VkSwapchainKHR[] | null): number;
declare function vkDestroySurfaceKHR(instance: VkInstance | null, surface: VkSurfaceKHR | null, pAllocator: null): void;
declare function vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice: VkPhysicalDevice | null, queueFamilyIndex: number, surface: VkSurfaceKHR | null, pSupported: VkInout): number;
declare function vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pSurfaceCapabilities: VkSurfaceCapabilitiesKHR | null): number;
declare function vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pSurfaceFormatCount: VkInout, pSurfaceFormats: VkSurfaceFormatKHR[] | null): number;
declare function vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pPresentModeCount: VkInout, pPresentModes: VkInout): number;
declare function vkCreateSwapchainKHR(device: VkDevice | null, pCreateInfo: VkSwapchainCreateInfoKHR | null, pAllocator: null, pSwapchain: VkSwapchainKHR | null): number;
declare function vkDestroySwapchainKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pAllocator: null): void;
declare function vkGetSwapchainImagesKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pSwapchainImageCount: VkInout, pSwapchainImages: VkImage[] | null): number;
declare function vkAcquireNextImageKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null, timeout: number, semaphore: VkSemaphore | null, fence: VkFence | null, pImageIndex: VkInout): number;
declare function vkQueuePresentKHR(queue: VkQueue | null, pPresentInfo: VkPresentInfoKHR | null): number;
declare function vkCreateDebugReportCallbackEXT(instance: VkInstance | null, pCreateInfo: VkDebugReportCallbackCreateInfoEXT | null, pAllocator: null, pCallback: VkDebugReportCallbackEXT | null): number;
declare function vkDestroyDebugReportCallbackEXT(instance: VkInstance | null, callback: VkDebugReportCallbackEXT | null, pAllocator: null): void;
declare function vkDebugReportMessageEXT(instance: VkInstance | null, flags: VkDebugReportFlagBitsEXT, objectType: VkDebugReportObjectTypeEXT, object: number, location: number, messageCode: number, pLayerPrefix: string | null, pMessage: string | null): void;
declare function vkDebugMarkerSetObjectNameEXT(device: VkDevice | null, pNameInfo: VkDebugMarkerObjectNameInfoEXT | null): number;
declare function vkDebugMarkerSetObjectTagEXT(device: VkDevice | null, pTagInfo: VkDebugMarkerObjectTagInfoEXT | null): number;
declare function vkCmdDebugMarkerBeginEXT(commandBuffer: VkCommandBuffer | null, pMarkerInfo: VkDebugMarkerMarkerInfoEXT | null): void;
declare function vkCmdDebugMarkerEndEXT(commandBuffer: VkCommandBuffer | null): void;
declare function vkCmdDebugMarkerInsertEXT(commandBuffer: VkCommandBuffer | null, pMarkerInfo: VkDebugMarkerMarkerInfoEXT | null): void;
declare function vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice: VkPhysicalDevice | null, format: VkFormat, type: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlagBits, flags: VkImageCreateFlagBits, externalHandleType: VkExternalMemoryHandleTypeFlagBitsNV, pExternalImageFormatProperties: VkExternalImageFormatPropertiesNV | null): number;
declare function vkCmdDrawIndirectCountAMD(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: number, countBuffer: VkBuffer | null, countBufferOffset: number, maxDrawCount: number, stride: number): void;
declare function vkCmdDrawIndexedIndirectCountAMD(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: number, countBuffer: VkBuffer | null, countBufferOffset: number, maxDrawCount: number, stride: number): void;
declare function vkCmdProcessCommandsNVX(commandBuffer: VkCommandBuffer | null, pProcessCommandsInfo: VkCmdProcessCommandsInfoNVX | null): void;
declare function vkCmdReserveSpaceForCommandsNVX(commandBuffer: VkCommandBuffer | null, pReserveSpaceInfo: VkCmdReserveSpaceForCommandsInfoNVX | null): void;
declare function vkCreateIndirectCommandsLayoutNVX(device: VkDevice | null, pCreateInfo: VkIndirectCommandsLayoutCreateInfoNVX | null, pAllocator: null, pIndirectCommandsLayout: VkIndirectCommandsLayoutNVX | null): number;
declare function vkDestroyIndirectCommandsLayoutNVX(device: VkDevice | null, indirectCommandsLayout: VkIndirectCommandsLayoutNVX | null, pAllocator: null): void;
declare function vkCreateObjectTableNVX(device: VkDevice | null, pCreateInfo: VkObjectTableCreateInfoNVX | null, pAllocator: null, pObjectTable: VkObjectTableNVX | null): number;
declare function vkDestroyObjectTableNVX(device: VkDevice | null, objectTable: VkObjectTableNVX | null, pAllocator: null): void;
declare function vkRegisterObjectsNVX(device: VkDevice | null, objectTable: VkObjectTableNVX | null, objectCount: number, ppObjectTableEntries: VkObjectTableEntryNVX[] | null, pObjectIndices: VkInout): number;
declare function vkUnregisterObjectsNVX(device: VkDevice | null, objectTable: VkObjectTableNVX | null, objectCount: number, pObjectEntryTypes: VkInout, pObjectIndices: VkInout): number;
declare function vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(physicalDevice: VkPhysicalDevice | null, pFeatures: VkDeviceGeneratedCommandsFeaturesNVX | null, pLimits: VkDeviceGeneratedCommandsLimitsNVX | null): void;
declare function vkGetPhysicalDeviceFeatures2(physicalDevice: VkPhysicalDevice | null, pFeatures: VkPhysicalDeviceFeatures2 | null): void;
declare function vkGetPhysicalDeviceProperties2(physicalDevice: VkPhysicalDevice | null, pProperties: VkPhysicalDeviceProperties2 | null): void;
declare function vkGetPhysicalDeviceFormatProperties2(physicalDevice: VkPhysicalDevice | null, format: VkFormat, pFormatProperties: VkFormatProperties2 | null): void;
declare function vkGetPhysicalDeviceImageFormatProperties2(physicalDevice: VkPhysicalDevice | null, pImageFormatInfo: VkPhysicalDeviceImageFormatInfo2 | null, pImageFormatProperties: VkImageFormatProperties2 | null): number;
declare function vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice: VkPhysicalDevice | null, pQueueFamilyPropertyCount: VkInout, pQueueFamilyProperties: VkQueueFamilyProperties2[] | null): void;
declare function vkGetPhysicalDeviceMemoryProperties2(physicalDevice: VkPhysicalDevice | null, pMemoryProperties: VkPhysicalDeviceMemoryProperties2 | null): void;
declare function vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice: VkPhysicalDevice | null, pFormatInfo: VkPhysicalDeviceSparseImageFormatInfo2 | null, pPropertyCount: VkInout, pProperties: VkSparseImageFormatProperties2[] | null): void;
declare function vkCmdPushDescriptorSetKHR(commandBuffer: VkCommandBuffer | null, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout | null, set: number, descriptorWriteCount: number, pDescriptorWrites: VkWriteDescriptorSet[] | null): void;
declare function vkTrimCommandPool(device: VkDevice | null, commandPool: VkCommandPool | null, flags: null): void;
declare function vkGetPhysicalDeviceExternalBufferProperties(physicalDevice: VkPhysicalDevice | null, pExternalBufferInfo: VkPhysicalDeviceExternalBufferInfo | null, pExternalBufferProperties: VkExternalBufferProperties | null): void;
declare function vkGetMemoryFdKHR(device: VkDevice | null, pGetFdInfo: VkMemoryGetFdInfoKHR | null, pFd: VkInout): number;
declare function vkGetMemoryFdPropertiesKHR(device: VkDevice | null, handleType: number, fd: number, pMemoryFdProperties: VkMemoryFdPropertiesKHR | null): number;
declare function vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice: VkPhysicalDevice | null, pExternalSemaphoreInfo: VkPhysicalDeviceExternalSemaphoreInfo | null, pExternalSemaphoreProperties: VkExternalSemaphoreProperties | null): void;
declare function vkGetSemaphoreFdKHR(device: VkDevice | null, pGetFdInfo: VkSemaphoreGetFdInfoKHR | null, pFd: VkInout): number;
declare function vkImportSemaphoreFdKHR(device: VkDevice | null, pImportSemaphoreFdInfo: VkImportSemaphoreFdInfoKHR | null): number;
declare function vkGetPhysicalDeviceExternalFenceProperties(physicalDevice: VkPhysicalDevice | null, pExternalFenceInfo: VkPhysicalDeviceExternalFenceInfo | null, pExternalFenceProperties: VkExternalFenceProperties | null): void;
declare function vkGetFenceFdKHR(device: VkDevice | null, pGetFdInfo: VkFenceGetFdInfoKHR | null, pFd: VkInout): number;
declare function vkImportFenceFdKHR(device: VkDevice | null, pImportFenceFdInfo: VkImportFenceFdInfoKHR | null): number;
declare function vkReleaseDisplayEXT(physicalDevice: VkPhysicalDevice | null, display: VkDisplayKHR | null): number;
declare function vkDisplayPowerControlEXT(device: VkDevice | null, display: VkDisplayKHR | null, pDisplayPowerInfo: VkDisplayPowerInfoEXT | null): number;
declare function vkRegisterDeviceEventEXT(device: VkDevice | null, pDeviceEventInfo: VkDeviceEventInfoEXT | null, pAllocator: null, pFence: VkFence | null): number;
declare function vkRegisterDisplayEventEXT(device: VkDevice | null, display: VkDisplayKHR | null, pDisplayEventInfo: VkDisplayEventInfoEXT | null, pAllocator: null, pFence: VkFence | null): number;
declare function vkGetSwapchainCounterEXT(device: VkDevice | null, swapchain: VkSwapchainKHR | null, counter: number, pCounterValue: VkInout): number;
declare function vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pSurfaceCapabilities: VkSurfaceCapabilities2EXT | null): number;
declare function vkEnumeratePhysicalDeviceGroups(instance: VkInstance | null, pPhysicalDeviceGroupCount: VkInout, pPhysicalDeviceGroupProperties: VkPhysicalDeviceGroupProperties[] | null): number;
declare function vkGetDeviceGroupPeerMemoryFeatures(device: VkDevice | null, heapIndex: number, localDeviceIndex: number, remoteDeviceIndex: number, pPeerMemoryFeatures: VkInout): void;
declare function vkBindBufferMemory2(device: VkDevice | null, bindInfoCount: number, pBindInfos: VkBindBufferMemoryInfo[] | null): number;
declare function vkBindImageMemory2(device: VkDevice | null, bindInfoCount: number, pBindInfos: VkBindImageMemoryInfo[] | null): number;
declare function vkCmdSetDeviceMask(commandBuffer: VkCommandBuffer | null, deviceMask: number): void;
declare function vkGetDeviceGroupPresentCapabilitiesKHR(device: VkDevice | null, pDeviceGroupPresentCapabilities: VkDeviceGroupPresentCapabilitiesKHR | null): number;
declare function vkGetDeviceGroupSurfacePresentModesKHR(device: VkDevice | null, surface: VkSurfaceKHR | null, pModes: VkInout): number;
declare function vkAcquireNextImage2KHR(device: VkDevice | null, pAcquireInfo: VkAcquireNextImageInfoKHR | null, pImageIndex: VkInout): number;
declare function vkCmdDispatchBase(commandBuffer: VkCommandBuffer | null, baseGroupX: number, baseGroupY: number, baseGroupZ: number, groupCountX: number, groupCountY: number, groupCountZ: number): void;
declare function vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice: VkPhysicalDevice | null, surface: VkSurfaceKHR | null, pRectCount: VkInout, pRects: VkRect2D[] | null): number;
declare function vkCreateDescriptorUpdateTemplate(device: VkDevice | null, pCreateInfo: VkDescriptorUpdateTemplateCreateInfo | null, pAllocator: null, pDescriptorUpdateTemplate: VkDescriptorUpdateTemplate | null): number;
declare function vkDestroyDescriptorUpdateTemplate(device: VkDevice | null, descriptorUpdateTemplate: VkDescriptorUpdateTemplate | null, pAllocator: null): void;
declare function vkUpdateDescriptorSetWithTemplate(device: VkDevice | null, descriptorSet: VkDescriptorSet | null, descriptorUpdateTemplate: VkDescriptorUpdateTemplate | null, pData: ArrayBuffer | null): void;
declare function vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer: VkCommandBuffer | null, descriptorUpdateTemplate: VkDescriptorUpdateTemplate | null, layout: VkPipelineLayout | null, set: number, pData: ArrayBuffer | null): void;
declare function vkSetHdrMetadataEXT(device: VkDevice | null, swapchainCount: number, pSwapchains: VkSwapchainKHR[] | null, pMetadata: VkHdrMetadataEXT[] | null): void;
declare function vkGetSwapchainStatusKHR(device: VkDevice | null, swapchain: VkSwapchainKHR | null): number;
declare function vkGetRefreshCycleDurationGOOGLE(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pDisplayTimingProperties: VkRefreshCycleDurationGOOGLE | null): number;
declare function vkGetPastPresentationTimingGOOGLE(device: VkDevice | null, swapchain: VkSwapchainKHR | null, pPresentationTimingCount: VkInout, pPresentationTimings: VkPastPresentationTimingGOOGLE[] | null): number;
declare function vkCreateMacOSSurfaceMVK(instance: VkInstance | null, pCreateInfo: VkMacOSSurfaceCreateInfoMVK | null, pAllocator: null, pSurface: VkSurfaceKHR | null): number;
declare function vkCmdSetViewportWScalingNV(commandBuffer: VkCommandBuffer | null, firstViewport: number, viewportCount: number, pViewportWScalings: VkViewportWScalingNV[] | null): void;
declare function vkCmdSetDiscardRectangleEXT(commandBuffer: VkCommandBuffer | null, firstDiscardRectangle: number, discardRectangleCount: number, pDiscardRectangles: VkRect2D[] | null): void;
declare function vkCmdSetSampleLocationsEXT(commandBuffer: VkCommandBuffer | null, pSampleLocationsInfo: VkSampleLocationsInfoEXT | null): void;
declare function vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice: VkPhysicalDevice | null, samples: number, pMultisampleProperties: VkMultisamplePropertiesEXT | null): void;
declare function vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice: VkPhysicalDevice | null, pSurfaceInfo: VkPhysicalDeviceSurfaceInfo2KHR | null, pSurfaceCapabilities: VkSurfaceCapabilities2KHR | null): number;
declare function vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice: VkPhysicalDevice | null, pSurfaceInfo: VkPhysicalDeviceSurfaceInfo2KHR | null, pSurfaceFormatCount: VkInout, pSurfaceFormats: VkSurfaceFormat2KHR[] | null): number;
declare function vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout, pProperties: VkDisplayProperties2KHR[] | null): number;
declare function vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout, pProperties: VkDisplayPlaneProperties2KHR[] | null): number;
declare function vkGetDisplayModeProperties2KHR(physicalDevice: VkPhysicalDevice | null, display: VkDisplayKHR | null, pPropertyCount: VkInout, pProperties: VkDisplayModeProperties2KHR[] | null): number;
declare function vkGetDisplayPlaneCapabilities2KHR(physicalDevice: VkPhysicalDevice | null, pDisplayPlaneInfo: VkDisplayPlaneInfo2KHR | null, pCapabilities: VkDisplayPlaneCapabilities2KHR | null): number;
declare function vkGetBufferMemoryRequirements2(device: VkDevice | null, pInfo: VkBufferMemoryRequirementsInfo2 | null, pMemoryRequirements: VkMemoryRequirements2 | null): void;
declare function vkGetImageMemoryRequirements2(device: VkDevice | null, pInfo: VkImageMemoryRequirementsInfo2 | null, pMemoryRequirements: VkMemoryRequirements2 | null): void;
declare function vkGetImageSparseMemoryRequirements2(device: VkDevice | null, pInfo: VkImageSparseMemoryRequirementsInfo2 | null, pSparseMemoryRequirementCount: VkInout, pSparseMemoryRequirements: VkSparseImageMemoryRequirements2[] | null): void;
declare function vkCreateSamplerYcbcrConversion(device: VkDevice | null, pCreateInfo: VkSamplerYcbcrConversionCreateInfo | null, pAllocator: null, pYcbcrConversion: VkSamplerYcbcrConversion | null): number;
declare function vkDestroySamplerYcbcrConversion(device: VkDevice | null, ycbcrConversion: VkSamplerYcbcrConversion | null, pAllocator: null): void;
declare function vkGetDeviceQueue2(device: VkDevice | null, pQueueInfo: VkDeviceQueueInfo2 | null, pQueue: VkQueue | null): void;
declare function vkCreateValidationCacheEXT(device: VkDevice | null, pCreateInfo: VkValidationCacheCreateInfoEXT | null, pAllocator: null, pValidationCache: VkValidationCacheEXT | null): number;
declare function vkDestroyValidationCacheEXT(device: VkDevice | null, validationCache: VkValidationCacheEXT | null, pAllocator: null): void;
declare function vkGetValidationCacheDataEXT(device: VkDevice | null, validationCache: VkValidationCacheEXT | null, pDataSize: VkInout, pData: ArrayBuffer | null): number;
declare function vkMergeValidationCachesEXT(device: VkDevice | null, dstCache: VkValidationCacheEXT | null, srcCacheCount: number, pSrcCaches: VkValidationCacheEXT[] | null): number;
declare function vkGetDescriptorSetLayoutSupport(device: VkDevice | null, pCreateInfo: VkDescriptorSetLayoutCreateInfo | null, pSupport: VkDescriptorSetLayoutSupport | null): void;
declare function vkGetShaderInfoAMD(device: VkDevice | null, pipeline: VkPipeline | null, shaderStage: number, infoType: VkShaderInfoTypeAMD, pInfoSize: VkInout, pInfo: ArrayBuffer | null): number;
declare function vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice: VkPhysicalDevice | null, pTimeDomainCount: VkInout, pTimeDomains: VkInout): number;
declare function vkGetCalibratedTimestampsEXT(device: VkDevice | null, timestampCount: number, pTimestampInfos: VkCalibratedTimestampInfoEXT[] | null, pTimestamps: VkInout, pMaxDeviation: VkInout): number;
declare function vkSetDebugUtilsObjectNameEXT(device: VkDevice | null, pNameInfo: VkDebugUtilsObjectNameInfoEXT | null): number;
declare function vkSetDebugUtilsObjectTagEXT(device: VkDevice | null, pTagInfo: VkDebugUtilsObjectTagInfoEXT | null): number;
declare function vkQueueBeginDebugUtilsLabelEXT(queue: VkQueue | null, pLabelInfo: VkDebugUtilsLabelEXT | null): void;
declare function vkQueueEndDebugUtilsLabelEXT(queue: VkQueue | null): void;
declare function vkQueueInsertDebugUtilsLabelEXT(queue: VkQueue | null, pLabelInfo: VkDebugUtilsLabelEXT | null): void;
declare function vkCmdBeginDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer | null, pLabelInfo: VkDebugUtilsLabelEXT | null): void;
declare function vkCmdEndDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer | null): void;
declare function vkCmdInsertDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer | null, pLabelInfo: VkDebugUtilsLabelEXT | null): void;
declare function vkCreateDebugUtilsMessengerEXT(instance: VkInstance | null, pCreateInfo: VkDebugUtilsMessengerCreateInfoEXT | null, pAllocator: null, pMessenger: VkDebugUtilsMessengerEXT | null): number;
declare function vkDestroyDebugUtilsMessengerEXT(instance: VkInstance | null, messenger: VkDebugUtilsMessengerEXT | null, pAllocator: null): void;
declare function vkSubmitDebugUtilsMessageEXT(instance: VkInstance | null, messageSeverity: number, messageTypes: VkDebugUtilsMessageTypeFlagBitsEXT, pCallbackData: VkDebugUtilsMessengerCallbackDataEXT | null): void;
declare function vkGetMemoryHostPointerPropertiesEXT(device: VkDevice | null, handleType: number, pHostPointer: ArrayBuffer | null, pMemoryHostPointerProperties: VkMemoryHostPointerPropertiesEXT | null): number;
declare function vkCmdWriteBufferMarkerAMD(commandBuffer: VkCommandBuffer | null, pipelineStage: number, dstBuffer: VkBuffer | null, dstOffset: number, marker: number): void;
declare function vkCreateRenderPass2KHR(device: VkDevice | null, pCreateInfo: VkRenderPassCreateInfo2KHR | null, pAllocator: null, pRenderPass: VkRenderPass | null): number;
declare function vkCmdBeginRenderPass2KHR(commandBuffer: VkCommandBuffer | null, pRenderPassBegin: VkRenderPassBeginInfo | null, pSubpassBeginInfo: VkSubpassBeginInfoKHR | null): void;
declare function vkCmdNextSubpass2KHR(commandBuffer: VkCommandBuffer | null, pSubpassBeginInfo: VkSubpassBeginInfoKHR | null, pSubpassEndInfo: VkSubpassEndInfoKHR | null): void;
declare function vkCmdEndRenderPass2KHR(commandBuffer: VkCommandBuffer | null, pSubpassEndInfo: VkSubpassEndInfoKHR | null): void;
declare function vkCmdDrawIndirectCountKHR(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: number, countBuffer: VkBuffer | null, countBufferOffset: number, maxDrawCount: number, stride: number): void;
declare function vkCmdDrawIndexedIndirectCountKHR(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: number, countBuffer: VkBuffer | null, countBufferOffset: number, maxDrawCount: number, stride: number): void;
declare function vkCmdSetCheckpointNV(commandBuffer: VkCommandBuffer | null, pCheckpointMarker: ArrayBuffer | null): void;
declare function vkGetQueueCheckpointDataNV(queue: VkQueue | null, pCheckpointDataCount: VkInout, pCheckpointData: VkCheckpointDataNV[] | null): void;
declare function vkCmdBindTransformFeedbackBuffersEXT(commandBuffer: VkCommandBuffer | null, firstBinding: number, bindingCount: number, pBuffers: VkBuffer[] | null, pOffsets: VkInout, pSizes: VkInout): void;
declare function vkCmdBeginTransformFeedbackEXT(commandBuffer: VkCommandBuffer | null, firstCounterBuffer: number, counterBufferCount: number, pCounterBuffers: VkBuffer[] | null, pCounterBufferOffsets: VkInout): void;
declare function vkCmdEndTransformFeedbackEXT(commandBuffer: VkCommandBuffer | null, firstCounterBuffer: number, counterBufferCount: number, pCounterBuffers: VkBuffer[] | null, pCounterBufferOffsets: VkInout): void;
declare function vkCmdBeginQueryIndexedEXT(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, query: number, flags: VkQueryControlFlagBits, index: number): void;
declare function vkCmdEndQueryIndexedEXT(commandBuffer: VkCommandBuffer | null, queryPool: VkQueryPool | null, query: number, index: number): void;
declare function vkCmdDrawIndirectByteCountEXT(commandBuffer: VkCommandBuffer | null, instanceCount: number, firstInstance: number, counterBuffer: VkBuffer | null, counterBufferOffset: number, counterOffset: number, vertexStride: number): void;
declare function vkCmdSetExclusiveScissorNV(commandBuffer: VkCommandBuffer | null, firstExclusiveScissor: number, exclusiveScissorCount: number, pExclusiveScissors: VkRect2D[] | null): void;
declare function vkCmdBindShadingRateImageNV(commandBuffer: VkCommandBuffer | null, imageView: VkImageView | null, imageLayout: VkImageLayout): void;
declare function vkCmdSetViewportShadingRatePaletteNV(commandBuffer: VkCommandBuffer | null, firstViewport: number, viewportCount: number, pShadingRatePalettes: VkShadingRatePaletteNV[] | null): void;
declare function vkCmdSetCoarseSampleOrderNV(commandBuffer: VkCommandBuffer | null, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: number, pCustomSampleOrders: VkCoarseSampleOrderCustomNV[] | null): void;
declare function vkCmdDrawMeshTasksNV(commandBuffer: VkCommandBuffer | null, taskCount: number, firstTask: number): void;
declare function vkCmdDrawMeshTasksIndirectNV(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: number, drawCount: number, stride: number): void;
declare function vkCmdDrawMeshTasksIndirectCountNV(commandBuffer: VkCommandBuffer | null, buffer: VkBuffer | null, offset: number, countBuffer: VkBuffer | null, countBufferOffset: number, maxDrawCount: number, stride: number): void;
declare function vkCompileDeferredNV(device: VkDevice | null, pipeline: VkPipeline | null, shader: number): number;
declare function vkCreateAccelerationStructureNV(device: VkDevice | null, pCreateInfo: VkAccelerationStructureCreateInfoNV | null, pAllocator: null, pAccelerationStructure: VkAccelerationStructureNV | null): number;
declare function vkDestroyAccelerationStructureNV(device: VkDevice | null, accelerationStructure: VkAccelerationStructureNV | null, pAllocator: null): void;
declare function vkGetAccelerationStructureMemoryRequirementsNV(device: VkDevice | null, pInfo: VkAccelerationStructureMemoryRequirementsInfoNV | null, pMemoryRequirements: VkMemoryRequirements2KHR | null): void;
declare function vkBindAccelerationStructureMemoryNV(device: VkDevice | null, bindInfoCount: number, pBindInfos: VkBindAccelerationStructureMemoryInfoNV[] | null): number;
declare function vkCmdCopyAccelerationStructureNV(commandBuffer: VkCommandBuffer | null, dst: VkAccelerationStructureNV | null, src: VkAccelerationStructureNV | null, mode: VkCopyAccelerationStructureModeNV): void;
declare function vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer: VkCommandBuffer | null, accelerationStructureCount: number, pAccelerationStructures: VkAccelerationStructureNV[] | null, queryType: VkQueryType, queryPool: VkQueryPool | null, firstQuery: number): void;
declare function vkCmdBuildAccelerationStructureNV(commandBuffer: VkCommandBuffer | null, pInfo: VkAccelerationStructureInfoNV | null, instanceData: VkBuffer | null, instanceOffset: number, update: number, dst: VkAccelerationStructureNV | null, src: VkAccelerationStructureNV | null, scratch: VkBuffer | null, scratchOffset: number): void;
declare function vkCmdTraceRaysNV(commandBuffer: VkCommandBuffer | null, raygenShaderBindingTableBuffer: VkBuffer | null, raygenShaderBindingOffset: number, missShaderBindingTableBuffer: VkBuffer | null, missShaderBindingOffset: number, missShaderBindingStride: number, hitShaderBindingTableBuffer: VkBuffer | null, hitShaderBindingOffset: number, hitShaderBindingStride: number, callableShaderBindingTableBuffer: VkBuffer | null, callableShaderBindingOffset: number, callableShaderBindingStride: number, width: number, height: number, depth: number): void;
declare function vkGetRayTracingShaderGroupHandlesNV(device: VkDevice | null, pipeline: VkPipeline | null, firstGroup: number, groupCount: number, dataSize: number, pData: ArrayBuffer | null): number;
declare function vkGetAccelerationStructureHandleNV(device: VkDevice | null, accelerationStructure: VkAccelerationStructureNV | null, dataSize: number, pData: ArrayBuffer | null): number;
declare function vkCreateRayTracingPipelinesNV(device: VkDevice | null, pipelineCache: VkPipelineCache | null, createInfoCount: number, pCreateInfos: VkRayTracingPipelineCreateInfoNV[] | null, pAllocator: null, pPipelines: VkPipeline[] | null): number;
declare function vkGetImageDrmFormatModifierPropertiesEXT(device: VkDevice | null, image: VkImage | null, pProperties: VkImageDrmFormatModifierPropertiesEXT | null): number;
declare function vkGetBufferDeviceAddressEXT(device: VkDevice | null, pInfo: VkBufferDeviceAddressInfoEXT | null): number;
declare function vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice: VkPhysicalDevice | null, pPropertyCount: VkInout, pProperties: VkCooperativeMatrixPropertiesNV[] | null): number;


/** #### HARDCODED #### **/
declare function createV8ArrayBufferFromMemory(
  addr: BigInt,
  size: number
): ArrayBuffer;

declare function VK_MAKE_VERSION(
  major: number,
  minor: number,
  patch: number
): number;

declare function VK_VERSION_MAJOR(
  major: number
): number;

declare function VK_VERSION_MINOR(
  minor: number
): number;

declare function VK_VERSION_PATCH(
  patch: number
): number;

declare function vkUseDevice(
  pDevice: VkDevice
): void;

declare function vkUseInstance(
  pInstance: VkInstance
): void;

declare var VK_API_VERSION_1_0: number;

/** #### VULKANWINDOW #### */

declare interface ResizeEvent {
  width: number;
  height: number;
}
declare interface FocusEvent {
  focused: boolean;
}
declare interface CloseEvent {

}
declare interface KeydownEvent {
  keyCode: number;
}
declare interface KeyupEvent {
  keyCode: number;
}
declare interface MousemoveEvent {
  x: number;
  y: number;
  movementX: number;
  movementY: number;
}
declare interface MousewheelEvent {
  x: number;
  y: number;
  deltaX: number;
  deltaY: number;
}
declare interface MousedownEvent {
  x: number;
  y: number;
  button: number;
}
declare interface MouseupEvent {
  x: number;
  y: number;
  button: number;
}
declare interface DropEvent {
  paths: string[];
}

interface VulkanWindowInitializer {
  width?: number;
  height?: number;
  title?: string;
}

declare var VulkanWindow: {
  prototype: VulkanWindow;
  new(param?: VulkanWindowInitializer | null): VulkanWindow;
  width: number;
  height: number;
  title: string;
  pollEvents(): void;
  focus(): void;
  close(): void;
  shouldClose(): boolean;
  createSurface(instance: VkInstance | null, pAllocator: null, surface: VkSurfaceKHR | null): number;
  getRequiredInstanceExtensions(): string[];
  onresize: ((ev: ResizeEvent) => any) | null;
  onfocus: ((ev: FocusEvent) => any) | null;
  onclose: ((ev: CloseEvent) => any) | null;
  onkeydown: ((ev: KeydownEvent) => any) | null;
  onkeyup: ((ev: KeyupEvent) => any) | null;
  onmousemove: ((ev: MousemoveEvent) => any) | null;
  onmousewheel: ((ev: MousewheelEvent) => any) | null;
  onmousedown: ((ev: MousedownEvent) => any) | null;
  onmouseup: ((ev: MouseupEvent) => any) | null;
  ondrop: ((ev: DropEvent) => any) | null;
}

export interface VulkanWindow {
  width: number;
  height: number;
  title: string;
  pollEvents(): void;
  focus(): void;
  close(): void;
  shouldClose(): boolean;
  createSurface(instance: VkInstance | null, pAllocator: null, surface: VkSurfaceKHR | null): number;
  getRequiredInstanceExtensions(): string[];
  onresize: ((ev: ResizeEvent) => any) | null;
  onfocus: ((ev: FocusEvent) => any) | null;
  onclose: ((ev: CloseEvent) => any) | null;
  onkeydown: ((ev: KeydownEvent) => any) | null;
  onkeyup: ((ev: KeyupEvent) => any) | null;
  onmousemove: ((ev: MousemoveEvent) => any) | null;
  onmousewheel: ((ev: MousewheelEvent) => any) | null;
  onmousedown: ((ev: MousedownEvent) => any) | null;
  onmouseup: ((ev: MouseupEvent) => any) | null;
  ondrop: ((ev: DropEvent) => any) | null;
}
