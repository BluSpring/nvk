/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.6.4
 */
"use strict";const{platform:platform}=process,nvk=require("./build/Release/addon-"+platform+".node");let ENABLE_SHARED_MEMORY_HINTS=!!process.env.npm_config_enable_shared_memory_hints;ENABLE_SHARED_MEMORY_HINTS||process.argv.map(e=>{e.match("enable-shared-memory-hints")&&(ENABLE_SHARED_MEMORY_HINTS=!0)});const getAddressFromArrayBuffer=nvk.getAddressFromArrayBuffer,getArrayBufferFromAddress=nvk.getArrayBufferFromAddress;global.ArrayBuffer.prototype.getAddress=function(){return getAddressFromArrayBuffer(this)},global.ArrayBuffer.fromAddress=function(e,t){return getArrayBufferFromAddress(e,BigInt(t))};const BI0=BigInt(0),NULLT=String.fromCharCode(0),textEncoder=new("undefined"==typeof TextEncoder?require("util").TextEncoder:TextEncoder),textDecoder=new("undefined"==typeof TextDecoder?require("util").TextDecoder:TextDecoder);function decodeNullTerminatedUTF8String(e){let t=e.indexOf(0),r=e.subarray(0,t>-1?t:e.length);return textDecoder.decode(r)}function typeToString(e){return null==e?String(e):e.constructor.name}class NativeStringArray{constructor(e){this.array=e,this.address=BI0;let t=[],r=new BigInt64Array(e.length),s=r.buffer,i=getAddressFromArrayBuffer(s);for(let s=0;s<e.length;++s){let i=textEncoder.encode(e[s]+NULLT).buffer;r[s]=getAddressFromArrayBuffer(i),t.push(i)}this.address=i,this.addressBuffer=s,this.stringBuffers=t}}class NativeObjectArray{constructor(e){this.array=e,this.address=BI0;let t=e[0].memoryBuffer.byteLength,r=new ArrayBuffer(e.length*t),s=new Uint8Array(r),i=getAddressFromArrayBuffer(r);for(let r=0;r<e.length;++r){let i=r*t,m=new Uint8Array(e[r].memoryBuffer);s.subarray(i,i+t).set(m,0)}this.address=i,this.objectBuffer=r}}class NativeObjectReferenceArray{constructor(e){this.array=e,this.address=BI0;let t=new BigInt64Array(e.length),r=t.buffer,s=getAddressFromArrayBuffer(r);for(let r=0;r<e.length;++r){let s=e[r].address;t[r]=s}this.address=s,this.addressBuffer=r}}class VkInstance{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkInstance' doesn't take any arguments")}}VkInstance.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkInstance.byteLength=8;class VkPhysicalDevice{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkPhysicalDevice' doesn't take any arguments")}}VkPhysicalDevice.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkPhysicalDevice.byteLength=8;class VkDevice{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkDevice' doesn't take any arguments")}}VkDevice.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkDevice.byteLength=8;class VkQueue{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkQueue' doesn't take any arguments")}}VkQueue.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkQueue.byteLength=8;class VkCommandBuffer{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkCommandBuffer' doesn't take any arguments")}}VkCommandBuffer.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkCommandBuffer.byteLength=8;class VkDeviceMemory{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkDeviceMemory' doesn't take any arguments")}}VkDeviceMemory.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkDeviceMemory.byteLength=8;class VkCommandPool{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkCommandPool' doesn't take any arguments")}}VkCommandPool.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkCommandPool.byteLength=8;class VkBuffer{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkBuffer' doesn't take any arguments")}}VkBuffer.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkBuffer.byteLength=8;class VkBufferView{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkBufferView' doesn't take any arguments")}}VkBufferView.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkBufferView.byteLength=8;class VkImage{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkImage' doesn't take any arguments")}}VkImage.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkImage.byteLength=8;class VkImageView{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkImageView' doesn't take any arguments")}}VkImageView.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkImageView.byteLength=8;class VkShaderModule{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkShaderModule' doesn't take any arguments")}}VkShaderModule.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkShaderModule.byteLength=8;class VkPipeline{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkPipeline' doesn't take any arguments")}}VkPipeline.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkPipeline.byteLength=8;class VkPipelineLayout{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkPipelineLayout' doesn't take any arguments")}}VkPipelineLayout.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkPipelineLayout.byteLength=8;class VkSampler{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkSampler' doesn't take any arguments")}}VkSampler.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkSampler.byteLength=8;class VkDescriptorSet{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkDescriptorSet' doesn't take any arguments")}}VkDescriptorSet.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkDescriptorSet.byteLength=8;class VkDescriptorSetLayout{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkDescriptorSetLayout' doesn't take any arguments")}}VkDescriptorSetLayout.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkDescriptorSetLayout.byteLength=8;class VkDescriptorPool{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkDescriptorPool' doesn't take any arguments")}}VkDescriptorPool.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkDescriptorPool.byteLength=8;class VkFence{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkFence' doesn't take any arguments")}}VkFence.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkFence.byteLength=8;class VkSemaphore{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkSemaphore' doesn't take any arguments")}}VkSemaphore.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkSemaphore.byteLength=8;class VkEvent{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkEvent' doesn't take any arguments")}}VkEvent.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkEvent.byteLength=8;class VkQueryPool{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkQueryPool' doesn't take any arguments")}}VkQueryPool.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkQueryPool.byteLength=8;class VkFramebuffer{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkFramebuffer' doesn't take any arguments")}}VkFramebuffer.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkFramebuffer.byteLength=8;class VkRenderPass{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkRenderPass' doesn't take any arguments")}}VkRenderPass.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkRenderPass.byteLength=8;class VkPipelineCache{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkPipelineCache' doesn't take any arguments")}}VkPipelineCache.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkPipelineCache.byteLength=8;class VkObjectTableNVX{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkObjectTableNVX' doesn't take any arguments")}}VkObjectTableNVX.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkObjectTableNVX.byteLength=8;class VkIndirectCommandsLayoutNVX{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkIndirectCommandsLayoutNVX' doesn't take any arguments")}}VkIndirectCommandsLayoutNVX.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkIndirectCommandsLayoutNVX.byteLength=8;class VkDescriptorUpdateTemplate{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkDescriptorUpdateTemplate' doesn't take any arguments")}}VkDescriptorUpdateTemplate.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkDescriptorUpdateTemplate.byteLength=8;class VkSamplerYcbcrConversion{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkSamplerYcbcrConversion' doesn't take any arguments")}}VkSamplerYcbcrConversion.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkSamplerYcbcrConversion.byteLength=8;class VkValidationCacheEXT{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkValidationCacheEXT' doesn't take any arguments")}}VkValidationCacheEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkValidationCacheEXT.byteLength=8;class VkAccelerationStructureNV{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkAccelerationStructureNV' doesn't take any arguments")}}VkAccelerationStructureNV.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkAccelerationStructureNV.byteLength=8;class VkPerformanceConfigurationINTEL{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkPerformanceConfigurationINTEL' doesn't take any arguments")}}VkPerformanceConfigurationINTEL.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkPerformanceConfigurationINTEL.byteLength=8;class VkDisplayKHR{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkDisplayKHR' doesn't take any arguments")}}VkDisplayKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkDisplayKHR.byteLength=8;class VkDisplayModeKHR{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkDisplayModeKHR' doesn't take any arguments")}}VkDisplayModeKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkDisplayModeKHR.byteLength=8;class VkSurfaceKHR{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkSurfaceKHR' doesn't take any arguments")}}VkSurfaceKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkSurfaceKHR.byteLength=8;class VkSwapchainKHR{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkSwapchainKHR' doesn't take any arguments")}}VkSwapchainKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkSwapchainKHR.byteLength=8;class VkDebugReportCallbackEXT{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkDebugReportCallbackEXT' doesn't take any arguments")}}VkDebugReportCallbackEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkDebugReportCallbackEXT.byteLength=8;class VkDebugUtilsMessengerEXT{constructor(e){if(this.memoryBuffer=new ArrayBuffer(8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),"object"==typeof e)throw new Error("'VkDebugUtilsMessengerEXT' doesn't take any arguments")}}VkDebugUtilsMessengerEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s,0)},VkDebugUtilsMessengerEXT.byteLength=8;class VkBaseOutStructure{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+16)/8)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){null!==e?(e.flush(),this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress):null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}}VkBaseOutStructure.prototype.flush=function(){return!0},VkBaseOutStructure.prototype.reflect=function(e){},VkBaseOutStructure.byteLength=16,VkBaseOutStructure.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8}};class VkBaseInStructure{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+16)/8)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){null!==e?(e.flush(),this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress):null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}}VkBaseInStructure.prototype.flush=function(){return!0},VkBaseInStructure.prototype.reflect=function(e){},VkBaseInStructure.byteLength=16,VkBaseInStructure.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8}};class VkOffset2D{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.x&&(this.x=e.x),void 0!==e.y&&(this.y=e.y))}get x(){return this.memoryViewInt32[0]}set x(e){this.memoryViewInt32[0]=e}get y(){return this.memoryViewInt32[1]}set y(e){this.memoryViewInt32[1]=e}}VkOffset2D.prototype.flush=function(){return!0},VkOffset2D.prototype.reflect=function(e){},VkOffset2D.byteLength=8,VkOffset2D.memoryLayout={x:{byteOffset:0,byteLength:4},y:{byteOffset:4,byteLength:4}};class VkOffset3D{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4)):(this.memoryBuffer=new ArrayBuffer(12),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.x&&(this.x=e.x),void 0!==e.y&&(this.y=e.y),void 0!==e.z&&(this.z=e.z))}get x(){return this.memoryViewInt32[0]}set x(e){this.memoryViewInt32[0]=e}get y(){return this.memoryViewInt32[1]}set y(e){this.memoryViewInt32[1]=e}get z(){return this.memoryViewInt32[2]}set z(e){this.memoryViewInt32[2]=e}}VkOffset3D.prototype.flush=function(){return!0},VkOffset3D.prototype.reflect=function(e){},VkOffset3D.byteLength=12,VkOffset3D.memoryLayout={x:{byteOffset:0,byteLength:4},y:{byteOffset:4,byteLength:4},z:{byteOffset:8,byteLength:4}};class VkExtent2D{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.width&&(this.width=e.width),void 0!==e.height&&(this.height=e.height))}get width(){return this.memoryViewUint32[0]}set width(e){this.memoryViewUint32[0]=e}get height(){return this.memoryViewUint32[1]}set height(e){this.memoryViewUint32[1]=e}}VkExtent2D.prototype.flush=function(){return!0},VkExtent2D.prototype.reflect=function(e){},VkExtent2D.byteLength=8,VkExtent2D.memoryLayout={width:{byteOffset:0,byteLength:4},height:{byteOffset:4,byteLength:4}};class VkExtent3D{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4)):(this.memoryBuffer=new ArrayBuffer(12),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.width&&(this.width=e.width),void 0!==e.height&&(this.height=e.height),void 0!==e.depth&&(this.depth=e.depth))}get width(){return this.memoryViewUint32[0]}set width(e){this.memoryViewUint32[0]=e}get height(){return this.memoryViewUint32[1]}set height(e){this.memoryViewUint32[1]=e}get depth(){return this.memoryViewUint32[2]}set depth(e){this.memoryViewUint32[2]=e}}VkExtent3D.prototype.flush=function(){return!0},VkExtent3D.prototype.reflect=function(e){},VkExtent3D.byteLength=12,VkExtent3D.memoryLayout={width:{byteOffset:0,byteLength:4},height:{byteOffset:4,byteLength:4},depth:{byteOffset:8,byteLength:4}};class VkViewport{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.x&&(this.x=e.x),void 0!==e.y&&(this.y=e.y),void 0!==e.width&&(this.width=e.width),void 0!==e.height&&(this.height=e.height),void 0!==e.minDepth&&(this.minDepth=e.minDepth),void 0!==e.maxDepth&&(this.maxDepth=e.maxDepth))}get x(){return this.memoryViewFloat32[0]}set x(e){this.memoryViewFloat32[0]=e}get y(){return this.memoryViewFloat32[1]}set y(e){this.memoryViewFloat32[1]=e}get width(){return this.memoryViewFloat32[2]}set width(e){this.memoryViewFloat32[2]=e}get height(){return this.memoryViewFloat32[3]}set height(e){this.memoryViewFloat32[3]=e}get minDepth(){return this.memoryViewFloat32[4]}set minDepth(e){this.memoryViewFloat32[4]=e}get maxDepth(){return this.memoryViewFloat32[5]}set maxDepth(e){this.memoryViewFloat32[5]=e}}VkViewport.prototype.flush=function(){return!0},VkViewport.prototype.reflect=function(e){},VkViewport.byteLength=24,VkViewport.memoryLayout={x:{byteOffset:0,byteLength:4},y:{byteOffset:4,byteLength:4},width:{byteOffset:8,byteLength:4},height:{byteOffset:12,byteLength:4},minDepth:{byteOffset:16,byteLength:4},maxDepth:{byteOffset:20,byteLength:4}};class VkRect2D{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)),this._offset=new VkOffset2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0}),this._extent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+8}),"object"==typeof e&&(void 0!==e.offset&&(this.offset=e.offset),void 0!==e.extent&&(this.extent=e.extent))}get offset(){return this._offset}set offset(e){null!==e?(e.flush(),this._offset=e):null===e&&(this._offset=null)}get extent(){return this._extent}set extent(e){null!==e?(e.flush(),this._extent=e):null===e&&(this._extent=null)}}VkRect2D.prototype.flush=function(){if(null!==this._offset){let e=this._offset;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,0)}}if(null!==this._extent){let e=this._extent;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,8)}}return!0},VkRect2D.prototype.reflect=function(e){},VkRect2D.byteLength=16,VkRect2D.memoryLayout={offset:{byteOffset:0,byteLength:8},extent:{byteOffset:8,byteLength:8}};class VkClearRect{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._rect=new VkRect2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0}),"object"==typeof e&&(void 0!==e.rect&&(this.rect=e.rect),void 0!==e.baseArrayLayer&&(this.baseArrayLayer=e.baseArrayLayer),void 0!==e.layerCount&&(this.layerCount=e.layerCount))}get rect(){return this._rect}set rect(e){null!==e?(e.flush(),this._rect=e):null===e&&(this._rect=null)}get baseArrayLayer(){return this.memoryViewUint32[4]}set baseArrayLayer(e){this.memoryViewUint32[4]=e}get layerCount(){return this.memoryViewUint32[5]}set layerCount(e){this.memoryViewUint32[5]=e}}VkClearRect.prototype.flush=function(){if(null!==this._rect){let e=this._rect;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,0)}}return!0},VkClearRect.prototype.reflect=function(e){},VkClearRect.byteLength=24,VkClearRect.memoryLayout={rect:{byteOffset:0,byteLength:16},baseArrayLayer:{byteOffset:16,byteLength:4},layerCount:{byteOffset:20,byteLength:4}};class VkComponentMapping{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.r&&(this.r=e.r),void 0!==e.g&&(this.g=e.g),void 0!==e.b&&(this.b=e.b),void 0!==e.a&&(this.a=e.a))}get r(){return this.memoryViewInt32[0]}set r(e){this.memoryViewInt32[0]=e}get g(){return this.memoryViewInt32[1]}set g(e){this.memoryViewInt32[1]=e}get b(){return this.memoryViewInt32[2]}set b(e){this.memoryViewInt32[2]=e}get a(){return this.memoryViewInt32[3]}set a(e){this.memoryViewInt32[3]=e}}VkComponentMapping.prototype.flush=function(){return!0},VkComponentMapping.prototype.reflect=function(e){},VkComponentMapping.byteLength=16,VkComponentMapping.memoryLayout={r:{byteOffset:0,byteLength:4},g:{byteOffset:4,byteLength:4},b:{byteOffset:8,byteLength:4},a:{byteOffset:12,byteLength:4}};class VkPhysicalDeviceProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+824)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+824)/4),this.memoryViewUint8=new Uint8Array(this.memoryBuffer).subarray(e.$memoryOffset/1,(e.$memoryOffset+824)/1)):(this.memoryBuffer=new ArrayBuffer(824),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint8=new Uint8Array(this.memoryBuffer)),this._pipelineCacheUUID=[...Array(16)].fill(0),this._limits=new VkPhysicalDeviceLimits({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+296}),this._sparseProperties=new VkPhysicalDeviceSparseProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+800})}get apiVersion(){return this.memoryViewUint32[0]}get driverVersion(){return this.memoryViewUint32[1]}get vendorID(){return this.memoryViewUint32[2]}get deviceID(){return this.memoryViewUint32[3]}get deviceType(){return this.memoryViewInt32[4]}get deviceName(){return decodeNullTerminatedUTF8String(new Uint8Array(this.memoryBuffer).subarray(this.$memoryOffset+20,296))||null}get pipelineCacheUUID(){return[this.memoryViewUint8[276],this.memoryViewUint8[277],this.memoryViewUint8[278],this.memoryViewUint8[279],this.memoryViewUint8[280],this.memoryViewUint8[281],this.memoryViewUint8[282],this.memoryViewUint8[283],this.memoryViewUint8[284],this.memoryViewUint8[285],this.memoryViewUint8[286],this.memoryViewUint8[287],this.memoryViewUint8[288],this.memoryViewUint8[289],this.memoryViewUint8[290],this.memoryViewUint8[291]]}get limits(){return this._limits}get sparseProperties(){return this._sparseProperties}}VkPhysicalDeviceProperties.prototype.flush=function(){return!0},VkPhysicalDeviceProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(824)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,824),0)},VkPhysicalDeviceProperties.byteLength=824,VkPhysicalDeviceProperties.memoryLayout={apiVersion:{byteOffset:0,byteLength:4},driverVersion:{byteOffset:4,byteLength:4},vendorID:{byteOffset:8,byteLength:4},deviceID:{byteOffset:12,byteLength:4},deviceType:{byteOffset:16,byteLength:4},deviceName:{byteOffset:20,byteLength:256},pipelineCacheUUID:{byteOffset:276,byteLength:16},limits:{byteOffset:296,byteLength:504},sparseProperties:{byteOffset:800,byteLength:20}};class VkExtensionProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+260)/4)):(this.memoryBuffer=new ArrayBuffer(260),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer))}get extensionName(){return decodeNullTerminatedUTF8String(new Uint8Array(this.memoryBuffer).subarray(this.$memoryOffset+0,256))||null}get specVersion(){return this.memoryViewUint32[64]}}VkExtensionProperties.prototype.flush=function(){return!0},VkExtensionProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(260)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,260),0)},VkExtensionProperties.byteLength=260,VkExtensionProperties.memoryLayout={extensionName:{byteOffset:0,byteLength:256},specVersion:{byteOffset:256,byteLength:4}};class VkLayerProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+520)/4)):(this.memoryBuffer=new ArrayBuffer(520),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer))}get layerName(){return decodeNullTerminatedUTF8String(new Uint8Array(this.memoryBuffer).subarray(this.$memoryOffset+0,256))||null}get specVersion(){return this.memoryViewUint32[64]}get implementationVersion(){return this.memoryViewUint32[65]}get description(){return decodeNullTerminatedUTF8String(new Uint8Array(this.memoryBuffer).subarray(this.$memoryOffset+264,784))||null}}VkLayerProperties.prototype.flush=function(){return!0},VkLayerProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(520)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,520),0)},VkLayerProperties.byteLength=520,VkLayerProperties.memoryLayout={layerName:{byteOffset:0,byteLength:256},specVersion:{byteOffset:256,byteLength:4},implementationVersion:{byteOffset:260,byteLength:4},description:{byteOffset:264,byteLength:256}};class VkApplicationInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pApplicationName=null,this._pEngineName=null,this.sType=0,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.pApplicationName&&(this.pApplicationName=e.pApplicationName),void 0!==e.applicationVersion&&(this.applicationVersion=e.applicationVersion),void 0!==e.pEngineName&&(this.pEngineName=e.pEngineName),void 0!==e.engineVersion&&(this.engineVersion=e.engineVersion),void 0!==e.apiVersion&&(this.apiVersion=e.apiVersion))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkApplicationInfo.pNext' isn't allowed to be filled")}get pApplicationName(){if(null!==this._pApplicationName){let e=textDecoder.decode(this._pApplicationName);return e.substr(0,e.length-1)}return null}set pApplicationName(e){null!==e?(this._pApplicationName=textEncoder.encode(e+NULLT).buffer,this.memoryViewBigInt64[2]=getAddressFromArrayBuffer(this._pApplicationName)):null===e&&(this._pApplicationName=null,this.memoryViewBigInt64[2]=BI0)}get applicationVersion(){return this.memoryViewUint32[6]}set applicationVersion(e){this.memoryViewUint32[6]=e}get pEngineName(){if(null!==this._pEngineName){let e=textDecoder.decode(this._pEngineName);return e.substr(0,e.length-1)}return null}set pEngineName(e){null!==e?(this._pEngineName=textEncoder.encode(e+NULLT).buffer,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(this._pEngineName)):null===e&&(this._pEngineName=null,this.memoryViewBigInt64[4]=BI0)}get engineVersion(){return this.memoryViewUint32[10]}set engineVersion(e){this.memoryViewUint32[10]=e}get apiVersion(){return this.memoryViewUint32[11]}set apiVersion(e){this.memoryViewUint32[11]=e}}VkApplicationInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkApplicationInfo.prototype.reflect=function(e){},VkApplicationInfo.byteLength=48,VkApplicationInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},pApplicationName:{byteOffset:16,byteLength:8},applicationVersion:{byteOffset:24,byteLength:4},pEngineName:{byteOffset:32,byteLength:8},engineVersion:{byteOffset:40,byteLength:4},apiVersion:{byteOffset:44,byteLength:4}};class VkAllocationCallbacks{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pUserData=null,this._pfnAllocation=null,this._pfnReallocation=null,this._pfnFree=null,this._pfnInternalAllocation=null,this._pfnInternalFree=null,"object"==typeof e&&(void 0!==e.pUserData&&(this.pUserData=e.pUserData),void 0!==e.pfnAllocation&&(this.pfnAllocation=e.pfnAllocation),void 0!==e.pfnReallocation&&(this.pfnReallocation=e.pfnReallocation),void 0!==e.pfnFree&&(this.pfnFree=e.pfnFree),void 0!==e.pfnInternalAllocation&&(this.pfnInternalAllocation=e.pfnInternalAllocation),void 0!==e.pfnInternalFree&&(this.pfnInternalFree=e.pfnInternalFree))}get pUserData(){return this._pUserData}set pUserData(e){null!==e?(this._pUserData=e,this.memoryViewBigInt64[0]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pUserData=null,this.memoryViewBigInt64[0]=BI0)}get pfnAllocation(){return this._pfnAllocation}set pfnAllocation(e){null!==e?this._pfnAllocation=e:null===e&&(this._pfnAllocation=null)}get pfnReallocation(){return this._pfnReallocation}set pfnReallocation(e){null!==e?this._pfnReallocation=e:null===e&&(this._pfnReallocation=null)}get pfnFree(){return this._pfnFree}set pfnFree(e){null!==e?this._pfnFree=e:null===e&&(this._pfnFree=null)}get pfnInternalAllocation(){return this._pfnInternalAllocation}set pfnInternalAllocation(e){null!==e?this._pfnInternalAllocation=e:null===e&&(this._pfnInternalAllocation=null)}get pfnInternalFree(){return this._pfnInternalFree}set pfnInternalFree(e){null!==e?this._pfnInternalFree=e:null===e&&(this._pfnInternalFree=null)}}VkAllocationCallbacks.prototype.flush=function(){return!0},VkAllocationCallbacks.prototype.reflect=function(e){},VkAllocationCallbacks.byteLength=48,VkAllocationCallbacks.memoryLayout={pUserData:{byteOffset:0,byteLength:8},pfnAllocation:{byteOffset:8,byteLength:8},pfnReallocation:{byteOffset:16,byteLength:8},pfnFree:{byteOffset:24,byteLength:8},pfnInternalAllocation:{byteOffset:32,byteLength:8},pfnInternalFree:{byteOffset:40,byteLength:8}};class VkDeviceQueueCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pQueuePriorities=null,this.sType=2,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.queueFamilyIndex&&(this.queueFamilyIndex=e.queueFamilyIndex),void 0!==e.queueCount&&(this.queueCount=e.queueCount),void 0!==e.pQueuePriorities&&(this.pQueuePriorities=e.pQueuePriorities))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000174e3:break;default:throw new TypeError("Invalid type for 'VkDeviceQueueCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get queueFamilyIndex(){return this.memoryViewUint32[5]}set queueFamilyIndex(e){this.memoryViewUint32[5]=e}get queueCount(){return this.memoryViewUint32[6]}set queueCount(e){this.memoryViewUint32[6]=e}get pQueuePriorities(){return this._pQueuePriorities}set pQueuePriorities(e){null!==e?(this._pQueuePriorities=e,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pQueuePriorities=null,this.memoryViewBigInt64[4]=BI0)}}VkDeviceQueueCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceQueueCreateInfo.prototype.reflect=function(e){},VkDeviceQueueCreateInfo.byteLength=40,VkDeviceQueueCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},queueFamilyIndex:{byteOffset:20,byteLength:4},queueCount:{byteOffset:24,byteLength:4},pQueuePriorities:{byteOffset:32,byteLength:8}};class VkDeviceCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+72)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4)):(this.memoryBuffer=new ArrayBuffer(72),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pQueueCreateInfos=null,this._pQueueCreateInfosNative=null,this._ppEnabledLayerNames=null,this._ppEnabledLayerNamesNative=null,this._ppEnabledExtensionNames=null,this._ppEnabledExtensionNamesNative=null,this._pEnabledFeatures=null,this.sType=3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.queueCreateInfoCount&&(this.queueCreateInfoCount=e.queueCreateInfoCount),void 0!==e.pQueueCreateInfos&&(this.pQueueCreateInfos=e.pQueueCreateInfos),void 0!==e.enabledLayerCount&&(this.enabledLayerCount=e.enabledLayerCount),void 0!==e.ppEnabledLayerNames&&(this.ppEnabledLayerNames=e.ppEnabledLayerNames),void 0!==e.enabledExtensionCount&&(this.enabledExtensionCount=e.enabledExtensionCount),void 0!==e.ppEnabledExtensionNames&&(this.ppEnabledExtensionNames=e.ppEnabledExtensionNames),void 0!==e.pEnabledFeatures&&(this.pEnabledFeatures=e.pEnabledFeatures))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000059e3:case 100012e4:case 1000053001:case 1000070001:case 1000083e3:case 1000156004:case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:case 1000148e3:case 1000138e3:case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:case 1000082e3:case 1000261e3:case 1000161001:case 1000177e3:case 1000081001:case 1000211e3:case 100018e4:case 1000190002:case 1000067001:case 1000028e3:case 1000166e3:case 1000205002:case 100005e4:case 1000201e3:case 1000203e3:case 1000204e3:case 100024e4:case 1000164001:case 1000202e3:case 1000189e3:case 1000218e3:case 1000221e3:case 1000253e3:case 1000102e3:case 1000238e3:case 1000244e3:case 1000108e3:case 1000249e3:case 1000252e3:case 100025e4:case 1000209e3:case 1000154e3:case 1000251e3:case 1000276e3:case 1000281e3:break;default:throw new TypeError("Invalid type for 'VkDeviceCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get queueCreateInfoCount(){return this.memoryViewUint32[5]}set queueCreateInfoCount(e){this.memoryViewUint32[5]=e}get pQueueCreateInfos(){return this._pQueueCreateInfos}set pQueueCreateInfos(e){null!==e?this._pQueueCreateInfos=e:null===e&&(this._pQueueCreateInfos=null)}get enabledLayerCount(){return this.memoryViewUint32[8]}set enabledLayerCount(e){this.memoryViewUint32[8]=e}get ppEnabledLayerNames(){return this._ppEnabledLayerNames}set ppEnabledLayerNames(e){null!==e?this._ppEnabledLayerNames=e:null===e&&(this._ppEnabledLayerNames=null)}get enabledExtensionCount(){return this.memoryViewUint32[12]}set enabledExtensionCount(e){this.memoryViewUint32[12]=e}get ppEnabledExtensionNames(){return this._ppEnabledExtensionNames}set ppEnabledExtensionNames(e){null!==e?this._ppEnabledExtensionNames=e:null===e&&(this._ppEnabledExtensionNames=null)}get pEnabledFeatures(){return this._pEnabledFeatures}set pEnabledFeatures(e){null!==e?(e.flush(),this._pEnabledFeatures=e,this.memoryViewBigInt64[8]=e.memoryAddress):null===e&&(this._pEnabledFeatures=null,this.memoryViewBigInt64[8]=BI0)}}VkDeviceCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pQueueCreateInfos){let e=this._pQueueCreateInfos;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pQueueCreateInfosNative=t,this.memoryViewBigInt64[3]=t.address}if(null!==this._ppEnabledLayerNames){this._ppEnabledLayerNames;let e=new NativeStringArray(this._ppEnabledLayerNames);this._ppEnabledLayerNamesNative=e,this.memoryViewBigInt64[5]=e.address}else this.memoryViewBigInt64[5]=BI0;if(null!==this._ppEnabledExtensionNames){this._ppEnabledExtensionNames;let e=new NativeStringArray(this._ppEnabledExtensionNames);this._ppEnabledExtensionNamesNative=e,this.memoryViewBigInt64[7]=e.address}else this.memoryViewBigInt64[7]=BI0;return!0},VkDeviceCreateInfo.prototype.reflect=function(e){},VkDeviceCreateInfo.byteLength=72,VkDeviceCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},queueCreateInfoCount:{byteOffset:20,byteLength:4},pQueueCreateInfos:{byteOffset:24,byteLength:8},enabledLayerCount:{byteOffset:32,byteLength:4},ppEnabledLayerNames:{byteOffset:40,byteLength:8},enabledExtensionCount:{byteOffset:48,byteLength:4},ppEnabledExtensionNames:{byteOffset:56,byteLength:8},pEnabledFeatures:{byteOffset:64,byteLength:8}};class VkInstanceCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pApplicationInfo=null,this._ppEnabledLayerNames=null,this._ppEnabledLayerNamesNative=null,this._ppEnabledExtensionNames=null,this._ppEnabledExtensionNamesNative=null,this.sType=1,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.pApplicationInfo&&(this.pApplicationInfo=e.pApplicationInfo),void 0!==e.enabledLayerCount&&(this.enabledLayerCount=e.enabledLayerCount),void 0!==e.ppEnabledLayerNames&&(this.ppEnabledLayerNames=e.ppEnabledLayerNames),void 0!==e.enabledExtensionCount&&(this.enabledExtensionCount=e.enabledExtensionCount),void 0!==e.ppEnabledExtensionNames&&(this.ppEnabledExtensionNames=e.ppEnabledExtensionNames))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000011e3:case 1000061e3:case 1000247e3:case 1000128004:break;default:throw new TypeError("Invalid type for 'VkInstanceCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get pApplicationInfo(){return this._pApplicationInfo}set pApplicationInfo(e){null!==e?(e.flush(),this._pApplicationInfo=e,this.memoryViewBigInt64[3]=e.memoryAddress):null===e&&(this._pApplicationInfo=null,this.memoryViewBigInt64[3]=BI0)}get enabledLayerCount(){return this.memoryViewUint32[8]}set enabledLayerCount(e){this.memoryViewUint32[8]=e}get ppEnabledLayerNames(){return this._ppEnabledLayerNames}set ppEnabledLayerNames(e){null!==e?this._ppEnabledLayerNames=e:null===e&&(this._ppEnabledLayerNames=null)}get enabledExtensionCount(){return this.memoryViewUint32[12]}set enabledExtensionCount(e){this.memoryViewUint32[12]=e}get ppEnabledExtensionNames(){return this._ppEnabledExtensionNames}set ppEnabledExtensionNames(e){null!==e?this._ppEnabledExtensionNames=e:null===e&&(this._ppEnabledExtensionNames=null)}}VkInstanceCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._ppEnabledLayerNames){this._ppEnabledLayerNames;let e=new NativeStringArray(this._ppEnabledLayerNames);this._ppEnabledLayerNamesNative=e,this.memoryViewBigInt64[5]=e.address}else this.memoryViewBigInt64[5]=BI0;if(null!==this._ppEnabledExtensionNames){this._ppEnabledExtensionNames;let e=new NativeStringArray(this._ppEnabledExtensionNames);this._ppEnabledExtensionNamesNative=e,this.memoryViewBigInt64[7]=e.address}else this.memoryViewBigInt64[7]=BI0;return!0},VkInstanceCreateInfo.prototype.reflect=function(e){},VkInstanceCreateInfo.byteLength=64,VkInstanceCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},pApplicationInfo:{byteOffset:24,byteLength:8},enabledLayerCount:{byteOffset:32,byteLength:4},ppEnabledLayerNames:{byteOffset:40,byteLength:8},enabledExtensionCount:{byteOffset:48,byteLength:4},ppEnabledExtensionNames:{byteOffset:56,byteLength:8}};class VkQueueFamilyProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._minImageTransferGranularity=new VkExtent3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+12})}get queueFlags(){return this.memoryViewInt32[0]}get queueCount(){return this.memoryViewUint32[1]}get timestampValidBits(){return this.memoryViewUint32[2]}get minImageTransferGranularity(){return this._minImageTransferGranularity}}VkQueueFamilyProperties.prototype.flush=function(){return!0},VkQueueFamilyProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkQueueFamilyProperties.byteLength=24,VkQueueFamilyProperties.memoryLayout={queueFlags:{byteOffset:0,byteLength:4},queueCount:{byteOffset:4,byteLength:4},timestampValidBits:{byteOffset:8,byteLength:4},minImageTransferGranularity:{byteOffset:12,byteLength:12}};class VkPhysicalDeviceMemoryProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+520)/4)):(this.memoryBuffer=new ArrayBuffer(520),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._memoryTypes=[...Array(32)].map((e,t)=>new VkMemoryType({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+4+8*t})),this._memoryHeaps=[...Array(16)].map((e,t)=>new VkMemoryHeap({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+264+16*t}))}get memoryTypeCount(){return this.memoryViewUint32[0]}get memoryTypes(){return this._memoryTypes}get memoryHeapCount(){return this.memoryViewUint32[65]}get memoryHeaps(){return this._memoryHeaps}}VkPhysicalDeviceMemoryProperties.prototype.flush=function(){return!0},VkPhysicalDeviceMemoryProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(520)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,520),0)},VkPhysicalDeviceMemoryProperties.byteLength=520,VkPhysicalDeviceMemoryProperties.memoryLayout={memoryTypeCount:{byteOffset:0,byteLength:4},memoryTypes:{byteOffset:4,byteLength:256},memoryHeapCount:{byteOffset:260,byteLength:4},memoryHeaps:{byteOffset:264,byteLength:256}};class VkMemoryAllocateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=5,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.allocationSize&&(this.allocationSize=e.allocationSize),void 0!==e.memoryTypeIndex&&(this.memoryTypeIndex=e.memoryTypeIndex))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000026002:case 1000056001:case 1000057e3:case 1000057001:case 1000072002:case 1000073e3:case 1000073001:case 1000074e3:case 100006e4:case 1000127001:case 1000178e3:case 1000129003:case 1000238001:break;default:throw new TypeError("Invalid type for 'VkMemoryAllocateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get allocationSize(){return this.memoryViewBigUint64[2]}set allocationSize(e){this.memoryViewBigUint64[2]=BigInt(e)}get memoryTypeIndex(){return this.memoryViewUint32[6]}set memoryTypeIndex(e){this.memoryViewUint32[6]=e}}VkMemoryAllocateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryAllocateInfo.prototype.reflect=function(e){},VkMemoryAllocateInfo.byteLength=32,VkMemoryAllocateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},allocationSize:{byteOffset:16,byteLength:8},memoryTypeIndex:{byteOffset:24,byteLength:4}};class VkMemoryRequirements{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer))}get size(){return this.memoryViewBigUint64[0]}get alignment(){return this.memoryViewBigUint64[1]}get memoryTypeBits(){return this.memoryViewUint32[4]}}VkMemoryRequirements.prototype.flush=function(){return!0},VkMemoryRequirements.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkMemoryRequirements.byteLength=24,VkMemoryRequirements.memoryLayout={size:{byteOffset:0,byteLength:8},alignment:{byteOffset:8,byteLength:8},memoryTypeBits:{byteOffset:16,byteLength:4}};class VkSparseImageFormatProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+20)/4)):(this.memoryBuffer=new ArrayBuffer(20),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),this._imageGranularity=new VkExtent3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+4})}get aspectMask(){return this.memoryViewInt32[0]}get imageGranularity(){return this._imageGranularity}get flags(){return this.memoryViewInt32[4]}}VkSparseImageFormatProperties.prototype.flush=function(){return!0},VkSparseImageFormatProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(20)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,20),0)},VkSparseImageFormatProperties.byteLength=20,VkSparseImageFormatProperties.memoryLayout={aspectMask:{byteOffset:0,byteLength:4},imageGranularity:{byteOffset:4,byteLength:12},flags:{byteOffset:16,byteLength:4}};class VkSparseImageMemoryRequirements{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._formatProperties=new VkSparseImageFormatProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0})}get formatProperties(){return this._formatProperties}get imageMipTailFirstLod(){return this.memoryViewUint32[5]}get imageMipTailSize(){return this.memoryViewBigUint64[3]}get imageMipTailOffset(){return this.memoryViewBigUint64[4]}get imageMipTailStride(){return this.memoryViewBigUint64[5]}}VkSparseImageMemoryRequirements.prototype.flush=function(){return!0},VkSparseImageMemoryRequirements.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(48)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,48),0)},VkSparseImageMemoryRequirements.byteLength=48,VkSparseImageMemoryRequirements.memoryLayout={formatProperties:{byteOffset:0,byteLength:20},imageMipTailFirstLod:{byteOffset:20,byteLength:4},imageMipTailSize:{byteOffset:24,byteLength:8},imageMipTailOffset:{byteOffset:32,byteLength:8},imageMipTailStride:{byteOffset:40,byteLength:8}};class VkMemoryType{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer))}get propertyFlags(){return this.memoryViewInt32[0]}get heapIndex(){return this.memoryViewUint32[1]}}VkMemoryType.prototype.flush=function(){return!0},VkMemoryType.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,8),0)},VkMemoryType.byteLength=8,VkMemoryType.memoryLayout={propertyFlags:{byteOffset:0,byteLength:4},heapIndex:{byteOffset:4,byteLength:4}};class VkMemoryHeap{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+16)/8),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer))}get size(){return this.memoryViewBigUint64[0]}get flags(){return this.memoryViewInt32[2]}}VkMemoryHeap.prototype.flush=function(){return!0},VkMemoryHeap.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(16)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,16),0)},VkMemoryHeap.byteLength=16,VkMemoryHeap.memoryLayout={size:{byteOffset:0,byteLength:8},flags:{byteOffset:8,byteLength:4}};class VkMappedMemoryRange{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._memory=null,this.sType=6,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.memory&&(this.memory=e.memory),void 0!==e.offset&&(this.offset=e.offset),void 0!==e.size&&(this.size=e.size))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMappedMemoryRange.pNext' isn't allowed to be filled")}get memory(){return this._memory}set memory(e){null!==e?(this._memory=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._memory=null,this.memoryViewBigInt64[2]=BI0)}get offset(){return this.memoryViewBigUint64[3]}set offset(e){this.memoryViewBigUint64[3]=BigInt(e)}get size(){return this.memoryViewBigUint64[4]}set size(e){this.memoryViewBigUint64[4]=BigInt(e)}}VkMappedMemoryRange.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMappedMemoryRange.prototype.reflect=function(e){},VkMappedMemoryRange.byteLength=40,VkMappedMemoryRange.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},memory:{byteOffset:16,byteLength:8},offset:{byteOffset:24,byteLength:8},size:{byteOffset:32,byteLength:8}};class VkFormatProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4)):(this.memoryBuffer=new ArrayBuffer(12),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer))}get linearTilingFeatures(){return this.memoryViewInt32[0]}get optimalTilingFeatures(){return this.memoryViewInt32[1]}get bufferFeatures(){return this.memoryViewInt32[2]}}VkFormatProperties.prototype.flush=function(){return!0},VkFormatProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(12)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,12),0)},VkFormatProperties.byteLength=12,VkFormatProperties.memoryLayout={linearTilingFeatures:{byteOffset:0,byteLength:4},optimalTilingFeatures:{byteOffset:4,byteLength:4},bufferFeatures:{byteOffset:8,byteLength:4}};class VkImageFormatProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._maxExtent=new VkExtent3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0})}get maxExtent(){return this._maxExtent}get maxMipLevels(){return this.memoryViewUint32[3]}get maxArrayLayers(){return this.memoryViewUint32[4]}get sampleCounts(){return this.memoryViewInt32[5]}get maxResourceSize(){return this.memoryViewBigUint64[3]}}VkImageFormatProperties.prototype.flush=function(){return!0},VkImageFormatProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkImageFormatProperties.byteLength=32,VkImageFormatProperties.memoryLayout={maxExtent:{byteOffset:0,byteLength:12},maxMipLevels:{byteOffset:12,byteLength:4},maxArrayLayers:{byteOffset:16,byteLength:4},sampleCounts:{byteOffset:20,byteLength:4},maxResourceSize:{byteOffset:24,byteLength:8}};class VkDescriptorBufferInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._buffer=null,"object"==typeof e&&(void 0!==e.buffer&&(this.buffer=e.buffer),void 0!==e.offset&&(this.offset=e.offset),void 0!==e.range&&(this.range=e.range))}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[0]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[0]=BI0)}get offset(){return this.memoryViewBigUint64[1]}set offset(e){this.memoryViewBigUint64[1]=BigInt(e)}get range(){return this.memoryViewBigUint64[2]}set range(e){this.memoryViewBigUint64[2]=BigInt(e)}}VkDescriptorBufferInfo.prototype.flush=function(){return!0},VkDescriptorBufferInfo.prototype.reflect=function(e){},VkDescriptorBufferInfo.byteLength=24,VkDescriptorBufferInfo.memoryLayout={buffer:{byteOffset:0,byteLength:8},offset:{byteOffset:8,byteLength:8},range:{byteOffset:16,byteLength:8}};class VkDescriptorImageInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),this._sampler=null,this._imageView=null,"object"==typeof e&&(void 0!==e.sampler&&(this.sampler=e.sampler),void 0!==e.imageView&&(this.imageView=e.imageView),void 0!==e.imageLayout&&(this.imageLayout=e.imageLayout))}get sampler(){return this._sampler}set sampler(e){null!==e?(this._sampler=e,this.memoryViewBigInt64[0]=e.memoryViewBigInt64[0]):null===e&&(this._sampler=null,this.memoryViewBigInt64[0]=BI0)}get imageView(){return this._imageView}set imageView(e){null!==e?(this._imageView=e,this.memoryViewBigInt64[1]=e.memoryViewBigInt64[0]):null===e&&(this._imageView=null,this.memoryViewBigInt64[1]=BI0)}get imageLayout(){return this.memoryViewInt32[4]}set imageLayout(e){this.memoryViewInt32[4]=e}}VkDescriptorImageInfo.prototype.flush=function(){return!0},VkDescriptorImageInfo.prototype.reflect=function(e){},VkDescriptorImageInfo.byteLength=24,VkDescriptorImageInfo.memoryLayout={sampler:{byteOffset:0,byteLength:8},imageView:{byteOffset:8,byteLength:8},imageLayout:{byteOffset:16,byteLength:4}};class VkWriteDescriptorSet{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._dstSet=null,this._pImageInfo=null,this._pImageInfoNative=null,this._pBufferInfo=null,this._pBufferInfoNative=null,this._pTexelBufferView=null,this._pTexelBufferViewNative=null,this.sType=35,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.dstSet&&(this.dstSet=e.dstSet),void 0!==e.dstBinding&&(this.dstBinding=e.dstBinding),void 0!==e.dstArrayElement&&(this.dstArrayElement=e.dstArrayElement),void 0!==e.descriptorCount&&(this.descriptorCount=e.descriptorCount),void 0!==e.descriptorType&&(this.descriptorType=e.descriptorType),void 0!==e.pImageInfo&&(this.pImageInfo=e.pImageInfo),void 0!==e.pBufferInfo&&(this.pBufferInfo=e.pBufferInfo),void 0!==e.pTexelBufferView&&(this.pTexelBufferView=e.pTexelBufferView))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000138002:case 1000165007:break;default:throw new TypeError("Invalid type for 'VkWriteDescriptorSet.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get dstSet(){return this._dstSet}set dstSet(e){null!==e?(this._dstSet=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._dstSet=null,this.memoryViewBigInt64[2]=BI0)}get dstBinding(){return this.memoryViewUint32[6]}set dstBinding(e){this.memoryViewUint32[6]=e}get dstArrayElement(){return this.memoryViewUint32[7]}set dstArrayElement(e){this.memoryViewUint32[7]=e}get descriptorCount(){return this.memoryViewUint32[8]}set descriptorCount(e){this.memoryViewUint32[8]=e}get descriptorType(){return this.memoryViewInt32[9]}set descriptorType(e){this.memoryViewInt32[9]=e}get pImageInfo(){return this._pImageInfo}set pImageInfo(e){null!==e?this._pImageInfo=e:null===e&&(this._pImageInfo=null)}get pBufferInfo(){return this._pBufferInfo}set pBufferInfo(e){null!==e?this._pBufferInfo=e:null===e&&(this._pBufferInfo=null)}get pTexelBufferView(){return this._pTexelBufferView}set pTexelBufferView(e){null!==e?this._pTexelBufferView=e:null===e&&(this._pTexelBufferView=null)}}VkWriteDescriptorSet.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pImageInfo){let e=this._pImageInfo;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pImageInfoNative=t,this.memoryViewBigInt64[5]=t.address}if(null!==this._pBufferInfo){let e=this._pBufferInfo;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pBufferInfoNative=t,this.memoryViewBigInt64[6]=t.address}if(null!==this._pTexelBufferView){let e=this._pTexelBufferView;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pTexelBufferViewNative=t,this.memoryViewBigInt64[7]=t.address}return!0},VkWriteDescriptorSet.prototype.reflect=function(e){},VkWriteDescriptorSet.byteLength=64,VkWriteDescriptorSet.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},dstSet:{byteOffset:16,byteLength:8},dstBinding:{byteOffset:24,byteLength:4},dstArrayElement:{byteOffset:28,byteLength:4},descriptorCount:{byteOffset:32,byteLength:4},descriptorType:{byteOffset:36,byteLength:4},pImageInfo:{byteOffset:40,byteLength:8},pBufferInfo:{byteOffset:48,byteLength:8},pTexelBufferView:{byteOffset:56,byteLength:8}};class VkCopyDescriptorSet{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._srcSet=null,this._dstSet=null,this.sType=36,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.srcSet&&(this.srcSet=e.srcSet),void 0!==e.srcBinding&&(this.srcBinding=e.srcBinding),void 0!==e.srcArrayElement&&(this.srcArrayElement=e.srcArrayElement),void 0!==e.dstSet&&(this.dstSet=e.dstSet),void 0!==e.dstBinding&&(this.dstBinding=e.dstBinding),void 0!==e.dstArrayElement&&(this.dstArrayElement=e.dstArrayElement),void 0!==e.descriptorCount&&(this.descriptorCount=e.descriptorCount))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkCopyDescriptorSet.pNext' isn't allowed to be filled")}get srcSet(){return this._srcSet}set srcSet(e){null!==e?(this._srcSet=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._srcSet=null,this.memoryViewBigInt64[2]=BI0)}get srcBinding(){return this.memoryViewUint32[6]}set srcBinding(e){this.memoryViewUint32[6]=e}get srcArrayElement(){return this.memoryViewUint32[7]}set srcArrayElement(e){this.memoryViewUint32[7]=e}get dstSet(){return this._dstSet}set dstSet(e){null!==e?(this._dstSet=e,this.memoryViewBigInt64[4]=e.memoryViewBigInt64[0]):null===e&&(this._dstSet=null,this.memoryViewBigInt64[4]=BI0)}get dstBinding(){return this.memoryViewUint32[10]}set dstBinding(e){this.memoryViewUint32[10]=e}get dstArrayElement(){return this.memoryViewUint32[11]}set dstArrayElement(e){this.memoryViewUint32[11]=e}get descriptorCount(){return this.memoryViewUint32[12]}set descriptorCount(e){this.memoryViewUint32[12]=e}}VkCopyDescriptorSet.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkCopyDescriptorSet.prototype.reflect=function(e){},VkCopyDescriptorSet.byteLength=56,VkCopyDescriptorSet.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},srcSet:{byteOffset:16,byteLength:8},srcBinding:{byteOffset:24,byteLength:4},srcArrayElement:{byteOffset:28,byteLength:4},dstSet:{byteOffset:32,byteLength:8},dstBinding:{byteOffset:40,byteLength:4},dstArrayElement:{byteOffset:44,byteLength:4},descriptorCount:{byteOffset:48,byteLength:4}};class VkBufferCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pQueueFamilyIndices=null,this.sType=12,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.size&&(this.size=e.size),void 0!==e.usage&&(this.usage=e.usage),void 0!==e.sharingMode&&(this.sharingMode=e.sharingMode),void 0!==e.queueFamilyIndexCount&&(this.queueFamilyIndexCount=e.queueFamilyIndexCount),void 0!==e.pQueueFamilyIndices&&(this.pQueueFamilyIndices=e.pQueueFamilyIndices))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000026001:case 1000072e3:case 1000244002:break;default:throw new TypeError("Invalid type for 'VkBufferCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get size(){return this.memoryViewBigUint64[3]}set size(e){this.memoryViewBigUint64[3]=BigInt(e)}get usage(){return this.memoryViewInt32[8]}set usage(e){this.memoryViewInt32[8]=e}get sharingMode(){return this.memoryViewInt32[9]}set sharingMode(e){this.memoryViewInt32[9]=e}get queueFamilyIndexCount(){return this.memoryViewUint32[10]}set queueFamilyIndexCount(e){this.memoryViewUint32[10]=e}get pQueueFamilyIndices(){return this._pQueueFamilyIndices}set pQueueFamilyIndices(e){null!==e?(this._pQueueFamilyIndices=e,this.memoryViewBigInt64[6]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pQueueFamilyIndices=null,this.memoryViewBigInt64[6]=BI0)}}VkBufferCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBufferCreateInfo.prototype.reflect=function(e){},VkBufferCreateInfo.byteLength=56,VkBufferCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},size:{byteOffset:24,byteLength:8},usage:{byteOffset:32,byteLength:4},sharingMode:{byteOffset:36,byteLength:4},queueFamilyIndexCount:{byteOffset:40,byteLength:4},pQueueFamilyIndices:{byteOffset:48,byteLength:8}};class VkBufferViewCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._buffer=null,this.sType=13,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.buffer&&(this.buffer=e.buffer),void 0!==e.format&&(this.format=e.format),void 0!==e.offset&&(this.offset=e.offset),void 0!==e.range&&(this.range=e.range))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBufferViewCreateInfo.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[3]=BI0)}get format(){return this.memoryViewInt32[8]}set format(e){this.memoryViewInt32[8]=e}get offset(){return this.memoryViewBigUint64[5]}set offset(e){this.memoryViewBigUint64[5]=BigInt(e)}get range(){return this.memoryViewBigUint64[6]}set range(e){this.memoryViewBigUint64[6]=BigInt(e)}}VkBufferViewCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBufferViewCreateInfo.prototype.reflect=function(e){},VkBufferViewCreateInfo.byteLength=56,VkBufferViewCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},buffer:{byteOffset:24,byteLength:8},format:{byteOffset:32,byteLength:4},offset:{byteOffset:40,byteLength:8},range:{byteOffset:48,byteLength:8}};class VkImageSubresource{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4)):(this.memoryBuffer=new ArrayBuffer(12),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.aspectMask&&(this.aspectMask=e.aspectMask),void 0!==e.mipLevel&&(this.mipLevel=e.mipLevel),void 0!==e.arrayLayer&&(this.arrayLayer=e.arrayLayer))}get aspectMask(){return this.memoryViewInt32[0]}set aspectMask(e){this.memoryViewInt32[0]=e}get mipLevel(){return this.memoryViewUint32[1]}set mipLevel(e){this.memoryViewUint32[1]=e}get arrayLayer(){return this.memoryViewUint32[2]}set arrayLayer(e){this.memoryViewUint32[2]=e}}VkImageSubresource.prototype.flush=function(){return!0},VkImageSubresource.prototype.reflect=function(e){},VkImageSubresource.byteLength=12,VkImageSubresource.memoryLayout={aspectMask:{byteOffset:0,byteLength:4},mipLevel:{byteOffset:4,byteLength:4},arrayLayer:{byteOffset:8,byteLength:4}};class VkImageSubresourceLayers{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.aspectMask&&(this.aspectMask=e.aspectMask),void 0!==e.mipLevel&&(this.mipLevel=e.mipLevel),void 0!==e.baseArrayLayer&&(this.baseArrayLayer=e.baseArrayLayer),void 0!==e.layerCount&&(this.layerCount=e.layerCount))}get aspectMask(){return this.memoryViewInt32[0]}set aspectMask(e){this.memoryViewInt32[0]=e}get mipLevel(){return this.memoryViewUint32[1]}set mipLevel(e){this.memoryViewUint32[1]=e}get baseArrayLayer(){return this.memoryViewUint32[2]}set baseArrayLayer(e){this.memoryViewUint32[2]=e}get layerCount(){return this.memoryViewUint32[3]}set layerCount(e){this.memoryViewUint32[3]=e}}VkImageSubresourceLayers.prototype.flush=function(){return!0},VkImageSubresourceLayers.prototype.reflect=function(e){},VkImageSubresourceLayers.byteLength=16,VkImageSubresourceLayers.memoryLayout={aspectMask:{byteOffset:0,byteLength:4},mipLevel:{byteOffset:4,byteLength:4},baseArrayLayer:{byteOffset:8,byteLength:4},layerCount:{byteOffset:12,byteLength:4}};class VkImageSubresourceRange{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+20)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+20)/4)):(this.memoryBuffer=new ArrayBuffer(20),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.aspectMask&&(this.aspectMask=e.aspectMask),void 0!==e.baseMipLevel&&(this.baseMipLevel=e.baseMipLevel),void 0!==e.levelCount&&(this.levelCount=e.levelCount),void 0!==e.baseArrayLayer&&(this.baseArrayLayer=e.baseArrayLayer),void 0!==e.layerCount&&(this.layerCount=e.layerCount))}get aspectMask(){return this.memoryViewInt32[0]}set aspectMask(e){this.memoryViewInt32[0]=e}get baseMipLevel(){return this.memoryViewUint32[1]}set baseMipLevel(e){this.memoryViewUint32[1]=e}get levelCount(){return this.memoryViewUint32[2]}set levelCount(e){this.memoryViewUint32[2]=e}get baseArrayLayer(){return this.memoryViewUint32[3]}set baseArrayLayer(e){this.memoryViewUint32[3]=e}get layerCount(){return this.memoryViewUint32[4]}set layerCount(e){this.memoryViewUint32[4]=e}}VkImageSubresourceRange.prototype.flush=function(){return!0},VkImageSubresourceRange.prototype.reflect=function(e){},VkImageSubresourceRange.byteLength=20,VkImageSubresourceRange.memoryLayout={aspectMask:{byteOffset:0,byteLength:4},baseMipLevel:{byteOffset:4,byteLength:4},levelCount:{byteOffset:8,byteLength:4},baseArrayLayer:{byteOffset:12,byteLength:4},layerCount:{byteOffset:16,byteLength:4}};class VkMemoryBarrier{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=46,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.srcAccessMask&&(this.srcAccessMask=e.srcAccessMask),void 0!==e.dstAccessMask&&(this.dstAccessMask=e.dstAccessMask))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMemoryBarrier.pNext' isn't allowed to be filled")}get srcAccessMask(){return this.memoryViewInt32[4]}set srcAccessMask(e){this.memoryViewInt32[4]=e}get dstAccessMask(){return this.memoryViewInt32[5]}set dstAccessMask(e){this.memoryViewInt32[5]=e}}VkMemoryBarrier.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryBarrier.prototype.reflect=function(e){},VkMemoryBarrier.byteLength=24,VkMemoryBarrier.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},srcAccessMask:{byteOffset:16,byteLength:4},dstAccessMask:{byteOffset:20,byteLength:4}};class VkBufferMemoryBarrier{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._buffer=null,this.sType=44,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.srcAccessMask&&(this.srcAccessMask=e.srcAccessMask),void 0!==e.dstAccessMask&&(this.dstAccessMask=e.dstAccessMask),void 0!==e.srcQueueFamilyIndex&&(this.srcQueueFamilyIndex=e.srcQueueFamilyIndex),void 0!==e.dstQueueFamilyIndex&&(this.dstQueueFamilyIndex=e.dstQueueFamilyIndex),void 0!==e.buffer&&(this.buffer=e.buffer),void 0!==e.offset&&(this.offset=e.offset),void 0!==e.size&&(this.size=e.size))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBufferMemoryBarrier.pNext' isn't allowed to be filled")}get srcAccessMask(){return this.memoryViewInt32[4]}set srcAccessMask(e){this.memoryViewInt32[4]=e}get dstAccessMask(){return this.memoryViewInt32[5]}set dstAccessMask(e){this.memoryViewInt32[5]=e}get srcQueueFamilyIndex(){return this.memoryViewUint32[6]}set srcQueueFamilyIndex(e){this.memoryViewUint32[6]=e}get dstQueueFamilyIndex(){return this.memoryViewUint32[7]}set dstQueueFamilyIndex(e){this.memoryViewUint32[7]=e}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[4]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[4]=BI0)}get offset(){return this.memoryViewBigUint64[5]}set offset(e){this.memoryViewBigUint64[5]=BigInt(e)}get size(){return this.memoryViewBigUint64[6]}set size(e){this.memoryViewBigUint64[6]=BigInt(e)}}VkBufferMemoryBarrier.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBufferMemoryBarrier.prototype.reflect=function(e){},VkBufferMemoryBarrier.byteLength=56,VkBufferMemoryBarrier.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},srcAccessMask:{byteOffset:16,byteLength:4},dstAccessMask:{byteOffset:20,byteLength:4},srcQueueFamilyIndex:{byteOffset:24,byteLength:4},dstQueueFamilyIndex:{byteOffset:28,byteLength:4},buffer:{byteOffset:32,byteLength:8},offset:{byteOffset:40,byteLength:8},size:{byteOffset:48,byteLength:8}};class VkImageMemoryBarrier{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+72)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4)):(this.memoryBuffer=new ArrayBuffer(72),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._image=null,this._subresourceRange=new VkImageSubresourceRange({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+48}),this.sType=45,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.srcAccessMask&&(this.srcAccessMask=e.srcAccessMask),void 0!==e.dstAccessMask&&(this.dstAccessMask=e.dstAccessMask),void 0!==e.oldLayout&&(this.oldLayout=e.oldLayout),void 0!==e.newLayout&&(this.newLayout=e.newLayout),void 0!==e.srcQueueFamilyIndex&&(this.srcQueueFamilyIndex=e.srcQueueFamilyIndex),void 0!==e.dstQueueFamilyIndex&&(this.dstQueueFamilyIndex=e.dstQueueFamilyIndex),void 0!==e.image&&(this.image=e.image),void 0!==e.subresourceRange&&(this.subresourceRange=e.subresourceRange))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000143e3:break;default:throw new TypeError("Invalid type for 'VkImageMemoryBarrier.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get srcAccessMask(){return this.memoryViewInt32[4]}set srcAccessMask(e){this.memoryViewInt32[4]=e}get dstAccessMask(){return this.memoryViewInt32[5]}set dstAccessMask(e){this.memoryViewInt32[5]=e}get oldLayout(){return this.memoryViewInt32[6]}set oldLayout(e){this.memoryViewInt32[6]=e}get newLayout(){return this.memoryViewInt32[7]}set newLayout(e){this.memoryViewInt32[7]=e}get srcQueueFamilyIndex(){return this.memoryViewUint32[8]}set srcQueueFamilyIndex(e){this.memoryViewUint32[8]=e}get dstQueueFamilyIndex(){return this.memoryViewUint32[9]}set dstQueueFamilyIndex(e){this.memoryViewUint32[9]=e}get image(){return this._image}set image(e){null!==e?(this._image=e,this.memoryViewBigInt64[5]=e.memoryViewBigInt64[0]):null===e&&(this._image=null,this.memoryViewBigInt64[5]=BI0)}get subresourceRange(){return this._subresourceRange}set subresourceRange(e){null!==e?(e.flush(),this._subresourceRange=e):null===e&&(this._subresourceRange=null)}}VkImageMemoryBarrier.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._subresourceRange){let e=this._subresourceRange;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+20);new Uint8Array(this.memoryBuffer).set(t,48)}}return!0},VkImageMemoryBarrier.prototype.reflect=function(e){},VkImageMemoryBarrier.byteLength=72,VkImageMemoryBarrier.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},srcAccessMask:{byteOffset:16,byteLength:4},dstAccessMask:{byteOffset:20,byteLength:4},oldLayout:{byteOffset:24,byteLength:4},newLayout:{byteOffset:28,byteLength:4},srcQueueFamilyIndex:{byteOffset:32,byteLength:4},dstQueueFamilyIndex:{byteOffset:36,byteLength:4},image:{byteOffset:40,byteLength:8},subresourceRange:{byteOffset:48,byteLength:20}};class VkImageCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+88)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+88)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+88)/4)):(this.memoryBuffer=new ArrayBuffer(88),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._extent=new VkExtent3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+28}),this._pQueueFamilyIndices=null,this.sType=14,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.imageType&&(this.imageType=e.imageType),void 0!==e.format&&(this.format=e.format),void 0!==e.extent&&(this.extent=e.extent),void 0!==e.mipLevels&&(this.mipLevels=e.mipLevels),void 0!==e.arrayLayers&&(this.arrayLayers=e.arrayLayers),void 0!==e.samples&&(this.samples=e.samples),void 0!==e.tiling&&(this.tiling=e.tiling),void 0!==e.usage&&(this.usage=e.usage),void 0!==e.sharingMode&&(this.sharingMode=e.sharingMode),void 0!==e.queueFamilyIndexCount&&(this.queueFamilyIndexCount=e.queueFamilyIndexCount),void 0!==e.pQueueFamilyIndices&&(this.pQueueFamilyIndices=e.pQueueFamilyIndices),void 0!==e.initialLayout&&(this.initialLayout=e.initialLayout))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000026e3:case 1000056e3:case 1000072001:case 1000060008:case 1000147e3:case 1000129005:case 1000158003:case 1000158004:case 1000246e3:break;default:throw new TypeError("Invalid type for 'VkImageCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get imageType(){return this.memoryViewInt32[5]}set imageType(e){this.memoryViewInt32[5]=e}get format(){return this.memoryViewInt32[6]}set format(e){this.memoryViewInt32[6]=e}get extent(){return this._extent}set extent(e){null!==e?(e.flush(),this._extent=e):null===e&&(this._extent=null)}get mipLevels(){return this.memoryViewUint32[10]}set mipLevels(e){this.memoryViewUint32[10]=e}get arrayLayers(){return this.memoryViewUint32[11]}set arrayLayers(e){this.memoryViewUint32[11]=e}get samples(){return this.memoryViewInt32[12]}set samples(e){this.memoryViewInt32[12]=e}get tiling(){return this.memoryViewInt32[13]}set tiling(e){this.memoryViewInt32[13]=e}get usage(){return this.memoryViewInt32[14]}set usage(e){this.memoryViewInt32[14]=e}get sharingMode(){return this.memoryViewInt32[15]}set sharingMode(e){this.memoryViewInt32[15]=e}get queueFamilyIndexCount(){return this.memoryViewUint32[16]}set queueFamilyIndexCount(e){this.memoryViewUint32[16]=e}get pQueueFamilyIndices(){return this._pQueueFamilyIndices}set pQueueFamilyIndices(e){null!==e?(this._pQueueFamilyIndices=e,this.memoryViewBigInt64[9]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pQueueFamilyIndices=null,this.memoryViewBigInt64[9]=BI0)}get initialLayout(){return this.memoryViewInt32[20]}set initialLayout(e){this.memoryViewInt32[20]=e}}VkImageCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._extent){let e=this._extent;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+12);new Uint8Array(this.memoryBuffer).set(t,28)}}return!0},VkImageCreateInfo.prototype.reflect=function(e){},VkImageCreateInfo.byteLength=88,VkImageCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},imageType:{byteOffset:20,byteLength:4},format:{byteOffset:24,byteLength:4},extent:{byteOffset:28,byteLength:12},mipLevels:{byteOffset:40,byteLength:4},arrayLayers:{byteOffset:44,byteLength:4},samples:{byteOffset:48,byteLength:4},tiling:{byteOffset:52,byteLength:4},usage:{byteOffset:56,byteLength:4},sharingMode:{byteOffset:60,byteLength:4},queueFamilyIndexCount:{byteOffset:64,byteLength:4},pQueueFamilyIndices:{byteOffset:72,byteLength:8},initialLayout:{byteOffset:80,byteLength:4}};class VkSubresourceLayout{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer))}get offset(){return this.memoryViewBigUint64[0]}get size(){return this.memoryViewBigUint64[1]}get rowPitch(){return this.memoryViewBigUint64[2]}get arrayPitch(){return this.memoryViewBigUint64[3]}get depthPitch(){return this.memoryViewBigUint64[4]}}VkSubresourceLayout.prototype.flush=function(){return!0},VkSubresourceLayout.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(40)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,40),0)},VkSubresourceLayout.byteLength=40,VkSubresourceLayout.memoryLayout={offset:{byteOffset:0,byteLength:8},size:{byteOffset:8,byteLength:8},rowPitch:{byteOffset:16,byteLength:8},arrayPitch:{byteOffset:24,byteLength:8},depthPitch:{byteOffset:32,byteLength:8}};class VkImageViewCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+80)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+80)/8)):(this.memoryBuffer=new ArrayBuffer(80),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._image=null,this._components=new VkComponentMapping({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+40}),this._subresourceRange=new VkImageSubresourceRange({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+56}),this.sType=15,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.image&&(this.image=e.image),void 0!==e.viewType&&(this.viewType=e.viewType),void 0!==e.format&&(this.format=e.format),void 0!==e.components&&(this.components=e.components),void 0!==e.subresourceRange&&(this.subresourceRange=e.subresourceRange))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000117002:case 1000156001:case 1000067e3:break;default:throw new TypeError("Invalid type for 'VkImageViewCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get image(){return this._image}set image(e){null!==e?(this._image=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._image=null,this.memoryViewBigInt64[3]=BI0)}get viewType(){return this.memoryViewInt32[8]}set viewType(e){this.memoryViewInt32[8]=e}get format(){return this.memoryViewInt32[9]}set format(e){this.memoryViewInt32[9]=e}get components(){return this._components}set components(e){null!==e?(e.flush(),this._components=e):null===e&&(this._components=null)}get subresourceRange(){return this._subresourceRange}set subresourceRange(e){null!==e?(e.flush(),this._subresourceRange=e):null===e&&(this._subresourceRange=null)}}VkImageViewCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._components){let e=this._components;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,40)}}if(null!==this._subresourceRange){let e=this._subresourceRange;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+20);new Uint8Array(this.memoryBuffer).set(t,56)}}return!0},VkImageViewCreateInfo.prototype.reflect=function(e){},VkImageViewCreateInfo.byteLength=80,VkImageViewCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},image:{byteOffset:24,byteLength:8},viewType:{byteOffset:32,byteLength:4},format:{byteOffset:36,byteLength:4},components:{byteOffset:40,byteLength:16},subresourceRange:{byteOffset:56,byteLength:20}};class VkBufferCopy{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.srcOffset&&(this.srcOffset=e.srcOffset),void 0!==e.dstOffset&&(this.dstOffset=e.dstOffset),void 0!==e.size&&(this.size=e.size))}get srcOffset(){return this.memoryViewBigUint64[0]}set srcOffset(e){this.memoryViewBigUint64[0]=BigInt(e)}get dstOffset(){return this.memoryViewBigUint64[1]}set dstOffset(e){this.memoryViewBigUint64[1]=BigInt(e)}get size(){return this.memoryViewBigUint64[2]}set size(e){this.memoryViewBigUint64[2]=BigInt(e)}}VkBufferCopy.prototype.flush=function(){return!0},VkBufferCopy.prototype.reflect=function(e){},VkBufferCopy.byteLength=24,VkBufferCopy.memoryLayout={srcOffset:{byteOffset:0,byteLength:8},dstOffset:{byteOffset:8,byteLength:8},size:{byteOffset:16,byteLength:8}};class VkSparseMemoryBind{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),this._memory=null,"object"==typeof e&&(void 0!==e.resourceOffset&&(this.resourceOffset=e.resourceOffset),void 0!==e.size&&(this.size=e.size),void 0!==e.memory&&(this.memory=e.memory),void 0!==e.memoryOffset&&(this.memoryOffset=e.memoryOffset),void 0!==e.flags&&(this.flags=e.flags))}get resourceOffset(){return this.memoryViewBigUint64[0]}set resourceOffset(e){this.memoryViewBigUint64[0]=BigInt(e)}get size(){return this.memoryViewBigUint64[1]}set size(e){this.memoryViewBigUint64[1]=BigInt(e)}get memory(){return this._memory}set memory(e){null!==e?(this._memory=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._memory=null,this.memoryViewBigInt64[2]=BI0)}get memoryOffset(){return this.memoryViewBigUint64[3]}set memoryOffset(e){this.memoryViewBigUint64[3]=BigInt(e)}get flags(){return this.memoryViewInt32[8]}set flags(e){this.memoryViewInt32[8]=e}}VkSparseMemoryBind.prototype.flush=function(){return!0},VkSparseMemoryBind.prototype.reflect=function(e){},VkSparseMemoryBind.byteLength=40,VkSparseMemoryBind.memoryLayout={resourceOffset:{byteOffset:0,byteLength:8},size:{byteOffset:8,byteLength:8},memory:{byteOffset:16,byteLength:8},memoryOffset:{byteOffset:24,byteLength:8},flags:{byteOffset:32,byteLength:4}};class VkSparseImageMemoryBind{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),this._subresource=new VkImageSubresource({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0}),this._offset=new VkOffset3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+12}),this._extent=new VkExtent3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+24}),this._memory=null,"object"==typeof e&&(void 0!==e.subresource&&(this.subresource=e.subresource),void 0!==e.offset&&(this.offset=e.offset),void 0!==e.extent&&(this.extent=e.extent),void 0!==e.memory&&(this.memory=e.memory),void 0!==e.memoryOffset&&(this.memoryOffset=e.memoryOffset),void 0!==e.flags&&(this.flags=e.flags))}get subresource(){return this._subresource}set subresource(e){null!==e?(e.flush(),this._subresource=e):null===e&&(this._subresource=null)}get offset(){return this._offset}set offset(e){null!==e?(e.flush(),this._offset=e):null===e&&(this._offset=null)}get extent(){return this._extent}set extent(e){null!==e?(e.flush(),this._extent=e):null===e&&(this._extent=null)}get memory(){return this._memory}set memory(e){null!==e?(this._memory=e,this.memoryViewBigInt64[5]=e.memoryViewBigInt64[0]):null===e&&(this._memory=null,this.memoryViewBigInt64[5]=BI0)}get memoryOffset(){return this.memoryViewBigUint64[6]}set memoryOffset(e){this.memoryViewBigUint64[6]=BigInt(e)}get flags(){return this.memoryViewInt32[14]}set flags(e){this.memoryViewInt32[14]=e}}VkSparseImageMemoryBind.prototype.flush=function(){if(null!==this._subresource){let e=this._subresource;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+12);new Uint8Array(this.memoryBuffer).set(t,0)}}if(null!==this._offset){let e=this._offset;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+12);new Uint8Array(this.memoryBuffer).set(t,12)}}if(null!==this._extent){let e=this._extent;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+12);new Uint8Array(this.memoryBuffer).set(t,24)}}return!0},VkSparseImageMemoryBind.prototype.reflect=function(e){},VkSparseImageMemoryBind.byteLength=64,VkSparseImageMemoryBind.memoryLayout={subresource:{byteOffset:0,byteLength:12},offset:{byteOffset:12,byteLength:12},extent:{byteOffset:24,byteLength:12},memory:{byteOffset:40,byteLength:8},memoryOffset:{byteOffset:48,byteLength:8},flags:{byteOffset:56,byteLength:4}};class VkSparseBufferMemoryBindInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._buffer=null,this._pBinds=null,this._pBindsNative=null,"object"==typeof e&&(void 0!==e.buffer&&(this.buffer=e.buffer),void 0!==e.bindCount&&(this.bindCount=e.bindCount),void 0!==e.pBinds&&(this.pBinds=e.pBinds))}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[0]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[0]=BI0)}get bindCount(){return this.memoryViewUint32[2]}set bindCount(e){this.memoryViewUint32[2]=e}get pBinds(){return this._pBinds}set pBinds(e){null!==e?this._pBinds=e:null===e&&(this._pBinds=null)}}VkSparseBufferMemoryBindInfo.prototype.flush=function(){if(null!==this._pBinds){let e=this._pBinds;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pBindsNative=t,this.memoryViewBigInt64[2]=t.address}return!0},VkSparseBufferMemoryBindInfo.prototype.reflect=function(e){},VkSparseBufferMemoryBindInfo.byteLength=24,VkSparseBufferMemoryBindInfo.memoryLayout={buffer:{byteOffset:0,byteLength:8},bindCount:{byteOffset:8,byteLength:4},pBinds:{byteOffset:16,byteLength:8}};class VkSparseImageOpaqueMemoryBindInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._image=null,this._pBinds=null,this._pBindsNative=null,"object"==typeof e&&(void 0!==e.image&&(this.image=e.image),void 0!==e.bindCount&&(this.bindCount=e.bindCount),void 0!==e.pBinds&&(this.pBinds=e.pBinds))}get image(){return this._image}set image(e){null!==e?(this._image=e,this.memoryViewBigInt64[0]=e.memoryViewBigInt64[0]):null===e&&(this._image=null,this.memoryViewBigInt64[0]=BI0)}get bindCount(){return this.memoryViewUint32[2]}set bindCount(e){this.memoryViewUint32[2]=e}get pBinds(){return this._pBinds}set pBinds(e){null!==e?this._pBinds=e:null===e&&(this._pBinds=null)}}VkSparseImageOpaqueMemoryBindInfo.prototype.flush=function(){if(null!==this._pBinds){let e=this._pBinds;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pBindsNative=t,this.memoryViewBigInt64[2]=t.address}return!0},VkSparseImageOpaqueMemoryBindInfo.prototype.reflect=function(e){},VkSparseImageOpaqueMemoryBindInfo.byteLength=24,VkSparseImageOpaqueMemoryBindInfo.memoryLayout={image:{byteOffset:0,byteLength:8},bindCount:{byteOffset:8,byteLength:4},pBinds:{byteOffset:16,byteLength:8}};class VkSparseImageMemoryBindInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._image=null,this._pBinds=null,this._pBindsNative=null,"object"==typeof e&&(void 0!==e.image&&(this.image=e.image),void 0!==e.bindCount&&(this.bindCount=e.bindCount),void 0!==e.pBinds&&(this.pBinds=e.pBinds))}get image(){return this._image}set image(e){null!==e?(this._image=e,this.memoryViewBigInt64[0]=e.memoryViewBigInt64[0]):null===e&&(this._image=null,this.memoryViewBigInt64[0]=BI0)}get bindCount(){return this.memoryViewUint32[2]}set bindCount(e){this.memoryViewUint32[2]=e}get pBinds(){return this._pBinds}set pBinds(e){null!==e?this._pBinds=e:null===e&&(this._pBinds=null)}}VkSparseImageMemoryBindInfo.prototype.flush=function(){if(null!==this._pBinds){let e=this._pBinds;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pBindsNative=t,this.memoryViewBigInt64[2]=t.address}return!0},VkSparseImageMemoryBindInfo.prototype.reflect=function(e){},VkSparseImageMemoryBindInfo.byteLength=24,VkSparseImageMemoryBindInfo.memoryLayout={image:{byteOffset:0,byteLength:8},bindCount:{byteOffset:8,byteLength:4},pBinds:{byteOffset:16,byteLength:8}};class VkBindSparseInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+96)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+96)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+96)/4)):(this.memoryBuffer=new ArrayBuffer(96),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pWaitSemaphores=null,this._pWaitSemaphoresNative=null,this._pBufferBinds=null,this._pBufferBindsNative=null,this._pImageOpaqueBinds=null,this._pImageOpaqueBindsNative=null,this._pImageBinds=null,this._pImageBindsNative=null,this._pSignalSemaphores=null,this._pSignalSemaphoresNative=null,this.sType=7,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.waitSemaphoreCount&&(this.waitSemaphoreCount=e.waitSemaphoreCount),void 0!==e.pWaitSemaphores&&(this.pWaitSemaphores=e.pWaitSemaphores),void 0!==e.bufferBindCount&&(this.bufferBindCount=e.bufferBindCount),void 0!==e.pBufferBinds&&(this.pBufferBinds=e.pBufferBinds),void 0!==e.imageOpaqueBindCount&&(this.imageOpaqueBindCount=e.imageOpaqueBindCount),void 0!==e.pImageOpaqueBinds&&(this.pImageOpaqueBinds=e.pImageOpaqueBinds),void 0!==e.imageBindCount&&(this.imageBindCount=e.imageBindCount),void 0!==e.pImageBinds&&(this.pImageBinds=e.pImageBinds),void 0!==e.signalSemaphoreCount&&(this.signalSemaphoreCount=e.signalSemaphoreCount),void 0!==e.pSignalSemaphores&&(this.pSignalSemaphores=e.pSignalSemaphores))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000060006:break;default:throw new TypeError("Invalid type for 'VkBindSparseInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get waitSemaphoreCount(){return this.memoryViewUint32[4]}set waitSemaphoreCount(e){this.memoryViewUint32[4]=e}get pWaitSemaphores(){return this._pWaitSemaphores}set pWaitSemaphores(e){null!==e?this._pWaitSemaphores=e:null===e&&(this._pWaitSemaphores=null)}get bufferBindCount(){return this.memoryViewUint32[8]}set bufferBindCount(e){this.memoryViewUint32[8]=e}get pBufferBinds(){return this._pBufferBinds}set pBufferBinds(e){null!==e?this._pBufferBinds=e:null===e&&(this._pBufferBinds=null)}get imageOpaqueBindCount(){return this.memoryViewUint32[12]}set imageOpaqueBindCount(e){this.memoryViewUint32[12]=e}get pImageOpaqueBinds(){return this._pImageOpaqueBinds}set pImageOpaqueBinds(e){null!==e?this._pImageOpaqueBinds=e:null===e&&(this._pImageOpaqueBinds=null)}get imageBindCount(){return this.memoryViewUint32[16]}set imageBindCount(e){this.memoryViewUint32[16]=e}get pImageBinds(){return this._pImageBinds}set pImageBinds(e){null!==e?this._pImageBinds=e:null===e&&(this._pImageBinds=null)}get signalSemaphoreCount(){return this.memoryViewUint32[20]}set signalSemaphoreCount(e){this.memoryViewUint32[20]=e}get pSignalSemaphores(){return this._pSignalSemaphores}set pSignalSemaphores(e){null!==e?this._pSignalSemaphores=e:null===e&&(this._pSignalSemaphores=null)}}VkBindSparseInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pWaitSemaphores){let e=this._pWaitSemaphores;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pWaitSemaphoresNative=t,this.memoryViewBigInt64[3]=t.address}if(null!==this._pBufferBinds){let e=this._pBufferBinds;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pBufferBindsNative=t,this.memoryViewBigInt64[5]=t.address}if(null!==this._pImageOpaqueBinds){let e=this._pImageOpaqueBinds;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pImageOpaqueBindsNative=t,this.memoryViewBigInt64[7]=t.address}if(null!==this._pImageBinds){let e=this._pImageBinds;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pImageBindsNative=t,this.memoryViewBigInt64[9]=t.address}if(null!==this._pSignalSemaphores){let e=this._pSignalSemaphores;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pSignalSemaphoresNative=t,this.memoryViewBigInt64[11]=t.address}return!0},VkBindSparseInfo.prototype.reflect=function(e){},VkBindSparseInfo.byteLength=96,VkBindSparseInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},waitSemaphoreCount:{byteOffset:16,byteLength:4},pWaitSemaphores:{byteOffset:24,byteLength:8},bufferBindCount:{byteOffset:32,byteLength:4},pBufferBinds:{byteOffset:40,byteLength:8},imageOpaqueBindCount:{byteOffset:48,byteLength:4},pImageOpaqueBinds:{byteOffset:56,byteLength:8},imageBindCount:{byteOffset:64,byteLength:4},pImageBinds:{byteOffset:72,byteLength:8},signalSemaphoreCount:{byteOffset:80,byteLength:4},pSignalSemaphores:{byteOffset:88,byteLength:8}};class VkImageCopy{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset):(this.memoryBuffer=new ArrayBuffer(68),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)),this._srcSubresource=new VkImageSubresourceLayers({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0}),this._srcOffset=new VkOffset3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this._dstSubresource=new VkImageSubresourceLayers({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+28}),this._dstOffset=new VkOffset3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+44}),this._extent=new VkExtent3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+56}),"object"==typeof e&&(void 0!==e.srcSubresource&&(this.srcSubresource=e.srcSubresource),void 0!==e.srcOffset&&(this.srcOffset=e.srcOffset),void 0!==e.dstSubresource&&(this.dstSubresource=e.dstSubresource),void 0!==e.dstOffset&&(this.dstOffset=e.dstOffset),void 0!==e.extent&&(this.extent=e.extent))}get srcSubresource(){return this._srcSubresource}set srcSubresource(e){null!==e?(e.flush(),this._srcSubresource=e):null===e&&(this._srcSubresource=null)}get srcOffset(){return this._srcOffset}set srcOffset(e){null!==e?(e.flush(),this._srcOffset=e):null===e&&(this._srcOffset=null)}get dstSubresource(){return this._dstSubresource}set dstSubresource(e){null!==e?(e.flush(),this._dstSubresource=e):null===e&&(this._dstSubresource=null)}get dstOffset(){return this._dstOffset}set dstOffset(e){null!==e?(e.flush(),this._dstOffset=e):null===e&&(this._dstOffset=null)}get extent(){return this._extent}set extent(e){null!==e?(e.flush(),this._extent=e):null===e&&(this._extent=null)}}VkImageCopy.prototype.flush=function(){if(null!==this._srcSubresource){let e=this._srcSubresource;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,0)}}if(null!==this._srcOffset){let e=this._srcOffset;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+12);new Uint8Array(this.memoryBuffer).set(t,16)}}if(null!==this._dstSubresource){let e=this._dstSubresource;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,28)}}if(null!==this._dstOffset){let e=this._dstOffset;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+12);new Uint8Array(this.memoryBuffer).set(t,44)}}if(null!==this._extent){let e=this._extent;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+12);new Uint8Array(this.memoryBuffer).set(t,56)}}return!0},VkImageCopy.prototype.reflect=function(e){},VkImageCopy.byteLength=68,VkImageCopy.memoryLayout={srcSubresource:{byteOffset:0,byteLength:16},srcOffset:{byteOffset:16,byteLength:12},dstSubresource:{byteOffset:28,byteLength:16},dstOffset:{byteOffset:44,byteLength:12},extent:{byteOffset:56,byteLength:12}};class VkImageBlit{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset):(this.memoryBuffer=new ArrayBuffer(80),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)),this._srcSubresource=new VkImageSubresourceLayers({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0}),this._srcOffsets=[...Array(2)].map((e,t)=>new VkOffset3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16+12*t})),this._dstSubresource=new VkImageSubresourceLayers({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+40}),this._dstOffsets=[...Array(2)].map((e,t)=>new VkOffset3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+56+12*t})),"object"==typeof e&&(void 0!==e.srcSubresource&&(this.srcSubresource=e.srcSubresource),void 0!==e.srcOffsets&&(this.srcOffsets=e.srcOffsets),void 0!==e.dstSubresource&&(this.dstSubresource=e.dstSubresource),void 0!==e.dstOffsets&&(this.dstOffsets=e.dstOffsets))}get srcSubresource(){return this._srcSubresource}set srcSubresource(e){null!==e?(e.flush(),this._srcSubresource=e):null===e&&(this._srcSubresource=null)}get srcOffsets(){return this._srcOffsets}set srcOffsets(e){null!==e?this._srcOffsets=e:null===e&&(this._srcOffsets=null)}get dstSubresource(){return this._dstSubresource}set dstSubresource(e){null!==e?(e.flush(),this._dstSubresource=e):null===e&&(this._dstSubresource=null)}get dstOffsets(){return this._dstOffsets}set dstOffsets(e){null!==e?this._dstOffsets=e:null===e&&(this._dstOffsets=null)}}VkImageBlit.prototype.flush=function(){if(null!==this._srcSubresource){let e=this._srcSubresource;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,0)}}if(null!==this._srcOffsets){let e=this._srcOffsets;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new Uint8Array(this.memoryBuffer),r=16;for(let s=0;s<e.length;++s){let i=new Uint8Array(e[s].memoryBuffer);t.set(i,r),r+=VkOffset3D.byteLength}}if(null!==this._dstSubresource){let e=this._dstSubresource;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,40)}}if(null!==this._dstOffsets){let e=this._dstOffsets;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new Uint8Array(this.memoryBuffer),r=56;for(let s=0;s<e.length;++s){let i=new Uint8Array(e[s].memoryBuffer);t.set(i,r),r+=VkOffset3D.byteLength}}return!0},VkImageBlit.prototype.reflect=function(e){},VkImageBlit.byteLength=80,VkImageBlit.memoryLayout={srcSubresource:{byteOffset:0,byteLength:16},srcOffsets:{byteOffset:16,byteLength:24},dstSubresource:{byteOffset:40,byteLength:16},dstOffsets:{byteOffset:56,byteLength:24}};class VkBufferImageCopy{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._imageSubresource=new VkImageSubresourceLayers({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this._imageOffset=new VkOffset3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+32}),this._imageExtent=new VkExtent3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+44}),"object"==typeof e&&(void 0!==e.bufferOffset&&(this.bufferOffset=e.bufferOffset),void 0!==e.bufferRowLength&&(this.bufferRowLength=e.bufferRowLength),void 0!==e.bufferImageHeight&&(this.bufferImageHeight=e.bufferImageHeight),void 0!==e.imageSubresource&&(this.imageSubresource=e.imageSubresource),void 0!==e.imageOffset&&(this.imageOffset=e.imageOffset),void 0!==e.imageExtent&&(this.imageExtent=e.imageExtent))}get bufferOffset(){return this.memoryViewBigUint64[0]}set bufferOffset(e){this.memoryViewBigUint64[0]=BigInt(e)}get bufferRowLength(){return this.memoryViewUint32[2]}set bufferRowLength(e){this.memoryViewUint32[2]=e}get bufferImageHeight(){return this.memoryViewUint32[3]}set bufferImageHeight(e){this.memoryViewUint32[3]=e}get imageSubresource(){return this._imageSubresource}set imageSubresource(e){null!==e?(e.flush(),this._imageSubresource=e):null===e&&(this._imageSubresource=null)}get imageOffset(){return this._imageOffset}set imageOffset(e){null!==e?(e.flush(),this._imageOffset=e):null===e&&(this._imageOffset=null)}get imageExtent(){return this._imageExtent}set imageExtent(e){null!==e?(e.flush(),this._imageExtent=e):null===e&&(this._imageExtent=null)}}VkBufferImageCopy.prototype.flush=function(){if(null!==this._imageSubresource){let e=this._imageSubresource;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,16)}}if(null!==this._imageOffset){let e=this._imageOffset;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+12);new Uint8Array(this.memoryBuffer).set(t,32)}}if(null!==this._imageExtent){let e=this._imageExtent;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+12);new Uint8Array(this.memoryBuffer).set(t,44)}}return!0},VkBufferImageCopy.prototype.reflect=function(e){},VkBufferImageCopy.byteLength=56,VkBufferImageCopy.memoryLayout={bufferOffset:{byteOffset:0,byteLength:8},bufferRowLength:{byteOffset:8,byteLength:4},bufferImageHeight:{byteOffset:12,byteLength:4},imageSubresource:{byteOffset:16,byteLength:16},imageOffset:{byteOffset:32,byteLength:12},imageExtent:{byteOffset:44,byteLength:12}};class VkImageResolve{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset):(this.memoryBuffer=new ArrayBuffer(68),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)),this._srcSubresource=new VkImageSubresourceLayers({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0}),this._srcOffset=new VkOffset3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this._dstSubresource=new VkImageSubresourceLayers({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+28}),this._dstOffset=new VkOffset3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+44}),this._extent=new VkExtent3D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+56}),"object"==typeof e&&(void 0!==e.srcSubresource&&(this.srcSubresource=e.srcSubresource),void 0!==e.srcOffset&&(this.srcOffset=e.srcOffset),void 0!==e.dstSubresource&&(this.dstSubresource=e.dstSubresource),void 0!==e.dstOffset&&(this.dstOffset=e.dstOffset),void 0!==e.extent&&(this.extent=e.extent))}get srcSubresource(){return this._srcSubresource}set srcSubresource(e){null!==e?(e.flush(),this._srcSubresource=e):null===e&&(this._srcSubresource=null)}get srcOffset(){return this._srcOffset}set srcOffset(e){null!==e?(e.flush(),this._srcOffset=e):null===e&&(this._srcOffset=null)}get dstSubresource(){return this._dstSubresource}set dstSubresource(e){null!==e?(e.flush(),this._dstSubresource=e):null===e&&(this._dstSubresource=null)}get dstOffset(){return this._dstOffset}set dstOffset(e){null!==e?(e.flush(),this._dstOffset=e):null===e&&(this._dstOffset=null)}get extent(){return this._extent}set extent(e){null!==e?(e.flush(),this._extent=e):null===e&&(this._extent=null)}}VkImageResolve.prototype.flush=function(){if(null!==this._srcSubresource){let e=this._srcSubresource;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,0)}}if(null!==this._srcOffset){let e=this._srcOffset;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+12);new Uint8Array(this.memoryBuffer).set(t,16)}}if(null!==this._dstSubresource){let e=this._dstSubresource;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,28)}}if(null!==this._dstOffset){let e=this._dstOffset;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+12);new Uint8Array(this.memoryBuffer).set(t,44)}}if(null!==this._extent){let e=this._extent;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+12);new Uint8Array(this.memoryBuffer).set(t,56)}}return!0},VkImageResolve.prototype.reflect=function(e){},VkImageResolve.byteLength=68,VkImageResolve.memoryLayout={srcSubresource:{byteOffset:0,byteLength:16},srcOffset:{byteOffset:16,byteLength:12},dstSubresource:{byteOffset:28,byteLength:16},dstOffset:{byteOffset:44,byteLength:12},extent:{byteOffset:56,byteLength:12}};class VkShaderModuleCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._pCode=null,this.sType=16,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.codeSize&&(this.codeSize=e.codeSize),void 0!==e.pCode&&(this.pCode=e.pCode))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000160001:break;default:throw new TypeError("Invalid type for 'VkShaderModuleCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get codeSize(){return this.memoryViewBigInt64[3]}set codeSize(e){this.memoryViewBigInt64[3]=BigInt(e)}get pCode(){return this._pCode}set pCode(e){null!==e?(this._pCode=e,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pCode=null,this.memoryViewBigInt64[4]=BI0)}}VkShaderModuleCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkShaderModuleCreateInfo.prototype.reflect=function(e){},VkShaderModuleCreateInfo.byteLength=40,VkShaderModuleCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},codeSize:{byteOffset:24,byteLength:8},pCode:{byteOffset:32,byteLength:8}};class VkDescriptorSetLayoutBinding{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),this._pImmutableSamplers=null,this._pImmutableSamplersNative=null,"object"==typeof e&&(void 0!==e.binding&&(this.binding=e.binding),void 0!==e.descriptorType&&(this.descriptorType=e.descriptorType),void 0!==e.descriptorCount&&(this.descriptorCount=e.descriptorCount),void 0!==e.stageFlags&&(this.stageFlags=e.stageFlags),void 0!==e.pImmutableSamplers&&(this.pImmutableSamplers=e.pImmutableSamplers))}get binding(){return this.memoryViewUint32[0]}set binding(e){this.memoryViewUint32[0]=e}get descriptorType(){return this.memoryViewInt32[1]}set descriptorType(e){this.memoryViewInt32[1]=e}get descriptorCount(){return this.memoryViewUint32[2]}set descriptorCount(e){this.memoryViewUint32[2]=e}get stageFlags(){return this.memoryViewInt32[3]}set stageFlags(e){this.memoryViewInt32[3]=e}get pImmutableSamplers(){return this._pImmutableSamplers}set pImmutableSamplers(e){null!==e?this._pImmutableSamplers=e:null===e&&(this._pImmutableSamplers=null)}}VkDescriptorSetLayoutBinding.prototype.flush=function(){if(null!==this._pImmutableSamplers){let e=this._pImmutableSamplers;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pImmutableSamplersNative=t,this.memoryViewBigInt64[2]=t.address}return!0},VkDescriptorSetLayoutBinding.prototype.reflect=function(e){},VkDescriptorSetLayoutBinding.byteLength=24,VkDescriptorSetLayoutBinding.memoryLayout={binding:{byteOffset:0,byteLength:4},descriptorType:{byteOffset:4,byteLength:4},descriptorCount:{byteOffset:8,byteLength:4},stageFlags:{byteOffset:12,byteLength:4},pImmutableSamplers:{byteOffset:16,byteLength:8}};class VkDescriptorSetLayoutCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pBindings=null,this._pBindingsNative=null,this.sType=32,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.bindingCount&&(this.bindingCount=e.bindingCount),void 0!==e.pBindings&&(this.pBindings=e.pBindings))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000161e3:break;default:throw new TypeError("Invalid type for 'VkDescriptorSetLayoutCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get bindingCount(){return this.memoryViewUint32[5]}set bindingCount(e){this.memoryViewUint32[5]=e}get pBindings(){return this._pBindings}set pBindings(e){null!==e?this._pBindings=e:null===e&&(this._pBindings=null)}}VkDescriptorSetLayoutCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pBindings){let e=this._pBindings;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pBindingsNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkDescriptorSetLayoutCreateInfo.prototype.reflect=function(e){},VkDescriptorSetLayoutCreateInfo.byteLength=32,VkDescriptorSetLayoutCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},bindingCount:{byteOffset:20,byteLength:4},pBindings:{byteOffset:24,byteLength:8}};class VkDescriptorPoolSize{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.type&&(this.type=e.type),void 0!==e.descriptorCount&&(this.descriptorCount=e.descriptorCount))}get type(){return this.memoryViewInt32[0]}set type(e){this.memoryViewInt32[0]=e}get descriptorCount(){return this.memoryViewUint32[1]}set descriptorCount(e){this.memoryViewUint32[1]=e}}VkDescriptorPoolSize.prototype.flush=function(){return!0},VkDescriptorPoolSize.prototype.reflect=function(e){},VkDescriptorPoolSize.byteLength=8,VkDescriptorPoolSize.memoryLayout={type:{byteOffset:0,byteLength:4},descriptorCount:{byteOffset:4,byteLength:4}};class VkDescriptorPoolCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pPoolSizes=null,this._pPoolSizesNative=null,this.sType=33,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.maxSets&&(this.maxSets=e.maxSets),void 0!==e.poolSizeCount&&(this.poolSizeCount=e.poolSizeCount),void 0!==e.pPoolSizes&&(this.pPoolSizes=e.pPoolSizes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000138003:break;default:throw new TypeError("Invalid type for 'VkDescriptorPoolCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get maxSets(){return this.memoryViewUint32[5]}set maxSets(e){this.memoryViewUint32[5]=e}get poolSizeCount(){return this.memoryViewUint32[6]}set poolSizeCount(e){this.memoryViewUint32[6]=e}get pPoolSizes(){return this._pPoolSizes}set pPoolSizes(e){null!==e?this._pPoolSizes=e:null===e&&(this._pPoolSizes=null)}}VkDescriptorPoolCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pPoolSizes){let e=this._pPoolSizes;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pPoolSizesNative=t,this.memoryViewBigInt64[4]=t.address}return!0},VkDescriptorPoolCreateInfo.prototype.reflect=function(e){},VkDescriptorPoolCreateInfo.byteLength=40,VkDescriptorPoolCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},maxSets:{byteOffset:20,byteLength:4},poolSizeCount:{byteOffset:24,byteLength:4},pPoolSizes:{byteOffset:32,byteLength:8}};class VkDescriptorSetAllocateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._descriptorPool=null,this._pSetLayouts=null,this._pSetLayoutsNative=null,this.sType=34,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.descriptorPool&&(this.descriptorPool=e.descriptorPool),void 0!==e.descriptorSetCount&&(this.descriptorSetCount=e.descriptorSetCount),void 0!==e.pSetLayouts&&(this.pSetLayouts=e.pSetLayouts))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000161003:break;default:throw new TypeError("Invalid type for 'VkDescriptorSetAllocateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get descriptorPool(){return this._descriptorPool}set descriptorPool(e){null!==e?(this._descriptorPool=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._descriptorPool=null,this.memoryViewBigInt64[2]=BI0)}get descriptorSetCount(){return this.memoryViewUint32[6]}set descriptorSetCount(e){this.memoryViewUint32[6]=e}get pSetLayouts(){return this._pSetLayouts}set pSetLayouts(e){null!==e?this._pSetLayouts=e:null===e&&(this._pSetLayouts=null)}}VkDescriptorSetAllocateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pSetLayouts){let e=this._pSetLayouts;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pSetLayoutsNative=t,this.memoryViewBigInt64[4]=t.address}return!0},VkDescriptorSetAllocateInfo.prototype.reflect=function(e){},VkDescriptorSetAllocateInfo.byteLength=40,VkDescriptorSetAllocateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},descriptorPool:{byteOffset:16,byteLength:8},descriptorSetCount:{byteOffset:24,byteLength:4},pSetLayouts:{byteOffset:32,byteLength:8}};class VkSpecializationMapEntry{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+16)/8)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.constantID&&(this.constantID=e.constantID),void 0!==e.offset&&(this.offset=e.offset),void 0!==e.size&&(this.size=e.size))}get constantID(){return this.memoryViewUint32[0]}set constantID(e){this.memoryViewUint32[0]=e}get offset(){return this.memoryViewUint32[1]}set offset(e){this.memoryViewUint32[1]=e}get size(){return this.memoryViewBigInt64[1]}set size(e){this.memoryViewBigInt64[1]=BigInt(e)}}VkSpecializationMapEntry.prototype.flush=function(){return!0},VkSpecializationMapEntry.prototype.reflect=function(e){},VkSpecializationMapEntry.byteLength=16,VkSpecializationMapEntry.memoryLayout={constantID:{byteOffset:0,byteLength:4},offset:{byteOffset:4,byteLength:4},size:{byteOffset:8,byteLength:8}};class VkSpecializationInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pMapEntries=null,this._pMapEntriesNative=null,this._pData=null,"object"==typeof e&&(void 0!==e.mapEntryCount&&(this.mapEntryCount=e.mapEntryCount),void 0!==e.pMapEntries&&(this.pMapEntries=e.pMapEntries),void 0!==e.dataSize&&(this.dataSize=e.dataSize),void 0!==e.pData&&(this.pData=e.pData))}get mapEntryCount(){return this.memoryViewUint32[0]}set mapEntryCount(e){this.memoryViewUint32[0]=e}get pMapEntries(){return this._pMapEntries}set pMapEntries(e){null!==e?this._pMapEntries=e:null===e&&(this._pMapEntries=null)}get dataSize(){return this.memoryViewBigInt64[2]}set dataSize(e){this.memoryViewBigInt64[2]=BigInt(e)}get pData(){return this._pData}set pData(e){null!==e?(this._pData=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pData=null,this.memoryViewBigInt64[3]=BI0)}}VkSpecializationInfo.prototype.flush=function(){if(null!==this._pMapEntries){let e=this._pMapEntries;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pMapEntriesNative=t,this.memoryViewBigInt64[1]=t.address}return!0},VkSpecializationInfo.prototype.reflect=function(e){},VkSpecializationInfo.byteLength=32,VkSpecializationInfo.memoryLayout={mapEntryCount:{byteOffset:0,byteLength:4},pMapEntries:{byteOffset:8,byteLength:8},dataSize:{byteOffset:16,byteLength:8},pData:{byteOffset:24,byteLength:8}};class VkPipelineShaderStageCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._module=null,this._pName=null,this._pSpecializationInfo=null,this.sType=18,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.stage&&(this.stage=e.stage),void 0!==e.module&&(this.module=e.module),void 0!==e.pName&&(this.pName=e.pName),void 0!==e.pSpecializationInfo&&(this.pSpecializationInfo=e.pSpecializationInfo))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineShaderStageCreateInfo.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get stage(){return this.memoryViewInt32[5]}set stage(e){this.memoryViewInt32[5]=e}get module(){return this._module}set module(e){null!==e?(this._module=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._module=null,this.memoryViewBigInt64[3]=BI0)}get pName(){if(null!==this._pName){let e=textDecoder.decode(this._pName);return e.substr(0,e.length-1)}return null}set pName(e){null!==e?(this._pName=textEncoder.encode(e+NULLT).buffer,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(this._pName)):null===e&&(this._pName=null,this.memoryViewBigInt64[4]=BI0)}get pSpecializationInfo(){return this._pSpecializationInfo}set pSpecializationInfo(e){null!==e?(e.flush(),this._pSpecializationInfo=e,this.memoryViewBigInt64[5]=e.memoryAddress):null===e&&(this._pSpecializationInfo=null,this.memoryViewBigInt64[5]=BI0)}}VkPipelineShaderStageCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineShaderStageCreateInfo.prototype.reflect=function(e){},VkPipelineShaderStageCreateInfo.byteLength=48,VkPipelineShaderStageCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},stage:{byteOffset:20,byteLength:4},module:{byteOffset:24,byteLength:8},pName:{byteOffset:32,byteLength:8},pSpecializationInfo:{byteOffset:40,byteLength:8}};class VkComputePipelineCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+96)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+96)/8)):(this.memoryBuffer=new ArrayBuffer(96),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._stage=new VkPipelineShaderStageCreateInfo({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+24}),this._layout=null,this._basePipelineHandle=null,this.sType=29,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.stage&&(this.stage=e.stage),void 0!==e.layout&&(this.layout=e.layout),void 0!==e.basePipelineHandle&&(this.basePipelineHandle=e.basePipelineHandle),void 0!==e.basePipelineIndex&&(this.basePipelineIndex=e.basePipelineIndex))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000192e3:break;default:throw new TypeError("Invalid type for 'VkComputePipelineCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get stage(){return this._stage}set stage(e){null!==e?(e.flush(),this._stage=e):null===e&&(this._stage=null)}get layout(){return this._layout}set layout(e){null!==e?(this._layout=e,this.memoryViewBigInt64[9]=e.memoryViewBigInt64[0]):null===e&&(this._layout=null,this.memoryViewBigInt64[9]=BI0)}get basePipelineHandle(){return this._basePipelineHandle}set basePipelineHandle(e){null!==e?(this._basePipelineHandle=e,this.memoryViewBigInt64[10]=e.memoryViewBigInt64[0]):null===e&&(this._basePipelineHandle=null,this.memoryViewBigInt64[10]=BI0)}get basePipelineIndex(){return this.memoryViewInt32[22]}set basePipelineIndex(e){this.memoryViewInt32[22]=e}}VkComputePipelineCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._stage){let e=this._stage;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+48);new Uint8Array(this.memoryBuffer).set(t,24)}}return!0},VkComputePipelineCreateInfo.prototype.reflect=function(e){},VkComputePipelineCreateInfo.byteLength=96,VkComputePipelineCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},stage:{byteOffset:24,byteLength:48},layout:{byteOffset:72,byteLength:8},basePipelineHandle:{byteOffset:80,byteLength:8},basePipelineIndex:{byteOffset:88,byteLength:4}};class VkVertexInputBindingDescription{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4)):(this.memoryBuffer=new ArrayBuffer(12),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.binding&&(this.binding=e.binding),void 0!==e.stride&&(this.stride=e.stride),void 0!==e.inputRate&&(this.inputRate=e.inputRate))}get binding(){return this.memoryViewUint32[0]}set binding(e){this.memoryViewUint32[0]=e}get stride(){return this.memoryViewUint32[1]}set stride(e){this.memoryViewUint32[1]=e}get inputRate(){return this.memoryViewInt32[2]}set inputRate(e){this.memoryViewInt32[2]=e}}VkVertexInputBindingDescription.prototype.flush=function(){return!0},VkVertexInputBindingDescription.prototype.reflect=function(e){},VkVertexInputBindingDescription.byteLength=12,VkVertexInputBindingDescription.memoryLayout={binding:{byteOffset:0,byteLength:4},stride:{byteOffset:4,byteLength:4},inputRate:{byteOffset:8,byteLength:4}};class VkVertexInputAttributeDescription{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.location&&(this.location=e.location),void 0!==e.binding&&(this.binding=e.binding),void 0!==e.format&&(this.format=e.format),void 0!==e.offset&&(this.offset=e.offset))}get location(){return this.memoryViewUint32[0]}set location(e){this.memoryViewUint32[0]=e}get binding(){return this.memoryViewUint32[1]}set binding(e){this.memoryViewUint32[1]=e}get format(){return this.memoryViewInt32[2]}set format(e){this.memoryViewInt32[2]=e}get offset(){return this.memoryViewUint32[3]}set offset(e){this.memoryViewUint32[3]=e}}VkVertexInputAttributeDescription.prototype.flush=function(){return!0},VkVertexInputAttributeDescription.prototype.reflect=function(e){},VkVertexInputAttributeDescription.byteLength=16,VkVertexInputAttributeDescription.memoryLayout={location:{byteOffset:0,byteLength:4},binding:{byteOffset:4,byteLength:4},format:{byteOffset:8,byteLength:4},offset:{byteOffset:12,byteLength:4}};class VkPipelineVertexInputStateCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pVertexBindingDescriptions=null,this._pVertexBindingDescriptionsNative=null,this._pVertexAttributeDescriptions=null,this._pVertexAttributeDescriptionsNative=null,this.sType=19,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.vertexBindingDescriptionCount&&(this.vertexBindingDescriptionCount=e.vertexBindingDescriptionCount),void 0!==e.pVertexBindingDescriptions&&(this.pVertexBindingDescriptions=e.pVertexBindingDescriptions),void 0!==e.vertexAttributeDescriptionCount&&(this.vertexAttributeDescriptionCount=e.vertexAttributeDescriptionCount),void 0!==e.pVertexAttributeDescriptions&&(this.pVertexAttributeDescriptions=e.pVertexAttributeDescriptions))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000190001:break;default:throw new TypeError("Invalid type for 'VkPipelineVertexInputStateCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get vertexBindingDescriptionCount(){return this.memoryViewUint32[5]}set vertexBindingDescriptionCount(e){this.memoryViewUint32[5]=e}get pVertexBindingDescriptions(){return this._pVertexBindingDescriptions}set pVertexBindingDescriptions(e){null!==e?this._pVertexBindingDescriptions=e:null===e&&(this._pVertexBindingDescriptions=null)}get vertexAttributeDescriptionCount(){return this.memoryViewUint32[8]}set vertexAttributeDescriptionCount(e){this.memoryViewUint32[8]=e}get pVertexAttributeDescriptions(){return this._pVertexAttributeDescriptions}set pVertexAttributeDescriptions(e){null!==e?this._pVertexAttributeDescriptions=e:null===e&&(this._pVertexAttributeDescriptions=null)}}VkPipelineVertexInputStateCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pVertexBindingDescriptions){let e=this._pVertexBindingDescriptions;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pVertexBindingDescriptionsNative=t,this.memoryViewBigInt64[3]=t.address}if(null!==this._pVertexAttributeDescriptions){let e=this._pVertexAttributeDescriptions;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pVertexAttributeDescriptionsNative=t,this.memoryViewBigInt64[5]=t.address}return!0},VkPipelineVertexInputStateCreateInfo.prototype.reflect=function(e){},VkPipelineVertexInputStateCreateInfo.byteLength=48,VkPipelineVertexInputStateCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},vertexBindingDescriptionCount:{byteOffset:20,byteLength:4},pVertexBindingDescriptions:{byteOffset:24,byteLength:8},vertexAttributeDescriptionCount:{byteOffset:32,byteLength:4},pVertexAttributeDescriptions:{byteOffset:40,byteLength:8}};class VkPipelineInputAssemblyStateCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=20,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.topology&&(this.topology=e.topology),void 0!==e.primitiveRestartEnable&&(this.primitiveRestartEnable=e.primitiveRestartEnable))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineInputAssemblyStateCreateInfo.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get topology(){return this.memoryViewInt32[5]}set topology(e){this.memoryViewInt32[5]=e}get primitiveRestartEnable(){return 0!==this.memoryViewUint32[6]}set primitiveRestartEnable(e){this.memoryViewUint32[6]=0|e}}VkPipelineInputAssemblyStateCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineInputAssemblyStateCreateInfo.prototype.reflect=function(e){},VkPipelineInputAssemblyStateCreateInfo.byteLength=32,VkPipelineInputAssemblyStateCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},topology:{byteOffset:20,byteLength:4},primitiveRestartEnable:{byteOffset:24,byteLength:4}};class VkPipelineTessellationStateCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=21,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.patchControlPoints&&(this.patchControlPoints=e.patchControlPoints))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000117003:break;default:throw new TypeError("Invalid type for 'VkPipelineTessellationStateCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get patchControlPoints(){return this.memoryViewUint32[5]}set patchControlPoints(e){this.memoryViewUint32[5]=e}}VkPipelineTessellationStateCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineTessellationStateCreateInfo.prototype.reflect=function(e){},VkPipelineTessellationStateCreateInfo.byteLength=24,VkPipelineTessellationStateCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},patchControlPoints:{byteOffset:20,byteLength:4}};class VkPipelineViewportStateCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pViewports=null,this._pViewportsNative=null,this._pScissors=null,this._pScissorsNative=null,this.sType=22,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.viewportCount&&(this.viewportCount=e.viewportCount),void 0!==e.pViewports&&(this.pViewports=e.pViewports),void 0!==e.scissorCount&&(this.scissorCount=e.scissorCount),void 0!==e.pScissors&&(this.pScissors=e.pScissors))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000087e3:case 1000098e3:case 1000205e3:case 1000164e3:case 1000164005:break;default:throw new TypeError("Invalid type for 'VkPipelineViewportStateCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get viewportCount(){return this.memoryViewUint32[5]}set viewportCount(e){this.memoryViewUint32[5]=e}get pViewports(){return this._pViewports}set pViewports(e){null!==e?this._pViewports=e:null===e&&(this._pViewports=null)}get scissorCount(){return this.memoryViewUint32[8]}set scissorCount(e){this.memoryViewUint32[8]=e}get pScissors(){return this._pScissors}set pScissors(e){null!==e?this._pScissors=e:null===e&&(this._pScissors=null)}}VkPipelineViewportStateCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pViewports){let e=this._pViewports;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pViewportsNative=t,this.memoryViewBigInt64[3]=t.address}if(null!==this._pScissors){let e=this._pScissors;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pScissorsNative=t,this.memoryViewBigInt64[5]=t.address}return!0},VkPipelineViewportStateCreateInfo.prototype.reflect=function(e){},VkPipelineViewportStateCreateInfo.byteLength=48,VkPipelineViewportStateCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},viewportCount:{byteOffset:20,byteLength:4},pViewports:{byteOffset:24,byteLength:8},scissorCount:{byteOffset:32,byteLength:4},pScissors:{byteOffset:40,byteLength:8}};class VkPipelineRasterizationStateCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),this._pNext=null,this.sType=23,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.depthClampEnable&&(this.depthClampEnable=e.depthClampEnable),void 0!==e.rasterizerDiscardEnable&&(this.rasterizerDiscardEnable=e.rasterizerDiscardEnable),void 0!==e.polygonMode&&(this.polygonMode=e.polygonMode),void 0!==e.cullMode&&(this.cullMode=e.cullMode),void 0!==e.frontFace&&(this.frontFace=e.frontFace),void 0!==e.depthBiasEnable&&(this.depthBiasEnable=e.depthBiasEnable),void 0!==e.depthBiasConstantFactor&&(this.depthBiasConstantFactor=e.depthBiasConstantFactor),void 0!==e.depthBiasClamp&&(this.depthBiasClamp=e.depthBiasClamp),void 0!==e.depthBiasSlopeFactor&&(this.depthBiasSlopeFactor=e.depthBiasSlopeFactor),void 0!==e.lineWidth&&(this.lineWidth=e.lineWidth))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000018e3:case 1000101001:case 1000028002:case 1000102001:break;default:throw new TypeError("Invalid type for 'VkPipelineRasterizationStateCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get depthClampEnable(){return 0!==this.memoryViewUint32[5]}set depthClampEnable(e){this.memoryViewUint32[5]=0|e}get rasterizerDiscardEnable(){return 0!==this.memoryViewUint32[6]}set rasterizerDiscardEnable(e){this.memoryViewUint32[6]=0|e}get polygonMode(){return this.memoryViewInt32[7]}set polygonMode(e){this.memoryViewInt32[7]=e}get cullMode(){return this.memoryViewInt32[8]}set cullMode(e){this.memoryViewInt32[8]=e}get frontFace(){return this.memoryViewInt32[9]}set frontFace(e){this.memoryViewInt32[9]=e}get depthBiasEnable(){return 0!==this.memoryViewUint32[10]}set depthBiasEnable(e){this.memoryViewUint32[10]=0|e}get depthBiasConstantFactor(){return this.memoryViewFloat32[11]}set depthBiasConstantFactor(e){this.memoryViewFloat32[11]=e}get depthBiasClamp(){return this.memoryViewFloat32[12]}set depthBiasClamp(e){this.memoryViewFloat32[12]=e}get depthBiasSlopeFactor(){return this.memoryViewFloat32[13]}set depthBiasSlopeFactor(e){this.memoryViewFloat32[13]=e}get lineWidth(){return this.memoryViewFloat32[14]}set lineWidth(e){this.memoryViewFloat32[14]=e}}VkPipelineRasterizationStateCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineRasterizationStateCreateInfo.prototype.reflect=function(e){},VkPipelineRasterizationStateCreateInfo.byteLength=64,VkPipelineRasterizationStateCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},depthClampEnable:{byteOffset:20,byteLength:4},rasterizerDiscardEnable:{byteOffset:24,byteLength:4},polygonMode:{byteOffset:28,byteLength:4},cullMode:{byteOffset:32,byteLength:4},frontFace:{byteOffset:36,byteLength:4},depthBiasEnable:{byteOffset:40,byteLength:4},depthBiasConstantFactor:{byteOffset:44,byteLength:4},depthBiasClamp:{byteOffset:48,byteLength:4},depthBiasSlopeFactor:{byteOffset:52,byteLength:4},lineWidth:{byteOffset:56,byteLength:4}};class VkPipelineMultisampleStateCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),this._pNext=null,this._pSampleMask=null,this.sType=24,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.rasterizationSamples&&(this.rasterizationSamples=e.rasterizationSamples),void 0!==e.sampleShadingEnable&&(this.sampleShadingEnable=e.sampleShadingEnable),void 0!==e.minSampleShading&&(this.minSampleShading=e.minSampleShading),void 0!==e.pSampleMask&&(this.pSampleMask=e.pSampleMask),void 0!==e.alphaToCoverageEnable&&(this.alphaToCoverageEnable=e.alphaToCoverageEnable),void 0!==e.alphaToOneEnable&&(this.alphaToOneEnable=e.alphaToOneEnable))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000149e3:case 1000143002:case 1000152e3:case 1000250001:break;default:throw new TypeError("Invalid type for 'VkPipelineMultisampleStateCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get rasterizationSamples(){return this.memoryViewInt32[5]}set rasterizationSamples(e){this.memoryViewInt32[5]=e}get sampleShadingEnable(){return 0!==this.memoryViewUint32[6]}set sampleShadingEnable(e){this.memoryViewUint32[6]=0|e}get minSampleShading(){return this.memoryViewFloat32[7]}set minSampleShading(e){this.memoryViewFloat32[7]=e}get pSampleMask(){return this._pSampleMask}set pSampleMask(e){null!==e?(this._pSampleMask=e,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pSampleMask=null,this.memoryViewBigInt64[4]=BI0)}get alphaToCoverageEnable(){return 0!==this.memoryViewUint32[10]}set alphaToCoverageEnable(e){this.memoryViewUint32[10]=0|e}get alphaToOneEnable(){return 0!==this.memoryViewUint32[11]}set alphaToOneEnable(e){this.memoryViewUint32[11]=0|e}}VkPipelineMultisampleStateCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineMultisampleStateCreateInfo.prototype.reflect=function(e){},VkPipelineMultisampleStateCreateInfo.byteLength=48,VkPipelineMultisampleStateCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},rasterizationSamples:{byteOffset:20,byteLength:4},sampleShadingEnable:{byteOffset:24,byteLength:4},minSampleShading:{byteOffset:28,byteLength:4},pSampleMask:{byteOffset:32,byteLength:8},alphaToCoverageEnable:{byteOffset:40,byteLength:4},alphaToOneEnable:{byteOffset:44,byteLength:4}};class VkPipelineColorBlendAttachmentState{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.blendEnable&&(this.blendEnable=e.blendEnable),void 0!==e.srcColorBlendFactor&&(this.srcColorBlendFactor=e.srcColorBlendFactor),void 0!==e.dstColorBlendFactor&&(this.dstColorBlendFactor=e.dstColorBlendFactor),void 0!==e.colorBlendOp&&(this.colorBlendOp=e.colorBlendOp),void 0!==e.srcAlphaBlendFactor&&(this.srcAlphaBlendFactor=e.srcAlphaBlendFactor),void 0!==e.dstAlphaBlendFactor&&(this.dstAlphaBlendFactor=e.dstAlphaBlendFactor),void 0!==e.alphaBlendOp&&(this.alphaBlendOp=e.alphaBlendOp),void 0!==e.colorWriteMask&&(this.colorWriteMask=e.colorWriteMask))}get blendEnable(){return 0!==this.memoryViewUint32[0]}set blendEnable(e){this.memoryViewUint32[0]=0|e}get srcColorBlendFactor(){return this.memoryViewInt32[1]}set srcColorBlendFactor(e){this.memoryViewInt32[1]=e}get dstColorBlendFactor(){return this.memoryViewInt32[2]}set dstColorBlendFactor(e){this.memoryViewInt32[2]=e}get colorBlendOp(){return this.memoryViewInt32[3]}set colorBlendOp(e){this.memoryViewInt32[3]=e}get srcAlphaBlendFactor(){return this.memoryViewInt32[4]}set srcAlphaBlendFactor(e){this.memoryViewInt32[4]=e}get dstAlphaBlendFactor(){return this.memoryViewInt32[5]}set dstAlphaBlendFactor(e){this.memoryViewInt32[5]=e}get alphaBlendOp(){return this.memoryViewInt32[6]}set alphaBlendOp(e){this.memoryViewInt32[6]=e}get colorWriteMask(){return this.memoryViewInt32[7]}set colorWriteMask(e){this.memoryViewInt32[7]=e}}VkPipelineColorBlendAttachmentState.prototype.flush=function(){return!0},VkPipelineColorBlendAttachmentState.prototype.reflect=function(e){},VkPipelineColorBlendAttachmentState.byteLength=32,VkPipelineColorBlendAttachmentState.memoryLayout={blendEnable:{byteOffset:0,byteLength:4},srcColorBlendFactor:{byteOffset:4,byteLength:4},dstColorBlendFactor:{byteOffset:8,byteLength:4},colorBlendOp:{byteOffset:12,byteLength:4},srcAlphaBlendFactor:{byteOffset:16,byteLength:4},dstAlphaBlendFactor:{byteOffset:20,byteLength:4},alphaBlendOp:{byteOffset:24,byteLength:4},colorWriteMask:{byteOffset:28,byteLength:4}};class VkPipelineColorBlendStateCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),this._pNext=null,this._pAttachments=null,this._pAttachmentsNative=null,this._blendConstants=[...Array(4)].fill(0),this.sType=26,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.logicOpEnable&&(this.logicOpEnable=e.logicOpEnable),void 0!==e.logicOp&&(this.logicOp=e.logicOp),void 0!==e.attachmentCount&&(this.attachmentCount=e.attachmentCount),void 0!==e.pAttachments&&(this.pAttachments=e.pAttachments),void 0!==e.blendConstants&&(this.blendConstants=e.blendConstants))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000148002:break;default:throw new TypeError("Invalid type for 'VkPipelineColorBlendStateCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get logicOpEnable(){return 0!==this.memoryViewUint32[5]}set logicOpEnable(e){this.memoryViewUint32[5]=0|e}get logicOp(){return this.memoryViewInt32[6]}set logicOp(e){this.memoryViewInt32[6]=e}get attachmentCount(){return this.memoryViewUint32[7]}set attachmentCount(e){this.memoryViewUint32[7]=e}get pAttachments(){return this._pAttachments}set pAttachments(e){null!==e?this._pAttachments=e:null===e&&(this._pAttachments=null)}get blendConstants(){return this._blendConstants}set blendConstants(e){null!==e?this._blendConstants=e:null===e&&(this._blendConstants=null)}}VkPipelineColorBlendStateCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pAttachments){let e=this._pAttachments;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pAttachmentsNative=t,this.memoryViewBigInt64[4]=t.address}if(null!==this._blendConstants){let e=this._blendConstants;for(let t=0;t<e.length;++t)this.memoryViewFloat32[10+t]=e[t]}else this.memoryViewFloat32[10]=0;return!0},VkPipelineColorBlendStateCreateInfo.prototype.reflect=function(e){},VkPipelineColorBlendStateCreateInfo.byteLength=56,VkPipelineColorBlendStateCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},logicOpEnable:{byteOffset:20,byteLength:4},logicOp:{byteOffset:24,byteLength:4},attachmentCount:{byteOffset:28,byteLength:4},pAttachments:{byteOffset:32,byteLength:8},blendConstants:{byteOffset:40,byteLength:16}};class VkPipelineDynamicStateCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDynamicStates=null,this.sType=27,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.dynamicStateCount&&(this.dynamicStateCount=e.dynamicStateCount),void 0!==e.pDynamicStates&&(this.pDynamicStates=e.pDynamicStates))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineDynamicStateCreateInfo.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get dynamicStateCount(){return this.memoryViewUint32[5]}set dynamicStateCount(e){this.memoryViewUint32[5]=e}get pDynamicStates(){return this._pDynamicStates}set pDynamicStates(e){null!==e?(this._pDynamicStates=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pDynamicStates=null,this.memoryViewBigInt64[3]=BI0)}}VkPipelineDynamicStateCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineDynamicStateCreateInfo.prototype.reflect=function(e){},VkPipelineDynamicStateCreateInfo.byteLength=32,VkPipelineDynamicStateCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},dynamicStateCount:{byteOffset:20,byteLength:4},pDynamicStates:{byteOffset:24,byteLength:8}};class VkStencilOpState{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+28)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+28)/4)):(this.memoryBuffer=new ArrayBuffer(28),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.failOp&&(this.failOp=e.failOp),void 0!==e.passOp&&(this.passOp=e.passOp),void 0!==e.depthFailOp&&(this.depthFailOp=e.depthFailOp),void 0!==e.compareOp&&(this.compareOp=e.compareOp),void 0!==e.compareMask&&(this.compareMask=e.compareMask),void 0!==e.writeMask&&(this.writeMask=e.writeMask),void 0!==e.reference&&(this.reference=e.reference))}get failOp(){return this.memoryViewInt32[0]}set failOp(e){this.memoryViewInt32[0]=e}get passOp(){return this.memoryViewInt32[1]}set passOp(e){this.memoryViewInt32[1]=e}get depthFailOp(){return this.memoryViewInt32[2]}set depthFailOp(e){this.memoryViewInt32[2]=e}get compareOp(){return this.memoryViewInt32[3]}set compareOp(e){this.memoryViewInt32[3]=e}get compareMask(){return this.memoryViewUint32[4]}set compareMask(e){this.memoryViewUint32[4]=e}get writeMask(){return this.memoryViewUint32[5]}set writeMask(e){this.memoryViewUint32[5]=e}get reference(){return this.memoryViewUint32[6]}set reference(e){this.memoryViewUint32[6]=e}}VkStencilOpState.prototype.flush=function(){return!0},VkStencilOpState.prototype.reflect=function(e){},VkStencilOpState.byteLength=28,VkStencilOpState.memoryLayout={failOp:{byteOffset:0,byteLength:4},passOp:{byteOffset:4,byteLength:4},depthFailOp:{byteOffset:8,byteLength:4},compareOp:{byteOffset:12,byteLength:4},compareMask:{byteOffset:16,byteLength:4},writeMask:{byteOffset:20,byteLength:4},reference:{byteOffset:24,byteLength:4}};class VkPipelineDepthStencilStateCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+104)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+104)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+104)/4),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+104)/4)):(this.memoryBuffer=new ArrayBuffer(104),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),this._pNext=null,this._front=new VkStencilOpState({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+40}),this._back=new VkStencilOpState({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+68}),this.sType=25,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.depthTestEnable&&(this.depthTestEnable=e.depthTestEnable),void 0!==e.depthWriteEnable&&(this.depthWriteEnable=e.depthWriteEnable),void 0!==e.depthCompareOp&&(this.depthCompareOp=e.depthCompareOp),void 0!==e.depthBoundsTestEnable&&(this.depthBoundsTestEnable=e.depthBoundsTestEnable),void 0!==e.stencilTestEnable&&(this.stencilTestEnable=e.stencilTestEnable),void 0!==e.front&&(this.front=e.front),void 0!==e.back&&(this.back=e.back),void 0!==e.minDepthBounds&&(this.minDepthBounds=e.minDepthBounds),void 0!==e.maxDepthBounds&&(this.maxDepthBounds=e.maxDepthBounds))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineDepthStencilStateCreateInfo.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get depthTestEnable(){return 0!==this.memoryViewUint32[5]}set depthTestEnable(e){this.memoryViewUint32[5]=0|e}get depthWriteEnable(){return 0!==this.memoryViewUint32[6]}set depthWriteEnable(e){this.memoryViewUint32[6]=0|e}get depthCompareOp(){return this.memoryViewInt32[7]}set depthCompareOp(e){this.memoryViewInt32[7]=e}get depthBoundsTestEnable(){return 0!==this.memoryViewUint32[8]}set depthBoundsTestEnable(e){this.memoryViewUint32[8]=0|e}get stencilTestEnable(){return 0!==this.memoryViewUint32[9]}set stencilTestEnable(e){this.memoryViewUint32[9]=0|e}get front(){return this._front}set front(e){null!==e?(e.flush(),this._front=e):null===e&&(this._front=null)}get back(){return this._back}set back(e){null!==e?(e.flush(),this._back=e):null===e&&(this._back=null)}get minDepthBounds(){return this.memoryViewFloat32[24]}set minDepthBounds(e){this.memoryViewFloat32[24]=e}get maxDepthBounds(){return this.memoryViewFloat32[25]}set maxDepthBounds(e){this.memoryViewFloat32[25]=e}}VkPipelineDepthStencilStateCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._front){let e=this._front;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+28);new Uint8Array(this.memoryBuffer).set(t,40)}}if(null!==this._back){let e=this._back;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+28);new Uint8Array(this.memoryBuffer).set(t,68)}}return!0},VkPipelineDepthStencilStateCreateInfo.prototype.reflect=function(e){},VkPipelineDepthStencilStateCreateInfo.byteLength=104,VkPipelineDepthStencilStateCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},depthTestEnable:{byteOffset:20,byteLength:4},depthWriteEnable:{byteOffset:24,byteLength:4},depthCompareOp:{byteOffset:28,byteLength:4},depthBoundsTestEnable:{byteOffset:32,byteLength:4},stencilTestEnable:{byteOffset:36,byteLength:4},front:{byteOffset:40,byteLength:28},back:{byteOffset:68,byteLength:28},minDepthBounds:{byteOffset:96,byteLength:4},maxDepthBounds:{byteOffset:100,byteLength:4}};class VkGraphicsPipelineCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+144)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+144)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+144)/4)):(this.memoryBuffer=new ArrayBuffer(144),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pStages=null,this._pStagesNative=null,this._pVertexInputState=null,this._pInputAssemblyState=null,this._pTessellationState=null,this._pViewportState=null,this._pRasterizationState=null,this._pMultisampleState=null,this._pDepthStencilState=null,this._pColorBlendState=null,this._pDynamicState=null,this._layout=null,this._renderPass=null,this._basePipelineHandle=null,this.sType=28,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.stageCount&&(this.stageCount=e.stageCount),void 0!==e.pStages&&(this.pStages=e.pStages),void 0!==e.pVertexInputState&&(this.pVertexInputState=e.pVertexInputState),void 0!==e.pInputAssemblyState&&(this.pInputAssemblyState=e.pInputAssemblyState),void 0!==e.pTessellationState&&(this.pTessellationState=e.pTessellationState),void 0!==e.pViewportState&&(this.pViewportState=e.pViewportState),void 0!==e.pRasterizationState&&(this.pRasterizationState=e.pRasterizationState),void 0!==e.pMultisampleState&&(this.pMultisampleState=e.pMultisampleState),void 0!==e.pDepthStencilState&&(this.pDepthStencilState=e.pDepthStencilState),void 0!==e.pColorBlendState&&(this.pColorBlendState=e.pColorBlendState),void 0!==e.pDynamicState&&(this.pDynamicState=e.pDynamicState),void 0!==e.layout&&(this.layout=e.layout),void 0!==e.renderPass&&(this.renderPass=e.renderPass),void 0!==e.subpass&&(this.subpass=e.subpass),void 0!==e.basePipelineHandle&&(this.basePipelineHandle=e.basePipelineHandle),void 0!==e.basePipelineIndex&&(this.basePipelineIndex=e.basePipelineIndex))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000099001:case 1000166001:case 1000192e3:break;default:throw new TypeError("Invalid type for 'VkGraphicsPipelineCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get stageCount(){return this.memoryViewUint32[5]}set stageCount(e){this.memoryViewUint32[5]=e}get pStages(){return this._pStages}set pStages(e){null!==e?this._pStages=e:null===e&&(this._pStages=null)}get pVertexInputState(){return this._pVertexInputState}set pVertexInputState(e){null!==e?(e.flush(),this._pVertexInputState=e,this.memoryViewBigInt64[4]=e.memoryAddress):null===e&&(this._pVertexInputState=null,this.memoryViewBigInt64[4]=BI0)}get pInputAssemblyState(){return this._pInputAssemblyState}set pInputAssemblyState(e){null!==e?(e.flush(),this._pInputAssemblyState=e,this.memoryViewBigInt64[5]=e.memoryAddress):null===e&&(this._pInputAssemblyState=null,this.memoryViewBigInt64[5]=BI0)}get pTessellationState(){return this._pTessellationState}set pTessellationState(e){null!==e?(e.flush(),this._pTessellationState=e,this.memoryViewBigInt64[6]=e.memoryAddress):null===e&&(this._pTessellationState=null,this.memoryViewBigInt64[6]=BI0)}get pViewportState(){return this._pViewportState}set pViewportState(e){null!==e?(e.flush(),this._pViewportState=e,this.memoryViewBigInt64[7]=e.memoryAddress):null===e&&(this._pViewportState=null,this.memoryViewBigInt64[7]=BI0)}get pRasterizationState(){return this._pRasterizationState}set pRasterizationState(e){null!==e?(e.flush(),this._pRasterizationState=e,this.memoryViewBigInt64[8]=e.memoryAddress):null===e&&(this._pRasterizationState=null,this.memoryViewBigInt64[8]=BI0)}get pMultisampleState(){return this._pMultisampleState}set pMultisampleState(e){null!==e?(e.flush(),this._pMultisampleState=e,this.memoryViewBigInt64[9]=e.memoryAddress):null===e&&(this._pMultisampleState=null,this.memoryViewBigInt64[9]=BI0)}get pDepthStencilState(){return this._pDepthStencilState}set pDepthStencilState(e){null!==e?(e.flush(),this._pDepthStencilState=e,this.memoryViewBigInt64[10]=e.memoryAddress):null===e&&(this._pDepthStencilState=null,this.memoryViewBigInt64[10]=BI0)}get pColorBlendState(){return this._pColorBlendState}set pColorBlendState(e){null!==e?(e.flush(),this._pColorBlendState=e,this.memoryViewBigInt64[11]=e.memoryAddress):null===e&&(this._pColorBlendState=null,this.memoryViewBigInt64[11]=BI0)}get pDynamicState(){return this._pDynamicState}set pDynamicState(e){null!==e?(e.flush(),this._pDynamicState=e,this.memoryViewBigInt64[12]=e.memoryAddress):null===e&&(this._pDynamicState=null,this.memoryViewBigInt64[12]=BI0)}get layout(){return this._layout}set layout(e){null!==e?(this._layout=e,this.memoryViewBigInt64[13]=e.memoryViewBigInt64[0]):null===e&&(this._layout=null,this.memoryViewBigInt64[13]=BI0)}get renderPass(){return this._renderPass}set renderPass(e){null!==e?(this._renderPass=e,this.memoryViewBigInt64[14]=e.memoryViewBigInt64[0]):null===e&&(this._renderPass=null,this.memoryViewBigInt64[14]=BI0)}get subpass(){return this.memoryViewUint32[30]}set subpass(e){this.memoryViewUint32[30]=e}get basePipelineHandle(){return this._basePipelineHandle}set basePipelineHandle(e){null!==e?(this._basePipelineHandle=e,this.memoryViewBigInt64[16]=e.memoryViewBigInt64[0]):null===e&&(this._basePipelineHandle=null,this.memoryViewBigInt64[16]=BI0)}get basePipelineIndex(){return this.memoryViewInt32[34]}set basePipelineIndex(e){this.memoryViewInt32[34]=e}}VkGraphicsPipelineCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pStages){let e=this._pStages;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pStagesNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkGraphicsPipelineCreateInfo.prototype.reflect=function(e){},VkGraphicsPipelineCreateInfo.byteLength=144,VkGraphicsPipelineCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},stageCount:{byteOffset:20,byteLength:4},pStages:{byteOffset:24,byteLength:8},pVertexInputState:{byteOffset:32,byteLength:8},pInputAssemblyState:{byteOffset:40,byteLength:8},pTessellationState:{byteOffset:48,byteLength:8},pViewportState:{byteOffset:56,byteLength:8},pRasterizationState:{byteOffset:64,byteLength:8},pMultisampleState:{byteOffset:72,byteLength:8},pDepthStencilState:{byteOffset:80,byteLength:8},pColorBlendState:{byteOffset:88,byteLength:8},pDynamicState:{byteOffset:96,byteLength:8},layout:{byteOffset:104,byteLength:8},renderPass:{byteOffset:112,byteLength:8},subpass:{byteOffset:120,byteLength:4},basePipelineHandle:{byteOffset:128,byteLength:8},basePipelineIndex:{byteOffset:136,byteLength:4}};class VkPipelineCacheCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._pInitialData=null,this.sType=17,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.initialDataSize&&(this.initialDataSize=e.initialDataSize),void 0!==e.pInitialData&&(this.pInitialData=e.pInitialData))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineCacheCreateInfo.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get initialDataSize(){return this.memoryViewBigInt64[3]}set initialDataSize(e){this.memoryViewBigInt64[3]=BigInt(e)}get pInitialData(){return this._pInitialData}set pInitialData(e){null!==e?(this._pInitialData=e,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pInitialData=null,this.memoryViewBigInt64[4]=BI0)}}VkPipelineCacheCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineCacheCreateInfo.prototype.reflect=function(e){},VkPipelineCacheCreateInfo.byteLength=40,VkPipelineCacheCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},initialDataSize:{byteOffset:24,byteLength:8},pInitialData:{byteOffset:32,byteLength:8}};class VkPushConstantRange{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4)):(this.memoryBuffer=new ArrayBuffer(12),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.stageFlags&&(this.stageFlags=e.stageFlags),void 0!==e.offset&&(this.offset=e.offset),void 0!==e.size&&(this.size=e.size))}get stageFlags(){return this.memoryViewInt32[0]}set stageFlags(e){this.memoryViewInt32[0]=e}get offset(){return this.memoryViewUint32[1]}set offset(e){this.memoryViewUint32[1]=e}get size(){return this.memoryViewUint32[2]}set size(e){this.memoryViewUint32[2]=e}}VkPushConstantRange.prototype.flush=function(){return!0},VkPushConstantRange.prototype.reflect=function(e){},VkPushConstantRange.byteLength=12,VkPushConstantRange.memoryLayout={stageFlags:{byteOffset:0,byteLength:4},offset:{byteOffset:4,byteLength:4},size:{byteOffset:8,byteLength:4}};class VkPipelineLayoutCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pSetLayouts=null,this._pSetLayoutsNative=null,this._pPushConstantRanges=null,this._pPushConstantRangesNative=null,this.sType=30,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.setLayoutCount&&(this.setLayoutCount=e.setLayoutCount),void 0!==e.pSetLayouts&&(this.pSetLayouts=e.pSetLayouts),void 0!==e.pushConstantRangeCount&&(this.pushConstantRangeCount=e.pushConstantRangeCount),void 0!==e.pPushConstantRanges&&(this.pPushConstantRanges=e.pPushConstantRanges))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineLayoutCreateInfo.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get setLayoutCount(){return this.memoryViewUint32[5]}set setLayoutCount(e){this.memoryViewUint32[5]=e}get pSetLayouts(){return this._pSetLayouts}set pSetLayouts(e){null!==e?this._pSetLayouts=e:null===e&&(this._pSetLayouts=null)}get pushConstantRangeCount(){return this.memoryViewUint32[8]}set pushConstantRangeCount(e){this.memoryViewUint32[8]=e}get pPushConstantRanges(){return this._pPushConstantRanges}set pPushConstantRanges(e){null!==e?this._pPushConstantRanges=e:null===e&&(this._pPushConstantRanges=null)}}VkPipelineLayoutCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pSetLayouts){let e=this._pSetLayouts;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pSetLayoutsNative=t,this.memoryViewBigInt64[3]=t.address}if(null!==this._pPushConstantRanges){let e=this._pPushConstantRanges;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pPushConstantRangesNative=t,this.memoryViewBigInt64[5]=t.address}return!0},VkPipelineLayoutCreateInfo.prototype.reflect=function(e){},VkPipelineLayoutCreateInfo.byteLength=48,VkPipelineLayoutCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},setLayoutCount:{byteOffset:20,byteLength:4},pSetLayouts:{byteOffset:24,byteLength:8},pushConstantRangeCount:{byteOffset:32,byteLength:4},pPushConstantRanges:{byteOffset:40,byteLength:8}};class VkSamplerCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+80)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+80)/8),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+80)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+80)/4)):(this.memoryBuffer=new ArrayBuffer(80),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=31,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.magFilter&&(this.magFilter=e.magFilter),void 0!==e.minFilter&&(this.minFilter=e.minFilter),void 0!==e.mipmapMode&&(this.mipmapMode=e.mipmapMode),void 0!==e.addressModeU&&(this.addressModeU=e.addressModeU),void 0!==e.addressModeV&&(this.addressModeV=e.addressModeV),void 0!==e.addressModeW&&(this.addressModeW=e.addressModeW),void 0!==e.mipLodBias&&(this.mipLodBias=e.mipLodBias),void 0!==e.anisotropyEnable&&(this.anisotropyEnable=e.anisotropyEnable),void 0!==e.maxAnisotropy&&(this.maxAnisotropy=e.maxAnisotropy),void 0!==e.compareEnable&&(this.compareEnable=e.compareEnable),void 0!==e.compareOp&&(this.compareOp=e.compareOp),void 0!==e.minLod&&(this.minLod=e.minLod),void 0!==e.maxLod&&(this.maxLod=e.maxLod),void 0!==e.borderColor&&(this.borderColor=e.borderColor),void 0!==e.unnormalizedCoordinates&&(this.unnormalizedCoordinates=e.unnormalizedCoordinates))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000156001:case 1000130001:break;default:throw new TypeError("Invalid type for 'VkSamplerCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get magFilter(){return this.memoryViewInt32[5]}set magFilter(e){this.memoryViewInt32[5]=e}get minFilter(){return this.memoryViewInt32[6]}set minFilter(e){this.memoryViewInt32[6]=e}get mipmapMode(){return this.memoryViewInt32[7]}set mipmapMode(e){this.memoryViewInt32[7]=e}get addressModeU(){return this.memoryViewInt32[8]}set addressModeU(e){this.memoryViewInt32[8]=e}get addressModeV(){return this.memoryViewInt32[9]}set addressModeV(e){this.memoryViewInt32[9]=e}get addressModeW(){return this.memoryViewInt32[10]}set addressModeW(e){this.memoryViewInt32[10]=e}get mipLodBias(){return this.memoryViewFloat32[11]}set mipLodBias(e){this.memoryViewFloat32[11]=e}get anisotropyEnable(){return 0!==this.memoryViewUint32[12]}set anisotropyEnable(e){this.memoryViewUint32[12]=0|e}get maxAnisotropy(){return this.memoryViewFloat32[13]}set maxAnisotropy(e){this.memoryViewFloat32[13]=e}get compareEnable(){return 0!==this.memoryViewUint32[14]}set compareEnable(e){this.memoryViewUint32[14]=0|e}get compareOp(){return this.memoryViewInt32[15]}set compareOp(e){this.memoryViewInt32[15]=e}get minLod(){return this.memoryViewFloat32[16]}set minLod(e){this.memoryViewFloat32[16]=e}get maxLod(){return this.memoryViewFloat32[17]}set maxLod(e){this.memoryViewFloat32[17]=e}get borderColor(){return this.memoryViewInt32[18]}set borderColor(e){this.memoryViewInt32[18]=e}get unnormalizedCoordinates(){return 0!==this.memoryViewUint32[19]}set unnormalizedCoordinates(e){this.memoryViewUint32[19]=0|e}}VkSamplerCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSamplerCreateInfo.prototype.reflect=function(e){},VkSamplerCreateInfo.byteLength=80,VkSamplerCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},magFilter:{byteOffset:20,byteLength:4},minFilter:{byteOffset:24,byteLength:4},mipmapMode:{byteOffset:28,byteLength:4},addressModeU:{byteOffset:32,byteLength:4},addressModeV:{byteOffset:36,byteLength:4},addressModeW:{byteOffset:40,byteLength:4},mipLodBias:{byteOffset:44,byteLength:4},anisotropyEnable:{byteOffset:48,byteLength:4},maxAnisotropy:{byteOffset:52,byteLength:4},compareEnable:{byteOffset:56,byteLength:4},compareOp:{byteOffset:60,byteLength:4},minLod:{byteOffset:64,byteLength:4},maxLod:{byteOffset:68,byteLength:4},borderColor:{byteOffset:72,byteLength:4},unnormalizedCoordinates:{byteOffset:76,byteLength:4}};class VkCommandPoolCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=39,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.queueFamilyIndex&&(this.queueFamilyIndex=e.queueFamilyIndex))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkCommandPoolCreateInfo.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get queueFamilyIndex(){return this.memoryViewUint32[5]}set queueFamilyIndex(e){this.memoryViewUint32[5]=e}}VkCommandPoolCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkCommandPoolCreateInfo.prototype.reflect=function(e){},VkCommandPoolCreateInfo.byteLength=24,VkCommandPoolCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},queueFamilyIndex:{byteOffset:20,byteLength:4}};class VkCommandBufferAllocateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._commandPool=null,this.sType=40,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.commandPool&&(this.commandPool=e.commandPool),void 0!==e.level&&(this.level=e.level),void 0!==e.commandBufferCount&&(this.commandBufferCount=e.commandBufferCount))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkCommandBufferAllocateInfo.pNext' isn't allowed to be filled")}get commandPool(){return this._commandPool}set commandPool(e){null!==e?(this._commandPool=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._commandPool=null,this.memoryViewBigInt64[2]=BI0)}get level(){return this.memoryViewInt32[6]}set level(e){this.memoryViewInt32[6]=e}get commandBufferCount(){return this.memoryViewUint32[7]}set commandBufferCount(e){this.memoryViewUint32[7]=e}}VkCommandBufferAllocateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkCommandBufferAllocateInfo.prototype.reflect=function(e){},VkCommandBufferAllocateInfo.byteLength=32,VkCommandBufferAllocateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},commandPool:{byteOffset:16,byteLength:8},level:{byteOffset:24,byteLength:4},commandBufferCount:{byteOffset:28,byteLength:4}};class VkCommandBufferInheritanceInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._renderPass=null,this._framebuffer=null,this.sType=41,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.renderPass&&(this.renderPass=e.renderPass),void 0!==e.subpass&&(this.subpass=e.subpass),void 0!==e.framebuffer&&(this.framebuffer=e.framebuffer),void 0!==e.occlusionQueryEnable&&(this.occlusionQueryEnable=e.occlusionQueryEnable),void 0!==e.queryFlags&&(this.queryFlags=e.queryFlags),void 0!==e.pipelineStatistics&&(this.pipelineStatistics=e.pipelineStatistics))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000081e3:break;default:throw new TypeError("Invalid type for 'VkCommandBufferInheritanceInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get renderPass(){return this._renderPass}set renderPass(e){null!==e?(this._renderPass=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._renderPass=null,this.memoryViewBigInt64[2]=BI0)}get subpass(){return this.memoryViewUint32[6]}set subpass(e){this.memoryViewUint32[6]=e}get framebuffer(){return this._framebuffer}set framebuffer(e){null!==e?(this._framebuffer=e,this.memoryViewBigInt64[4]=e.memoryViewBigInt64[0]):null===e&&(this._framebuffer=null,this.memoryViewBigInt64[4]=BI0)}get occlusionQueryEnable(){return 0!==this.memoryViewUint32[10]}set occlusionQueryEnable(e){this.memoryViewUint32[10]=0|e}get queryFlags(){return this.memoryViewInt32[11]}set queryFlags(e){this.memoryViewInt32[11]=e}get pipelineStatistics(){return this.memoryViewInt32[12]}set pipelineStatistics(e){this.memoryViewInt32[12]=e}}VkCommandBufferInheritanceInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkCommandBufferInheritanceInfo.prototype.reflect=function(e){},VkCommandBufferInheritanceInfo.byteLength=56,VkCommandBufferInheritanceInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},renderPass:{byteOffset:16,byteLength:8},subpass:{byteOffset:24,byteLength:4},framebuffer:{byteOffset:32,byteLength:8},occlusionQueryEnable:{byteOffset:40,byteLength:4},queryFlags:{byteOffset:44,byteLength:4},pipelineStatistics:{byteOffset:48,byteLength:4}};class VkCommandBufferBeginInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._pInheritanceInfo=null,this.sType=42,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.pInheritanceInfo&&(this.pInheritanceInfo=e.pInheritanceInfo))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000060004:break;default:throw new TypeError("Invalid type for 'VkCommandBufferBeginInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get pInheritanceInfo(){return this._pInheritanceInfo}set pInheritanceInfo(e){null!==e?(e.flush(),this._pInheritanceInfo=e,this.memoryViewBigInt64[3]=e.memoryAddress):null===e&&(this._pInheritanceInfo=null,this.memoryViewBigInt64[3]=BI0)}}VkCommandBufferBeginInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkCommandBufferBeginInfo.prototype.reflect=function(e){},VkCommandBufferBeginInfo.byteLength=32,VkCommandBufferBeginInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},pInheritanceInfo:{byteOffset:24,byteLength:8}};class VkRenderPassBeginInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._renderPass=null,this._framebuffer=null,this._renderArea=new VkRect2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+32}),this._pClearValues=null,this._pClearValuesNative=null,this.sType=43,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.renderPass&&(this.renderPass=e.renderPass),void 0!==e.framebuffer&&(this.framebuffer=e.framebuffer),void 0!==e.renderArea&&(this.renderArea=e.renderArea),void 0!==e.clearValueCount&&(this.clearValueCount=e.clearValueCount),void 0!==e.pClearValues&&(this.pClearValues=e.pClearValues))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000060003:case 1000143001:case 1000108003:break;default:throw new TypeError("Invalid type for 'VkRenderPassBeginInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get renderPass(){return this._renderPass}set renderPass(e){null!==e?(this._renderPass=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._renderPass=null,this.memoryViewBigInt64[2]=BI0)}get framebuffer(){return this._framebuffer}set framebuffer(e){null!==e?(this._framebuffer=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._framebuffer=null,this.memoryViewBigInt64[3]=BI0)}get renderArea(){return this._renderArea}set renderArea(e){null!==e?(e.flush(),this._renderArea=e):null===e&&(this._renderArea=null)}get clearValueCount(){return this.memoryViewUint32[12]}set clearValueCount(e){this.memoryViewUint32[12]=e}get pClearValues(){return this._pClearValues}set pClearValues(e){null!==e?this._pClearValues=e:null===e&&(this._pClearValues=null)}}VkRenderPassBeginInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._renderArea){let e=this._renderArea;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,32)}}if(null!==this._pClearValues){let e=this._pClearValues;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pClearValuesNative=t,this.memoryViewBigInt64[7]=t.address}return!0},VkRenderPassBeginInfo.prototype.reflect=function(e){},VkRenderPassBeginInfo.byteLength=64,VkRenderPassBeginInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},renderPass:{byteOffset:16,byteLength:8},framebuffer:{byteOffset:24,byteLength:8},renderArea:{byteOffset:32,byteLength:16},clearValueCount:{byteOffset:48,byteLength:4},pClearValues:{byteOffset:56,byteLength:8}};class VkClearDepthStencilValue{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.depth&&(this.depth=e.depth),void 0!==e.stencil&&(this.stencil=e.stencil))}get depth(){return this.memoryViewFloat32[0]}set depth(e){this.memoryViewFloat32[0]=e}get stencil(){return this.memoryViewUint32[1]}set stencil(e){this.memoryViewUint32[1]=e}}VkClearDepthStencilValue.prototype.flush=function(){return!0},VkClearDepthStencilValue.prototype.reflect=function(e){},VkClearDepthStencilValue.byteLength=8,VkClearDepthStencilValue.memoryLayout={depth:{byteOffset:0,byteLength:4},stencil:{byteOffset:4,byteLength:4}};class VkClearAttachment{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._clearValue=new VkClearValue({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+8}),"object"==typeof e&&(void 0!==e.aspectMask&&(this.aspectMask=e.aspectMask),void 0!==e.colorAttachment&&(this.colorAttachment=e.colorAttachment),void 0!==e.clearValue&&(this.clearValue=e.clearValue))}get aspectMask(){return this.memoryViewInt32[0]}set aspectMask(e){this.memoryViewInt32[0]=e}get colorAttachment(){return this.memoryViewUint32[1]}set colorAttachment(e){this.memoryViewUint32[1]=e}get clearValue(){return this._clearValue}set clearValue(e){null!==e?(e.flush(),this._clearValue=e):null===e&&(this._clearValue=null)}}VkClearAttachment.prototype.flush=function(){if(null!==this._clearValue){let e=this._clearValue;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,8)}}return!0},VkClearAttachment.prototype.reflect=function(e){},VkClearAttachment.byteLength=24,VkClearAttachment.memoryLayout={aspectMask:{byteOffset:0,byteLength:4},colorAttachment:{byteOffset:4,byteLength:4},clearValue:{byteOffset:8,byteLength:16}};class VkAttachmentDescription{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+36)/4)):(this.memoryBuffer=new ArrayBuffer(36),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.flags&&(this.flags=e.flags),void 0!==e.format&&(this.format=e.format),void 0!==e.samples&&(this.samples=e.samples),void 0!==e.loadOp&&(this.loadOp=e.loadOp),void 0!==e.storeOp&&(this.storeOp=e.storeOp),void 0!==e.stencilLoadOp&&(this.stencilLoadOp=e.stencilLoadOp),void 0!==e.stencilStoreOp&&(this.stencilStoreOp=e.stencilStoreOp),void 0!==e.initialLayout&&(this.initialLayout=e.initialLayout),void 0!==e.finalLayout&&(this.finalLayout=e.finalLayout))}get flags(){return this.memoryViewInt32[0]}set flags(e){this.memoryViewInt32[0]=e}get format(){return this.memoryViewInt32[1]}set format(e){this.memoryViewInt32[1]=e}get samples(){return this.memoryViewInt32[2]}set samples(e){this.memoryViewInt32[2]=e}get loadOp(){return this.memoryViewInt32[3]}set loadOp(e){this.memoryViewInt32[3]=e}get storeOp(){return this.memoryViewInt32[4]}set storeOp(e){this.memoryViewInt32[4]=e}get stencilLoadOp(){return this.memoryViewInt32[5]}set stencilLoadOp(e){this.memoryViewInt32[5]=e}get stencilStoreOp(){return this.memoryViewInt32[6]}set stencilStoreOp(e){this.memoryViewInt32[6]=e}get initialLayout(){return this.memoryViewInt32[7]}set initialLayout(e){this.memoryViewInt32[7]=e}get finalLayout(){return this.memoryViewInt32[8]}set finalLayout(e){this.memoryViewInt32[8]=e}}VkAttachmentDescription.prototype.flush=function(){return!0},VkAttachmentDescription.prototype.reflect=function(e){},VkAttachmentDescription.byteLength=36,VkAttachmentDescription.memoryLayout={flags:{byteOffset:0,byteLength:4},format:{byteOffset:4,byteLength:4},samples:{byteOffset:8,byteLength:4},loadOp:{byteOffset:12,byteLength:4},storeOp:{byteOffset:16,byteLength:4},stencilLoadOp:{byteOffset:20,byteLength:4},stencilStoreOp:{byteOffset:24,byteLength:4},initialLayout:{byteOffset:28,byteLength:4},finalLayout:{byteOffset:32,byteLength:4}};class VkAttachmentReference{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.attachment&&(this.attachment=e.attachment),void 0!==e.layout&&(this.layout=e.layout))}get attachment(){return this.memoryViewUint32[0]}set attachment(e){this.memoryViewUint32[0]=e}get layout(){return this.memoryViewInt32[1]}set layout(e){this.memoryViewInt32[1]=e}}VkAttachmentReference.prototype.flush=function(){return!0},VkAttachmentReference.prototype.reflect=function(e){},VkAttachmentReference.byteLength=8,VkAttachmentReference.memoryLayout={attachment:{byteOffset:0,byteLength:4},layout:{byteOffset:4,byteLength:4}};class VkSubpassDescription{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+72)/8)):(this.memoryBuffer=new ArrayBuffer(72),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pInputAttachments=null,this._pInputAttachmentsNative=null,this._pColorAttachments=null,this._pColorAttachmentsNative=null,this._pResolveAttachments=null,this._pResolveAttachmentsNative=null,this._pDepthStencilAttachment=null,this._pPreserveAttachments=null,"object"==typeof e&&(void 0!==e.flags&&(this.flags=e.flags),void 0!==e.pipelineBindPoint&&(this.pipelineBindPoint=e.pipelineBindPoint),void 0!==e.inputAttachmentCount&&(this.inputAttachmentCount=e.inputAttachmentCount),void 0!==e.pInputAttachments&&(this.pInputAttachments=e.pInputAttachments),void 0!==e.colorAttachmentCount&&(this.colorAttachmentCount=e.colorAttachmentCount),void 0!==e.pColorAttachments&&(this.pColorAttachments=e.pColorAttachments),void 0!==e.pResolveAttachments&&(this.pResolveAttachments=e.pResolveAttachments),void 0!==e.pDepthStencilAttachment&&(this.pDepthStencilAttachment=e.pDepthStencilAttachment),void 0!==e.preserveAttachmentCount&&(this.preserveAttachmentCount=e.preserveAttachmentCount),void 0!==e.pPreserveAttachments&&(this.pPreserveAttachments=e.pPreserveAttachments))}get flags(){return this.memoryViewInt32[0]}set flags(e){this.memoryViewInt32[0]=e}get pipelineBindPoint(){return this.memoryViewInt32[1]}set pipelineBindPoint(e){this.memoryViewInt32[1]=e}get inputAttachmentCount(){return this.memoryViewUint32[2]}set inputAttachmentCount(e){this.memoryViewUint32[2]=e}get pInputAttachments(){return this._pInputAttachments}set pInputAttachments(e){null!==e?this._pInputAttachments=e:null===e&&(this._pInputAttachments=null)}get colorAttachmentCount(){return this.memoryViewUint32[6]}set colorAttachmentCount(e){this.memoryViewUint32[6]=e}get pColorAttachments(){return this._pColorAttachments}set pColorAttachments(e){null!==e?this._pColorAttachments=e:null===e&&(this._pColorAttachments=null)}get pResolveAttachments(){return this._pResolveAttachments}set pResolveAttachments(e){null!==e?this._pResolveAttachments=e:null===e&&(this._pResolveAttachments=null)}get pDepthStencilAttachment(){return this._pDepthStencilAttachment}set pDepthStencilAttachment(e){null!==e?(e.flush(),this._pDepthStencilAttachment=e,this.memoryViewBigInt64[6]=e.memoryAddress):null===e&&(this._pDepthStencilAttachment=null,this.memoryViewBigInt64[6]=BI0)}get preserveAttachmentCount(){return this.memoryViewUint32[14]}set preserveAttachmentCount(e){this.memoryViewUint32[14]=e}get pPreserveAttachments(){return this._pPreserveAttachments}set pPreserveAttachments(e){null!==e?(this._pPreserveAttachments=e,this.memoryViewBigInt64[8]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pPreserveAttachments=null,this.memoryViewBigInt64[8]=BI0)}}VkSubpassDescription.prototype.flush=function(){if(null!==this._pInputAttachments){let e=this._pInputAttachments;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pInputAttachmentsNative=t,this.memoryViewBigInt64[2]=t.address}if(null!==this._pColorAttachments){let e=this._pColorAttachments;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pColorAttachmentsNative=t,this.memoryViewBigInt64[4]=t.address}if(null!==this._pResolveAttachments){let e=this._pResolveAttachments;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pResolveAttachmentsNative=t,this.memoryViewBigInt64[5]=t.address}return!0},VkSubpassDescription.prototype.reflect=function(e){},VkSubpassDescription.byteLength=72,VkSubpassDescription.memoryLayout={flags:{byteOffset:0,byteLength:4},pipelineBindPoint:{byteOffset:4,byteLength:4},inputAttachmentCount:{byteOffset:8,byteLength:4},pInputAttachments:{byteOffset:16,byteLength:8},colorAttachmentCount:{byteOffset:24,byteLength:4},pColorAttachments:{byteOffset:32,byteLength:8},pResolveAttachments:{byteOffset:40,byteLength:8},pDepthStencilAttachment:{byteOffset:48,byteLength:8},preserveAttachmentCount:{byteOffset:56,byteLength:4},pPreserveAttachments:{byteOffset:64,byteLength:8}};class VkSubpassDependency{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+28)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+28)/4)):(this.memoryBuffer=new ArrayBuffer(28),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.srcSubpass&&(this.srcSubpass=e.srcSubpass),void 0!==e.dstSubpass&&(this.dstSubpass=e.dstSubpass),void 0!==e.srcStageMask&&(this.srcStageMask=e.srcStageMask),void 0!==e.dstStageMask&&(this.dstStageMask=e.dstStageMask),void 0!==e.srcAccessMask&&(this.srcAccessMask=e.srcAccessMask),void 0!==e.dstAccessMask&&(this.dstAccessMask=e.dstAccessMask),void 0!==e.dependencyFlags&&(this.dependencyFlags=e.dependencyFlags))}get srcSubpass(){return this.memoryViewUint32[0]}set srcSubpass(e){this.memoryViewUint32[0]=e}get dstSubpass(){return this.memoryViewUint32[1]}set dstSubpass(e){this.memoryViewUint32[1]=e}get srcStageMask(){return this.memoryViewInt32[2]}set srcStageMask(e){this.memoryViewInt32[2]=e}get dstStageMask(){return this.memoryViewInt32[3]}set dstStageMask(e){this.memoryViewInt32[3]=e}get srcAccessMask(){return this.memoryViewInt32[4]}set srcAccessMask(e){this.memoryViewInt32[4]=e}get dstAccessMask(){return this.memoryViewInt32[5]}set dstAccessMask(e){this.memoryViewInt32[5]=e}get dependencyFlags(){return this.memoryViewInt32[6]}set dependencyFlags(e){this.memoryViewInt32[6]=e}}VkSubpassDependency.prototype.flush=function(){return!0},VkSubpassDependency.prototype.reflect=function(e){},VkSubpassDependency.byteLength=28,VkSubpassDependency.memoryLayout={srcSubpass:{byteOffset:0,byteLength:4},dstSubpass:{byteOffset:4,byteLength:4},srcStageMask:{byteOffset:8,byteLength:4},dstStageMask:{byteOffset:12,byteLength:4},srcAccessMask:{byteOffset:16,byteLength:4},dstAccessMask:{byteOffset:20,byteLength:4},dependencyFlags:{byteOffset:24,byteLength:4}};class VkRenderPassCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pAttachments=null,this._pAttachmentsNative=null,this._pSubpasses=null,this._pSubpassesNative=null,this._pDependencies=null,this._pDependenciesNative=null,this.sType=38,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.attachmentCount&&(this.attachmentCount=e.attachmentCount),void 0!==e.pAttachments&&(this.pAttachments=e.pAttachments),void 0!==e.subpassCount&&(this.subpassCount=e.subpassCount),void 0!==e.pSubpasses&&(this.pSubpasses=e.pSubpasses),void 0!==e.dependencyCount&&(this.dependencyCount=e.dependencyCount),void 0!==e.pDependencies&&(this.pDependencies=e.pDependencies))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000053e3:case 1000117001:case 1000218002:break;default:throw new TypeError("Invalid type for 'VkRenderPassCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get attachmentCount(){return this.memoryViewUint32[5]}set attachmentCount(e){this.memoryViewUint32[5]=e}get pAttachments(){return this._pAttachments}set pAttachments(e){null!==e?this._pAttachments=e:null===e&&(this._pAttachments=null)}get subpassCount(){return this.memoryViewUint32[8]}set subpassCount(e){this.memoryViewUint32[8]=e}get pSubpasses(){return this._pSubpasses}set pSubpasses(e){null!==e?this._pSubpasses=e:null===e&&(this._pSubpasses=null)}get dependencyCount(){return this.memoryViewUint32[12]}set dependencyCount(e){this.memoryViewUint32[12]=e}get pDependencies(){return this._pDependencies}set pDependencies(e){null!==e?this._pDependencies=e:null===e&&(this._pDependencies=null)}}VkRenderPassCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pAttachments){let e=this._pAttachments;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pAttachmentsNative=t,this.memoryViewBigInt64[3]=t.address}if(null!==this._pSubpasses){let e=this._pSubpasses;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pSubpassesNative=t,this.memoryViewBigInt64[5]=t.address}if(null!==this._pDependencies){let e=this._pDependencies;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pDependenciesNative=t,this.memoryViewBigInt64[7]=t.address}return!0},VkRenderPassCreateInfo.prototype.reflect=function(e){},VkRenderPassCreateInfo.byteLength=64,VkRenderPassCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},attachmentCount:{byteOffset:20,byteLength:4},pAttachments:{byteOffset:24,byteLength:8},subpassCount:{byteOffset:32,byteLength:4},pSubpasses:{byteOffset:40,byteLength:8},dependencyCount:{byteOffset:48,byteLength:4},pDependencies:{byteOffset:56,byteLength:8}};class VkEventCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=10,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkEventCreateInfo.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}}VkEventCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkEventCreateInfo.prototype.reflect=function(e){},VkEventCreateInfo.byteLength=24,VkEventCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4}};class VkFenceCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=8,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000113e3:case 1000114001:break;default:throw new TypeError("Invalid type for 'VkFenceCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}}VkFenceCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkFenceCreateInfo.prototype.reflect=function(e){},VkFenceCreateInfo.byteLength=24,VkFenceCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceFeatures{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+220)/4)):(this.memoryBuffer=new ArrayBuffer(220),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.robustBufferAccess&&(this.robustBufferAccess=e.robustBufferAccess),void 0!==e.fullDrawIndexUint32&&(this.fullDrawIndexUint32=e.fullDrawIndexUint32),void 0!==e.imageCubeArray&&(this.imageCubeArray=e.imageCubeArray),void 0!==e.independentBlend&&(this.independentBlend=e.independentBlend),void 0!==e.geometryShader&&(this.geometryShader=e.geometryShader),void 0!==e.tessellationShader&&(this.tessellationShader=e.tessellationShader),void 0!==e.sampleRateShading&&(this.sampleRateShading=e.sampleRateShading),void 0!==e.dualSrcBlend&&(this.dualSrcBlend=e.dualSrcBlend),void 0!==e.logicOp&&(this.logicOp=e.logicOp),void 0!==e.multiDrawIndirect&&(this.multiDrawIndirect=e.multiDrawIndirect),void 0!==e.drawIndirectFirstInstance&&(this.drawIndirectFirstInstance=e.drawIndirectFirstInstance),void 0!==e.depthClamp&&(this.depthClamp=e.depthClamp),void 0!==e.depthBiasClamp&&(this.depthBiasClamp=e.depthBiasClamp),void 0!==e.fillModeNonSolid&&(this.fillModeNonSolid=e.fillModeNonSolid),void 0!==e.depthBounds&&(this.depthBounds=e.depthBounds),void 0!==e.wideLines&&(this.wideLines=e.wideLines),void 0!==e.largePoints&&(this.largePoints=e.largePoints),void 0!==e.alphaToOne&&(this.alphaToOne=e.alphaToOne),void 0!==e.multiViewport&&(this.multiViewport=e.multiViewport),void 0!==e.samplerAnisotropy&&(this.samplerAnisotropy=e.samplerAnisotropy),void 0!==e.textureCompressionETC2&&(this.textureCompressionETC2=e.textureCompressionETC2),void 0!==e.textureCompressionASTC_LDR&&(this.textureCompressionASTC_LDR=e.textureCompressionASTC_LDR),void 0!==e.textureCompressionBC&&(this.textureCompressionBC=e.textureCompressionBC),void 0!==e.occlusionQueryPrecise&&(this.occlusionQueryPrecise=e.occlusionQueryPrecise),void 0!==e.pipelineStatisticsQuery&&(this.pipelineStatisticsQuery=e.pipelineStatisticsQuery),void 0!==e.vertexPipelineStoresAndAtomics&&(this.vertexPipelineStoresAndAtomics=e.vertexPipelineStoresAndAtomics),void 0!==e.fragmentStoresAndAtomics&&(this.fragmentStoresAndAtomics=e.fragmentStoresAndAtomics),void 0!==e.shaderTessellationAndGeometryPointSize&&(this.shaderTessellationAndGeometryPointSize=e.shaderTessellationAndGeometryPointSize),void 0!==e.shaderImageGatherExtended&&(this.shaderImageGatherExtended=e.shaderImageGatherExtended),void 0!==e.shaderStorageImageExtendedFormats&&(this.shaderStorageImageExtendedFormats=e.shaderStorageImageExtendedFormats),void 0!==e.shaderStorageImageMultisample&&(this.shaderStorageImageMultisample=e.shaderStorageImageMultisample),void 0!==e.shaderStorageImageReadWithoutFormat&&(this.shaderStorageImageReadWithoutFormat=e.shaderStorageImageReadWithoutFormat),void 0!==e.shaderStorageImageWriteWithoutFormat&&(this.shaderStorageImageWriteWithoutFormat=e.shaderStorageImageWriteWithoutFormat),void 0!==e.shaderUniformBufferArrayDynamicIndexing&&(this.shaderUniformBufferArrayDynamicIndexing=e.shaderUniformBufferArrayDynamicIndexing),void 0!==e.shaderSampledImageArrayDynamicIndexing&&(this.shaderSampledImageArrayDynamicIndexing=e.shaderSampledImageArrayDynamicIndexing),void 0!==e.shaderStorageBufferArrayDynamicIndexing&&(this.shaderStorageBufferArrayDynamicIndexing=e.shaderStorageBufferArrayDynamicIndexing),void 0!==e.shaderStorageImageArrayDynamicIndexing&&(this.shaderStorageImageArrayDynamicIndexing=e.shaderStorageImageArrayDynamicIndexing),void 0!==e.shaderClipDistance&&(this.shaderClipDistance=e.shaderClipDistance),void 0!==e.shaderCullDistance&&(this.shaderCullDistance=e.shaderCullDistance),void 0!==e.shaderFloat64&&(this.shaderFloat64=e.shaderFloat64),void 0!==e.shaderInt64&&(this.shaderInt64=e.shaderInt64),void 0!==e.shaderInt16&&(this.shaderInt16=e.shaderInt16),void 0!==e.shaderResourceResidency&&(this.shaderResourceResidency=e.shaderResourceResidency),void 0!==e.shaderResourceMinLod&&(this.shaderResourceMinLod=e.shaderResourceMinLod),void 0!==e.sparseBinding&&(this.sparseBinding=e.sparseBinding),void 0!==e.sparseResidencyBuffer&&(this.sparseResidencyBuffer=e.sparseResidencyBuffer),void 0!==e.sparseResidencyImage2D&&(this.sparseResidencyImage2D=e.sparseResidencyImage2D),void 0!==e.sparseResidencyImage3D&&(this.sparseResidencyImage3D=e.sparseResidencyImage3D),void 0!==e.sparseResidency2Samples&&(this.sparseResidency2Samples=e.sparseResidency2Samples),void 0!==e.sparseResidency4Samples&&(this.sparseResidency4Samples=e.sparseResidency4Samples),void 0!==e.sparseResidency8Samples&&(this.sparseResidency8Samples=e.sparseResidency8Samples),void 0!==e.sparseResidency16Samples&&(this.sparseResidency16Samples=e.sparseResidency16Samples),void 0!==e.sparseResidencyAliased&&(this.sparseResidencyAliased=e.sparseResidencyAliased),void 0!==e.variableMultisampleRate&&(this.variableMultisampleRate=e.variableMultisampleRate),void 0!==e.inheritedQueries&&(this.inheritedQueries=e.inheritedQueries))}get robustBufferAccess(){return 0!==this.memoryViewUint32[0]}set robustBufferAccess(e){this.memoryViewUint32[0]=0|e}get fullDrawIndexUint32(){return 0!==this.memoryViewUint32[1]}set fullDrawIndexUint32(e){this.memoryViewUint32[1]=0|e}get imageCubeArray(){return 0!==this.memoryViewUint32[2]}set imageCubeArray(e){this.memoryViewUint32[2]=0|e}get independentBlend(){return 0!==this.memoryViewUint32[3]}set independentBlend(e){this.memoryViewUint32[3]=0|e}get geometryShader(){return 0!==this.memoryViewUint32[4]}set geometryShader(e){this.memoryViewUint32[4]=0|e}get tessellationShader(){return 0!==this.memoryViewUint32[5]}set tessellationShader(e){this.memoryViewUint32[5]=0|e}get sampleRateShading(){return 0!==this.memoryViewUint32[6]}set sampleRateShading(e){this.memoryViewUint32[6]=0|e}get dualSrcBlend(){return 0!==this.memoryViewUint32[7]}set dualSrcBlend(e){this.memoryViewUint32[7]=0|e}get logicOp(){return 0!==this.memoryViewUint32[8]}set logicOp(e){this.memoryViewUint32[8]=0|e}get multiDrawIndirect(){return 0!==this.memoryViewUint32[9]}set multiDrawIndirect(e){this.memoryViewUint32[9]=0|e}get drawIndirectFirstInstance(){return 0!==this.memoryViewUint32[10]}set drawIndirectFirstInstance(e){this.memoryViewUint32[10]=0|e}get depthClamp(){return 0!==this.memoryViewUint32[11]}set depthClamp(e){this.memoryViewUint32[11]=0|e}get depthBiasClamp(){return 0!==this.memoryViewUint32[12]}set depthBiasClamp(e){this.memoryViewUint32[12]=0|e}get fillModeNonSolid(){return 0!==this.memoryViewUint32[13]}set fillModeNonSolid(e){this.memoryViewUint32[13]=0|e}get depthBounds(){return 0!==this.memoryViewUint32[14]}set depthBounds(e){this.memoryViewUint32[14]=0|e}get wideLines(){return 0!==this.memoryViewUint32[15]}set wideLines(e){this.memoryViewUint32[15]=0|e}get largePoints(){return 0!==this.memoryViewUint32[16]}set largePoints(e){this.memoryViewUint32[16]=0|e}get alphaToOne(){return 0!==this.memoryViewUint32[17]}set alphaToOne(e){this.memoryViewUint32[17]=0|e}get multiViewport(){return 0!==this.memoryViewUint32[18]}set multiViewport(e){this.memoryViewUint32[18]=0|e}get samplerAnisotropy(){return 0!==this.memoryViewUint32[19]}set samplerAnisotropy(e){this.memoryViewUint32[19]=0|e}get textureCompressionETC2(){return 0!==this.memoryViewUint32[20]}set textureCompressionETC2(e){this.memoryViewUint32[20]=0|e}get textureCompressionASTC_LDR(){return 0!==this.memoryViewUint32[21]}set textureCompressionASTC_LDR(e){this.memoryViewUint32[21]=0|e}get textureCompressionBC(){return 0!==this.memoryViewUint32[22]}set textureCompressionBC(e){this.memoryViewUint32[22]=0|e}get occlusionQueryPrecise(){return 0!==this.memoryViewUint32[23]}set occlusionQueryPrecise(e){this.memoryViewUint32[23]=0|e}get pipelineStatisticsQuery(){return 0!==this.memoryViewUint32[24]}set pipelineStatisticsQuery(e){this.memoryViewUint32[24]=0|e}get vertexPipelineStoresAndAtomics(){return 0!==this.memoryViewUint32[25]}set vertexPipelineStoresAndAtomics(e){this.memoryViewUint32[25]=0|e}get fragmentStoresAndAtomics(){return 0!==this.memoryViewUint32[26]}set fragmentStoresAndAtomics(e){this.memoryViewUint32[26]=0|e}get shaderTessellationAndGeometryPointSize(){return 0!==this.memoryViewUint32[27]}set shaderTessellationAndGeometryPointSize(e){this.memoryViewUint32[27]=0|e}get shaderImageGatherExtended(){return 0!==this.memoryViewUint32[28]}set shaderImageGatherExtended(e){this.memoryViewUint32[28]=0|e}get shaderStorageImageExtendedFormats(){return 0!==this.memoryViewUint32[29]}set shaderStorageImageExtendedFormats(e){this.memoryViewUint32[29]=0|e}get shaderStorageImageMultisample(){return 0!==this.memoryViewUint32[30]}set shaderStorageImageMultisample(e){this.memoryViewUint32[30]=0|e}get shaderStorageImageReadWithoutFormat(){return 0!==this.memoryViewUint32[31]}set shaderStorageImageReadWithoutFormat(e){this.memoryViewUint32[31]=0|e}get shaderStorageImageWriteWithoutFormat(){return 0!==this.memoryViewUint32[32]}set shaderStorageImageWriteWithoutFormat(e){this.memoryViewUint32[32]=0|e}get shaderUniformBufferArrayDynamicIndexing(){return 0!==this.memoryViewUint32[33]}set shaderUniformBufferArrayDynamicIndexing(e){this.memoryViewUint32[33]=0|e}get shaderSampledImageArrayDynamicIndexing(){return 0!==this.memoryViewUint32[34]}set shaderSampledImageArrayDynamicIndexing(e){this.memoryViewUint32[34]=0|e}get shaderStorageBufferArrayDynamicIndexing(){return 0!==this.memoryViewUint32[35]}set shaderStorageBufferArrayDynamicIndexing(e){this.memoryViewUint32[35]=0|e}get shaderStorageImageArrayDynamicIndexing(){return 0!==this.memoryViewUint32[36]}set shaderStorageImageArrayDynamicIndexing(e){this.memoryViewUint32[36]=0|e}get shaderClipDistance(){return 0!==this.memoryViewUint32[37]}set shaderClipDistance(e){this.memoryViewUint32[37]=0|e}get shaderCullDistance(){return 0!==this.memoryViewUint32[38]}set shaderCullDistance(e){this.memoryViewUint32[38]=0|e}get shaderFloat64(){return 0!==this.memoryViewUint32[39]}set shaderFloat64(e){this.memoryViewUint32[39]=0|e}get shaderInt64(){return 0!==this.memoryViewUint32[40]}set shaderInt64(e){this.memoryViewUint32[40]=0|e}get shaderInt16(){return 0!==this.memoryViewUint32[41]}set shaderInt16(e){this.memoryViewUint32[41]=0|e}get shaderResourceResidency(){return 0!==this.memoryViewUint32[42]}set shaderResourceResidency(e){this.memoryViewUint32[42]=0|e}get shaderResourceMinLod(){return 0!==this.memoryViewUint32[43]}set shaderResourceMinLod(e){this.memoryViewUint32[43]=0|e}get sparseBinding(){return 0!==this.memoryViewUint32[44]}set sparseBinding(e){this.memoryViewUint32[44]=0|e}get sparseResidencyBuffer(){return 0!==this.memoryViewUint32[45]}set sparseResidencyBuffer(e){this.memoryViewUint32[45]=0|e}get sparseResidencyImage2D(){return 0!==this.memoryViewUint32[46]}set sparseResidencyImage2D(e){this.memoryViewUint32[46]=0|e}get sparseResidencyImage3D(){return 0!==this.memoryViewUint32[47]}set sparseResidencyImage3D(e){this.memoryViewUint32[47]=0|e}get sparseResidency2Samples(){return 0!==this.memoryViewUint32[48]}set sparseResidency2Samples(e){this.memoryViewUint32[48]=0|e}get sparseResidency4Samples(){return 0!==this.memoryViewUint32[49]}set sparseResidency4Samples(e){this.memoryViewUint32[49]=0|e}get sparseResidency8Samples(){return 0!==this.memoryViewUint32[50]}set sparseResidency8Samples(e){this.memoryViewUint32[50]=0|e}get sparseResidency16Samples(){return 0!==this.memoryViewUint32[51]}set sparseResidency16Samples(e){this.memoryViewUint32[51]=0|e}get sparseResidencyAliased(){return 0!==this.memoryViewUint32[52]}set sparseResidencyAliased(e){this.memoryViewUint32[52]=0|e}get variableMultisampleRate(){return 0!==this.memoryViewUint32[53]}set variableMultisampleRate(e){this.memoryViewUint32[53]=0|e}get inheritedQueries(){return 0!==this.memoryViewUint32[54]}set inheritedQueries(e){this.memoryViewUint32[54]=0|e}}VkPhysicalDeviceFeatures.prototype.flush=function(){return!0},VkPhysicalDeviceFeatures.prototype.reflect=function(e){},VkPhysicalDeviceFeatures.byteLength=220,VkPhysicalDeviceFeatures.memoryLayout={robustBufferAccess:{byteOffset:0,byteLength:4},fullDrawIndexUint32:{byteOffset:4,byteLength:4},imageCubeArray:{byteOffset:8,byteLength:4},independentBlend:{byteOffset:12,byteLength:4},geometryShader:{byteOffset:16,byteLength:4},tessellationShader:{byteOffset:20,byteLength:4},sampleRateShading:{byteOffset:24,byteLength:4},dualSrcBlend:{byteOffset:28,byteLength:4},logicOp:{byteOffset:32,byteLength:4},multiDrawIndirect:{byteOffset:36,byteLength:4},drawIndirectFirstInstance:{byteOffset:40,byteLength:4},depthClamp:{byteOffset:44,byteLength:4},depthBiasClamp:{byteOffset:48,byteLength:4},fillModeNonSolid:{byteOffset:52,byteLength:4},depthBounds:{byteOffset:56,byteLength:4},wideLines:{byteOffset:60,byteLength:4},largePoints:{byteOffset:64,byteLength:4},alphaToOne:{byteOffset:68,byteLength:4},multiViewport:{byteOffset:72,byteLength:4},samplerAnisotropy:{byteOffset:76,byteLength:4},textureCompressionETC2:{byteOffset:80,byteLength:4},textureCompressionASTC_LDR:{byteOffset:84,byteLength:4},textureCompressionBC:{byteOffset:88,byteLength:4},occlusionQueryPrecise:{byteOffset:92,byteLength:4},pipelineStatisticsQuery:{byteOffset:96,byteLength:4},vertexPipelineStoresAndAtomics:{byteOffset:100,byteLength:4},fragmentStoresAndAtomics:{byteOffset:104,byteLength:4},shaderTessellationAndGeometryPointSize:{byteOffset:108,byteLength:4},shaderImageGatherExtended:{byteOffset:112,byteLength:4},shaderStorageImageExtendedFormats:{byteOffset:116,byteLength:4},shaderStorageImageMultisample:{byteOffset:120,byteLength:4},shaderStorageImageReadWithoutFormat:{byteOffset:124,byteLength:4},shaderStorageImageWriteWithoutFormat:{byteOffset:128,byteLength:4},shaderUniformBufferArrayDynamicIndexing:{byteOffset:132,byteLength:4},shaderSampledImageArrayDynamicIndexing:{byteOffset:136,byteLength:4},shaderStorageBufferArrayDynamicIndexing:{byteOffset:140,byteLength:4},shaderStorageImageArrayDynamicIndexing:{byteOffset:144,byteLength:4},shaderClipDistance:{byteOffset:148,byteLength:4},shaderCullDistance:{byteOffset:152,byteLength:4},shaderFloat64:{byteOffset:156,byteLength:4},shaderInt64:{byteOffset:160,byteLength:4},shaderInt16:{byteOffset:164,byteLength:4},shaderResourceResidency:{byteOffset:168,byteLength:4},shaderResourceMinLod:{byteOffset:172,byteLength:4},sparseBinding:{byteOffset:176,byteLength:4},sparseResidencyBuffer:{byteOffset:180,byteLength:4},sparseResidencyImage2D:{byteOffset:184,byteLength:4},sparseResidencyImage3D:{byteOffset:188,byteLength:4},sparseResidency2Samples:{byteOffset:192,byteLength:4},sparseResidency4Samples:{byteOffset:196,byteLength:4},sparseResidency8Samples:{byteOffset:200,byteLength:4},sparseResidency16Samples:{byteOffset:204,byteLength:4},sparseResidencyAliased:{byteOffset:208,byteLength:4},variableMultisampleRate:{byteOffset:212,byteLength:4},inheritedQueries:{byteOffset:216,byteLength:4}};class VkPhysicalDeviceSparseProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+20)/4)):(this.memoryBuffer=new ArrayBuffer(20),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer))}get residencyStandard2DBlockShape(){return 0!==this.memoryViewUint32[0]}get residencyStandard2DMultisampleBlockShape(){return 0!==this.memoryViewUint32[1]}get residencyStandard3DBlockShape(){return 0!==this.memoryViewUint32[2]}get residencyAlignedMipSize(){return 0!==this.memoryViewUint32[3]}get residencyNonResidentStrict(){return 0!==this.memoryViewUint32[4]}}VkPhysicalDeviceSparseProperties.prototype.flush=function(){return!0},VkPhysicalDeviceSparseProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(20)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,20),0)},VkPhysicalDeviceSparseProperties.byteLength=20,VkPhysicalDeviceSparseProperties.memoryLayout={residencyStandard2DBlockShape:{byteOffset:0,byteLength:4},residencyStandard2DMultisampleBlockShape:{byteOffset:4,byteLength:4},residencyStandard3DBlockShape:{byteOffset:8,byteLength:4},residencyAlignedMipSize:{byteOffset:12,byteLength:4},residencyNonResidentStrict:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceLimits{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+504)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+504)/8),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+504)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+504)/8),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+504)/4)):(this.memoryBuffer=new ArrayBuffer(504),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),this._maxComputeWorkGroupCount=[...Array(3)].fill(0),this._maxComputeWorkGroupSize=[...Array(3)].fill(0),this._maxViewportDimensions=[...Array(2)].fill(0),this._viewportBoundsRange=[...Array(2)].fill(0),this._pointSizeRange=[...Array(2)].fill(0),this._lineWidthRange=[...Array(2)].fill(0)}get maxImageDimension1D(){return this.memoryViewUint32[0]}get maxImageDimension2D(){return this.memoryViewUint32[1]}get maxImageDimension3D(){return this.memoryViewUint32[2]}get maxImageDimensionCube(){return this.memoryViewUint32[3]}get maxImageArrayLayers(){return this.memoryViewUint32[4]}get maxTexelBufferElements(){return this.memoryViewUint32[5]}get maxUniformBufferRange(){return this.memoryViewUint32[6]}get maxStorageBufferRange(){return this.memoryViewUint32[7]}get maxPushConstantsSize(){return this.memoryViewUint32[8]}get maxMemoryAllocationCount(){return this.memoryViewUint32[9]}get maxSamplerAllocationCount(){return this.memoryViewUint32[10]}get bufferImageGranularity(){return this.memoryViewBigUint64[6]}get sparseAddressSpaceSize(){return this.memoryViewBigUint64[7]}get maxBoundDescriptorSets(){return this.memoryViewUint32[16]}get maxPerStageDescriptorSamplers(){return this.memoryViewUint32[17]}get maxPerStageDescriptorUniformBuffers(){return this.memoryViewUint32[18]}get maxPerStageDescriptorStorageBuffers(){return this.memoryViewUint32[19]}get maxPerStageDescriptorSampledImages(){return this.memoryViewUint32[20]}get maxPerStageDescriptorStorageImages(){return this.memoryViewUint32[21]}get maxPerStageDescriptorInputAttachments(){return this.memoryViewUint32[22]}get maxPerStageResources(){return this.memoryViewUint32[23]}get maxDescriptorSetSamplers(){return this.memoryViewUint32[24]}get maxDescriptorSetUniformBuffers(){return this.memoryViewUint32[25]}get maxDescriptorSetUniformBuffersDynamic(){return this.memoryViewUint32[26]}get maxDescriptorSetStorageBuffers(){return this.memoryViewUint32[27]}get maxDescriptorSetStorageBuffersDynamic(){return this.memoryViewUint32[28]}get maxDescriptorSetSampledImages(){return this.memoryViewUint32[29]}get maxDescriptorSetStorageImages(){return this.memoryViewUint32[30]}get maxDescriptorSetInputAttachments(){return this.memoryViewUint32[31]}get maxVertexInputAttributes(){return this.memoryViewUint32[32]}get maxVertexInputBindings(){return this.memoryViewUint32[33]}get maxVertexInputAttributeOffset(){return this.memoryViewUint32[34]}get maxVertexInputBindingStride(){return this.memoryViewUint32[35]}get maxVertexOutputComponents(){return this.memoryViewUint32[36]}get maxTessellationGenerationLevel(){return this.memoryViewUint32[37]}get maxTessellationPatchSize(){return this.memoryViewUint32[38]}get maxTessellationControlPerVertexInputComponents(){return this.memoryViewUint32[39]}get maxTessellationControlPerVertexOutputComponents(){return this.memoryViewUint32[40]}get maxTessellationControlPerPatchOutputComponents(){return this.memoryViewUint32[41]}get maxTessellationControlTotalOutputComponents(){return this.memoryViewUint32[42]}get maxTessellationEvaluationInputComponents(){return this.memoryViewUint32[43]}get maxTessellationEvaluationOutputComponents(){return this.memoryViewUint32[44]}get maxGeometryShaderInvocations(){return this.memoryViewUint32[45]}get maxGeometryInputComponents(){return this.memoryViewUint32[46]}get maxGeometryOutputComponents(){return this.memoryViewUint32[47]}get maxGeometryOutputVertices(){return this.memoryViewUint32[48]}get maxGeometryTotalOutputComponents(){return this.memoryViewUint32[49]}get maxFragmentInputComponents(){return this.memoryViewUint32[50]}get maxFragmentOutputAttachments(){return this.memoryViewUint32[51]}get maxFragmentDualSrcAttachments(){return this.memoryViewUint32[52]}get maxFragmentCombinedOutputResources(){return this.memoryViewUint32[53]}get maxComputeSharedMemorySize(){return this.memoryViewUint32[54]}get maxComputeWorkGroupCount(){return[this.memoryViewUint32[55],this.memoryViewUint32[56],this.memoryViewUint32[57]]}get maxComputeWorkGroupInvocations(){return this.memoryViewUint32[58]}get maxComputeWorkGroupSize(){return[this.memoryViewUint32[59],this.memoryViewUint32[60],this.memoryViewUint32[61]]}get subPixelPrecisionBits(){return this.memoryViewUint32[62]}get subTexelPrecisionBits(){return this.memoryViewUint32[63]}get mipmapPrecisionBits(){return this.memoryViewUint32[64]}get maxDrawIndexedIndexValue(){return this.memoryViewUint32[65]}get maxDrawIndirectCount(){return this.memoryViewUint32[66]}get maxSamplerLodBias(){return this.memoryViewFloat32[67]}get maxSamplerAnisotropy(){return this.memoryViewFloat32[68]}get maxViewports(){return this.memoryViewUint32[69]}get maxViewportDimensions(){return[this.memoryViewUint32[70],this.memoryViewUint32[71]]}get viewportBoundsRange(){return[this.memoryViewFloat32[72],this.memoryViewFloat32[73]]}get viewportSubPixelBits(){return this.memoryViewUint32[74]}get minMemoryMapAlignment(){return this.memoryViewBigInt64[38]}get minTexelBufferOffsetAlignment(){return this.memoryViewBigUint64[39]}get minUniformBufferOffsetAlignment(){return this.memoryViewBigUint64[40]}get minStorageBufferOffsetAlignment(){return this.memoryViewBigUint64[41]}get minTexelOffset(){return this.memoryViewInt32[84]}get maxTexelOffset(){return this.memoryViewUint32[85]}get minTexelGatherOffset(){return this.memoryViewInt32[86]}get maxTexelGatherOffset(){return this.memoryViewUint32[87]}get minInterpolationOffset(){return this.memoryViewFloat32[88]}get maxInterpolationOffset(){return this.memoryViewFloat32[89]}get subPixelInterpolationOffsetBits(){return this.memoryViewUint32[90]}get maxFramebufferWidth(){return this.memoryViewUint32[91]}get maxFramebufferHeight(){return this.memoryViewUint32[92]}get maxFramebufferLayers(){return this.memoryViewUint32[93]}get framebufferColorSampleCounts(){return this.memoryViewInt32[94]}get framebufferDepthSampleCounts(){return this.memoryViewInt32[95]}get framebufferStencilSampleCounts(){return this.memoryViewInt32[96]}get framebufferNoAttachmentsSampleCounts(){return this.memoryViewInt32[97]}get maxColorAttachments(){return this.memoryViewUint32[98]}get sampledImageColorSampleCounts(){return this.memoryViewInt32[99]}get sampledImageIntegerSampleCounts(){return this.memoryViewInt32[100]}get sampledImageDepthSampleCounts(){return this.memoryViewInt32[101]}get sampledImageStencilSampleCounts(){return this.memoryViewInt32[102]}get storageImageSampleCounts(){return this.memoryViewInt32[103]}get maxSampleMaskWords(){return this.memoryViewUint32[104]}get timestampComputeAndGraphics(){return 0!==this.memoryViewUint32[105]}get timestampPeriod(){return this.memoryViewFloat32[106]}get maxClipDistances(){return this.memoryViewUint32[107]}get maxCullDistances(){return this.memoryViewUint32[108]}get maxCombinedClipAndCullDistances(){return this.memoryViewUint32[109]}get discreteQueuePriorities(){return this.memoryViewUint32[110]}get pointSizeRange(){return[this.memoryViewFloat32[111],this.memoryViewFloat32[112]]}get lineWidthRange(){return[this.memoryViewFloat32[113],this.memoryViewFloat32[114]]}get pointSizeGranularity(){return this.memoryViewFloat32[115]}get lineWidthGranularity(){return this.memoryViewFloat32[116]}get strictLines(){return 0!==this.memoryViewUint32[117]}get standardSampleLocations(){return 0!==this.memoryViewUint32[118]}get optimalBufferCopyOffsetAlignment(){return this.memoryViewBigUint64[60]}get optimalBufferCopyRowPitchAlignment(){return this.memoryViewBigUint64[61]}get nonCoherentAtomSize(){return this.memoryViewBigUint64[62]}}VkPhysicalDeviceLimits.prototype.flush=function(){return!0},VkPhysicalDeviceLimits.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(504)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,504),0)},VkPhysicalDeviceLimits.byteLength=504,VkPhysicalDeviceLimits.memoryLayout={maxImageDimension1D:{byteOffset:0,byteLength:4},maxImageDimension2D:{byteOffset:4,byteLength:4},maxImageDimension3D:{byteOffset:8,byteLength:4},maxImageDimensionCube:{byteOffset:12,byteLength:4},maxImageArrayLayers:{byteOffset:16,byteLength:4},maxTexelBufferElements:{byteOffset:20,byteLength:4},maxUniformBufferRange:{byteOffset:24,byteLength:4},maxStorageBufferRange:{byteOffset:28,byteLength:4},maxPushConstantsSize:{byteOffset:32,byteLength:4},maxMemoryAllocationCount:{byteOffset:36,byteLength:4},maxSamplerAllocationCount:{byteOffset:40,byteLength:4},bufferImageGranularity:{byteOffset:48,byteLength:8},sparseAddressSpaceSize:{byteOffset:56,byteLength:8},maxBoundDescriptorSets:{byteOffset:64,byteLength:4},maxPerStageDescriptorSamplers:{byteOffset:68,byteLength:4},maxPerStageDescriptorUniformBuffers:{byteOffset:72,byteLength:4},maxPerStageDescriptorStorageBuffers:{byteOffset:76,byteLength:4},maxPerStageDescriptorSampledImages:{byteOffset:80,byteLength:4},maxPerStageDescriptorStorageImages:{byteOffset:84,byteLength:4},maxPerStageDescriptorInputAttachments:{byteOffset:88,byteLength:4},maxPerStageResources:{byteOffset:92,byteLength:4},maxDescriptorSetSamplers:{byteOffset:96,byteLength:4},maxDescriptorSetUniformBuffers:{byteOffset:100,byteLength:4},maxDescriptorSetUniformBuffersDynamic:{byteOffset:104,byteLength:4},maxDescriptorSetStorageBuffers:{byteOffset:108,byteLength:4},maxDescriptorSetStorageBuffersDynamic:{byteOffset:112,byteLength:4},maxDescriptorSetSampledImages:{byteOffset:116,byteLength:4},maxDescriptorSetStorageImages:{byteOffset:120,byteLength:4},maxDescriptorSetInputAttachments:{byteOffset:124,byteLength:4},maxVertexInputAttributes:{byteOffset:128,byteLength:4},maxVertexInputBindings:{byteOffset:132,byteLength:4},maxVertexInputAttributeOffset:{byteOffset:136,byteLength:4},maxVertexInputBindingStride:{byteOffset:140,byteLength:4},maxVertexOutputComponents:{byteOffset:144,byteLength:4},maxTessellationGenerationLevel:{byteOffset:148,byteLength:4},maxTessellationPatchSize:{byteOffset:152,byteLength:4},maxTessellationControlPerVertexInputComponents:{byteOffset:156,byteLength:4},maxTessellationControlPerVertexOutputComponents:{byteOffset:160,byteLength:4},maxTessellationControlPerPatchOutputComponents:{byteOffset:164,byteLength:4},maxTessellationControlTotalOutputComponents:{byteOffset:168,byteLength:4},maxTessellationEvaluationInputComponents:{byteOffset:172,byteLength:4},maxTessellationEvaluationOutputComponents:{byteOffset:176,byteLength:4},maxGeometryShaderInvocations:{byteOffset:180,byteLength:4},maxGeometryInputComponents:{byteOffset:184,byteLength:4},maxGeometryOutputComponents:{byteOffset:188,byteLength:4},maxGeometryOutputVertices:{byteOffset:192,byteLength:4},maxGeometryTotalOutputComponents:{byteOffset:196,byteLength:4},maxFragmentInputComponents:{byteOffset:200,byteLength:4},maxFragmentOutputAttachments:{byteOffset:204,byteLength:4},maxFragmentDualSrcAttachments:{byteOffset:208,byteLength:4},maxFragmentCombinedOutputResources:{byteOffset:212,byteLength:4},maxComputeSharedMemorySize:{byteOffset:216,byteLength:4},maxComputeWorkGroupCount:{byteOffset:220,byteLength:12},maxComputeWorkGroupInvocations:{byteOffset:232,byteLength:4},maxComputeWorkGroupSize:{byteOffset:236,byteLength:12},subPixelPrecisionBits:{byteOffset:248,byteLength:4},subTexelPrecisionBits:{byteOffset:252,byteLength:4},mipmapPrecisionBits:{byteOffset:256,byteLength:4},maxDrawIndexedIndexValue:{byteOffset:260,byteLength:4},maxDrawIndirectCount:{byteOffset:264,byteLength:4},maxSamplerLodBias:{byteOffset:268,byteLength:4},maxSamplerAnisotropy:{byteOffset:272,byteLength:4},maxViewports:{byteOffset:276,byteLength:4},maxViewportDimensions:{byteOffset:280,byteLength:8},viewportBoundsRange:{byteOffset:288,byteLength:8},viewportSubPixelBits:{byteOffset:296,byteLength:4},minMemoryMapAlignment:{byteOffset:304,byteLength:8},minTexelBufferOffsetAlignment:{byteOffset:312,byteLength:8},minUniformBufferOffsetAlignment:{byteOffset:320,byteLength:8},minStorageBufferOffsetAlignment:{byteOffset:328,byteLength:8},minTexelOffset:{byteOffset:336,byteLength:4},maxTexelOffset:{byteOffset:340,byteLength:4},minTexelGatherOffset:{byteOffset:344,byteLength:4},maxTexelGatherOffset:{byteOffset:348,byteLength:4},minInterpolationOffset:{byteOffset:352,byteLength:4},maxInterpolationOffset:{byteOffset:356,byteLength:4},subPixelInterpolationOffsetBits:{byteOffset:360,byteLength:4},maxFramebufferWidth:{byteOffset:364,byteLength:4},maxFramebufferHeight:{byteOffset:368,byteLength:4},maxFramebufferLayers:{byteOffset:372,byteLength:4},framebufferColorSampleCounts:{byteOffset:376,byteLength:4},framebufferDepthSampleCounts:{byteOffset:380,byteLength:4},framebufferStencilSampleCounts:{byteOffset:384,byteLength:4},framebufferNoAttachmentsSampleCounts:{byteOffset:388,byteLength:4},maxColorAttachments:{byteOffset:392,byteLength:4},sampledImageColorSampleCounts:{byteOffset:396,byteLength:4},sampledImageIntegerSampleCounts:{byteOffset:400,byteLength:4},sampledImageDepthSampleCounts:{byteOffset:404,byteLength:4},sampledImageStencilSampleCounts:{byteOffset:408,byteLength:4},storageImageSampleCounts:{byteOffset:412,byteLength:4},maxSampleMaskWords:{byteOffset:416,byteLength:4},timestampComputeAndGraphics:{byteOffset:420,byteLength:4},timestampPeriod:{byteOffset:424,byteLength:4},maxClipDistances:{byteOffset:428,byteLength:4},maxCullDistances:{byteOffset:432,byteLength:4},maxCombinedClipAndCullDistances:{byteOffset:436,byteLength:4},discreteQueuePriorities:{byteOffset:440,byteLength:4},pointSizeRange:{byteOffset:444,byteLength:8},lineWidthRange:{byteOffset:452,byteLength:8},pointSizeGranularity:{byteOffset:460,byteLength:4},lineWidthGranularity:{byteOffset:464,byteLength:4},strictLines:{byteOffset:468,byteLength:4},standardSampleLocations:{byteOffset:472,byteLength:4},optimalBufferCopyOffsetAlignment:{byteOffset:480,byteLength:8},optimalBufferCopyRowPitchAlignment:{byteOffset:488,byteLength:8},nonCoherentAtomSize:{byteOffset:496,byteLength:8}};class VkSemaphoreCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=9,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000077e3:case 1000078001:break;default:throw new TypeError("Invalid type for 'VkSemaphoreCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}}VkSemaphoreCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSemaphoreCreateInfo.prototype.reflect=function(e){},VkSemaphoreCreateInfo.byteLength=24,VkSemaphoreCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4}};class VkQueryPoolCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=11,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.queryType&&(this.queryType=e.queryType),void 0!==e.queryCount&&(this.queryCount=e.queryCount),void 0!==e.pipelineStatistics&&(this.pipelineStatistics=e.pipelineStatistics))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkQueryPoolCreateInfo.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get queryType(){return this.memoryViewInt32[5]}set queryType(e){this.memoryViewInt32[5]=e}get queryCount(){return this.memoryViewUint32[6]}set queryCount(e){this.memoryViewUint32[6]=e}get pipelineStatistics(){return this.memoryViewInt32[7]}set pipelineStatistics(e){this.memoryViewInt32[7]=e}}VkQueryPoolCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkQueryPoolCreateInfo.prototype.reflect=function(e){},VkQueryPoolCreateInfo.byteLength=32,VkQueryPoolCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},queryType:{byteOffset:20,byteLength:4},queryCount:{byteOffset:24,byteLength:4},pipelineStatistics:{byteOffset:28,byteLength:4}};class VkFramebufferCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._renderPass=null,this._pAttachments=null,this._pAttachmentsNative=null,this.sType=37,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.renderPass&&(this.renderPass=e.renderPass),void 0!==e.attachmentCount&&(this.attachmentCount=e.attachmentCount),void 0!==e.pAttachments&&(this.pAttachments=e.pAttachments),void 0!==e.width&&(this.width=e.width),void 0!==e.height&&(this.height=e.height),void 0!==e.layers&&(this.layers=e.layers))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000108001:break;default:throw new TypeError("Invalid type for 'VkFramebufferCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get renderPass(){return this._renderPass}set renderPass(e){null!==e?(this._renderPass=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._renderPass=null,this.memoryViewBigInt64[3]=BI0)}get attachmentCount(){return this.memoryViewUint32[8]}set attachmentCount(e){this.memoryViewUint32[8]=e}get pAttachments(){return this._pAttachments}set pAttachments(e){null!==e?this._pAttachments=e:null===e&&(this._pAttachments=null)}get width(){return this.memoryViewUint32[12]}set width(e){this.memoryViewUint32[12]=e}get height(){return this.memoryViewUint32[13]}set height(e){this.memoryViewUint32[13]=e}get layers(){return this.memoryViewUint32[14]}set layers(e){this.memoryViewUint32[14]=e}}VkFramebufferCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pAttachments){let e=this._pAttachments;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pAttachmentsNative=t,this.memoryViewBigInt64[5]=t.address}return!0},VkFramebufferCreateInfo.prototype.reflect=function(e){},VkFramebufferCreateInfo.byteLength=64,VkFramebufferCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},renderPass:{byteOffset:24,byteLength:8},attachmentCount:{byteOffset:32,byteLength:4},pAttachments:{byteOffset:40,byteLength:8},width:{byteOffset:48,byteLength:4},height:{byteOffset:52,byteLength:4},layers:{byteOffset:56,byteLength:4}};class VkDrawIndirectCommand{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.vertexCount&&(this.vertexCount=e.vertexCount),void 0!==e.instanceCount&&(this.instanceCount=e.instanceCount),void 0!==e.firstVertex&&(this.firstVertex=e.firstVertex),void 0!==e.firstInstance&&(this.firstInstance=e.firstInstance))}get vertexCount(){return this.memoryViewUint32[0]}set vertexCount(e){this.memoryViewUint32[0]=e}get instanceCount(){return this.memoryViewUint32[1]}set instanceCount(e){this.memoryViewUint32[1]=e}get firstVertex(){return this.memoryViewUint32[2]}set firstVertex(e){this.memoryViewUint32[2]=e}get firstInstance(){return this.memoryViewUint32[3]}set firstInstance(e){this.memoryViewUint32[3]=e}}VkDrawIndirectCommand.prototype.flush=function(){return!0},VkDrawIndirectCommand.prototype.reflect=function(e){},VkDrawIndirectCommand.byteLength=16,VkDrawIndirectCommand.memoryLayout={vertexCount:{byteOffset:0,byteLength:4},instanceCount:{byteOffset:4,byteLength:4},firstVertex:{byteOffset:8,byteLength:4},firstInstance:{byteOffset:12,byteLength:4}};class VkDrawIndexedIndirectCommand{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+20)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+20)/4)):(this.memoryBuffer=new ArrayBuffer(20),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.indexCount&&(this.indexCount=e.indexCount),void 0!==e.instanceCount&&(this.instanceCount=e.instanceCount),void 0!==e.firstIndex&&(this.firstIndex=e.firstIndex),void 0!==e.vertexOffset&&(this.vertexOffset=e.vertexOffset),void 0!==e.firstInstance&&(this.firstInstance=e.firstInstance))}get indexCount(){return this.memoryViewUint32[0]}set indexCount(e){this.memoryViewUint32[0]=e}get instanceCount(){return this.memoryViewUint32[1]}set instanceCount(e){this.memoryViewUint32[1]=e}get firstIndex(){return this.memoryViewUint32[2]}set firstIndex(e){this.memoryViewUint32[2]=e}get vertexOffset(){return this.memoryViewInt32[3]}set vertexOffset(e){this.memoryViewInt32[3]=e}get firstInstance(){return this.memoryViewUint32[4]}set firstInstance(e){this.memoryViewUint32[4]=e}}VkDrawIndexedIndirectCommand.prototype.flush=function(){return!0},VkDrawIndexedIndirectCommand.prototype.reflect=function(e){},VkDrawIndexedIndirectCommand.byteLength=20,VkDrawIndexedIndirectCommand.memoryLayout={indexCount:{byteOffset:0,byteLength:4},instanceCount:{byteOffset:4,byteLength:4},firstIndex:{byteOffset:8,byteLength:4},vertexOffset:{byteOffset:12,byteLength:4},firstInstance:{byteOffset:16,byteLength:4}};class VkDispatchIndirectCommand{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4)):(this.memoryBuffer=new ArrayBuffer(12),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.x&&(this.x=e.x),void 0!==e.y&&(this.y=e.y),void 0!==e.z&&(this.z=e.z))}get x(){return this.memoryViewUint32[0]}set x(e){this.memoryViewUint32[0]=e}get y(){return this.memoryViewUint32[1]}set y(e){this.memoryViewUint32[1]=e}get z(){return this.memoryViewUint32[2]}set z(e){this.memoryViewUint32[2]=e}}VkDispatchIndirectCommand.prototype.flush=function(){return!0},VkDispatchIndirectCommand.prototype.reflect=function(e){},VkDispatchIndirectCommand.byteLength=12,VkDispatchIndirectCommand.memoryLayout={x:{byteOffset:0,byteLength:4},y:{byteOffset:4,byteLength:4},z:{byteOffset:8,byteLength:4}};class VkSubmitInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+72)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4)):(this.memoryBuffer=new ArrayBuffer(72),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pWaitSemaphores=null,this._pWaitSemaphoresNative=null,this._pWaitDstStageMask=null,this._pCommandBuffers=null,this._pCommandBuffersNative=null,this._pSignalSemaphores=null,this._pSignalSemaphoresNative=null,this.sType=4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.waitSemaphoreCount&&(this.waitSemaphoreCount=e.waitSemaphoreCount),void 0!==e.pWaitSemaphores&&(this.pWaitSemaphores=e.pWaitSemaphores),void 0!==e.pWaitDstStageMask&&(this.pWaitDstStageMask=e.pWaitDstStageMask),void 0!==e.commandBufferCount&&(this.commandBufferCount=e.commandBufferCount),void 0!==e.pCommandBuffers&&(this.pCommandBuffers=e.pCommandBuffers),void 0!==e.signalSemaphoreCount&&(this.signalSemaphoreCount=e.signalSemaphoreCount),void 0!==e.pSignalSemaphores&&(this.pSignalSemaphores=e.pSignalSemaphores))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000058e3:case 1000075e3:case 1000078002:case 1000060005:case VkStructureType.VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO:break;default:throw new TypeError("Invalid type for 'VkSubmitInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get waitSemaphoreCount(){return this.memoryViewUint32[4]}set waitSemaphoreCount(e){this.memoryViewUint32[4]=e}get pWaitSemaphores(){return this._pWaitSemaphores}set pWaitSemaphores(e){null!==e?this._pWaitSemaphores=e:null===e&&(this._pWaitSemaphores=null)}get pWaitDstStageMask(){return this._pWaitDstStageMask}set pWaitDstStageMask(e){null!==e?(this._pWaitDstStageMask=e,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pWaitDstStageMask=null,this.memoryViewBigInt64[4]=BI0)}get commandBufferCount(){return this.memoryViewUint32[10]}set commandBufferCount(e){this.memoryViewUint32[10]=e}get pCommandBuffers(){return this._pCommandBuffers}set pCommandBuffers(e){null!==e?this._pCommandBuffers=e:null===e&&(this._pCommandBuffers=null)}get signalSemaphoreCount(){return this.memoryViewUint32[14]}set signalSemaphoreCount(e){this.memoryViewUint32[14]=e}get pSignalSemaphores(){return this._pSignalSemaphores}set pSignalSemaphores(e){null!==e?this._pSignalSemaphores=e:null===e&&(this._pSignalSemaphores=null)}}VkSubmitInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pWaitSemaphores){let e=this._pWaitSemaphores;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pWaitSemaphoresNative=t,this.memoryViewBigInt64[3]=t.address}if(null!==this._pCommandBuffers){let e=this._pCommandBuffers;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pCommandBuffersNative=t,this.memoryViewBigInt64[6]=t.address}if(null!==this._pSignalSemaphores){let e=this._pSignalSemaphores;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pSignalSemaphoresNative=t,this.memoryViewBigInt64[8]=t.address}return!0},VkSubmitInfo.prototype.reflect=function(e){},VkSubmitInfo.byteLength=72,VkSubmitInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},waitSemaphoreCount:{byteOffset:16,byteLength:4},pWaitSemaphores:{byteOffset:24,byteLength:8},pWaitDstStageMask:{byteOffset:32,byteLength:8},commandBufferCount:{byteOffset:40,byteLength:4},pCommandBuffers:{byteOffset:48,byteLength:8},signalSemaphoreCount:{byteOffset:56,byteLength:4},pSignalSemaphores:{byteOffset:64,byteLength:8}};class VkDisplayPropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._display=null,this._displayName=null,this._physicalDimensions=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this._physicalResolution=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+24})}get display(){return this._display}get displayName(){if(null!==this._displayName){let e=textDecoder.decode(this._displayName);return e.substr(0,e.length-1)}return null}get physicalDimensions(){return this._physicalDimensions}get physicalResolution(){return this._physicalResolution}get supportedTransforms(){return this.memoryViewInt32[8]}get planeReorderPossible(){return 0!==this.memoryViewUint32[9]}get persistentContent(){return 0!==this.memoryViewUint32[10]}}VkDisplayPropertiesKHR.prototype.flush=function(){return!0},VkDisplayPropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(48)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,48),0)},VkDisplayPropertiesKHR.byteLength=48,VkDisplayPropertiesKHR.memoryLayout={display:{byteOffset:0,byteLength:8},displayName:{byteOffset:8,byteLength:8},physicalDimensions:{byteOffset:16,byteLength:8},physicalResolution:{byteOffset:24,byteLength:8},supportedTransforms:{byteOffset:32,byteLength:4},planeReorderPossible:{byteOffset:36,byteLength:4},persistentContent:{byteOffset:40,byteLength:4}};class VkDisplayPlanePropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._currentDisplay=null}get currentDisplay(){return this._currentDisplay}get currentStackIndex(){return this.memoryViewUint32[2]}}VkDisplayPlanePropertiesKHR.prototype.flush=function(){return!0},VkDisplayPlanePropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(16)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,16),0)},VkDisplayPlanePropertiesKHR.byteLength=16,VkDisplayPlanePropertiesKHR.memoryLayout={currentDisplay:{byteOffset:0,byteLength:8},currentStackIndex:{byteOffset:8,byteLength:4}};class VkDisplayModeParametersKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4)):(this.memoryBuffer=new ArrayBuffer(12),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._visibleRegion=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0}),"object"==typeof e&&(void 0!==e.visibleRegion&&(this.visibleRegion=e.visibleRegion),void 0!==e.refreshRate&&(this.refreshRate=e.refreshRate))}get visibleRegion(){return this._visibleRegion}set visibleRegion(e){null!==e?(e.flush(),this._visibleRegion=e):null===e&&(this._visibleRegion=null)}get refreshRate(){return this.memoryViewUint32[2]}set refreshRate(e){this.memoryViewUint32[2]=e}}VkDisplayModeParametersKHR.prototype.flush=function(){if(null!==this._visibleRegion){let e=this._visibleRegion;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,0)}}return!0},VkDisplayModeParametersKHR.prototype.reflect=function(e){},VkDisplayModeParametersKHR.byteLength=12,VkDisplayModeParametersKHR.memoryLayout={visibleRegion:{byteOffset:0,byteLength:8},refreshRate:{byteOffset:8,byteLength:4}};class VkDisplayModePropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)),this._displayMode=null,this._parameters=new VkDisplayModeParametersKHR({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+8})}get displayMode(){return this._displayMode}get parameters(){return this._parameters}}VkDisplayModePropertiesKHR.prototype.flush=function(){return!0},VkDisplayModePropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkDisplayModePropertiesKHR.byteLength=24,VkDisplayModePropertiesKHR.memoryLayout={displayMode:{byteOffset:0,byteLength:8},parameters:{byteOffset:8,byteLength:12}};class VkDisplayModeCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._parameters=new VkDisplayModeParametersKHR({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+20}),this.sType=1000002e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.parameters&&(this.parameters=e.parameters))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDisplayModeCreateInfoKHR.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get parameters(){return this._parameters}set parameters(e){null!==e?(e.flush(),this._parameters=e):null===e&&(this._parameters=null)}}VkDisplayModeCreateInfoKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._parameters){let e=this._parameters;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+12);new Uint8Array(this.memoryBuffer).set(t,20)}}return!0},VkDisplayModeCreateInfoKHR.prototype.reflect=function(e){},VkDisplayModeCreateInfoKHR.byteLength=32,VkDisplayModeCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},parameters:{byteOffset:20,byteLength:12}};class VkDisplayPlaneCapabilitiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+68)/4)):(this.memoryBuffer=new ArrayBuffer(68),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),this._minSrcPosition=new VkOffset2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+4}),this._maxSrcPosition=new VkOffset2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+12}),this._minSrcExtent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+20}),this._maxSrcExtent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+28}),this._minDstPosition=new VkOffset2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+36}),this._maxDstPosition=new VkOffset2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+44}),this._minDstExtent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+52}),this._maxDstExtent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+60})}get supportedAlpha(){return this.memoryViewInt32[0]}get minSrcPosition(){return this._minSrcPosition}get maxSrcPosition(){return this._maxSrcPosition}get minSrcExtent(){return this._minSrcExtent}get maxSrcExtent(){return this._maxSrcExtent}get minDstPosition(){return this._minDstPosition}get maxDstPosition(){return this._maxDstPosition}get minDstExtent(){return this._minDstExtent}get maxDstExtent(){return this._maxDstExtent}}VkDisplayPlaneCapabilitiesKHR.prototype.flush=function(){return!0},VkDisplayPlaneCapabilitiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(68)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,68),0)},VkDisplayPlaneCapabilitiesKHR.byteLength=68,VkDisplayPlaneCapabilitiesKHR.memoryLayout={supportedAlpha:{byteOffset:0,byteLength:4},minSrcPosition:{byteOffset:4,byteLength:8},maxSrcPosition:{byteOffset:12,byteLength:8},minSrcExtent:{byteOffset:20,byteLength:8},maxSrcExtent:{byteOffset:28,byteLength:8},minDstPosition:{byteOffset:36,byteLength:8},maxDstPosition:{byteOffset:44,byteLength:8},minDstExtent:{byteOffset:52,byteLength:8},maxDstExtent:{byteOffset:60,byteLength:8}};class VkDisplaySurfaceCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),this._pNext=null,this._displayMode=null,this._imageExtent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+52}),this.sType=1000002001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.displayMode&&(this.displayMode=e.displayMode),void 0!==e.planeIndex&&(this.planeIndex=e.planeIndex),void 0!==e.planeStackIndex&&(this.planeStackIndex=e.planeStackIndex),void 0!==e.transform&&(this.transform=e.transform),void 0!==e.globalAlpha&&(this.globalAlpha=e.globalAlpha),void 0!==e.alphaMode&&(this.alphaMode=e.alphaMode),void 0!==e.imageExtent&&(this.imageExtent=e.imageExtent))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDisplaySurfaceCreateInfoKHR.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get displayMode(){return this._displayMode}set displayMode(e){null!==e?(this._displayMode=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._displayMode=null,this.memoryViewBigInt64[3]=BI0)}get planeIndex(){return this.memoryViewUint32[8]}set planeIndex(e){this.memoryViewUint32[8]=e}get planeStackIndex(){return this.memoryViewUint32[9]}set planeStackIndex(e){this.memoryViewUint32[9]=e}get transform(){return this.memoryViewInt32[10]}set transform(e){this.memoryViewInt32[10]=e}get globalAlpha(){return this.memoryViewFloat32[11]}set globalAlpha(e){this.memoryViewFloat32[11]=e}get alphaMode(){return this.memoryViewInt32[12]}set alphaMode(e){this.memoryViewInt32[12]=e}get imageExtent(){return this._imageExtent}set imageExtent(e){null!==e?(e.flush(),this._imageExtent=e):null===e&&(this._imageExtent=null)}}VkDisplaySurfaceCreateInfoKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._imageExtent){let e=this._imageExtent;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,52)}}return!0},VkDisplaySurfaceCreateInfoKHR.prototype.reflect=function(e){},VkDisplaySurfaceCreateInfoKHR.byteLength=64,VkDisplaySurfaceCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},displayMode:{byteOffset:24,byteLength:8},planeIndex:{byteOffset:32,byteLength:4},planeStackIndex:{byteOffset:36,byteLength:4},transform:{byteOffset:40,byteLength:4},globalAlpha:{byteOffset:44,byteLength:4},alphaMode:{byteOffset:48,byteLength:4},imageExtent:{byteOffset:52,byteLength:8}};class VkDisplayPresentInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._srcRect=new VkRect2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this._dstRect=new VkRect2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+32}),this.sType=1000003e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.srcRect&&(this.srcRect=e.srcRect),void 0!==e.dstRect&&(this.dstRect=e.dstRect),void 0!==e.persistent&&(this.persistent=e.persistent))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDisplayPresentInfoKHR.pNext' isn't allowed to be filled")}get srcRect(){return this._srcRect}set srcRect(e){null!==e?(e.flush(),this._srcRect=e):null===e&&(this._srcRect=null)}get dstRect(){return this._dstRect}set dstRect(e){null!==e?(e.flush(),this._dstRect=e):null===e&&(this._dstRect=null)}get persistent(){return 0!==this.memoryViewUint32[12]}set persistent(e){this.memoryViewUint32[12]=0|e}}VkDisplayPresentInfoKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._srcRect){let e=this._srcRect;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,16)}}if(null!==this._dstRect){let e=this._dstRect;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,32)}}return!0},VkDisplayPresentInfoKHR.prototype.reflect=function(e){},VkDisplayPresentInfoKHR.byteLength=56,VkDisplayPresentInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},srcRect:{byteOffset:16,byteLength:16},dstRect:{byteOffset:32,byteLength:16},persistent:{byteOffset:48,byteLength:4}};class VkSurfaceCapabilitiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+52)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+52)/4)):(this.memoryBuffer=new ArrayBuffer(52),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),this._currentExtent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+8}),this._minImageExtent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this._maxImageExtent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+24})}get minImageCount(){return this.memoryViewUint32[0]}get maxImageCount(){return this.memoryViewUint32[1]}get currentExtent(){return this._currentExtent}get minImageExtent(){return this._minImageExtent}get maxImageExtent(){return this._maxImageExtent}get maxImageArrayLayers(){return this.memoryViewUint32[8]}get supportedTransforms(){return this.memoryViewInt32[9]}get currentTransform(){return this.memoryViewInt32[10]}get supportedCompositeAlpha(){return this.memoryViewInt32[11]}get supportedUsageFlags(){return this.memoryViewInt32[12]}}VkSurfaceCapabilitiesKHR.prototype.flush=function(){return!0},VkSurfaceCapabilitiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(52)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,52),0)},VkSurfaceCapabilitiesKHR.byteLength=52,VkSurfaceCapabilitiesKHR.memoryLayout={minImageCount:{byteOffset:0,byteLength:4},maxImageCount:{byteOffset:4,byteLength:4},currentExtent:{byteOffset:8,byteLength:8},minImageExtent:{byteOffset:16,byteLength:8},maxImageExtent:{byteOffset:24,byteLength:8},maxImageArrayLayers:{byteOffset:32,byteLength:4},supportedTransforms:{byteOffset:36,byteLength:4},currentTransform:{byteOffset:40,byteLength:4},supportedCompositeAlpha:{byteOffset:44,byteLength:4},supportedUsageFlags:{byteOffset:48,byteLength:4}};class VkSurfaceFormatKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer))}get format(){return this.memoryViewInt32[0]}get colorSpace(){return this.memoryViewInt32[1]}}VkSurfaceFormatKHR.prototype.flush=function(){return!0},VkSurfaceFormatKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,8),0)},VkSurfaceFormatKHR.byteLength=8,VkSurfaceFormatKHR.memoryLayout={format:{byteOffset:0,byteLength:4},colorSpace:{byteOffset:4,byteLength:4}};class VkSwapchainCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+104)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+104)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+104)/4)):(this.memoryBuffer=new ArrayBuffer(104),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._surface=null,this._imageExtent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+44}),this._pQueueFamilyIndices=null,this._oldSwapchain=null,this.sType=1000001e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.surface&&(this.surface=e.surface),void 0!==e.minImageCount&&(this.minImageCount=e.minImageCount),void 0!==e.imageFormat&&(this.imageFormat=e.imageFormat),void 0!==e.imageColorSpace&&(this.imageColorSpace=e.imageColorSpace),void 0!==e.imageExtent&&(this.imageExtent=e.imageExtent),void 0!==e.imageArrayLayers&&(this.imageArrayLayers=e.imageArrayLayers),void 0!==e.imageUsage&&(this.imageUsage=e.imageUsage),void 0!==e.imageSharingMode&&(this.imageSharingMode=e.imageSharingMode),void 0!==e.queueFamilyIndexCount&&(this.queueFamilyIndexCount=e.queueFamilyIndexCount),void 0!==e.pQueueFamilyIndices&&(this.pQueueFamilyIndices=e.pQueueFamilyIndices),void 0!==e.preTransform&&(this.preTransform=e.preTransform),void 0!==e.compositeAlpha&&(this.compositeAlpha=e.compositeAlpha),void 0!==e.presentMode&&(this.presentMode=e.presentMode),void 0!==e.clipped&&(this.clipped=e.clipped),void 0!==e.oldSwapchain&&(this.oldSwapchain=e.oldSwapchain))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000091003:case 1000060012:case 1000213001:case 1000147e3:case 1000255e3:case 1000255001:break;default:throw new TypeError("Invalid type for 'VkSwapchainCreateInfoKHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get surface(){return this._surface}set surface(e){null!==e?(this._surface=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._surface=null,this.memoryViewBigInt64[3]=BI0)}get minImageCount(){return this.memoryViewUint32[8]}set minImageCount(e){this.memoryViewUint32[8]=e}get imageFormat(){return this.memoryViewInt32[9]}set imageFormat(e){this.memoryViewInt32[9]=e}get imageColorSpace(){return this.memoryViewInt32[10]}set imageColorSpace(e){this.memoryViewInt32[10]=e}get imageExtent(){return this._imageExtent}set imageExtent(e){null!==e?(e.flush(),this._imageExtent=e):null===e&&(this._imageExtent=null)}get imageArrayLayers(){return this.memoryViewUint32[13]}set imageArrayLayers(e){this.memoryViewUint32[13]=e}get imageUsage(){return this.memoryViewInt32[14]}set imageUsage(e){this.memoryViewInt32[14]=e}get imageSharingMode(){return this.memoryViewInt32[15]}set imageSharingMode(e){this.memoryViewInt32[15]=e}get queueFamilyIndexCount(){return this.memoryViewUint32[16]}set queueFamilyIndexCount(e){this.memoryViewUint32[16]=e}get pQueueFamilyIndices(){return this._pQueueFamilyIndices}set pQueueFamilyIndices(e){null!==e?(this._pQueueFamilyIndices=e,this.memoryViewBigInt64[9]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pQueueFamilyIndices=null,this.memoryViewBigInt64[9]=BI0)}get preTransform(){return this.memoryViewInt32[20]}set preTransform(e){this.memoryViewInt32[20]=e}get compositeAlpha(){return this.memoryViewInt32[21]}set compositeAlpha(e){this.memoryViewInt32[21]=e}get presentMode(){return this.memoryViewInt32[22]}set presentMode(e){this.memoryViewInt32[22]=e}get clipped(){return 0!==this.memoryViewUint32[23]}set clipped(e){this.memoryViewUint32[23]=0|e}get oldSwapchain(){return this._oldSwapchain}set oldSwapchain(e){null!==e?(this._oldSwapchain=e,this.memoryViewBigInt64[12]=e.memoryViewBigInt64[0]):null===e&&(this._oldSwapchain=null,this.memoryViewBigInt64[12]=BI0)}}VkSwapchainCreateInfoKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._imageExtent){let e=this._imageExtent;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,44)}}return!0},VkSwapchainCreateInfoKHR.prototype.reflect=function(e){},VkSwapchainCreateInfoKHR.byteLength=104,VkSwapchainCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},surface:{byteOffset:24,byteLength:8},minImageCount:{byteOffset:32,byteLength:4},imageFormat:{byteOffset:36,byteLength:4},imageColorSpace:{byteOffset:40,byteLength:4},imageExtent:{byteOffset:44,byteLength:8},imageArrayLayers:{byteOffset:52,byteLength:4},imageUsage:{byteOffset:56,byteLength:4},imageSharingMode:{byteOffset:60,byteLength:4},queueFamilyIndexCount:{byteOffset:64,byteLength:4},pQueueFamilyIndices:{byteOffset:72,byteLength:8},preTransform:{byteOffset:80,byteLength:4},compositeAlpha:{byteOffset:84,byteLength:4},presentMode:{byteOffset:88,byteLength:4},clipped:{byteOffset:92,byteLength:4},oldSwapchain:{byteOffset:96,byteLength:8}};class VkPresentInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pWaitSemaphores=null,this._pWaitSemaphoresNative=null,this._pSwapchains=null,this._pSwapchainsNative=null,this._pImageIndices=null,this._pResults=null,this.sType=1000001001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.waitSemaphoreCount&&(this.waitSemaphoreCount=e.waitSemaphoreCount),void 0!==e.pWaitSemaphores&&(this.pWaitSemaphores=e.pWaitSemaphores),void 0!==e.swapchainCount&&(this.swapchainCount=e.swapchainCount),void 0!==e.pSwapchains&&(this.pSwapchains=e.pSwapchains),void 0!==e.pImageIndices&&(this.pImageIndices=e.pImageIndices),void 0!==e.pResults&&(this.pResults=e.pResults))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000003e3:case 1000084e3:case 1000060011:case 1000092e3:case 1000191e3:break;default:throw new TypeError("Invalid type for 'VkPresentInfoKHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get waitSemaphoreCount(){return this.memoryViewUint32[4]}set waitSemaphoreCount(e){this.memoryViewUint32[4]=e}get pWaitSemaphores(){return this._pWaitSemaphores}set pWaitSemaphores(e){null!==e?this._pWaitSemaphores=e:null===e&&(this._pWaitSemaphores=null)}get swapchainCount(){return this.memoryViewUint32[8]}set swapchainCount(e){this.memoryViewUint32[8]=e}get pSwapchains(){return this._pSwapchains}set pSwapchains(e){null!==e?this._pSwapchains=e:null===e&&(this._pSwapchains=null)}get pImageIndices(){return this._pImageIndices}set pImageIndices(e){null!==e?(this._pImageIndices=e,this.memoryViewBigInt64[6]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pImageIndices=null,this.memoryViewBigInt64[6]=BI0)}get pResults(){return this._pResults}set pResults(e){null!==e?(this._pResults=e,this.memoryViewBigInt64[7]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pResults=null,this.memoryViewBigInt64[7]=BI0)}}VkPresentInfoKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pWaitSemaphores){let e=this._pWaitSemaphores;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pWaitSemaphoresNative=t,this.memoryViewBigInt64[3]=t.address}if(null!==this._pSwapchains){let e=this._pSwapchains;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pSwapchainsNative=t,this.memoryViewBigInt64[5]=t.address}return!0},VkPresentInfoKHR.prototype.reflect=function(e){},VkPresentInfoKHR.byteLength=64,VkPresentInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},waitSemaphoreCount:{byteOffset:16,byteLength:4},pWaitSemaphores:{byteOffset:24,byteLength:8},swapchainCount:{byteOffset:32,byteLength:4},pSwapchains:{byteOffset:40,byteLength:8},pImageIndices:{byteOffset:48,byteLength:8},pResults:{byteOffset:56,byteLength:8}};class VkDebugReportCallbackCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._pfnCallback=null,this._pUserData=null,this.sType=1000011e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.pfnCallback&&(this.pfnCallback=e.pfnCallback),void 0!==e.pUserData&&(this.pUserData=e.pUserData))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDebugReportCallbackCreateInfoEXT.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get pfnCallback(){return this._pfnCallback}set pfnCallback(e){null!==e?this._pfnCallback=e:null===e&&(this._pfnCallback=null)}get pUserData(){return this._pUserData}set pUserData(e){null!==e?(this._pUserData=e,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pUserData=null,this.memoryViewBigInt64[4]=BI0)}}VkDebugReportCallbackCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDebugReportCallbackCreateInfoEXT.prototype.reflect=function(e){},VkDebugReportCallbackCreateInfoEXT.byteLength=40,VkDebugReportCallbackCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},pfnCallback:{byteOffset:24,byteLength:8},pUserData:{byteOffset:32,byteLength:8}};class VkValidationFlagsEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDisabledValidationChecks=null,this.sType=1000061e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.disabledValidationCheckCount&&(this.disabledValidationCheckCount=e.disabledValidationCheckCount),void 0!==e.pDisabledValidationChecks&&(this.pDisabledValidationChecks=e.pDisabledValidationChecks))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkValidationFlagsEXT.pNext' isn't allowed to be filled")}get disabledValidationCheckCount(){return this.memoryViewUint32[4]}set disabledValidationCheckCount(e){this.memoryViewUint32[4]=e}get pDisabledValidationChecks(){return this._pDisabledValidationChecks}set pDisabledValidationChecks(e){null!==e?(this._pDisabledValidationChecks=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pDisabledValidationChecks=null,this.memoryViewBigInt64[3]=BI0)}}VkValidationFlagsEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkValidationFlagsEXT.prototype.reflect=function(e){},VkValidationFlagsEXT.byteLength=32,VkValidationFlagsEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},disabledValidationCheckCount:{byteOffset:16,byteLength:4},pDisabledValidationChecks:{byteOffset:24,byteLength:8}};class VkValidationFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pEnabledValidationFeatures=null,this._pDisabledValidationFeatures=null,this.sType=1000247e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.enabledValidationFeatureCount&&(this.enabledValidationFeatureCount=e.enabledValidationFeatureCount),void 0!==e.pEnabledValidationFeatures&&(this.pEnabledValidationFeatures=e.pEnabledValidationFeatures),void 0!==e.disabledValidationFeatureCount&&(this.disabledValidationFeatureCount=e.disabledValidationFeatureCount),void 0!==e.pDisabledValidationFeatures&&(this.pDisabledValidationFeatures=e.pDisabledValidationFeatures))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkValidationFeaturesEXT.pNext' isn't allowed to be filled")}get enabledValidationFeatureCount(){return this.memoryViewUint32[4]}set enabledValidationFeatureCount(e){this.memoryViewUint32[4]=e}get pEnabledValidationFeatures(){return this._pEnabledValidationFeatures}set pEnabledValidationFeatures(e){null!==e?(this._pEnabledValidationFeatures=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pEnabledValidationFeatures=null,this.memoryViewBigInt64[3]=BI0)}get disabledValidationFeatureCount(){return this.memoryViewUint32[8]}set disabledValidationFeatureCount(e){this.memoryViewUint32[8]=e}get pDisabledValidationFeatures(){return this._pDisabledValidationFeatures}set pDisabledValidationFeatures(e){null!==e?(this._pDisabledValidationFeatures=e,this.memoryViewBigInt64[5]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pDisabledValidationFeatures=null,this.memoryViewBigInt64[5]=BI0)}}VkValidationFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkValidationFeaturesEXT.prototype.reflect=function(e){},VkValidationFeaturesEXT.byteLength=48,VkValidationFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},enabledValidationFeatureCount:{byteOffset:16,byteLength:4},pEnabledValidationFeatures:{byteOffset:24,byteLength:8},disabledValidationFeatureCount:{byteOffset:32,byteLength:4},pDisabledValidationFeatures:{byteOffset:40,byteLength:8}};class VkPipelineRasterizationStateRasterizationOrderAMD{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000018e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.rasterizationOrder&&(this.rasterizationOrder=e.rasterizationOrder))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineRasterizationStateRasterizationOrderAMD.pNext' isn't allowed to be filled")}get rasterizationOrder(){return this.memoryViewInt32[4]}set rasterizationOrder(e){this.memoryViewInt32[4]=e}}VkPipelineRasterizationStateRasterizationOrderAMD.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineRasterizationStateRasterizationOrderAMD.prototype.reflect=function(e){},VkPipelineRasterizationStateRasterizationOrderAMD.byteLength=24,VkPipelineRasterizationStateRasterizationOrderAMD.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},rasterizationOrder:{byteOffset:16,byteLength:4}};class VkDebugMarkerObjectNameInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._pObjectName=null,this.sType=1000022e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.objectType&&(this.objectType=e.objectType),void 0!==e.object&&(this.object=e.object),void 0!==e.pObjectName&&(this.pObjectName=e.pObjectName))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDebugMarkerObjectNameInfoEXT.pNext' isn't allowed to be filled")}get objectType(){return this.memoryViewInt32[4]}set objectType(e){this.memoryViewInt32[4]=e}get object(){return this.memoryViewBigUint64[3]}set object(e){this.memoryViewBigUint64[3]=BigInt(e)}get pObjectName(){if(null!==this._pObjectName){let e=textDecoder.decode(this._pObjectName);return e.substr(0,e.length-1)}return null}set pObjectName(e){null!==e?(this._pObjectName=textEncoder.encode(e+NULLT).buffer,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(this._pObjectName)):null===e&&(this._pObjectName=null,this.memoryViewBigInt64[4]=BI0)}}VkDebugMarkerObjectNameInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDebugMarkerObjectNameInfoEXT.prototype.reflect=function(e){},VkDebugMarkerObjectNameInfoEXT.byteLength=40,VkDebugMarkerObjectNameInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},objectType:{byteOffset:16,byteLength:4},object:{byteOffset:24,byteLength:8},pObjectName:{byteOffset:32,byteLength:8}};class VkDebugMarkerObjectTagInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._pTag=null,this.sType=1000022001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.objectType&&(this.objectType=e.objectType),void 0!==e.object&&(this.object=e.object),void 0!==e.tagName&&(this.tagName=e.tagName),void 0!==e.tagSize&&(this.tagSize=e.tagSize),void 0!==e.pTag&&(this.pTag=e.pTag))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDebugMarkerObjectTagInfoEXT.pNext' isn't allowed to be filled")}get objectType(){return this.memoryViewInt32[4]}set objectType(e){this.memoryViewInt32[4]=e}get object(){return this.memoryViewBigUint64[3]}set object(e){this.memoryViewBigUint64[3]=BigInt(e)}get tagName(){return this.memoryViewBigUint64[4]}set tagName(e){this.memoryViewBigUint64[4]=BigInt(e)}get tagSize(){return this.memoryViewBigInt64[5]}set tagSize(e){this.memoryViewBigInt64[5]=BigInt(e)}get pTag(){return this._pTag}set pTag(e){null!==e?(this._pTag=e,this.memoryViewBigInt64[6]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pTag=null,this.memoryViewBigInt64[6]=BI0)}}VkDebugMarkerObjectTagInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDebugMarkerObjectTagInfoEXT.prototype.reflect=function(e){},VkDebugMarkerObjectTagInfoEXT.byteLength=56,VkDebugMarkerObjectTagInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},objectType:{byteOffset:16,byteLength:4},object:{byteOffset:24,byteLength:8},tagName:{byteOffset:32,byteLength:8},tagSize:{byteOffset:40,byteLength:8},pTag:{byteOffset:48,byteLength:8}};class VkDebugMarkerMarkerInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),this._pNext=null,this._pMarkerName=null,this._color=[...Array(4)].fill(0),this.sType=1000022002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.pMarkerName&&(this.pMarkerName=e.pMarkerName),void 0!==e.color&&(this.color=e.color))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDebugMarkerMarkerInfoEXT.pNext' isn't allowed to be filled")}get pMarkerName(){if(null!==this._pMarkerName){let e=textDecoder.decode(this._pMarkerName);return e.substr(0,e.length-1)}return null}set pMarkerName(e){null!==e?(this._pMarkerName=textEncoder.encode(e+NULLT).buffer,this.memoryViewBigInt64[2]=getAddressFromArrayBuffer(this._pMarkerName)):null===e&&(this._pMarkerName=null,this.memoryViewBigInt64[2]=BI0)}get color(){return this._color}set color(e){null!==e?this._color=e:null===e&&(this._color=null)}}VkDebugMarkerMarkerInfoEXT.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._color){let e=this._color;for(let t=0;t<e.length;++t)this.memoryViewFloat32[6+t]=e[t]}else this.memoryViewFloat32[6]=0;return!0},VkDebugMarkerMarkerInfoEXT.prototype.reflect=function(e){},VkDebugMarkerMarkerInfoEXT.byteLength=40,VkDebugMarkerMarkerInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},pMarkerName:{byteOffset:16,byteLength:8},color:{byteOffset:24,byteLength:16}};class VkDedicatedAllocationImageCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000026e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.dedicatedAllocation&&(this.dedicatedAllocation=e.dedicatedAllocation))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDedicatedAllocationImageCreateInfoNV.pNext' isn't allowed to be filled")}get dedicatedAllocation(){return 0!==this.memoryViewUint32[4]}set dedicatedAllocation(e){this.memoryViewUint32[4]=0|e}}VkDedicatedAllocationImageCreateInfoNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDedicatedAllocationImageCreateInfoNV.prototype.reflect=function(e){},VkDedicatedAllocationImageCreateInfoNV.byteLength=24,VkDedicatedAllocationImageCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},dedicatedAllocation:{byteOffset:16,byteLength:4}};class VkDedicatedAllocationBufferCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000026001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.dedicatedAllocation&&(this.dedicatedAllocation=e.dedicatedAllocation))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDedicatedAllocationBufferCreateInfoNV.pNext' isn't allowed to be filled")}get dedicatedAllocation(){return 0!==this.memoryViewUint32[4]}set dedicatedAllocation(e){this.memoryViewUint32[4]=0|e}}VkDedicatedAllocationBufferCreateInfoNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDedicatedAllocationBufferCreateInfoNV.prototype.reflect=function(e){},VkDedicatedAllocationBufferCreateInfoNV.byteLength=24,VkDedicatedAllocationBufferCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},dedicatedAllocation:{byteOffset:16,byteLength:4}};class VkDedicatedAllocationMemoryAllocateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._image=null,this._buffer=null,this.sType=1000026002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.image&&(this.image=e.image),void 0!==e.buffer&&(this.buffer=e.buffer))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDedicatedAllocationMemoryAllocateInfoNV.pNext' isn't allowed to be filled")}get image(){return this._image}set image(e){null!==e?(this._image=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._image=null,this.memoryViewBigInt64[2]=BI0)}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[3]=BI0)}}VkDedicatedAllocationMemoryAllocateInfoNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDedicatedAllocationMemoryAllocateInfoNV.prototype.reflect=function(e){},VkDedicatedAllocationMemoryAllocateInfoNV.byteLength=32,VkDedicatedAllocationMemoryAllocateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},image:{byteOffset:16,byteLength:8},buffer:{byteOffset:24,byteLength:8}};class VkExternalImageFormatPropertiesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),this._imageFormatProperties=new VkImageFormatProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0})}get imageFormatProperties(){return this._imageFormatProperties}get externalMemoryFeatures(){return this.memoryViewInt32[8]}get exportFromImportedHandleTypes(){return this.memoryViewInt32[9]}get compatibleHandleTypes(){return this.memoryViewInt32[10]}}VkExternalImageFormatPropertiesNV.prototype.flush=function(){return!0},VkExternalImageFormatPropertiesNV.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(48)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,48),0)},VkExternalImageFormatPropertiesNV.byteLength=48,VkExternalImageFormatPropertiesNV.memoryLayout={imageFormatProperties:{byteOffset:0,byteLength:32},externalMemoryFeatures:{byteOffset:32,byteLength:4},exportFromImportedHandleTypes:{byteOffset:36,byteLength:4},compatibleHandleTypes:{byteOffset:40,byteLength:4}};class VkExternalMemoryImageCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000056e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleTypes&&(this.handleTypes=e.handleTypes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExternalMemoryImageCreateInfoNV.pNext' isn't allowed to be filled")}get handleTypes(){return this.memoryViewInt32[4]}set handleTypes(e){this.memoryViewInt32[4]=e}}VkExternalMemoryImageCreateInfoNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExternalMemoryImageCreateInfoNV.prototype.reflect=function(e){},VkExternalMemoryImageCreateInfoNV.byteLength=24,VkExternalMemoryImageCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleTypes:{byteOffset:16,byteLength:4}};class VkExportMemoryAllocateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000056001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleTypes&&(this.handleTypes=e.handleTypes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExportMemoryAllocateInfoNV.pNext' isn't allowed to be filled")}get handleTypes(){return this.memoryViewInt32[4]}set handleTypes(e){this.memoryViewInt32[4]=e}}VkExportMemoryAllocateInfoNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExportMemoryAllocateInfoNV.prototype.reflect=function(e){},VkExportMemoryAllocateInfoNV.byteLength=24,VkExportMemoryAllocateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleTypes:{byteOffset:16,byteLength:4}};class VkDeviceGeneratedCommandsFeaturesNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000086005,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.computeBindingPointSupport&&(this.computeBindingPointSupport=e.computeBindingPointSupport))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGeneratedCommandsFeaturesNVX.pNext' isn't allowed to be filled")}get computeBindingPointSupport(){return 0!==this.memoryViewUint32[4]}set computeBindingPointSupport(e){this.memoryViewUint32[4]=0|e}}VkDeviceGeneratedCommandsFeaturesNVX.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceGeneratedCommandsFeaturesNVX.prototype.reflect=function(e){},VkDeviceGeneratedCommandsFeaturesNVX.byteLength=24,VkDeviceGeneratedCommandsFeaturesNVX.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},computeBindingPointSupport:{byteOffset:16,byteLength:4}};class VkDeviceGeneratedCommandsLimitsNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000086004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.maxIndirectCommandsLayoutTokenCount&&(this.maxIndirectCommandsLayoutTokenCount=e.maxIndirectCommandsLayoutTokenCount),void 0!==e.maxObjectEntryCounts&&(this.maxObjectEntryCounts=e.maxObjectEntryCounts),void 0!==e.minSequenceCountBufferOffsetAlignment&&(this.minSequenceCountBufferOffsetAlignment=e.minSequenceCountBufferOffsetAlignment),void 0!==e.minSequenceIndexBufferOffsetAlignment&&(this.minSequenceIndexBufferOffsetAlignment=e.minSequenceIndexBufferOffsetAlignment),void 0!==e.minCommandsTokenBufferOffsetAlignment&&(this.minCommandsTokenBufferOffsetAlignment=e.minCommandsTokenBufferOffsetAlignment))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGeneratedCommandsLimitsNVX.pNext' isn't allowed to be filled")}get maxIndirectCommandsLayoutTokenCount(){return this.memoryViewUint32[4]}set maxIndirectCommandsLayoutTokenCount(e){this.memoryViewUint32[4]=e}get maxObjectEntryCounts(){return this.memoryViewUint32[5]}set maxObjectEntryCounts(e){this.memoryViewUint32[5]=e}get minSequenceCountBufferOffsetAlignment(){return this.memoryViewUint32[6]}set minSequenceCountBufferOffsetAlignment(e){this.memoryViewUint32[6]=e}get minSequenceIndexBufferOffsetAlignment(){return this.memoryViewUint32[7]}set minSequenceIndexBufferOffsetAlignment(e){this.memoryViewUint32[7]=e}get minCommandsTokenBufferOffsetAlignment(){return this.memoryViewUint32[8]}set minCommandsTokenBufferOffsetAlignment(e){this.memoryViewUint32[8]=e}}VkDeviceGeneratedCommandsLimitsNVX.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceGeneratedCommandsLimitsNVX.prototype.reflect=function(e){},VkDeviceGeneratedCommandsLimitsNVX.byteLength=40,VkDeviceGeneratedCommandsLimitsNVX.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxIndirectCommandsLayoutTokenCount:{byteOffset:16,byteLength:4},maxObjectEntryCounts:{byteOffset:20,byteLength:4},minSequenceCountBufferOffsetAlignment:{byteOffset:24,byteLength:4},minSequenceIndexBufferOffsetAlignment:{byteOffset:28,byteLength:4},minCommandsTokenBufferOffsetAlignment:{byteOffset:32,byteLength:4}};class VkIndirectCommandsTokenNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._buffer=null,"object"==typeof e&&(void 0!==e.tokenType&&(this.tokenType=e.tokenType),void 0!==e.buffer&&(this.buffer=e.buffer),void 0!==e.offset&&(this.offset=e.offset))}get tokenType(){return this.memoryViewInt32[0]}set tokenType(e){this.memoryViewInt32[0]=e}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[1]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[1]=BI0)}get offset(){return this.memoryViewBigUint64[2]}set offset(e){this.memoryViewBigUint64[2]=BigInt(e)}}VkIndirectCommandsTokenNVX.prototype.flush=function(){return!0},VkIndirectCommandsTokenNVX.prototype.reflect=function(e){},VkIndirectCommandsTokenNVX.byteLength=24,VkIndirectCommandsTokenNVX.memoryLayout={tokenType:{byteOffset:0,byteLength:4},buffer:{byteOffset:8,byteLength:8},offset:{byteOffset:16,byteLength:8}};class VkIndirectCommandsLayoutTokenNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.tokenType&&(this.tokenType=e.tokenType),void 0!==e.bindingUnit&&(this.bindingUnit=e.bindingUnit),void 0!==e.dynamicCount&&(this.dynamicCount=e.dynamicCount),void 0!==e.divisor&&(this.divisor=e.divisor))}get tokenType(){return this.memoryViewInt32[0]}set tokenType(e){this.memoryViewInt32[0]=e}get bindingUnit(){return this.memoryViewUint32[1]}set bindingUnit(e){this.memoryViewUint32[1]=e}get dynamicCount(){return this.memoryViewUint32[2]}set dynamicCount(e){this.memoryViewUint32[2]=e}get divisor(){return this.memoryViewUint32[3]}set divisor(e){this.memoryViewUint32[3]=e}}VkIndirectCommandsLayoutTokenNVX.prototype.flush=function(){return!0},VkIndirectCommandsLayoutTokenNVX.prototype.reflect=function(e){},VkIndirectCommandsLayoutTokenNVX.byteLength=16,VkIndirectCommandsLayoutTokenNVX.memoryLayout={tokenType:{byteOffset:0,byteLength:4},bindingUnit:{byteOffset:4,byteLength:4},dynamicCount:{byteOffset:8,byteLength:4},divisor:{byteOffset:12,byteLength:4}};class VkIndirectCommandsLayoutCreateInfoNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pTokens=null,this._pTokensNative=null,this.sType=1000086001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.pipelineBindPoint&&(this.pipelineBindPoint=e.pipelineBindPoint),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.tokenCount&&(this.tokenCount=e.tokenCount),void 0!==e.pTokens&&(this.pTokens=e.pTokens))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkIndirectCommandsLayoutCreateInfoNVX.pNext' isn't allowed to be filled")}get pipelineBindPoint(){return this.memoryViewInt32[4]}set pipelineBindPoint(e){this.memoryViewInt32[4]=e}get flags(){return this.memoryViewInt32[5]}set flags(e){this.memoryViewInt32[5]=e}get tokenCount(){return this.memoryViewUint32[6]}set tokenCount(e){this.memoryViewUint32[6]=e}get pTokens(){return this._pTokens}set pTokens(e){null!==e?this._pTokens=e:null===e&&(this._pTokens=null)}}VkIndirectCommandsLayoutCreateInfoNVX.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pTokens){let e=this._pTokens;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pTokensNative=t,this.memoryViewBigInt64[4]=t.address}return!0},VkIndirectCommandsLayoutCreateInfoNVX.prototype.reflect=function(e){},VkIndirectCommandsLayoutCreateInfoNVX.byteLength=40,VkIndirectCommandsLayoutCreateInfoNVX.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},pipelineBindPoint:{byteOffset:16,byteLength:4},flags:{byteOffset:20,byteLength:4},tokenCount:{byteOffset:24,byteLength:4},pTokens:{byteOffset:32,byteLength:8}};class VkCmdProcessCommandsInfoNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+96)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+96)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+96)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+96)/8)):(this.memoryBuffer=new ArrayBuffer(96),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._objectTable=null,this._indirectCommandsLayout=null,this._pIndirectCommandsTokens=null,this._pIndirectCommandsTokensNative=null,this._targetCommandBuffer=null,this._sequencesCountBuffer=null,this._sequencesIndexBuffer=null,this.sType=1000086002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.objectTable&&(this.objectTable=e.objectTable),void 0!==e.indirectCommandsLayout&&(this.indirectCommandsLayout=e.indirectCommandsLayout),void 0!==e.indirectCommandsTokenCount&&(this.indirectCommandsTokenCount=e.indirectCommandsTokenCount),void 0!==e.pIndirectCommandsTokens&&(this.pIndirectCommandsTokens=e.pIndirectCommandsTokens),void 0!==e.maxSequencesCount&&(this.maxSequencesCount=e.maxSequencesCount),void 0!==e.targetCommandBuffer&&(this.targetCommandBuffer=e.targetCommandBuffer),void 0!==e.sequencesCountBuffer&&(this.sequencesCountBuffer=e.sequencesCountBuffer),void 0!==e.sequencesCountOffset&&(this.sequencesCountOffset=e.sequencesCountOffset),void 0!==e.sequencesIndexBuffer&&(this.sequencesIndexBuffer=e.sequencesIndexBuffer),void 0!==e.sequencesIndexOffset&&(this.sequencesIndexOffset=e.sequencesIndexOffset))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkCmdProcessCommandsInfoNVX.pNext' isn't allowed to be filled")}get objectTable(){return this._objectTable}set objectTable(e){null!==e?(this._objectTable=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._objectTable=null,this.memoryViewBigInt64[2]=BI0)}get indirectCommandsLayout(){return this._indirectCommandsLayout}set indirectCommandsLayout(e){null!==e?(this._indirectCommandsLayout=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._indirectCommandsLayout=null,this.memoryViewBigInt64[3]=BI0)}get indirectCommandsTokenCount(){return this.memoryViewUint32[8]}set indirectCommandsTokenCount(e){this.memoryViewUint32[8]=e}get pIndirectCommandsTokens(){return this._pIndirectCommandsTokens}set pIndirectCommandsTokens(e){null!==e?this._pIndirectCommandsTokens=e:null===e&&(this._pIndirectCommandsTokens=null)}get maxSequencesCount(){return this.memoryViewUint32[12]}set maxSequencesCount(e){this.memoryViewUint32[12]=e}get targetCommandBuffer(){return this._targetCommandBuffer}set targetCommandBuffer(e){null!==e?(this._targetCommandBuffer=e,this.memoryViewBigInt64[7]=e.memoryViewBigInt64[0]):null===e&&(this._targetCommandBuffer=null,this.memoryViewBigInt64[7]=BI0)}get sequencesCountBuffer(){return this._sequencesCountBuffer}set sequencesCountBuffer(e){null!==e?(this._sequencesCountBuffer=e,this.memoryViewBigInt64[8]=e.memoryViewBigInt64[0]):null===e&&(this._sequencesCountBuffer=null,this.memoryViewBigInt64[8]=BI0)}get sequencesCountOffset(){return this.memoryViewBigUint64[9]}set sequencesCountOffset(e){this.memoryViewBigUint64[9]=BigInt(e)}get sequencesIndexBuffer(){return this._sequencesIndexBuffer}set sequencesIndexBuffer(e){null!==e?(this._sequencesIndexBuffer=e,this.memoryViewBigInt64[10]=e.memoryViewBigInt64[0]):null===e&&(this._sequencesIndexBuffer=null,this.memoryViewBigInt64[10]=BI0)}get sequencesIndexOffset(){return this.memoryViewBigUint64[11]}set sequencesIndexOffset(e){this.memoryViewBigUint64[11]=BigInt(e)}}VkCmdProcessCommandsInfoNVX.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pIndirectCommandsTokens){let e=this._pIndirectCommandsTokens;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pIndirectCommandsTokensNative=t,this.memoryViewBigInt64[5]=t.address}return!0},VkCmdProcessCommandsInfoNVX.prototype.reflect=function(e){},VkCmdProcessCommandsInfoNVX.byteLength=96,VkCmdProcessCommandsInfoNVX.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},objectTable:{byteOffset:16,byteLength:8},indirectCommandsLayout:{byteOffset:24,byteLength:8},indirectCommandsTokenCount:{byteOffset:32,byteLength:4},pIndirectCommandsTokens:{byteOffset:40,byteLength:8},maxSequencesCount:{byteOffset:48,byteLength:4},targetCommandBuffer:{byteOffset:56,byteLength:8},sequencesCountBuffer:{byteOffset:64,byteLength:8},sequencesCountOffset:{byteOffset:72,byteLength:8},sequencesIndexBuffer:{byteOffset:80,byteLength:8},sequencesIndexOffset:{byteOffset:88,byteLength:8}};class VkCmdReserveSpaceForCommandsInfoNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._objectTable=null,this._indirectCommandsLayout=null,this.sType=1000086003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.objectTable&&(this.objectTable=e.objectTable),void 0!==e.indirectCommandsLayout&&(this.indirectCommandsLayout=e.indirectCommandsLayout),void 0!==e.maxSequencesCount&&(this.maxSequencesCount=e.maxSequencesCount))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkCmdReserveSpaceForCommandsInfoNVX.pNext' isn't allowed to be filled")}get objectTable(){return this._objectTable}set objectTable(e){null!==e?(this._objectTable=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._objectTable=null,this.memoryViewBigInt64[2]=BI0)}get indirectCommandsLayout(){return this._indirectCommandsLayout}set indirectCommandsLayout(e){null!==e?(this._indirectCommandsLayout=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._indirectCommandsLayout=null,this.memoryViewBigInt64[3]=BI0)}get maxSequencesCount(){return this.memoryViewUint32[8]}set maxSequencesCount(e){this.memoryViewUint32[8]=e}}VkCmdReserveSpaceForCommandsInfoNVX.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkCmdReserveSpaceForCommandsInfoNVX.prototype.reflect=function(e){},VkCmdReserveSpaceForCommandsInfoNVX.byteLength=40,VkCmdReserveSpaceForCommandsInfoNVX.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},objectTable:{byteOffset:16,byteLength:8},indirectCommandsLayout:{byteOffset:24,byteLength:8},maxSequencesCount:{byteOffset:32,byteLength:4}};class VkObjectTableCreateInfoNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+72)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4)):(this.memoryBuffer=new ArrayBuffer(72),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pObjectEntryTypes=null,this._pObjectEntryCounts=null,this._pObjectEntryUsageFlags=null,this.sType=1000086e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.objectCount&&(this.objectCount=e.objectCount),void 0!==e.pObjectEntryTypes&&(this.pObjectEntryTypes=e.pObjectEntryTypes),void 0!==e.pObjectEntryCounts&&(this.pObjectEntryCounts=e.pObjectEntryCounts),void 0!==e.pObjectEntryUsageFlags&&(this.pObjectEntryUsageFlags=e.pObjectEntryUsageFlags),void 0!==e.maxUniformBuffersPerDescriptor&&(this.maxUniformBuffersPerDescriptor=e.maxUniformBuffersPerDescriptor),void 0!==e.maxStorageBuffersPerDescriptor&&(this.maxStorageBuffersPerDescriptor=e.maxStorageBuffersPerDescriptor),void 0!==e.maxStorageImagesPerDescriptor&&(this.maxStorageImagesPerDescriptor=e.maxStorageImagesPerDescriptor),void 0!==e.maxSampledImagesPerDescriptor&&(this.maxSampledImagesPerDescriptor=e.maxSampledImagesPerDescriptor),void 0!==e.maxPipelineLayouts&&(this.maxPipelineLayouts=e.maxPipelineLayouts))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkObjectTableCreateInfoNVX.pNext' isn't allowed to be filled")}get objectCount(){return this.memoryViewUint32[4]}set objectCount(e){this.memoryViewUint32[4]=e}get pObjectEntryTypes(){return this._pObjectEntryTypes}set pObjectEntryTypes(e){null!==e?(this._pObjectEntryTypes=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pObjectEntryTypes=null,this.memoryViewBigInt64[3]=BI0)}get pObjectEntryCounts(){return this._pObjectEntryCounts}set pObjectEntryCounts(e){null!==e?(this._pObjectEntryCounts=e,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pObjectEntryCounts=null,this.memoryViewBigInt64[4]=BI0)}get pObjectEntryUsageFlags(){return this._pObjectEntryUsageFlags}set pObjectEntryUsageFlags(e){null!==e?(this._pObjectEntryUsageFlags=e,this.memoryViewBigInt64[5]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pObjectEntryUsageFlags=null,this.memoryViewBigInt64[5]=BI0)}get maxUniformBuffersPerDescriptor(){return this.memoryViewUint32[12]}set maxUniformBuffersPerDescriptor(e){this.memoryViewUint32[12]=e}get maxStorageBuffersPerDescriptor(){return this.memoryViewUint32[13]}set maxStorageBuffersPerDescriptor(e){this.memoryViewUint32[13]=e}get maxStorageImagesPerDescriptor(){return this.memoryViewUint32[14]}set maxStorageImagesPerDescriptor(e){this.memoryViewUint32[14]=e}get maxSampledImagesPerDescriptor(){return this.memoryViewUint32[15]}set maxSampledImagesPerDescriptor(e){this.memoryViewUint32[15]=e}get maxPipelineLayouts(){return this.memoryViewUint32[16]}set maxPipelineLayouts(e){this.memoryViewUint32[16]=e}}VkObjectTableCreateInfoNVX.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkObjectTableCreateInfoNVX.prototype.reflect=function(e){},VkObjectTableCreateInfoNVX.byteLength=72,VkObjectTableCreateInfoNVX.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},objectCount:{byteOffset:16,byteLength:4},pObjectEntryTypes:{byteOffset:24,byteLength:8},pObjectEntryCounts:{byteOffset:32,byteLength:8},pObjectEntryUsageFlags:{byteOffset:40,byteLength:8},maxUniformBuffersPerDescriptor:{byteOffset:48,byteLength:4},maxStorageBuffersPerDescriptor:{byteOffset:52,byteLength:4},maxStorageImagesPerDescriptor:{byteOffset:56,byteLength:4},maxSampledImagesPerDescriptor:{byteOffset:60,byteLength:4},maxPipelineLayouts:{byteOffset:64,byteLength:4}};class VkObjectTableEntryNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.type&&(this.type=e.type),void 0!==e.flags&&(this.flags=e.flags))}get type(){return this.memoryViewInt32[0]}set type(e){this.memoryViewInt32[0]=e}get flags(){return this.memoryViewInt32[1]}set flags(e){this.memoryViewInt32[1]=e}}VkObjectTableEntryNVX.prototype.flush=function(){return!0},VkObjectTableEntryNVX.prototype.reflect=function(e){},VkObjectTableEntryNVX.byteLength=8,VkObjectTableEntryNVX.memoryLayout={type:{byteOffset:0,byteLength:4},flags:{byteOffset:4,byteLength:4}};class VkObjectTablePipelineEntryNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+16)/8)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pipeline=null,"object"==typeof e&&(void 0!==e.type&&(this.type=e.type),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.pipeline&&(this.pipeline=e.pipeline))}get type(){return this.memoryViewInt32[0]}set type(e){this.memoryViewInt32[0]=e}get flags(){return this.memoryViewInt32[1]}set flags(e){this.memoryViewInt32[1]=e}get pipeline(){return this._pipeline}set pipeline(e){null!==e?(this._pipeline=e,this.memoryViewBigInt64[1]=e.memoryViewBigInt64[0]):null===e&&(this._pipeline=null,this.memoryViewBigInt64[1]=BI0)}}VkObjectTablePipelineEntryNVX.prototype.flush=function(){return!0},VkObjectTablePipelineEntryNVX.prototype.reflect=function(e){},VkObjectTablePipelineEntryNVX.byteLength=16,VkObjectTablePipelineEntryNVX.memoryLayout={type:{byteOffset:0,byteLength:4},flags:{byteOffset:4,byteLength:4},pipeline:{byteOffset:8,byteLength:8}};class VkObjectTableDescriptorSetEntryNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pipelineLayout=null,this._descriptorSet=null,"object"==typeof e&&(void 0!==e.type&&(this.type=e.type),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.pipelineLayout&&(this.pipelineLayout=e.pipelineLayout),void 0!==e.descriptorSet&&(this.descriptorSet=e.descriptorSet))}get type(){return this.memoryViewInt32[0]}set type(e){this.memoryViewInt32[0]=e}get flags(){return this.memoryViewInt32[1]}set flags(e){this.memoryViewInt32[1]=e}get pipelineLayout(){return this._pipelineLayout}set pipelineLayout(e){null!==e?(this._pipelineLayout=e,this.memoryViewBigInt64[1]=e.memoryViewBigInt64[0]):null===e&&(this._pipelineLayout=null,this.memoryViewBigInt64[1]=BI0)}get descriptorSet(){return this._descriptorSet}set descriptorSet(e){null!==e?(this._descriptorSet=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._descriptorSet=null,this.memoryViewBigInt64[2]=BI0)}}VkObjectTableDescriptorSetEntryNVX.prototype.flush=function(){return!0},VkObjectTableDescriptorSetEntryNVX.prototype.reflect=function(e){},VkObjectTableDescriptorSetEntryNVX.byteLength=24,VkObjectTableDescriptorSetEntryNVX.memoryLayout={type:{byteOffset:0,byteLength:4},flags:{byteOffset:4,byteLength:4},pipelineLayout:{byteOffset:8,byteLength:8},descriptorSet:{byteOffset:16,byteLength:8}};class VkObjectTableVertexBufferEntryNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+16)/8)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._buffer=null,"object"==typeof e&&(void 0!==e.type&&(this.type=e.type),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.buffer&&(this.buffer=e.buffer))}get type(){return this.memoryViewInt32[0]}set type(e){this.memoryViewInt32[0]=e}get flags(){return this.memoryViewInt32[1]}set flags(e){this.memoryViewInt32[1]=e}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[1]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[1]=BI0)}}VkObjectTableVertexBufferEntryNVX.prototype.flush=function(){return!0},VkObjectTableVertexBufferEntryNVX.prototype.reflect=function(e){},VkObjectTableVertexBufferEntryNVX.byteLength=16,VkObjectTableVertexBufferEntryNVX.memoryLayout={type:{byteOffset:0,byteLength:4},flags:{byteOffset:4,byteLength:4},buffer:{byteOffset:8,byteLength:8}};class VkObjectTableIndexBufferEntryNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._buffer=null,"object"==typeof e&&(void 0!==e.type&&(this.type=e.type),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.buffer&&(this.buffer=e.buffer),void 0!==e.indexType&&(this.indexType=e.indexType))}get type(){return this.memoryViewInt32[0]}set type(e){this.memoryViewInt32[0]=e}get flags(){return this.memoryViewInt32[1]}set flags(e){this.memoryViewInt32[1]=e}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[1]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[1]=BI0)}get indexType(){return this.memoryViewInt32[4]}set indexType(e){this.memoryViewInt32[4]=e}}VkObjectTableIndexBufferEntryNVX.prototype.flush=function(){return!0},VkObjectTableIndexBufferEntryNVX.prototype.reflect=function(e){},VkObjectTableIndexBufferEntryNVX.byteLength=24,VkObjectTableIndexBufferEntryNVX.memoryLayout={type:{byteOffset:0,byteLength:4},flags:{byteOffset:4,byteLength:4},buffer:{byteOffset:8,byteLength:8},indexType:{byteOffset:16,byteLength:4}};class VkObjectTablePushConstantEntryNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pipelineLayout=null,"object"==typeof e&&(void 0!==e.type&&(this.type=e.type),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.pipelineLayout&&(this.pipelineLayout=e.pipelineLayout),void 0!==e.stageFlags&&(this.stageFlags=e.stageFlags))}get type(){return this.memoryViewInt32[0]}set type(e){this.memoryViewInt32[0]=e}get flags(){return this.memoryViewInt32[1]}set flags(e){this.memoryViewInt32[1]=e}get pipelineLayout(){return this._pipelineLayout}set pipelineLayout(e){null!==e?(this._pipelineLayout=e,this.memoryViewBigInt64[1]=e.memoryViewBigInt64[0]):null===e&&(this._pipelineLayout=null,this.memoryViewBigInt64[1]=BI0)}get stageFlags(){return this.memoryViewInt32[4]}set stageFlags(e){this.memoryViewInt32[4]=e}}VkObjectTablePushConstantEntryNVX.prototype.flush=function(){return!0},VkObjectTablePushConstantEntryNVX.prototype.reflect=function(e){},VkObjectTablePushConstantEntryNVX.byteLength=24,VkObjectTablePushConstantEntryNVX.memoryLayout={type:{byteOffset:0,byteLength:4},flags:{byteOffset:4,byteLength:4},pipelineLayout:{byteOffset:8,byteLength:8},stageFlags:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceFeatures2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+240)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+240)/8)):(this.memoryBuffer=new ArrayBuffer(240),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._features=new VkPhysicalDeviceFeatures({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.features&&(this.features=e.features))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 100012e4:case 1000053001:case 1000083e3:case 1000156004:case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:case 1000148e3:case 1000138e3:case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:case 1000082e3:case 1000261e3:case 1000161001:case 1000177e3:case 1000081001:case 1000211e3:case 100018e4:case 1000190002:case 1000067001:case 1000028e3:case 1000166e3:case 1000205002:case 100005e4:case 1000201e3:case 1000203e3:case 1000204e3:case 100024e4:case 1000164001:case 1000202e3:case 1000218e3:case 1000221e3:case 1000253e3:case 1000102e3:case 1000238e3:case 1000244e3:case 1000108e3:case 1000249e3:case 1000252e3:case 100025e4:case 1000209e3:case 1000154e3:case 1000251e3:case 1000276e3:case 1000281e3:break;default:throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get features(){return this._features}set features(e){null!==e?(e.flush(),this._features=e):null===e&&(this._features=null)}}VkPhysicalDeviceFeatures2.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._features){let e=this._features;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+220);new Uint8Array(this.memoryBuffer).set(t,16)}}return!0},VkPhysicalDeviceFeatures2.prototype.reflect=function(e){},VkPhysicalDeviceFeatures2.byteLength=240,VkPhysicalDeviceFeatures2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},features:{byteOffset:16,byteLength:220}};class VkPhysicalDeviceFeatures2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+240)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+240)/8)):(this.memoryBuffer=new ArrayBuffer(240),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._features=new VkPhysicalDeviceFeatures({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.features&&(this.features=e.features))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 100012e4:case 1000053001:case 1000083e3:case 1000156004:case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:case 1000148e3:case 1000138e3:case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:case 1000082e3:case 1000261e3:case 1000161001:case 1000177e3:case 1000081001:case 1000211e3:case 100018e4:case 1000190002:case 1000067001:case 1000028e3:case 1000166e3:case 1000205002:case 100005e4:case 1000201e3:case 1000203e3:case 1000204e3:case 100024e4:case 1000164001:case 1000202e3:case 1000218e3:case 1000221e3:case 1000253e3:case 1000102e3:case 1000238e3:case 1000244e3:case 1000108e3:case 1000249e3:case 1000252e3:case 100025e4:case 1000209e3:case 1000154e3:case 1000251e3:case 1000276e3:case 1000281e3:break;default:throw new TypeError("Invalid type for 'VkPhysicalDeviceFeatures2KHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get features(){return this._features}set features(e){null!==e?(e.flush(),this._features=e):null===e&&(this._features=null)}}VkPhysicalDeviceFeatures2KHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._features){let e=this._features;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+220);new Uint8Array(this.memoryBuffer).set(t,16)}}return!0},VkPhysicalDeviceFeatures2KHR.prototype.reflect=function(e){},VkPhysicalDeviceFeatures2KHR.byteLength=240,VkPhysicalDeviceFeatures2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},features:{byteOffset:16,byteLength:220}};class VkPhysicalDeviceProperties2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+840)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+840)/8)):(this.memoryBuffer=new ArrayBuffer(840),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._properties=new VkPhysicalDeviceProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 100008e4:case 1000196e3:case 1000071004:case 1000053002:case 1000099e3:case 1000097e3:case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:case 1000117e3:case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:case 100013e4:case 1000143003:case 1000148001:case 1000138001:case 1000168e3:case 1000197e3:case 1000178002:case 1000101e3:case 1000185e3:case 1000161002:case 100019e4:case 1000212e3:case 1000199e3:case 1000028001:case 1000164002:case 1000202001:case 1000165009:case 1000218001:case 1000249002:case 1000154001:break;default:throw new TypeError("Invalid type for 'VkPhysicalDeviceProperties2.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get properties(){return this._properties}}VkPhysicalDeviceProperties2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceProperties2.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(840)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,840),0)},VkPhysicalDeviceProperties2.byteLength=840,VkPhysicalDeviceProperties2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},properties:{byteOffset:16,byteLength:824}};class VkPhysicalDeviceProperties2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+840)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+840)/8)):(this.memoryBuffer=new ArrayBuffer(840),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._properties=new VkPhysicalDeviceProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 100008e4:case 1000196e3:case 1000071004:case 1000053002:case 1000099e3:case 1000097e3:case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:case 1000117e3:case VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:case 100013e4:case 1000143003:case 1000148001:case 1000138001:case 1000168e3:case 1000197e3:case 1000178002:case 1000101e3:case 1000185e3:case 1000161002:case 100019e4:case 1000212e3:case 1000199e3:case 1000028001:case 1000164002:case 1000202001:case 1000165009:case 1000218001:case 1000249002:case 1000154001:break;default:throw new TypeError("Invalid type for 'VkPhysicalDeviceProperties2KHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get properties(){return this._properties}}VkPhysicalDeviceProperties2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceProperties2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(840)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,840),0)},VkPhysicalDeviceProperties2KHR.byteLength=840,VkPhysicalDeviceProperties2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},properties:{byteOffset:16,byteLength:824}};class VkFormatProperties2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._formatProperties=new VkFormatProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000158e3:break;default:throw new TypeError("Invalid type for 'VkFormatProperties2.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get formatProperties(){return this._formatProperties}}VkFormatProperties2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkFormatProperties2.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkFormatProperties2.byteLength=32,VkFormatProperties2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},formatProperties:{byteOffset:16,byteLength:12}};class VkFormatProperties2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._formatProperties=new VkFormatProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000158e3:break;default:throw new TypeError("Invalid type for 'VkFormatProperties2KHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get formatProperties(){return this._formatProperties}}VkFormatProperties2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkFormatProperties2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkFormatProperties2KHR.byteLength=32,VkFormatProperties2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},formatProperties:{byteOffset:16,byteLength:12}};class VkImageFormatProperties2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._imageFormatProperties=new VkImageFormatProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000071001:case 1000156005:case 1000041e3:case 1000129e3:case 1000170001:break;default:throw new TypeError("Invalid type for 'VkImageFormatProperties2.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get imageFormatProperties(){return this._imageFormatProperties}}VkImageFormatProperties2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageFormatProperties2.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(48)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,48),0)},VkImageFormatProperties2.byteLength=48,VkImageFormatProperties2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},imageFormatProperties:{byteOffset:16,byteLength:32}};class VkImageFormatProperties2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._imageFormatProperties=new VkImageFormatProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000071001:case 1000156005:case 1000041e3:case 1000129e3:case 1000170001:break;default:throw new TypeError("Invalid type for 'VkImageFormatProperties2KHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get imageFormatProperties(){return this._imageFormatProperties}}VkImageFormatProperties2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageFormatProperties2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(48)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,48),0)},VkImageFormatProperties2KHR.byteLength=48,VkImageFormatProperties2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},imageFormatProperties:{byteOffset:16,byteLength:32}};class VkPhysicalDeviceImageFormatInfo2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000059004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.format&&(this.format=e.format),void 0!==e.type&&(this.type=e.type),void 0!==e.tiling&&(this.tiling=e.tiling),void 0!==e.usage&&(this.usage=e.usage),void 0!==e.flags&&(this.flags=e.flags))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000071e3:case 1000147e3:case 1000158002:case 1000246e3:case 100017e4:break;default:throw new TypeError("Invalid type for 'VkPhysicalDeviceImageFormatInfo2.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get format(){return this.memoryViewInt32[4]}set format(e){this.memoryViewInt32[4]=e}get type(){return this.memoryViewInt32[5]}set type(e){this.memoryViewInt32[5]=e}get tiling(){return this.memoryViewInt32[6]}set tiling(e){this.memoryViewInt32[6]=e}get usage(){return this.memoryViewInt32[7]}set usage(e){this.memoryViewInt32[7]=e}get flags(){return this.memoryViewInt32[8]}set flags(e){this.memoryViewInt32[8]=e}}VkPhysicalDeviceImageFormatInfo2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceImageFormatInfo2.prototype.reflect=function(e){},VkPhysicalDeviceImageFormatInfo2.byteLength=40,VkPhysicalDeviceImageFormatInfo2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},format:{byteOffset:16,byteLength:4},type:{byteOffset:20,byteLength:4},tiling:{byteOffset:24,byteLength:4},usage:{byteOffset:28,byteLength:4},flags:{byteOffset:32,byteLength:4}};class VkPhysicalDeviceImageFormatInfo2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000059004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.format&&(this.format=e.format),void 0!==e.type&&(this.type=e.type),void 0!==e.tiling&&(this.tiling=e.tiling),void 0!==e.usage&&(this.usage=e.usage),void 0!==e.flags&&(this.flags=e.flags))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000071e3:case 1000147e3:case 1000158002:case 1000246e3:case 100017e4:break;default:throw new TypeError("Invalid type for 'VkPhysicalDeviceImageFormatInfo2KHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get format(){return this.memoryViewInt32[4]}set format(e){this.memoryViewInt32[4]=e}get type(){return this.memoryViewInt32[5]}set type(e){this.memoryViewInt32[5]=e}get tiling(){return this.memoryViewInt32[6]}set tiling(e){this.memoryViewInt32[6]=e}get usage(){return this.memoryViewInt32[7]}set usage(e){this.memoryViewInt32[7]=e}get flags(){return this.memoryViewInt32[8]}set flags(e){this.memoryViewInt32[8]=e}}VkPhysicalDeviceImageFormatInfo2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceImageFormatInfo2KHR.prototype.reflect=function(e){},VkPhysicalDeviceImageFormatInfo2KHR.byteLength=40,VkPhysicalDeviceImageFormatInfo2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},format:{byteOffset:16,byteLength:4},type:{byteOffset:20,byteLength:4},tiling:{byteOffset:24,byteLength:4},usage:{byteOffset:28,byteLength:4},flags:{byteOffset:32,byteLength:4}};class VkQueueFamilyProperties2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._queueFamilyProperties=new VkQueueFamilyProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059005,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000206001:break;default:throw new TypeError("Invalid type for 'VkQueueFamilyProperties2.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get queueFamilyProperties(){return this._queueFamilyProperties}}VkQueueFamilyProperties2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkQueueFamilyProperties2.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(40)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,40),0)},VkQueueFamilyProperties2.byteLength=40,VkQueueFamilyProperties2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},queueFamilyProperties:{byteOffset:16,byteLength:24}};class VkQueueFamilyProperties2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._queueFamilyProperties=new VkQueueFamilyProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059005,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000206001:break;default:throw new TypeError("Invalid type for 'VkQueueFamilyProperties2KHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get queueFamilyProperties(){return this._queueFamilyProperties}}VkQueueFamilyProperties2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkQueueFamilyProperties2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(40)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,40),0)},VkQueueFamilyProperties2KHR.byteLength=40,VkQueueFamilyProperties2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},queueFamilyProperties:{byteOffset:16,byteLength:24}};class VkPhysicalDeviceMemoryProperties2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+536)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+536)/8)):(this.memoryBuffer=new ArrayBuffer(536),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._memoryProperties=new VkPhysicalDeviceMemoryProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059006,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000237e3:case 1000281001:break;default:throw new TypeError("Invalid type for 'VkPhysicalDeviceMemoryProperties2.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get memoryProperties(){return this._memoryProperties}}VkPhysicalDeviceMemoryProperties2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceMemoryProperties2.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(536)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,536),0)},VkPhysicalDeviceMemoryProperties2.byteLength=536,VkPhysicalDeviceMemoryProperties2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},memoryProperties:{byteOffset:16,byteLength:520}};class VkPhysicalDeviceMemoryProperties2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+536)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+536)/8)):(this.memoryBuffer=new ArrayBuffer(536),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._memoryProperties=new VkPhysicalDeviceMemoryProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059006,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000237e3:case 1000281001:break;default:throw new TypeError("Invalid type for 'VkPhysicalDeviceMemoryProperties2KHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get memoryProperties(){return this._memoryProperties}}VkPhysicalDeviceMemoryProperties2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceMemoryProperties2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(536)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,536),0)},VkPhysicalDeviceMemoryProperties2KHR.byteLength=536,VkPhysicalDeviceMemoryProperties2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},memoryProperties:{byteOffset:16,byteLength:520}};class VkSparseImageFormatProperties2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._properties=new VkSparseImageFormatProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059007,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSparseImageFormatProperties2.pNext' isn't allowed to be filled")}get properties(){return this._properties}}VkSparseImageFormatProperties2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSparseImageFormatProperties2.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(40)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,40),0)},VkSparseImageFormatProperties2.byteLength=40,VkSparseImageFormatProperties2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},properties:{byteOffset:16,byteLength:20}};class VkSparseImageFormatProperties2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._properties=new VkSparseImageFormatProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000059007,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSparseImageFormatProperties2KHR.pNext' isn't allowed to be filled")}get properties(){return this._properties}}VkSparseImageFormatProperties2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSparseImageFormatProperties2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(40)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,40),0)},VkSparseImageFormatProperties2KHR.byteLength=40,VkSparseImageFormatProperties2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},properties:{byteOffset:16,byteLength:20}};class VkPhysicalDeviceSparseImageFormatInfo2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000059008,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.format&&(this.format=e.format),void 0!==e.type&&(this.type=e.type),void 0!==e.samples&&(this.samples=e.samples),void 0!==e.usage&&(this.usage=e.usage),void 0!==e.tiling&&(this.tiling=e.tiling))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceSparseImageFormatInfo2.pNext' isn't allowed to be filled")}get format(){return this.memoryViewInt32[4]}set format(e){this.memoryViewInt32[4]=e}get type(){return this.memoryViewInt32[5]}set type(e){this.memoryViewInt32[5]=e}get samples(){return this.memoryViewInt32[6]}set samples(e){this.memoryViewInt32[6]=e}get usage(){return this.memoryViewInt32[7]}set usage(e){this.memoryViewInt32[7]=e}get tiling(){return this.memoryViewInt32[8]}set tiling(e){this.memoryViewInt32[8]=e}}VkPhysicalDeviceSparseImageFormatInfo2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceSparseImageFormatInfo2.prototype.reflect=function(e){},VkPhysicalDeviceSparseImageFormatInfo2.byteLength=40,VkPhysicalDeviceSparseImageFormatInfo2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},format:{byteOffset:16,byteLength:4},type:{byteOffset:20,byteLength:4},samples:{byteOffset:24,byteLength:4},usage:{byteOffset:28,byteLength:4},tiling:{byteOffset:32,byteLength:4}};class VkPhysicalDeviceSparseImageFormatInfo2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000059008,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.format&&(this.format=e.format),void 0!==e.type&&(this.type=e.type),void 0!==e.samples&&(this.samples=e.samples),void 0!==e.usage&&(this.usage=e.usage),void 0!==e.tiling&&(this.tiling=e.tiling))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceSparseImageFormatInfo2KHR.pNext' isn't allowed to be filled")}get format(){return this.memoryViewInt32[4]}set format(e){this.memoryViewInt32[4]=e}get type(){return this.memoryViewInt32[5]}set type(e){this.memoryViewInt32[5]=e}get samples(){return this.memoryViewInt32[6]}set samples(e){this.memoryViewInt32[6]=e}get usage(){return this.memoryViewInt32[7]}set usage(e){this.memoryViewInt32[7]=e}get tiling(){return this.memoryViewInt32[8]}set tiling(e){this.memoryViewInt32[8]=e}}VkPhysicalDeviceSparseImageFormatInfo2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceSparseImageFormatInfo2KHR.prototype.reflect=function(e){},VkPhysicalDeviceSparseImageFormatInfo2KHR.byteLength=40,VkPhysicalDeviceSparseImageFormatInfo2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},format:{byteOffset:16,byteLength:4},type:{byteOffset:20,byteLength:4},samples:{byteOffset:24,byteLength:4},usage:{byteOffset:28,byteLength:4},tiling:{byteOffset:32,byteLength:4}};class VkPhysicalDevicePushDescriptorPropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=100008e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDevicePushDescriptorPropertiesKHR.pNext' isn't allowed to be filled")}get maxPushDescriptors(){return this.memoryViewUint32[4]}}VkPhysicalDevicePushDescriptorPropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDevicePushDescriptorPropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkPhysicalDevicePushDescriptorPropertiesKHR.byteLength=24,VkPhysicalDevicePushDescriptorPropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxPushDescriptors:{byteOffset:16,byteLength:4}};class VkConformanceVersionKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint8=new Uint8Array(this.memoryBuffer).subarray(e.$memoryOffset/1,(e.$memoryOffset+4)/1)):(this.memoryBuffer=new ArrayBuffer(4),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint8=new Uint8Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.major&&(this.major=e.major),void 0!==e.minor&&(this.minor=e.minor),void 0!==e.subminor&&(this.subminor=e.subminor),void 0!==e.patch&&(this.patch=e.patch))}get major(){return this.memoryViewUint8[0]}set major(e){this.memoryViewUint8[0]=e}get minor(){return this.memoryViewUint8[1]}set minor(e){this.memoryViewUint8[1]=e}get subminor(){return this.memoryViewUint8[2]}set subminor(e){this.memoryViewUint8[2]=e}get patch(){return this.memoryViewUint8[3]}set patch(e){this.memoryViewUint8[3]=e}}VkConformanceVersionKHR.prototype.flush=function(){return!0},VkConformanceVersionKHR.prototype.reflect=function(e){},VkConformanceVersionKHR.byteLength=4,VkConformanceVersionKHR.memoryLayout={major:{byteOffset:0,byteLength:1},minor:{byteOffset:1,byteLength:1},subminor:{byteOffset:2,byteLength:1},patch:{byteOffset:3,byteLength:1}};class VkPhysicalDeviceDriverPropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+536)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+536)/8)):(this.memoryBuffer=new ArrayBuffer(536),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._conformanceVersion=new VkConformanceVersionKHR({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+532}),this.sType=1000196e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceDriverPropertiesKHR.pNext' isn't allowed to be filled")}get driverID(){return this.memoryViewInt32[4]}get driverName(){return decodeNullTerminatedUTF8String(new Uint8Array(this.memoryBuffer).subarray(this.$memoryOffset+20,296))||null}get driverInfo(){return decodeNullTerminatedUTF8String(new Uint8Array(this.memoryBuffer).subarray(this.$memoryOffset+276,808))||null}get conformanceVersion(){return this._conformanceVersion}}VkPhysicalDeviceDriverPropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceDriverPropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(536)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,536),0)},VkPhysicalDeviceDriverPropertiesKHR.byteLength=536,VkPhysicalDeviceDriverPropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},driverID:{byteOffset:16,byteLength:4},driverName:{byteOffset:20,byteLength:256},driverInfo:{byteOffset:276,byteLength:256},conformanceVersion:{byteOffset:532,byteLength:4}};class VkPresentRegionsKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pRegions=null,this._pRegionsNative=null,this.sType=1000084e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.swapchainCount&&(this.swapchainCount=e.swapchainCount),void 0!==e.pRegions&&(this.pRegions=e.pRegions))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPresentRegionsKHR.pNext' isn't allowed to be filled")}get swapchainCount(){return this.memoryViewUint32[4]}set swapchainCount(e){this.memoryViewUint32[4]=e}get pRegions(){return this._pRegions}set pRegions(e){null!==e?this._pRegions=e:null===e&&(this._pRegions=null)}}VkPresentRegionsKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pRegions){let e=this._pRegions;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pRegionsNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkPresentRegionsKHR.prototype.reflect=function(e){},VkPresentRegionsKHR.byteLength=32,VkPresentRegionsKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},swapchainCount:{byteOffset:16,byteLength:4},pRegions:{byteOffset:24,byteLength:8}};class VkPresentRegionKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pRectangles=null,this._pRectanglesNative=null,"object"==typeof e&&(void 0!==e.rectangleCount&&(this.rectangleCount=e.rectangleCount),void 0!==e.pRectangles&&(this.pRectangles=e.pRectangles))}get rectangleCount(){return this.memoryViewUint32[0]}set rectangleCount(e){this.memoryViewUint32[0]=e}get pRectangles(){return this._pRectangles}set pRectangles(e){null!==e?this._pRectangles=e:null===e&&(this._pRectangles=null)}}VkPresentRegionKHR.prototype.flush=function(){if(null!==this._pRectangles){let e=this._pRectangles;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pRectanglesNative=t,this.memoryViewBigInt64[1]=t.address}return!0},VkPresentRegionKHR.prototype.reflect=function(e){},VkPresentRegionKHR.byteLength=16,VkPresentRegionKHR.memoryLayout={rectangleCount:{byteOffset:0,byteLength:4},pRectangles:{byteOffset:8,byteLength:8}};class VkRectLayerKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+20)/4)):(this.memoryBuffer=new ArrayBuffer(20),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._offset=new VkOffset2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0}),this._extent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+8}),"object"==typeof e&&(void 0!==e.offset&&(this.offset=e.offset),void 0!==e.extent&&(this.extent=e.extent),void 0!==e.layer&&(this.layer=e.layer))}get offset(){return this._offset}set offset(e){null!==e?(e.flush(),this._offset=e):null===e&&(this._offset=null)}get extent(){return this._extent}set extent(e){null!==e?(e.flush(),this._extent=e):null===e&&(this._extent=null)}get layer(){return this.memoryViewUint32[4]}set layer(e){this.memoryViewUint32[4]=e}}VkRectLayerKHR.prototype.flush=function(){if(null!==this._offset){let e=this._offset;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,0)}}if(null!==this._extent){let e=this._extent;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,8)}}return!0},VkRectLayerKHR.prototype.reflect=function(e){},VkRectLayerKHR.byteLength=20,VkRectLayerKHR.memoryLayout={offset:{byteOffset:0,byteLength:8},extent:{byteOffset:8,byteLength:8},layer:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceVariablePointersFeatures{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=100012e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.variablePointersStorageBuffer&&(this.variablePointersStorageBuffer=e.variablePointersStorageBuffer),void 0!==e.variablePointers&&(this.variablePointers=e.variablePointers))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceVariablePointersFeatures.pNext' isn't allowed to be filled")}get variablePointersStorageBuffer(){return 0!==this.memoryViewUint32[4]}set variablePointersStorageBuffer(e){this.memoryViewUint32[4]=0|e}get variablePointers(){return 0!==this.memoryViewUint32[5]}set variablePointers(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceVariablePointersFeatures.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceVariablePointersFeatures.prototype.reflect=function(e){},VkPhysicalDeviceVariablePointersFeatures.byteLength=24,VkPhysicalDeviceVariablePointersFeatures.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},variablePointersStorageBuffer:{byteOffset:16,byteLength:4},variablePointers:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceVariablePointersFeaturesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=100012e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.variablePointersStorageBuffer&&(this.variablePointersStorageBuffer=e.variablePointersStorageBuffer),void 0!==e.variablePointers&&(this.variablePointers=e.variablePointers))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceVariablePointersFeaturesKHR.pNext' isn't allowed to be filled")}get variablePointersStorageBuffer(){return 0!==this.memoryViewUint32[4]}set variablePointersStorageBuffer(e){this.memoryViewUint32[4]=0|e}get variablePointers(){return 0!==this.memoryViewUint32[5]}set variablePointers(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceVariablePointersFeaturesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceVariablePointersFeaturesKHR.prototype.reflect=function(e){},VkPhysicalDeviceVariablePointersFeaturesKHR.byteLength=24,VkPhysicalDeviceVariablePointersFeaturesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},variablePointersStorageBuffer:{byteOffset:16,byteLength:4},variablePointers:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceVariablePointerFeaturesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=100012e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.variablePointersStorageBuffer&&(this.variablePointersStorageBuffer=e.variablePointersStorageBuffer),void 0!==e.variablePointers&&(this.variablePointers=e.variablePointers))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceVariablePointerFeaturesKHR.pNext' isn't allowed to be filled")}get variablePointersStorageBuffer(){return 0!==this.memoryViewUint32[4]}set variablePointersStorageBuffer(e){this.memoryViewUint32[4]=0|e}get variablePointers(){return 0!==this.memoryViewUint32[5]}set variablePointers(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceVariablePointerFeaturesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceVariablePointerFeaturesKHR.prototype.reflect=function(e){},VkPhysicalDeviceVariablePointerFeaturesKHR.byteLength=24,VkPhysicalDeviceVariablePointerFeaturesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},variablePointersStorageBuffer:{byteOffset:16,byteLength:4},variablePointers:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceVariablePointerFeatures{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=100012e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.variablePointersStorageBuffer&&(this.variablePointersStorageBuffer=e.variablePointersStorageBuffer),void 0!==e.variablePointers&&(this.variablePointers=e.variablePointers))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceVariablePointerFeatures.pNext' isn't allowed to be filled")}get variablePointersStorageBuffer(){return 0!==this.memoryViewUint32[4]}set variablePointersStorageBuffer(e){this.memoryViewUint32[4]=0|e}get variablePointers(){return 0!==this.memoryViewUint32[5]}set variablePointers(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceVariablePointerFeatures.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceVariablePointerFeatures.prototype.reflect=function(e){},VkPhysicalDeviceVariablePointerFeatures.byteLength=24,VkPhysicalDeviceVariablePointerFeatures.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},variablePointersStorageBuffer:{byteOffset:16,byteLength:4},variablePointers:{byteOffset:20,byteLength:4}};class VkExternalMemoryProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4)):(this.memoryBuffer=new ArrayBuffer(12),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer))}get externalMemoryFeatures(){return this.memoryViewInt32[0]}get exportFromImportedHandleTypes(){return this.memoryViewInt32[1]}get compatibleHandleTypes(){return this.memoryViewInt32[2]}}VkExternalMemoryProperties.prototype.flush=function(){return!0},VkExternalMemoryProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(12)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,12),0)},VkExternalMemoryProperties.byteLength=12,VkExternalMemoryProperties.memoryLayout={externalMemoryFeatures:{byteOffset:0,byteLength:4},exportFromImportedHandleTypes:{byteOffset:4,byteLength:4},compatibleHandleTypes:{byteOffset:8,byteLength:4}};class VkExternalMemoryPropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4)):(this.memoryBuffer=new ArrayBuffer(12),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer))}get externalMemoryFeatures(){return this.memoryViewInt32[0]}get exportFromImportedHandleTypes(){return this.memoryViewInt32[1]}get compatibleHandleTypes(){return this.memoryViewInt32[2]}}VkExternalMemoryPropertiesKHR.prototype.flush=function(){return!0},VkExternalMemoryPropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(12)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,12),0)},VkExternalMemoryPropertiesKHR.byteLength=12,VkExternalMemoryPropertiesKHR.memoryLayout={externalMemoryFeatures:{byteOffset:0,byteLength:4},exportFromImportedHandleTypes:{byteOffset:4,byteLength:4},compatibleHandleTypes:{byteOffset:8,byteLength:4}};class VkPhysicalDeviceExternalImageFormatInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000071e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleType&&(this.handleType=e.handleType))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceExternalImageFormatInfo.pNext' isn't allowed to be filled")}get handleType(){return this.memoryViewInt32[4]}set handleType(e){this.memoryViewInt32[4]=e}}VkPhysicalDeviceExternalImageFormatInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceExternalImageFormatInfo.prototype.reflect=function(e){},VkPhysicalDeviceExternalImageFormatInfo.byteLength=24,VkPhysicalDeviceExternalImageFormatInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleType:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceExternalImageFormatInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000071e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleType&&(this.handleType=e.handleType))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceExternalImageFormatInfoKHR.pNext' isn't allowed to be filled")}get handleType(){return this.memoryViewInt32[4]}set handleType(e){this.memoryViewInt32[4]=e}}VkPhysicalDeviceExternalImageFormatInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceExternalImageFormatInfoKHR.prototype.reflect=function(e){},VkPhysicalDeviceExternalImageFormatInfoKHR.byteLength=24,VkPhysicalDeviceExternalImageFormatInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleType:{byteOffset:16,byteLength:4}};class VkExternalImageFormatProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._externalMemoryProperties=new VkExternalMemoryProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000071001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExternalImageFormatProperties.pNext' isn't allowed to be filled")}get externalMemoryProperties(){return this._externalMemoryProperties}}VkExternalImageFormatProperties.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExternalImageFormatProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkExternalImageFormatProperties.byteLength=32,VkExternalImageFormatProperties.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},externalMemoryProperties:{byteOffset:16,byteLength:12}};class VkExternalImageFormatPropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._externalMemoryProperties=new VkExternalMemoryProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000071001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExternalImageFormatPropertiesKHR.pNext' isn't allowed to be filled")}get externalMemoryProperties(){return this._externalMemoryProperties}}VkExternalImageFormatPropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExternalImageFormatPropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkExternalImageFormatPropertiesKHR.byteLength=32,VkExternalImageFormatPropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},externalMemoryProperties:{byteOffset:16,byteLength:12}};class VkPhysicalDeviceExternalBufferInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000071002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.usage&&(this.usage=e.usage),void 0!==e.handleType&&(this.handleType=e.handleType))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceExternalBufferInfo.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get usage(){return this.memoryViewInt32[5]}set usage(e){this.memoryViewInt32[5]=e}get handleType(){return this.memoryViewInt32[6]}set handleType(e){this.memoryViewInt32[6]=e}}VkPhysicalDeviceExternalBufferInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceExternalBufferInfo.prototype.reflect=function(e){},VkPhysicalDeviceExternalBufferInfo.byteLength=32,VkPhysicalDeviceExternalBufferInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},usage:{byteOffset:20,byteLength:4},handleType:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceExternalBufferInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000071002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.usage&&(this.usage=e.usage),void 0!==e.handleType&&(this.handleType=e.handleType))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceExternalBufferInfoKHR.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get usage(){return this.memoryViewInt32[5]}set usage(e){this.memoryViewInt32[5]=e}get handleType(){return this.memoryViewInt32[6]}set handleType(e){this.memoryViewInt32[6]=e}}VkPhysicalDeviceExternalBufferInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceExternalBufferInfoKHR.prototype.reflect=function(e){},VkPhysicalDeviceExternalBufferInfoKHR.byteLength=32,VkPhysicalDeviceExternalBufferInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},usage:{byteOffset:20,byteLength:4},handleType:{byteOffset:24,byteLength:4}};class VkExternalBufferProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._externalMemoryProperties=new VkExternalMemoryProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000071003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExternalBufferProperties.pNext' isn't allowed to be filled")}get externalMemoryProperties(){return this._externalMemoryProperties}}VkExternalBufferProperties.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExternalBufferProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkExternalBufferProperties.byteLength=32,VkExternalBufferProperties.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},externalMemoryProperties:{byteOffset:16,byteLength:12}};class VkExternalBufferPropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._externalMemoryProperties=new VkExternalMemoryProperties({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000071003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExternalBufferPropertiesKHR.pNext' isn't allowed to be filled")}get externalMemoryProperties(){return this._externalMemoryProperties}}VkExternalBufferPropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExternalBufferPropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkExternalBufferPropertiesKHR.byteLength=32,VkExternalBufferPropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},externalMemoryProperties:{byteOffset:16,byteLength:12}};class VkPhysicalDeviceIDProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint8=new Uint8Array(this.memoryBuffer).subarray(e.$memoryOffset/1,(e.$memoryOffset+64)/1),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint8=new Uint8Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._deviceUUID=[...Array(16)].fill(0),this._driverUUID=[...Array(16)].fill(0),this._deviceLUID=[...Array(8)].fill(0),this.sType=1000071004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceIDProperties.pNext' isn't allowed to be filled")}get deviceUUID(){return[this.memoryViewUint8[16],this.memoryViewUint8[17],this.memoryViewUint8[18],this.memoryViewUint8[19],this.memoryViewUint8[20],this.memoryViewUint8[21],this.memoryViewUint8[22],this.memoryViewUint8[23],this.memoryViewUint8[24],this.memoryViewUint8[25],this.memoryViewUint8[26],this.memoryViewUint8[27],this.memoryViewUint8[28],this.memoryViewUint8[29],this.memoryViewUint8[30],this.memoryViewUint8[31]]}get driverUUID(){return[this.memoryViewUint8[32],this.memoryViewUint8[33],this.memoryViewUint8[34],this.memoryViewUint8[35],this.memoryViewUint8[36],this.memoryViewUint8[37],this.memoryViewUint8[38],this.memoryViewUint8[39],this.memoryViewUint8[40],this.memoryViewUint8[41],this.memoryViewUint8[42],this.memoryViewUint8[43],this.memoryViewUint8[44],this.memoryViewUint8[45],this.memoryViewUint8[46],this.memoryViewUint8[47]]}get deviceLUID(){return[this.memoryViewUint8[48],this.memoryViewUint8[49],this.memoryViewUint8[50],this.memoryViewUint8[51],this.memoryViewUint8[52],this.memoryViewUint8[53],this.memoryViewUint8[54],this.memoryViewUint8[55]]}get deviceNodeMask(){return this.memoryViewUint32[14]}get deviceLUIDValid(){return 0!==this.memoryViewUint32[15]}}VkPhysicalDeviceIDProperties.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceIDProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(64)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,64),0)},VkPhysicalDeviceIDProperties.byteLength=64,VkPhysicalDeviceIDProperties.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},deviceUUID:{byteOffset:16,byteLength:16},driverUUID:{byteOffset:32,byteLength:16},deviceLUID:{byteOffset:48,byteLength:8},deviceNodeMask:{byteOffset:56,byteLength:4},deviceLUIDValid:{byteOffset:60,byteLength:4}};class VkPhysicalDeviceIDPropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint8=new Uint8Array(this.memoryBuffer).subarray(e.$memoryOffset/1,(e.$memoryOffset+64)/1),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint8=new Uint8Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._deviceUUID=[...Array(16)].fill(0),this._driverUUID=[...Array(16)].fill(0),this._deviceLUID=[...Array(8)].fill(0),this.sType=1000071004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceIDPropertiesKHR.pNext' isn't allowed to be filled")}get deviceUUID(){return[this.memoryViewUint8[16],this.memoryViewUint8[17],this.memoryViewUint8[18],this.memoryViewUint8[19],this.memoryViewUint8[20],this.memoryViewUint8[21],this.memoryViewUint8[22],this.memoryViewUint8[23],this.memoryViewUint8[24],this.memoryViewUint8[25],this.memoryViewUint8[26],this.memoryViewUint8[27],this.memoryViewUint8[28],this.memoryViewUint8[29],this.memoryViewUint8[30],this.memoryViewUint8[31]]}get driverUUID(){return[this.memoryViewUint8[32],this.memoryViewUint8[33],this.memoryViewUint8[34],this.memoryViewUint8[35],this.memoryViewUint8[36],this.memoryViewUint8[37],this.memoryViewUint8[38],this.memoryViewUint8[39],this.memoryViewUint8[40],this.memoryViewUint8[41],this.memoryViewUint8[42],this.memoryViewUint8[43],this.memoryViewUint8[44],this.memoryViewUint8[45],this.memoryViewUint8[46],this.memoryViewUint8[47]]}get deviceLUID(){return[this.memoryViewUint8[48],this.memoryViewUint8[49],this.memoryViewUint8[50],this.memoryViewUint8[51],this.memoryViewUint8[52],this.memoryViewUint8[53],this.memoryViewUint8[54],this.memoryViewUint8[55]]}get deviceNodeMask(){return this.memoryViewUint32[14]}get deviceLUIDValid(){return 0!==this.memoryViewUint32[15]}}VkPhysicalDeviceIDPropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceIDPropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(64)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,64),0)},VkPhysicalDeviceIDPropertiesKHR.byteLength=64,VkPhysicalDeviceIDPropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},deviceUUID:{byteOffset:16,byteLength:16},driverUUID:{byteOffset:32,byteLength:16},deviceLUID:{byteOffset:48,byteLength:8},deviceNodeMask:{byteOffset:56,byteLength:4},deviceLUIDValid:{byteOffset:60,byteLength:4}};class VkExternalMemoryImageCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000072001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleTypes&&(this.handleTypes=e.handleTypes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExternalMemoryImageCreateInfo.pNext' isn't allowed to be filled")}get handleTypes(){return this.memoryViewInt32[4]}set handleTypes(e){this.memoryViewInt32[4]=e}}VkExternalMemoryImageCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExternalMemoryImageCreateInfo.prototype.reflect=function(e){},VkExternalMemoryImageCreateInfo.byteLength=24,VkExternalMemoryImageCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleTypes:{byteOffset:16,byteLength:4}};class VkExternalMemoryImageCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000072001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleTypes&&(this.handleTypes=e.handleTypes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExternalMemoryImageCreateInfoKHR.pNext' isn't allowed to be filled")}get handleTypes(){return this.memoryViewInt32[4]}set handleTypes(e){this.memoryViewInt32[4]=e}}VkExternalMemoryImageCreateInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExternalMemoryImageCreateInfoKHR.prototype.reflect=function(e){},VkExternalMemoryImageCreateInfoKHR.byteLength=24,VkExternalMemoryImageCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleTypes:{byteOffset:16,byteLength:4}};class VkExternalMemoryBufferCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000072e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleTypes&&(this.handleTypes=e.handleTypes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExternalMemoryBufferCreateInfo.pNext' isn't allowed to be filled")}get handleTypes(){return this.memoryViewInt32[4]}set handleTypes(e){this.memoryViewInt32[4]=e}}VkExternalMemoryBufferCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExternalMemoryBufferCreateInfo.prototype.reflect=function(e){},VkExternalMemoryBufferCreateInfo.byteLength=24,VkExternalMemoryBufferCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleTypes:{byteOffset:16,byteLength:4}};class VkExternalMemoryBufferCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000072e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleTypes&&(this.handleTypes=e.handleTypes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExternalMemoryBufferCreateInfoKHR.pNext' isn't allowed to be filled")}get handleTypes(){return this.memoryViewInt32[4]}set handleTypes(e){this.memoryViewInt32[4]=e}}VkExternalMemoryBufferCreateInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExternalMemoryBufferCreateInfoKHR.prototype.reflect=function(e){},VkExternalMemoryBufferCreateInfoKHR.byteLength=24,VkExternalMemoryBufferCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleTypes:{byteOffset:16,byteLength:4}};class VkExportMemoryAllocateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000072002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleTypes&&(this.handleTypes=e.handleTypes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExportMemoryAllocateInfo.pNext' isn't allowed to be filled")}get handleTypes(){return this.memoryViewInt32[4]}set handleTypes(e){this.memoryViewInt32[4]=e}}VkExportMemoryAllocateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExportMemoryAllocateInfo.prototype.reflect=function(e){},VkExportMemoryAllocateInfo.byteLength=24,VkExportMemoryAllocateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleTypes:{byteOffset:16,byteLength:4}};class VkExportMemoryAllocateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000072002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleTypes&&(this.handleTypes=e.handleTypes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExportMemoryAllocateInfoKHR.pNext' isn't allowed to be filled")}get handleTypes(){return this.memoryViewInt32[4]}set handleTypes(e){this.memoryViewInt32[4]=e}}VkExportMemoryAllocateInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExportMemoryAllocateInfoKHR.prototype.reflect=function(e){},VkExportMemoryAllocateInfoKHR.byteLength=24,VkExportMemoryAllocateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleTypes:{byteOffset:16,byteLength:4}};class VkImportMemoryFdInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000074e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleType&&(this.handleType=e.handleType),void 0!==e.fd&&(this.fd=e.fd))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImportMemoryFdInfoKHR.pNext' isn't allowed to be filled")}get handleType(){return this.memoryViewInt32[4]}set handleType(e){this.memoryViewInt32[4]=e}get fd(){return this.memoryViewInt32[5]}set fd(e){this.memoryViewInt32[5]=e}}VkImportMemoryFdInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImportMemoryFdInfoKHR.prototype.reflect=function(e){},VkImportMemoryFdInfoKHR.byteLength=24,VkImportMemoryFdInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleType:{byteOffset:16,byteLength:4},fd:{byteOffset:20,byteLength:4}};class VkMemoryFdPropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000074001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMemoryFdPropertiesKHR.pNext' isn't allowed to be filled")}get memoryTypeBits(){return this.memoryViewUint32[4]}}VkMemoryFdPropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryFdPropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkMemoryFdPropertiesKHR.byteLength=24,VkMemoryFdPropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},memoryTypeBits:{byteOffset:16,byteLength:4}};class VkMemoryGetFdInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._memory=null,this.sType=1000074002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.memory&&(this.memory=e.memory),void 0!==e.handleType&&(this.handleType=e.handleType))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMemoryGetFdInfoKHR.pNext' isn't allowed to be filled")}get memory(){return this._memory}set memory(e){null!==e?(this._memory=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._memory=null,this.memoryViewBigInt64[2]=BI0)}get handleType(){return this.memoryViewInt32[6]}set handleType(e){this.memoryViewInt32[6]=e}}VkMemoryGetFdInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryGetFdInfoKHR.prototype.reflect=function(e){},VkMemoryGetFdInfoKHR.byteLength=32,VkMemoryGetFdInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},memory:{byteOffset:16,byteLength:8},handleType:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceExternalSemaphoreInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000076e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleType&&(this.handleType=e.handleType))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceExternalSemaphoreInfo.pNext' isn't allowed to be filled")}get handleType(){return this.memoryViewInt32[4]}set handleType(e){this.memoryViewInt32[4]=e}}VkPhysicalDeviceExternalSemaphoreInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceExternalSemaphoreInfo.prototype.reflect=function(e){},VkPhysicalDeviceExternalSemaphoreInfo.byteLength=24,VkPhysicalDeviceExternalSemaphoreInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleType:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceExternalSemaphoreInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000076e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleType&&(this.handleType=e.handleType))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceExternalSemaphoreInfoKHR.pNext' isn't allowed to be filled")}get handleType(){return this.memoryViewInt32[4]}set handleType(e){this.memoryViewInt32[4]=e}}VkPhysicalDeviceExternalSemaphoreInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceExternalSemaphoreInfoKHR.prototype.reflect=function(e){},VkPhysicalDeviceExternalSemaphoreInfoKHR.byteLength=24,VkPhysicalDeviceExternalSemaphoreInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleType:{byteOffset:16,byteLength:4}};class VkExternalSemaphoreProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000076001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExternalSemaphoreProperties.pNext' isn't allowed to be filled")}get exportFromImportedHandleTypes(){return this.memoryViewInt32[4]}get compatibleHandleTypes(){return this.memoryViewInt32[5]}get externalSemaphoreFeatures(){return this.memoryViewInt32[6]}}VkExternalSemaphoreProperties.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExternalSemaphoreProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkExternalSemaphoreProperties.byteLength=32,VkExternalSemaphoreProperties.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},exportFromImportedHandleTypes:{byteOffset:16,byteLength:4},compatibleHandleTypes:{byteOffset:20,byteLength:4},externalSemaphoreFeatures:{byteOffset:24,byteLength:4}};class VkExternalSemaphorePropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000076001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExternalSemaphorePropertiesKHR.pNext' isn't allowed to be filled")}get exportFromImportedHandleTypes(){return this.memoryViewInt32[4]}get compatibleHandleTypes(){return this.memoryViewInt32[5]}get externalSemaphoreFeatures(){return this.memoryViewInt32[6]}}VkExternalSemaphorePropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExternalSemaphorePropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkExternalSemaphorePropertiesKHR.byteLength=32,VkExternalSemaphorePropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},exportFromImportedHandleTypes:{byteOffset:16,byteLength:4},compatibleHandleTypes:{byteOffset:20,byteLength:4},externalSemaphoreFeatures:{byteOffset:24,byteLength:4}};class VkExportSemaphoreCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000077e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleTypes&&(this.handleTypes=e.handleTypes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExportSemaphoreCreateInfo.pNext' isn't allowed to be filled")}get handleTypes(){return this.memoryViewInt32[4]}set handleTypes(e){this.memoryViewInt32[4]=e}}VkExportSemaphoreCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExportSemaphoreCreateInfo.prototype.reflect=function(e){},VkExportSemaphoreCreateInfo.byteLength=24,VkExportSemaphoreCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleTypes:{byteOffset:16,byteLength:4}};class VkExportSemaphoreCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000077e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleTypes&&(this.handleTypes=e.handleTypes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExportSemaphoreCreateInfoKHR.pNext' isn't allowed to be filled")}get handleTypes(){return this.memoryViewInt32[4]}set handleTypes(e){this.memoryViewInt32[4]=e}}VkExportSemaphoreCreateInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExportSemaphoreCreateInfoKHR.prototype.reflect=function(e){},VkExportSemaphoreCreateInfoKHR.byteLength=24,VkExportSemaphoreCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleTypes:{byteOffset:16,byteLength:4}};class VkImportSemaphoreFdInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._semaphore=null,this.sType=1000079e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.semaphore&&(this.semaphore=e.semaphore),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.handleType&&(this.handleType=e.handleType),void 0!==e.fd&&(this.fd=e.fd))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImportSemaphoreFdInfoKHR.pNext' isn't allowed to be filled")}get semaphore(){return this._semaphore}set semaphore(e){null!==e?(this._semaphore=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._semaphore=null,this.memoryViewBigInt64[2]=BI0)}get flags(){return this.memoryViewInt32[6]}set flags(e){this.memoryViewInt32[6]=e}get handleType(){return this.memoryViewInt32[7]}set handleType(e){this.memoryViewInt32[7]=e}get fd(){return this.memoryViewInt32[8]}set fd(e){this.memoryViewInt32[8]=e}}VkImportSemaphoreFdInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImportSemaphoreFdInfoKHR.prototype.reflect=function(e){},VkImportSemaphoreFdInfoKHR.byteLength=40,VkImportSemaphoreFdInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},semaphore:{byteOffset:16,byteLength:8},flags:{byteOffset:24,byteLength:4},handleType:{byteOffset:28,byteLength:4},fd:{byteOffset:32,byteLength:4}};class VkSemaphoreGetFdInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._semaphore=null,this.sType=1000079001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.semaphore&&(this.semaphore=e.semaphore),void 0!==e.handleType&&(this.handleType=e.handleType))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSemaphoreGetFdInfoKHR.pNext' isn't allowed to be filled")}get semaphore(){return this._semaphore}set semaphore(e){null!==e?(this._semaphore=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._semaphore=null,this.memoryViewBigInt64[2]=BI0)}get handleType(){return this.memoryViewInt32[6]}set handleType(e){this.memoryViewInt32[6]=e}}VkSemaphoreGetFdInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSemaphoreGetFdInfoKHR.prototype.reflect=function(e){},VkSemaphoreGetFdInfoKHR.byteLength=32,VkSemaphoreGetFdInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},semaphore:{byteOffset:16,byteLength:8},handleType:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceExternalFenceInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000112e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleType&&(this.handleType=e.handleType))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceExternalFenceInfo.pNext' isn't allowed to be filled")}get handleType(){return this.memoryViewInt32[4]}set handleType(e){this.memoryViewInt32[4]=e}}VkPhysicalDeviceExternalFenceInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceExternalFenceInfo.prototype.reflect=function(e){},VkPhysicalDeviceExternalFenceInfo.byteLength=24,VkPhysicalDeviceExternalFenceInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleType:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceExternalFenceInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000112e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleType&&(this.handleType=e.handleType))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceExternalFenceInfoKHR.pNext' isn't allowed to be filled")}get handleType(){return this.memoryViewInt32[4]}set handleType(e){this.memoryViewInt32[4]=e}}VkPhysicalDeviceExternalFenceInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceExternalFenceInfoKHR.prototype.reflect=function(e){},VkPhysicalDeviceExternalFenceInfoKHR.byteLength=24,VkPhysicalDeviceExternalFenceInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleType:{byteOffset:16,byteLength:4}};class VkExternalFenceProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000112001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExternalFenceProperties.pNext' isn't allowed to be filled")}get exportFromImportedHandleTypes(){return this.memoryViewInt32[4]}get compatibleHandleTypes(){return this.memoryViewInt32[5]}get externalFenceFeatures(){return this.memoryViewInt32[6]}}VkExternalFenceProperties.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExternalFenceProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkExternalFenceProperties.byteLength=32,VkExternalFenceProperties.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},exportFromImportedHandleTypes:{byteOffset:16,byteLength:4},compatibleHandleTypes:{byteOffset:20,byteLength:4},externalFenceFeatures:{byteOffset:24,byteLength:4}};class VkExternalFencePropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000112001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExternalFencePropertiesKHR.pNext' isn't allowed to be filled")}get exportFromImportedHandleTypes(){return this.memoryViewInt32[4]}get compatibleHandleTypes(){return this.memoryViewInt32[5]}get externalFenceFeatures(){return this.memoryViewInt32[6]}}VkExternalFencePropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExternalFencePropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkExternalFencePropertiesKHR.byteLength=32,VkExternalFencePropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},exportFromImportedHandleTypes:{byteOffset:16,byteLength:4},compatibleHandleTypes:{byteOffset:20,byteLength:4},externalFenceFeatures:{byteOffset:24,byteLength:4}};class VkExportFenceCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000113e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleTypes&&(this.handleTypes=e.handleTypes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExportFenceCreateInfo.pNext' isn't allowed to be filled")}get handleTypes(){return this.memoryViewInt32[4]}set handleTypes(e){this.memoryViewInt32[4]=e}}VkExportFenceCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExportFenceCreateInfo.prototype.reflect=function(e){},VkExportFenceCreateInfo.byteLength=24,VkExportFenceCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleTypes:{byteOffset:16,byteLength:4}};class VkExportFenceCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000113e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleTypes&&(this.handleTypes=e.handleTypes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkExportFenceCreateInfoKHR.pNext' isn't allowed to be filled")}get handleTypes(){return this.memoryViewInt32[4]}set handleTypes(e){this.memoryViewInt32[4]=e}}VkExportFenceCreateInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkExportFenceCreateInfoKHR.prototype.reflect=function(e){},VkExportFenceCreateInfoKHR.byteLength=24,VkExportFenceCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleTypes:{byteOffset:16,byteLength:4}};class VkImportFenceFdInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._fence=null,this.sType=1000115e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.fence&&(this.fence=e.fence),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.handleType&&(this.handleType=e.handleType),void 0!==e.fd&&(this.fd=e.fd))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImportFenceFdInfoKHR.pNext' isn't allowed to be filled")}get fence(){return this._fence}set fence(e){null!==e?(this._fence=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._fence=null,this.memoryViewBigInt64[2]=BI0)}get flags(){return this.memoryViewInt32[6]}set flags(e){this.memoryViewInt32[6]=e}get handleType(){return this.memoryViewInt32[7]}set handleType(e){this.memoryViewInt32[7]=e}get fd(){return this.memoryViewInt32[8]}set fd(e){this.memoryViewInt32[8]=e}}VkImportFenceFdInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImportFenceFdInfoKHR.prototype.reflect=function(e){},VkImportFenceFdInfoKHR.byteLength=40,VkImportFenceFdInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},fence:{byteOffset:16,byteLength:8},flags:{byteOffset:24,byteLength:4},handleType:{byteOffset:28,byteLength:4},fd:{byteOffset:32,byteLength:4}};class VkFenceGetFdInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._fence=null,this.sType=1000115001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.fence&&(this.fence=e.fence),void 0!==e.handleType&&(this.handleType=e.handleType))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkFenceGetFdInfoKHR.pNext' isn't allowed to be filled")}get fence(){return this._fence}set fence(e){null!==e?(this._fence=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._fence=null,this.memoryViewBigInt64[2]=BI0)}get handleType(){return this.memoryViewInt32[6]}set handleType(e){this.memoryViewInt32[6]=e}}VkFenceGetFdInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkFenceGetFdInfoKHR.prototype.reflect=function(e){},VkFenceGetFdInfoKHR.byteLength=32,VkFenceGetFdInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},fence:{byteOffset:16,byteLength:8},handleType:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceMultiviewFeatures{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000053001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.multiview&&(this.multiview=e.multiview),void 0!==e.multiviewGeometryShader&&(this.multiviewGeometryShader=e.multiviewGeometryShader),void 0!==e.multiviewTessellationShader&&(this.multiviewTessellationShader=e.multiviewTessellationShader))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceMultiviewFeatures.pNext' isn't allowed to be filled")}get multiview(){return 0!==this.memoryViewUint32[4]}set multiview(e){this.memoryViewUint32[4]=0|e}get multiviewGeometryShader(){return 0!==this.memoryViewUint32[5]}set multiviewGeometryShader(e){this.memoryViewUint32[5]=0|e}get multiviewTessellationShader(){return 0!==this.memoryViewUint32[6]}set multiviewTessellationShader(e){this.memoryViewUint32[6]=0|e}}VkPhysicalDeviceMultiviewFeatures.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceMultiviewFeatures.prototype.reflect=function(e){},VkPhysicalDeviceMultiviewFeatures.byteLength=32,VkPhysicalDeviceMultiviewFeatures.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},multiview:{byteOffset:16,byteLength:4},multiviewGeometryShader:{byteOffset:20,byteLength:4},multiviewTessellationShader:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceMultiviewFeaturesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000053001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.multiview&&(this.multiview=e.multiview),void 0!==e.multiviewGeometryShader&&(this.multiviewGeometryShader=e.multiviewGeometryShader),void 0!==e.multiviewTessellationShader&&(this.multiviewTessellationShader=e.multiviewTessellationShader))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceMultiviewFeaturesKHR.pNext' isn't allowed to be filled")}get multiview(){return 0!==this.memoryViewUint32[4]}set multiview(e){this.memoryViewUint32[4]=0|e}get multiviewGeometryShader(){return 0!==this.memoryViewUint32[5]}set multiviewGeometryShader(e){this.memoryViewUint32[5]=0|e}get multiviewTessellationShader(){return 0!==this.memoryViewUint32[6]}set multiviewTessellationShader(e){this.memoryViewUint32[6]=0|e}}VkPhysicalDeviceMultiviewFeaturesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceMultiviewFeaturesKHR.prototype.reflect=function(e){},VkPhysicalDeviceMultiviewFeaturesKHR.byteLength=32,VkPhysicalDeviceMultiviewFeaturesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},multiview:{byteOffset:16,byteLength:4},multiviewGeometryShader:{byteOffset:20,byteLength:4},multiviewTessellationShader:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceMultiviewProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000053002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceMultiviewProperties.pNext' isn't allowed to be filled")}get maxMultiviewViewCount(){return this.memoryViewUint32[4]}get maxMultiviewInstanceIndex(){return this.memoryViewUint32[5]}}VkPhysicalDeviceMultiviewProperties.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceMultiviewProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkPhysicalDeviceMultiviewProperties.byteLength=24,VkPhysicalDeviceMultiviewProperties.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxMultiviewViewCount:{byteOffset:16,byteLength:4},maxMultiviewInstanceIndex:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceMultiviewPropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000053002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceMultiviewPropertiesKHR.pNext' isn't allowed to be filled")}get maxMultiviewViewCount(){return this.memoryViewUint32[4]}get maxMultiviewInstanceIndex(){return this.memoryViewUint32[5]}}VkPhysicalDeviceMultiviewPropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceMultiviewPropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkPhysicalDeviceMultiviewPropertiesKHR.byteLength=24,VkPhysicalDeviceMultiviewPropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxMultiviewViewCount:{byteOffset:16,byteLength:4},maxMultiviewInstanceIndex:{byteOffset:20,byteLength:4}};class VkRenderPassMultiviewCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pViewMasks=null,this._pViewOffsets=null,this._pCorrelationMasks=null,this.sType=1000053e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.subpassCount&&(this.subpassCount=e.subpassCount),void 0!==e.pViewMasks&&(this.pViewMasks=e.pViewMasks),void 0!==e.dependencyCount&&(this.dependencyCount=e.dependencyCount),void 0!==e.pViewOffsets&&(this.pViewOffsets=e.pViewOffsets),void 0!==e.correlationMaskCount&&(this.correlationMaskCount=e.correlationMaskCount),void 0!==e.pCorrelationMasks&&(this.pCorrelationMasks=e.pCorrelationMasks))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkRenderPassMultiviewCreateInfo.pNext' isn't allowed to be filled")}get subpassCount(){return this.memoryViewUint32[4]}set subpassCount(e){this.memoryViewUint32[4]=e}get pViewMasks(){return this._pViewMasks}set pViewMasks(e){null!==e?(this._pViewMasks=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pViewMasks=null,this.memoryViewBigInt64[3]=BI0)}get dependencyCount(){return this.memoryViewUint32[8]}set dependencyCount(e){this.memoryViewUint32[8]=e}get pViewOffsets(){return this._pViewOffsets}set pViewOffsets(e){null!==e?(this._pViewOffsets=e,this.memoryViewBigInt64[5]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pViewOffsets=null,this.memoryViewBigInt64[5]=BI0)}get correlationMaskCount(){return this.memoryViewUint32[12]}set correlationMaskCount(e){this.memoryViewUint32[12]=e}get pCorrelationMasks(){return this._pCorrelationMasks}set pCorrelationMasks(e){null!==e?(this._pCorrelationMasks=e,this.memoryViewBigInt64[7]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pCorrelationMasks=null,this.memoryViewBigInt64[7]=BI0)}}VkRenderPassMultiviewCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkRenderPassMultiviewCreateInfo.prototype.reflect=function(e){},VkRenderPassMultiviewCreateInfo.byteLength=64,VkRenderPassMultiviewCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},subpassCount:{byteOffset:16,byteLength:4},pViewMasks:{byteOffset:24,byteLength:8},dependencyCount:{byteOffset:32,byteLength:4},pViewOffsets:{byteOffset:40,byteLength:8},correlationMaskCount:{byteOffset:48,byteLength:4},pCorrelationMasks:{byteOffset:56,byteLength:8}};class VkRenderPassMultiviewCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pViewMasks=null,this._pViewOffsets=null,this._pCorrelationMasks=null,this.sType=1000053e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.subpassCount&&(this.subpassCount=e.subpassCount),void 0!==e.pViewMasks&&(this.pViewMasks=e.pViewMasks),void 0!==e.dependencyCount&&(this.dependencyCount=e.dependencyCount),void 0!==e.pViewOffsets&&(this.pViewOffsets=e.pViewOffsets),void 0!==e.correlationMaskCount&&(this.correlationMaskCount=e.correlationMaskCount),void 0!==e.pCorrelationMasks&&(this.pCorrelationMasks=e.pCorrelationMasks))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkRenderPassMultiviewCreateInfoKHR.pNext' isn't allowed to be filled")}get subpassCount(){return this.memoryViewUint32[4]}set subpassCount(e){this.memoryViewUint32[4]=e}get pViewMasks(){return this._pViewMasks}set pViewMasks(e){null!==e?(this._pViewMasks=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pViewMasks=null,this.memoryViewBigInt64[3]=BI0)}get dependencyCount(){return this.memoryViewUint32[8]}set dependencyCount(e){this.memoryViewUint32[8]=e}get pViewOffsets(){return this._pViewOffsets}set pViewOffsets(e){null!==e?(this._pViewOffsets=e,this.memoryViewBigInt64[5]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pViewOffsets=null,this.memoryViewBigInt64[5]=BI0)}get correlationMaskCount(){return this.memoryViewUint32[12]}set correlationMaskCount(e){this.memoryViewUint32[12]=e}get pCorrelationMasks(){return this._pCorrelationMasks}set pCorrelationMasks(e){null!==e?(this._pCorrelationMasks=e,this.memoryViewBigInt64[7]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pCorrelationMasks=null,this.memoryViewBigInt64[7]=BI0)}}VkRenderPassMultiviewCreateInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkRenderPassMultiviewCreateInfoKHR.prototype.reflect=function(e){},VkRenderPassMultiviewCreateInfoKHR.byteLength=64,VkRenderPassMultiviewCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},subpassCount:{byteOffset:16,byteLength:4},pViewMasks:{byteOffset:24,byteLength:8},dependencyCount:{byteOffset:32,byteLength:4},pViewOffsets:{byteOffset:40,byteLength:8},correlationMaskCount:{byteOffset:48,byteLength:4},pCorrelationMasks:{byteOffset:56,byteLength:8}};class VkSurfaceCapabilities2EXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+72)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4)):(this.memoryBuffer=new ArrayBuffer(72),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._currentExtent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+24}),this._minImageExtent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+32}),this._maxImageExtent=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+40}),this.sType=100009e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSurfaceCapabilities2EXT.pNext' isn't allowed to be filled")}get minImageCount(){return this.memoryViewUint32[4]}get maxImageCount(){return this.memoryViewUint32[5]}get currentExtent(){return this._currentExtent}get minImageExtent(){return this._minImageExtent}get maxImageExtent(){return this._maxImageExtent}get maxImageArrayLayers(){return this.memoryViewUint32[12]}get supportedTransforms(){return this.memoryViewInt32[13]}get currentTransform(){return this.memoryViewInt32[14]}get supportedCompositeAlpha(){return this.memoryViewInt32[15]}get supportedUsageFlags(){return this.memoryViewInt32[16]}get supportedSurfaceCounters(){return this.memoryViewInt32[17]}}VkSurfaceCapabilities2EXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSurfaceCapabilities2EXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(72)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,72),0)},VkSurfaceCapabilities2EXT.byteLength=72,VkSurfaceCapabilities2EXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},minImageCount:{byteOffset:16,byteLength:4},maxImageCount:{byteOffset:20,byteLength:4},currentExtent:{byteOffset:24,byteLength:8},minImageExtent:{byteOffset:32,byteLength:8},maxImageExtent:{byteOffset:40,byteLength:8},maxImageArrayLayers:{byteOffset:48,byteLength:4},supportedTransforms:{byteOffset:52,byteLength:4},currentTransform:{byteOffset:56,byteLength:4},supportedCompositeAlpha:{byteOffset:60,byteLength:4},supportedUsageFlags:{byteOffset:64,byteLength:4},supportedSurfaceCounters:{byteOffset:68,byteLength:4}};class VkDisplayPowerInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000091e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.powerState&&(this.powerState=e.powerState))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDisplayPowerInfoEXT.pNext' isn't allowed to be filled")}get powerState(){return this.memoryViewInt32[4]}set powerState(e){this.memoryViewInt32[4]=e}}VkDisplayPowerInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDisplayPowerInfoEXT.prototype.reflect=function(e){},VkDisplayPowerInfoEXT.byteLength=24,VkDisplayPowerInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},powerState:{byteOffset:16,byteLength:4}};class VkDeviceEventInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000091001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.deviceEvent&&(this.deviceEvent=e.deviceEvent))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceEventInfoEXT.pNext' isn't allowed to be filled")}get deviceEvent(){return this.memoryViewInt32[4]}set deviceEvent(e){this.memoryViewInt32[4]=e}}VkDeviceEventInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceEventInfoEXT.prototype.reflect=function(e){},VkDeviceEventInfoEXT.byteLength=24,VkDeviceEventInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},deviceEvent:{byteOffset:16,byteLength:4}};class VkDisplayEventInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000091002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.displayEvent&&(this.displayEvent=e.displayEvent))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDisplayEventInfoEXT.pNext' isn't allowed to be filled")}get displayEvent(){return this.memoryViewInt32[4]}set displayEvent(e){this.memoryViewInt32[4]=e}}VkDisplayEventInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDisplayEventInfoEXT.prototype.reflect=function(e){},VkDisplayEventInfoEXT.byteLength=24,VkDisplayEventInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},displayEvent:{byteOffset:16,byteLength:4}};class VkSwapchainCounterCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000091003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.surfaceCounters&&(this.surfaceCounters=e.surfaceCounters))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSwapchainCounterCreateInfoEXT.pNext' isn't allowed to be filled")}get surfaceCounters(){return this.memoryViewInt32[4]}set surfaceCounters(e){this.memoryViewInt32[4]=e}}VkSwapchainCounterCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSwapchainCounterCreateInfoEXT.prototype.reflect=function(e){},VkSwapchainCounterCreateInfoEXT.byteLength=24,VkSwapchainCounterCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},surfaceCounters:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceGroupProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+288)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+288)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+288)/4)):(this.memoryBuffer=new ArrayBuffer(288),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._physicalDevices=null,this.sType=100007e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceGroupProperties.pNext' isn't allowed to be filled")}get physicalDeviceCount(){return this.memoryViewUint32[4]}get physicalDevices(){return this._physicalDevices}get subsetAllocation(){return 0!==this.memoryViewUint32[70]}}VkPhysicalDeviceGroupProperties.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceGroupProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(288)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,288),0)},VkPhysicalDeviceGroupProperties.byteLength=288,VkPhysicalDeviceGroupProperties.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},physicalDeviceCount:{byteOffset:16,byteLength:4},physicalDevices:{byteOffset:24,byteLength:256},subsetAllocation:{byteOffset:280,byteLength:4}};class VkPhysicalDeviceGroupPropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+288)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+288)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+288)/4)):(this.memoryBuffer=new ArrayBuffer(288),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._physicalDevices=null,this.sType=100007e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceGroupPropertiesKHR.pNext' isn't allowed to be filled")}get physicalDeviceCount(){return this.memoryViewUint32[4]}get physicalDevices(){return this._physicalDevices}get subsetAllocation(){return 0!==this.memoryViewUint32[70]}}VkPhysicalDeviceGroupPropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceGroupPropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(288)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,288),0)},VkPhysicalDeviceGroupPropertiesKHR.byteLength=288,VkPhysicalDeviceGroupPropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},physicalDeviceCount:{byteOffset:16,byteLength:4},physicalDevices:{byteOffset:24,byteLength:256},subsetAllocation:{byteOffset:280,byteLength:4}};class VkMemoryAllocateFlagsInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=100006e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.deviceMask&&(this.deviceMask=e.deviceMask))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMemoryAllocateFlagsInfo.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get deviceMask(){return this.memoryViewUint32[5]}set deviceMask(e){this.memoryViewUint32[5]=e}}VkMemoryAllocateFlagsInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryAllocateFlagsInfo.prototype.reflect=function(e){},VkMemoryAllocateFlagsInfo.byteLength=24,VkMemoryAllocateFlagsInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},deviceMask:{byteOffset:20,byteLength:4}};class VkMemoryAllocateFlagsInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=100006e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.deviceMask&&(this.deviceMask=e.deviceMask))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMemoryAllocateFlagsInfoKHR.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get deviceMask(){return this.memoryViewUint32[5]}set deviceMask(e){this.memoryViewUint32[5]=e}}VkMemoryAllocateFlagsInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryAllocateFlagsInfoKHR.prototype.reflect=function(e){},VkMemoryAllocateFlagsInfoKHR.byteLength=24,VkMemoryAllocateFlagsInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},deviceMask:{byteOffset:20,byteLength:4}};class VkBindBufferMemoryInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._buffer=null,this._memory=null,this.sType=1000157e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.buffer&&(this.buffer=e.buffer),void 0!==e.memory&&(this.memory=e.memory),void 0!==e.memoryOffset&&(this.memoryOffset=e.memoryOffset))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000060013:break;default:throw new TypeError("Invalid type for 'VkBindBufferMemoryInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[2]=BI0)}get memory(){return this._memory}set memory(e){null!==e?(this._memory=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._memory=null,this.memoryViewBigInt64[3]=BI0)}get memoryOffset(){return this.memoryViewBigUint64[4]}set memoryOffset(e){this.memoryViewBigUint64[4]=BigInt(e)}}VkBindBufferMemoryInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBindBufferMemoryInfo.prototype.reflect=function(e){},VkBindBufferMemoryInfo.byteLength=40,VkBindBufferMemoryInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},buffer:{byteOffset:16,byteLength:8},memory:{byteOffset:24,byteLength:8},memoryOffset:{byteOffset:32,byteLength:8}};class VkBindBufferMemoryInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._buffer=null,this._memory=null,this.sType=1000157e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.buffer&&(this.buffer=e.buffer),void 0!==e.memory&&(this.memory=e.memory),void 0!==e.memoryOffset&&(this.memoryOffset=e.memoryOffset))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000060013:break;default:throw new TypeError("Invalid type for 'VkBindBufferMemoryInfoKHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[2]=BI0)}get memory(){return this._memory}set memory(e){null!==e?(this._memory=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._memory=null,this.memoryViewBigInt64[3]=BI0)}get memoryOffset(){return this.memoryViewBigUint64[4]}set memoryOffset(e){this.memoryViewBigUint64[4]=BigInt(e)}}VkBindBufferMemoryInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBindBufferMemoryInfoKHR.prototype.reflect=function(e){},VkBindBufferMemoryInfoKHR.byteLength=40,VkBindBufferMemoryInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},buffer:{byteOffset:16,byteLength:8},memory:{byteOffset:24,byteLength:8},memoryOffset:{byteOffset:32,byteLength:8}};class VkBindBufferMemoryDeviceGroupInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDeviceIndices=null,this.sType=1000060013,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.deviceIndexCount&&(this.deviceIndexCount=e.deviceIndexCount),void 0!==e.pDeviceIndices&&(this.pDeviceIndices=e.pDeviceIndices))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBindBufferMemoryDeviceGroupInfo.pNext' isn't allowed to be filled")}get deviceIndexCount(){return this.memoryViewUint32[4]}set deviceIndexCount(e){this.memoryViewUint32[4]=e}get pDeviceIndices(){return this._pDeviceIndices}set pDeviceIndices(e){null!==e?(this._pDeviceIndices=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pDeviceIndices=null,this.memoryViewBigInt64[3]=BI0)}}VkBindBufferMemoryDeviceGroupInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBindBufferMemoryDeviceGroupInfo.prototype.reflect=function(e){},VkBindBufferMemoryDeviceGroupInfo.byteLength=32,VkBindBufferMemoryDeviceGroupInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},deviceIndexCount:{byteOffset:16,byteLength:4},pDeviceIndices:{byteOffset:24,byteLength:8}};class VkBindBufferMemoryDeviceGroupInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDeviceIndices=null,this.sType=1000060013,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.deviceIndexCount&&(this.deviceIndexCount=e.deviceIndexCount),void 0!==e.pDeviceIndices&&(this.pDeviceIndices=e.pDeviceIndices))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBindBufferMemoryDeviceGroupInfoKHR.pNext' isn't allowed to be filled")}get deviceIndexCount(){return this.memoryViewUint32[4]}set deviceIndexCount(e){this.memoryViewUint32[4]=e}get pDeviceIndices(){return this._pDeviceIndices}set pDeviceIndices(e){null!==e?(this._pDeviceIndices=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pDeviceIndices=null,this.memoryViewBigInt64[3]=BI0)}}VkBindBufferMemoryDeviceGroupInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBindBufferMemoryDeviceGroupInfoKHR.prototype.reflect=function(e){},VkBindBufferMemoryDeviceGroupInfoKHR.byteLength=32,VkBindBufferMemoryDeviceGroupInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},deviceIndexCount:{byteOffset:16,byteLength:4},pDeviceIndices:{byteOffset:24,byteLength:8}};class VkBindImageMemoryInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._image=null,this._memory=null,this.sType=1000157001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.image&&(this.image=e.image),void 0!==e.memory&&(this.memory=e.memory),void 0!==e.memoryOffset&&(this.memoryOffset=e.memoryOffset))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000060014:case 1000060009:case 1000156002:break;default:throw new TypeError("Invalid type for 'VkBindImageMemoryInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get image(){return this._image}set image(e){null!==e?(this._image=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._image=null,this.memoryViewBigInt64[2]=BI0)}get memory(){return this._memory}set memory(e){null!==e?(this._memory=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._memory=null,this.memoryViewBigInt64[3]=BI0)}get memoryOffset(){return this.memoryViewBigUint64[4]}set memoryOffset(e){this.memoryViewBigUint64[4]=BigInt(e)}}VkBindImageMemoryInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBindImageMemoryInfo.prototype.reflect=function(e){},VkBindImageMemoryInfo.byteLength=40,VkBindImageMemoryInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},image:{byteOffset:16,byteLength:8},memory:{byteOffset:24,byteLength:8},memoryOffset:{byteOffset:32,byteLength:8}};class VkBindImageMemoryInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._image=null,this._memory=null,this.sType=1000157001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.image&&(this.image=e.image),void 0!==e.memory&&(this.memory=e.memory),void 0!==e.memoryOffset&&(this.memoryOffset=e.memoryOffset))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000060014:case 1000060009:case 1000156002:break;default:throw new TypeError("Invalid type for 'VkBindImageMemoryInfoKHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get image(){return this._image}set image(e){null!==e?(this._image=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._image=null,this.memoryViewBigInt64[2]=BI0)}get memory(){return this._memory}set memory(e){null!==e?(this._memory=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._memory=null,this.memoryViewBigInt64[3]=BI0)}get memoryOffset(){return this.memoryViewBigUint64[4]}set memoryOffset(e){this.memoryViewBigUint64[4]=BigInt(e)}}VkBindImageMemoryInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBindImageMemoryInfoKHR.prototype.reflect=function(e){},VkBindImageMemoryInfoKHR.byteLength=40,VkBindImageMemoryInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},image:{byteOffset:16,byteLength:8},memory:{byteOffset:24,byteLength:8},memoryOffset:{byteOffset:32,byteLength:8}};class VkBindImageMemoryDeviceGroupInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDeviceIndices=null,this._pSplitInstanceBindRegions=null,this._pSplitInstanceBindRegionsNative=null,this.sType=1000060014,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.deviceIndexCount&&(this.deviceIndexCount=e.deviceIndexCount),void 0!==e.pDeviceIndices&&(this.pDeviceIndices=e.pDeviceIndices),void 0!==e.splitInstanceBindRegionCount&&(this.splitInstanceBindRegionCount=e.splitInstanceBindRegionCount),void 0!==e.pSplitInstanceBindRegions&&(this.pSplitInstanceBindRegions=e.pSplitInstanceBindRegions))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBindImageMemoryDeviceGroupInfo.pNext' isn't allowed to be filled")}get deviceIndexCount(){return this.memoryViewUint32[4]}set deviceIndexCount(e){this.memoryViewUint32[4]=e}get pDeviceIndices(){return this._pDeviceIndices}set pDeviceIndices(e){null!==e?(this._pDeviceIndices=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pDeviceIndices=null,this.memoryViewBigInt64[3]=BI0)}get splitInstanceBindRegionCount(){return this.memoryViewUint32[8]}set splitInstanceBindRegionCount(e){this.memoryViewUint32[8]=e}get pSplitInstanceBindRegions(){return this._pSplitInstanceBindRegions}set pSplitInstanceBindRegions(e){null!==e?this._pSplitInstanceBindRegions=e:null===e&&(this._pSplitInstanceBindRegions=null)}}VkBindImageMemoryDeviceGroupInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pSplitInstanceBindRegions){let e=this._pSplitInstanceBindRegions;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pSplitInstanceBindRegionsNative=t,this.memoryViewBigInt64[5]=t.address}return!0},VkBindImageMemoryDeviceGroupInfo.prototype.reflect=function(e){},VkBindImageMemoryDeviceGroupInfo.byteLength=48,VkBindImageMemoryDeviceGroupInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},deviceIndexCount:{byteOffset:16,byteLength:4},pDeviceIndices:{byteOffset:24,byteLength:8},splitInstanceBindRegionCount:{byteOffset:32,byteLength:4},pSplitInstanceBindRegions:{byteOffset:40,byteLength:8}};class VkBindImageMemoryDeviceGroupInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDeviceIndices=null,this._pSplitInstanceBindRegions=null,this._pSplitInstanceBindRegionsNative=null,this.sType=1000060014,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.deviceIndexCount&&(this.deviceIndexCount=e.deviceIndexCount),void 0!==e.pDeviceIndices&&(this.pDeviceIndices=e.pDeviceIndices),void 0!==e.splitInstanceBindRegionCount&&(this.splitInstanceBindRegionCount=e.splitInstanceBindRegionCount),void 0!==e.pSplitInstanceBindRegions&&(this.pSplitInstanceBindRegions=e.pSplitInstanceBindRegions))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBindImageMemoryDeviceGroupInfoKHR.pNext' isn't allowed to be filled")}get deviceIndexCount(){return this.memoryViewUint32[4]}set deviceIndexCount(e){this.memoryViewUint32[4]=e}get pDeviceIndices(){return this._pDeviceIndices}set pDeviceIndices(e){null!==e?(this._pDeviceIndices=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pDeviceIndices=null,this.memoryViewBigInt64[3]=BI0)}get splitInstanceBindRegionCount(){return this.memoryViewUint32[8]}set splitInstanceBindRegionCount(e){this.memoryViewUint32[8]=e}get pSplitInstanceBindRegions(){return this._pSplitInstanceBindRegions}set pSplitInstanceBindRegions(e){null!==e?this._pSplitInstanceBindRegions=e:null===e&&(this._pSplitInstanceBindRegions=null)}}VkBindImageMemoryDeviceGroupInfoKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pSplitInstanceBindRegions){let e=this._pSplitInstanceBindRegions;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pSplitInstanceBindRegionsNative=t,this.memoryViewBigInt64[5]=t.address}return!0},VkBindImageMemoryDeviceGroupInfoKHR.prototype.reflect=function(e){},VkBindImageMemoryDeviceGroupInfoKHR.byteLength=48,VkBindImageMemoryDeviceGroupInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},deviceIndexCount:{byteOffset:16,byteLength:4},pDeviceIndices:{byteOffset:24,byteLength:8},splitInstanceBindRegionCount:{byteOffset:32,byteLength:4},pSplitInstanceBindRegions:{byteOffset:40,byteLength:8}};class VkDeviceGroupRenderPassBeginInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDeviceRenderAreas=null,this._pDeviceRenderAreasNative=null,this.sType=1000060003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.deviceMask&&(this.deviceMask=e.deviceMask),void 0!==e.deviceRenderAreaCount&&(this.deviceRenderAreaCount=e.deviceRenderAreaCount),void 0!==e.pDeviceRenderAreas&&(this.pDeviceRenderAreas=e.pDeviceRenderAreas))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGroupRenderPassBeginInfo.pNext' isn't allowed to be filled")}get deviceMask(){return this.memoryViewUint32[4]}set deviceMask(e){this.memoryViewUint32[4]=e}get deviceRenderAreaCount(){return this.memoryViewUint32[5]}set deviceRenderAreaCount(e){this.memoryViewUint32[5]=e}get pDeviceRenderAreas(){return this._pDeviceRenderAreas}set pDeviceRenderAreas(e){null!==e?this._pDeviceRenderAreas=e:null===e&&(this._pDeviceRenderAreas=null)}}VkDeviceGroupRenderPassBeginInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pDeviceRenderAreas){let e=this._pDeviceRenderAreas;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pDeviceRenderAreasNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkDeviceGroupRenderPassBeginInfo.prototype.reflect=function(e){},VkDeviceGroupRenderPassBeginInfo.byteLength=32,VkDeviceGroupRenderPassBeginInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},deviceMask:{byteOffset:16,byteLength:4},deviceRenderAreaCount:{byteOffset:20,byteLength:4},pDeviceRenderAreas:{byteOffset:24,byteLength:8}};class VkDeviceGroupRenderPassBeginInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDeviceRenderAreas=null,this._pDeviceRenderAreasNative=null,this.sType=1000060003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.deviceMask&&(this.deviceMask=e.deviceMask),void 0!==e.deviceRenderAreaCount&&(this.deviceRenderAreaCount=e.deviceRenderAreaCount),void 0!==e.pDeviceRenderAreas&&(this.pDeviceRenderAreas=e.pDeviceRenderAreas))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGroupRenderPassBeginInfoKHR.pNext' isn't allowed to be filled")}get deviceMask(){return this.memoryViewUint32[4]}set deviceMask(e){this.memoryViewUint32[4]=e}get deviceRenderAreaCount(){return this.memoryViewUint32[5]}set deviceRenderAreaCount(e){this.memoryViewUint32[5]=e}get pDeviceRenderAreas(){return this._pDeviceRenderAreas}set pDeviceRenderAreas(e){null!==e?this._pDeviceRenderAreas=e:null===e&&(this._pDeviceRenderAreas=null)}}VkDeviceGroupRenderPassBeginInfoKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pDeviceRenderAreas){let e=this._pDeviceRenderAreas;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pDeviceRenderAreasNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkDeviceGroupRenderPassBeginInfoKHR.prototype.reflect=function(e){},VkDeviceGroupRenderPassBeginInfoKHR.byteLength=32,VkDeviceGroupRenderPassBeginInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},deviceMask:{byteOffset:16,byteLength:4},deviceRenderAreaCount:{byteOffset:20,byteLength:4},pDeviceRenderAreas:{byteOffset:24,byteLength:8}};class VkDeviceGroupCommandBufferBeginInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000060004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.deviceMask&&(this.deviceMask=e.deviceMask))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGroupCommandBufferBeginInfo.pNext' isn't allowed to be filled")}get deviceMask(){return this.memoryViewUint32[4]}set deviceMask(e){this.memoryViewUint32[4]=e}}VkDeviceGroupCommandBufferBeginInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceGroupCommandBufferBeginInfo.prototype.reflect=function(e){},VkDeviceGroupCommandBufferBeginInfo.byteLength=24,VkDeviceGroupCommandBufferBeginInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},deviceMask:{byteOffset:16,byteLength:4}};class VkDeviceGroupCommandBufferBeginInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000060004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.deviceMask&&(this.deviceMask=e.deviceMask))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGroupCommandBufferBeginInfoKHR.pNext' isn't allowed to be filled")}get deviceMask(){return this.memoryViewUint32[4]}set deviceMask(e){this.memoryViewUint32[4]=e}}VkDeviceGroupCommandBufferBeginInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceGroupCommandBufferBeginInfoKHR.prototype.reflect=function(e){},VkDeviceGroupCommandBufferBeginInfoKHR.byteLength=24,VkDeviceGroupCommandBufferBeginInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},deviceMask:{byteOffset:16,byteLength:4}};class VkDeviceGroupSubmitInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pWaitSemaphoreDeviceIndices=null,this._pCommandBufferDeviceMasks=null,this._pSignalSemaphoreDeviceIndices=null,this.sType=1000060005,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.waitSemaphoreCount&&(this.waitSemaphoreCount=e.waitSemaphoreCount),void 0!==e.pWaitSemaphoreDeviceIndices&&(this.pWaitSemaphoreDeviceIndices=e.pWaitSemaphoreDeviceIndices),void 0!==e.commandBufferCount&&(this.commandBufferCount=e.commandBufferCount),void 0!==e.pCommandBufferDeviceMasks&&(this.pCommandBufferDeviceMasks=e.pCommandBufferDeviceMasks),void 0!==e.signalSemaphoreCount&&(this.signalSemaphoreCount=e.signalSemaphoreCount),void 0!==e.pSignalSemaphoreDeviceIndices&&(this.pSignalSemaphoreDeviceIndices=e.pSignalSemaphoreDeviceIndices))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGroupSubmitInfo.pNext' isn't allowed to be filled")}get waitSemaphoreCount(){return this.memoryViewUint32[4]}set waitSemaphoreCount(e){this.memoryViewUint32[4]=e}get pWaitSemaphoreDeviceIndices(){return this._pWaitSemaphoreDeviceIndices}set pWaitSemaphoreDeviceIndices(e){null!==e?(this._pWaitSemaphoreDeviceIndices=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pWaitSemaphoreDeviceIndices=null,this.memoryViewBigInt64[3]=BI0)}get commandBufferCount(){return this.memoryViewUint32[8]}set commandBufferCount(e){this.memoryViewUint32[8]=e}get pCommandBufferDeviceMasks(){return this._pCommandBufferDeviceMasks}set pCommandBufferDeviceMasks(e){null!==e?(this._pCommandBufferDeviceMasks=e,this.memoryViewBigInt64[5]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pCommandBufferDeviceMasks=null,this.memoryViewBigInt64[5]=BI0)}get signalSemaphoreCount(){return this.memoryViewUint32[12]}set signalSemaphoreCount(e){this.memoryViewUint32[12]=e}get pSignalSemaphoreDeviceIndices(){return this._pSignalSemaphoreDeviceIndices}set pSignalSemaphoreDeviceIndices(e){null!==e?(this._pSignalSemaphoreDeviceIndices=e,this.memoryViewBigInt64[7]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pSignalSemaphoreDeviceIndices=null,this.memoryViewBigInt64[7]=BI0)}}VkDeviceGroupSubmitInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceGroupSubmitInfo.prototype.reflect=function(e){},VkDeviceGroupSubmitInfo.byteLength=64,VkDeviceGroupSubmitInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},waitSemaphoreCount:{byteOffset:16,byteLength:4},pWaitSemaphoreDeviceIndices:{byteOffset:24,byteLength:8},commandBufferCount:{byteOffset:32,byteLength:4},pCommandBufferDeviceMasks:{byteOffset:40,byteLength:8},signalSemaphoreCount:{byteOffset:48,byteLength:4},pSignalSemaphoreDeviceIndices:{byteOffset:56,byteLength:8}};class VkDeviceGroupSubmitInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pWaitSemaphoreDeviceIndices=null,this._pCommandBufferDeviceMasks=null,this._pSignalSemaphoreDeviceIndices=null,this.sType=1000060005,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.waitSemaphoreCount&&(this.waitSemaphoreCount=e.waitSemaphoreCount),void 0!==e.pWaitSemaphoreDeviceIndices&&(this.pWaitSemaphoreDeviceIndices=e.pWaitSemaphoreDeviceIndices),void 0!==e.commandBufferCount&&(this.commandBufferCount=e.commandBufferCount),void 0!==e.pCommandBufferDeviceMasks&&(this.pCommandBufferDeviceMasks=e.pCommandBufferDeviceMasks),void 0!==e.signalSemaphoreCount&&(this.signalSemaphoreCount=e.signalSemaphoreCount),void 0!==e.pSignalSemaphoreDeviceIndices&&(this.pSignalSemaphoreDeviceIndices=e.pSignalSemaphoreDeviceIndices))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGroupSubmitInfoKHR.pNext' isn't allowed to be filled")}get waitSemaphoreCount(){return this.memoryViewUint32[4]}set waitSemaphoreCount(e){this.memoryViewUint32[4]=e}get pWaitSemaphoreDeviceIndices(){return this._pWaitSemaphoreDeviceIndices}set pWaitSemaphoreDeviceIndices(e){null!==e?(this._pWaitSemaphoreDeviceIndices=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pWaitSemaphoreDeviceIndices=null,this.memoryViewBigInt64[3]=BI0)}get commandBufferCount(){return this.memoryViewUint32[8]}set commandBufferCount(e){this.memoryViewUint32[8]=e}get pCommandBufferDeviceMasks(){return this._pCommandBufferDeviceMasks}set pCommandBufferDeviceMasks(e){null!==e?(this._pCommandBufferDeviceMasks=e,this.memoryViewBigInt64[5]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pCommandBufferDeviceMasks=null,this.memoryViewBigInt64[5]=BI0)}get signalSemaphoreCount(){return this.memoryViewUint32[12]}set signalSemaphoreCount(e){this.memoryViewUint32[12]=e}get pSignalSemaphoreDeviceIndices(){return this._pSignalSemaphoreDeviceIndices}set pSignalSemaphoreDeviceIndices(e){null!==e?(this._pSignalSemaphoreDeviceIndices=e,this.memoryViewBigInt64[7]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pSignalSemaphoreDeviceIndices=null,this.memoryViewBigInt64[7]=BI0)}}VkDeviceGroupSubmitInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceGroupSubmitInfoKHR.prototype.reflect=function(e){},VkDeviceGroupSubmitInfoKHR.byteLength=64,VkDeviceGroupSubmitInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},waitSemaphoreCount:{byteOffset:16,byteLength:4},pWaitSemaphoreDeviceIndices:{byteOffset:24,byteLength:8},commandBufferCount:{byteOffset:32,byteLength:4},pCommandBufferDeviceMasks:{byteOffset:40,byteLength:8},signalSemaphoreCount:{byteOffset:48,byteLength:4},pSignalSemaphoreDeviceIndices:{byteOffset:56,byteLength:8}};class VkDeviceGroupBindSparseInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000060006,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.resourceDeviceIndex&&(this.resourceDeviceIndex=e.resourceDeviceIndex),void 0!==e.memoryDeviceIndex&&(this.memoryDeviceIndex=e.memoryDeviceIndex))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGroupBindSparseInfo.pNext' isn't allowed to be filled")}get resourceDeviceIndex(){return this.memoryViewUint32[4]}set resourceDeviceIndex(e){this.memoryViewUint32[4]=e}get memoryDeviceIndex(){return this.memoryViewUint32[5]}set memoryDeviceIndex(e){this.memoryViewUint32[5]=e}}VkDeviceGroupBindSparseInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceGroupBindSparseInfo.prototype.reflect=function(e){},VkDeviceGroupBindSparseInfo.byteLength=24,VkDeviceGroupBindSparseInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},resourceDeviceIndex:{byteOffset:16,byteLength:4},memoryDeviceIndex:{byteOffset:20,byteLength:4}};class VkDeviceGroupBindSparseInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000060006,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.resourceDeviceIndex&&(this.resourceDeviceIndex=e.resourceDeviceIndex),void 0!==e.memoryDeviceIndex&&(this.memoryDeviceIndex=e.memoryDeviceIndex))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGroupBindSparseInfoKHR.pNext' isn't allowed to be filled")}get resourceDeviceIndex(){return this.memoryViewUint32[4]}set resourceDeviceIndex(e){this.memoryViewUint32[4]=e}get memoryDeviceIndex(){return this.memoryViewUint32[5]}set memoryDeviceIndex(e){this.memoryViewUint32[5]=e}}VkDeviceGroupBindSparseInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceGroupBindSparseInfoKHR.prototype.reflect=function(e){},VkDeviceGroupBindSparseInfoKHR.byteLength=24,VkDeviceGroupBindSparseInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},resourceDeviceIndex:{byteOffset:16,byteLength:4},memoryDeviceIndex:{byteOffset:20,byteLength:4}};class VkDeviceGroupPresentCapabilitiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+152)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+152)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+152)/4)):(this.memoryBuffer=new ArrayBuffer(152),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._presentMask=[...Array(32)].fill(0),this.sType=1000060007,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGroupPresentCapabilitiesKHR.pNext' isn't allowed to be filled")}get presentMask(){return[this.memoryViewUint32[4],this.memoryViewUint32[5],this.memoryViewUint32[6],this.memoryViewUint32[7],this.memoryViewUint32[8],this.memoryViewUint32[9],this.memoryViewUint32[10],this.memoryViewUint32[11],this.memoryViewUint32[12],this.memoryViewUint32[13],this.memoryViewUint32[14],this.memoryViewUint32[15],this.memoryViewUint32[16],this.memoryViewUint32[17],this.memoryViewUint32[18],this.memoryViewUint32[19],this.memoryViewUint32[20],this.memoryViewUint32[21],this.memoryViewUint32[22],this.memoryViewUint32[23],this.memoryViewUint32[24],this.memoryViewUint32[25],this.memoryViewUint32[26],this.memoryViewUint32[27],this.memoryViewUint32[28],this.memoryViewUint32[29],this.memoryViewUint32[30],this.memoryViewUint32[31],this.memoryViewUint32[32],this.memoryViewUint32[33],this.memoryViewUint32[34],this.memoryViewUint32[35]]}get modes(){return this.memoryViewInt32[36]}}VkDeviceGroupPresentCapabilitiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceGroupPresentCapabilitiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(152)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,152),0)},VkDeviceGroupPresentCapabilitiesKHR.byteLength=152,VkDeviceGroupPresentCapabilitiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},presentMask:{byteOffset:16,byteLength:128},modes:{byteOffset:144,byteLength:4}};class VkImageSwapchainCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._swapchain=null,this.sType=1000060008,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.swapchain&&(this.swapchain=e.swapchain))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImageSwapchainCreateInfoKHR.pNext' isn't allowed to be filled")}get swapchain(){return this._swapchain}set swapchain(e){null!==e?(this._swapchain=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._swapchain=null,this.memoryViewBigInt64[2]=BI0)}}VkImageSwapchainCreateInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageSwapchainCreateInfoKHR.prototype.reflect=function(e){},VkImageSwapchainCreateInfoKHR.byteLength=24,VkImageSwapchainCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},swapchain:{byteOffset:16,byteLength:8}};class VkBindImageMemorySwapchainInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._swapchain=null,this.sType=1000060009,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.swapchain&&(this.swapchain=e.swapchain),void 0!==e.imageIndex&&(this.imageIndex=e.imageIndex))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBindImageMemorySwapchainInfoKHR.pNext' isn't allowed to be filled")}get swapchain(){return this._swapchain}set swapchain(e){null!==e?(this._swapchain=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._swapchain=null,this.memoryViewBigInt64[2]=BI0)}get imageIndex(){return this.memoryViewUint32[6]}set imageIndex(e){this.memoryViewUint32[6]=e}}VkBindImageMemorySwapchainInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBindImageMemorySwapchainInfoKHR.prototype.reflect=function(e){},VkBindImageMemorySwapchainInfoKHR.byteLength=32,VkBindImageMemorySwapchainInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},swapchain:{byteOffset:16,byteLength:8},imageIndex:{byteOffset:24,byteLength:4}};class VkAcquireNextImageInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._swapchain=null,this._semaphore=null,this._fence=null,this.sType=1000060010,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.swapchain&&(this.swapchain=e.swapchain),void 0!==e.timeout&&(this.timeout=e.timeout),void 0!==e.semaphore&&(this.semaphore=e.semaphore),void 0!==e.fence&&(this.fence=e.fence),void 0!==e.deviceMask&&(this.deviceMask=e.deviceMask))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkAcquireNextImageInfoKHR.pNext' isn't allowed to be filled")}get swapchain(){return this._swapchain}set swapchain(e){null!==e?(this._swapchain=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._swapchain=null,this.memoryViewBigInt64[2]=BI0)}get timeout(){return this.memoryViewBigUint64[3]}set timeout(e){this.memoryViewBigUint64[3]=BigInt(e)}get semaphore(){return this._semaphore}set semaphore(e){null!==e?(this._semaphore=e,this.memoryViewBigInt64[4]=e.memoryViewBigInt64[0]):null===e&&(this._semaphore=null,this.memoryViewBigInt64[4]=BI0)}get fence(){return this._fence}set fence(e){null!==e?(this._fence=e,this.memoryViewBigInt64[5]=e.memoryViewBigInt64[0]):null===e&&(this._fence=null,this.memoryViewBigInt64[5]=BI0)}get deviceMask(){return this.memoryViewUint32[12]}set deviceMask(e){this.memoryViewUint32[12]=e}}VkAcquireNextImageInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkAcquireNextImageInfoKHR.prototype.reflect=function(e){},VkAcquireNextImageInfoKHR.byteLength=56,VkAcquireNextImageInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},swapchain:{byteOffset:16,byteLength:8},timeout:{byteOffset:24,byteLength:8},semaphore:{byteOffset:32,byteLength:8},fence:{byteOffset:40,byteLength:8},deviceMask:{byteOffset:48,byteLength:4}};class VkDeviceGroupPresentInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDeviceMasks=null,this.sType=1000060011,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.swapchainCount&&(this.swapchainCount=e.swapchainCount),void 0!==e.pDeviceMasks&&(this.pDeviceMasks=e.pDeviceMasks),void 0!==e.mode&&(this.mode=e.mode))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGroupPresentInfoKHR.pNext' isn't allowed to be filled")}get swapchainCount(){return this.memoryViewUint32[4]}set swapchainCount(e){this.memoryViewUint32[4]=e}get pDeviceMasks(){return this._pDeviceMasks}set pDeviceMasks(e){null!==e?(this._pDeviceMasks=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pDeviceMasks=null,this.memoryViewBigInt64[3]=BI0)}get mode(){return this.memoryViewInt32[8]}set mode(e){this.memoryViewInt32[8]=e}}VkDeviceGroupPresentInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceGroupPresentInfoKHR.prototype.reflect=function(e){},VkDeviceGroupPresentInfoKHR.byteLength=40,VkDeviceGroupPresentInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},swapchainCount:{byteOffset:16,byteLength:4},pDeviceMasks:{byteOffset:24,byteLength:8},mode:{byteOffset:32,byteLength:4}};class VkDeviceGroupDeviceCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pPhysicalDevices=null,this._pPhysicalDevicesNative=null,this.sType=1000070001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.physicalDeviceCount&&(this.physicalDeviceCount=e.physicalDeviceCount),void 0!==e.pPhysicalDevices&&(this.pPhysicalDevices=e.pPhysicalDevices))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGroupDeviceCreateInfo.pNext' isn't allowed to be filled")}get physicalDeviceCount(){return this.memoryViewUint32[4]}set physicalDeviceCount(e){this.memoryViewUint32[4]=e}get pPhysicalDevices(){return this._pPhysicalDevices}set pPhysicalDevices(e){null!==e?this._pPhysicalDevices=e:null===e&&(this._pPhysicalDevices=null)}}VkDeviceGroupDeviceCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pPhysicalDevices){let e=this._pPhysicalDevices;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pPhysicalDevicesNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkDeviceGroupDeviceCreateInfo.prototype.reflect=function(e){},VkDeviceGroupDeviceCreateInfo.byteLength=32,VkDeviceGroupDeviceCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},physicalDeviceCount:{byteOffset:16,byteLength:4},pPhysicalDevices:{byteOffset:24,byteLength:8}};class VkDeviceGroupDeviceCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pPhysicalDevices=null,this._pPhysicalDevicesNative=null,this.sType=1000070001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.physicalDeviceCount&&(this.physicalDeviceCount=e.physicalDeviceCount),void 0!==e.pPhysicalDevices&&(this.pPhysicalDevices=e.pPhysicalDevices))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGroupDeviceCreateInfoKHR.pNext' isn't allowed to be filled")}get physicalDeviceCount(){return this.memoryViewUint32[4]}set physicalDeviceCount(e){this.memoryViewUint32[4]=e}get pPhysicalDevices(){return this._pPhysicalDevices}set pPhysicalDevices(e){null!==e?this._pPhysicalDevices=e:null===e&&(this._pPhysicalDevices=null)}}VkDeviceGroupDeviceCreateInfoKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pPhysicalDevices){let e=this._pPhysicalDevices;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pPhysicalDevicesNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkDeviceGroupDeviceCreateInfoKHR.prototype.reflect=function(e){},VkDeviceGroupDeviceCreateInfoKHR.byteLength=32,VkDeviceGroupDeviceCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},physicalDeviceCount:{byteOffset:16,byteLength:4},pPhysicalDevices:{byteOffset:24,byteLength:8}};class VkDeviceGroupSwapchainCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000060012,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.modes&&(this.modes=e.modes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceGroupSwapchainCreateInfoKHR.pNext' isn't allowed to be filled")}get modes(){return this.memoryViewInt32[4]}set modes(e){this.memoryViewInt32[4]=e}}VkDeviceGroupSwapchainCreateInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceGroupSwapchainCreateInfoKHR.prototype.reflect=function(e){},VkDeviceGroupSwapchainCreateInfoKHR.byteLength=24,VkDeviceGroupSwapchainCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},modes:{byteOffset:16,byteLength:4}};class VkDescriptorUpdateTemplateEntry{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.dstBinding&&(this.dstBinding=e.dstBinding),void 0!==e.dstArrayElement&&(this.dstArrayElement=e.dstArrayElement),void 0!==e.descriptorCount&&(this.descriptorCount=e.descriptorCount),void 0!==e.descriptorType&&(this.descriptorType=e.descriptorType),void 0!==e.offset&&(this.offset=e.offset),void 0!==e.stride&&(this.stride=e.stride))}get dstBinding(){return this.memoryViewUint32[0]}set dstBinding(e){this.memoryViewUint32[0]=e}get dstArrayElement(){return this.memoryViewUint32[1]}set dstArrayElement(e){this.memoryViewUint32[1]=e}get descriptorCount(){return this.memoryViewUint32[2]}set descriptorCount(e){this.memoryViewUint32[2]=e}get descriptorType(){return this.memoryViewInt32[3]}set descriptorType(e){this.memoryViewInt32[3]=e}get offset(){return this.memoryViewBigInt64[2]}set offset(e){this.memoryViewBigInt64[2]=BigInt(e)}get stride(){return this.memoryViewBigInt64[3]}set stride(e){this.memoryViewBigInt64[3]=BigInt(e)}}VkDescriptorUpdateTemplateEntry.prototype.flush=function(){return!0},VkDescriptorUpdateTemplateEntry.prototype.reflect=function(e){},VkDescriptorUpdateTemplateEntry.byteLength=32,VkDescriptorUpdateTemplateEntry.memoryLayout={dstBinding:{byteOffset:0,byteLength:4},dstArrayElement:{byteOffset:4,byteLength:4},descriptorCount:{byteOffset:8,byteLength:4},descriptorType:{byteOffset:12,byteLength:4},offset:{byteOffset:16,byteLength:8},stride:{byteOffset:24,byteLength:8}};class VkDescriptorUpdateTemplateEntryKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.dstBinding&&(this.dstBinding=e.dstBinding),void 0!==e.dstArrayElement&&(this.dstArrayElement=e.dstArrayElement),void 0!==e.descriptorCount&&(this.descriptorCount=e.descriptorCount),void 0!==e.descriptorType&&(this.descriptorType=e.descriptorType),void 0!==e.offset&&(this.offset=e.offset),void 0!==e.stride&&(this.stride=e.stride))}get dstBinding(){return this.memoryViewUint32[0]}set dstBinding(e){this.memoryViewUint32[0]=e}get dstArrayElement(){return this.memoryViewUint32[1]}set dstArrayElement(e){this.memoryViewUint32[1]=e}get descriptorCount(){return this.memoryViewUint32[2]}set descriptorCount(e){this.memoryViewUint32[2]=e}get descriptorType(){return this.memoryViewInt32[3]}set descriptorType(e){this.memoryViewInt32[3]=e}get offset(){return this.memoryViewBigInt64[2]}set offset(e){this.memoryViewBigInt64[2]=BigInt(e)}get stride(){return this.memoryViewBigInt64[3]}set stride(e){this.memoryViewBigInt64[3]=BigInt(e)}}VkDescriptorUpdateTemplateEntryKHR.prototype.flush=function(){return!0},VkDescriptorUpdateTemplateEntryKHR.prototype.reflect=function(e){},VkDescriptorUpdateTemplateEntryKHR.byteLength=32,VkDescriptorUpdateTemplateEntryKHR.memoryLayout={dstBinding:{byteOffset:0,byteLength:4},dstArrayElement:{byteOffset:4,byteLength:4},descriptorCount:{byteOffset:8,byteLength:4},descriptorType:{byteOffset:12,byteLength:4},offset:{byteOffset:16,byteLength:8},stride:{byteOffset:24,byteLength:8}};class VkDescriptorUpdateTemplateCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+72)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4)):(this.memoryBuffer=new ArrayBuffer(72),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDescriptorUpdateEntries=null,this._pDescriptorUpdateEntriesNative=null,this._descriptorSetLayout=null,this._pipelineLayout=null,this.sType=1000085e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.descriptorUpdateEntryCount&&(this.descriptorUpdateEntryCount=e.descriptorUpdateEntryCount),void 0!==e.pDescriptorUpdateEntries&&(this.pDescriptorUpdateEntries=e.pDescriptorUpdateEntries),void 0!==e.templateType&&(this.templateType=e.templateType),void 0!==e.descriptorSetLayout&&(this.descriptorSetLayout=e.descriptorSetLayout),void 0!==e.pipelineBindPoint&&(this.pipelineBindPoint=e.pipelineBindPoint),void 0!==e.pipelineLayout&&(this.pipelineLayout=e.pipelineLayout),void 0!==e.set&&(this.set=e.set))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDescriptorUpdateTemplateCreateInfo.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get descriptorUpdateEntryCount(){return this.memoryViewUint32[5]}set descriptorUpdateEntryCount(e){this.memoryViewUint32[5]=e}get pDescriptorUpdateEntries(){return this._pDescriptorUpdateEntries}set pDescriptorUpdateEntries(e){null!==e?this._pDescriptorUpdateEntries=e:null===e&&(this._pDescriptorUpdateEntries=null)}get templateType(){return this.memoryViewInt32[8]}set templateType(e){this.memoryViewInt32[8]=e}get descriptorSetLayout(){return this._descriptorSetLayout}set descriptorSetLayout(e){null!==e?(this._descriptorSetLayout=e,this.memoryViewBigInt64[5]=e.memoryViewBigInt64[0]):null===e&&(this._descriptorSetLayout=null,this.memoryViewBigInt64[5]=BI0)}get pipelineBindPoint(){return this.memoryViewInt32[12]}set pipelineBindPoint(e){this.memoryViewInt32[12]=e}get pipelineLayout(){return this._pipelineLayout}set pipelineLayout(e){null!==e?(this._pipelineLayout=e,this.memoryViewBigInt64[7]=e.memoryViewBigInt64[0]):null===e&&(this._pipelineLayout=null,this.memoryViewBigInt64[7]=BI0)}get set(){return this.memoryViewUint32[16]}set set(e){this.memoryViewUint32[16]=e}}VkDescriptorUpdateTemplateCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pDescriptorUpdateEntries){let e=this._pDescriptorUpdateEntries;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pDescriptorUpdateEntriesNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkDescriptorUpdateTemplateCreateInfo.prototype.reflect=function(e){},VkDescriptorUpdateTemplateCreateInfo.byteLength=72,VkDescriptorUpdateTemplateCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},descriptorUpdateEntryCount:{byteOffset:20,byteLength:4},pDescriptorUpdateEntries:{byteOffset:24,byteLength:8},templateType:{byteOffset:32,byteLength:4},descriptorSetLayout:{byteOffset:40,byteLength:8},pipelineBindPoint:{byteOffset:48,byteLength:4},pipelineLayout:{byteOffset:56,byteLength:8},set:{byteOffset:64,byteLength:4}};class VkDescriptorUpdateTemplateCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+72)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4)):(this.memoryBuffer=new ArrayBuffer(72),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDescriptorUpdateEntries=null,this._pDescriptorUpdateEntriesNative=null,this._descriptorSetLayout=null,this._pipelineLayout=null,this.sType=1000085e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.descriptorUpdateEntryCount&&(this.descriptorUpdateEntryCount=e.descriptorUpdateEntryCount),void 0!==e.pDescriptorUpdateEntries&&(this.pDescriptorUpdateEntries=e.pDescriptorUpdateEntries),void 0!==e.templateType&&(this.templateType=e.templateType),void 0!==e.descriptorSetLayout&&(this.descriptorSetLayout=e.descriptorSetLayout),void 0!==e.pipelineBindPoint&&(this.pipelineBindPoint=e.pipelineBindPoint),void 0!==e.pipelineLayout&&(this.pipelineLayout=e.pipelineLayout),void 0!==e.set&&(this.set=e.set))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDescriptorUpdateTemplateCreateInfoKHR.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get descriptorUpdateEntryCount(){return this.memoryViewUint32[5]}set descriptorUpdateEntryCount(e){this.memoryViewUint32[5]=e}get pDescriptorUpdateEntries(){return this._pDescriptorUpdateEntries}set pDescriptorUpdateEntries(e){null!==e?this._pDescriptorUpdateEntries=e:null===e&&(this._pDescriptorUpdateEntries=null)}get templateType(){return this.memoryViewInt32[8]}set templateType(e){this.memoryViewInt32[8]=e}get descriptorSetLayout(){return this._descriptorSetLayout}set descriptorSetLayout(e){null!==e?(this._descriptorSetLayout=e,this.memoryViewBigInt64[5]=e.memoryViewBigInt64[0]):null===e&&(this._descriptorSetLayout=null,this.memoryViewBigInt64[5]=BI0)}get pipelineBindPoint(){return this.memoryViewInt32[12]}set pipelineBindPoint(e){this.memoryViewInt32[12]=e}get pipelineLayout(){return this._pipelineLayout}set pipelineLayout(e){null!==e?(this._pipelineLayout=e,this.memoryViewBigInt64[7]=e.memoryViewBigInt64[0]):null===e&&(this._pipelineLayout=null,this.memoryViewBigInt64[7]=BI0)}get set(){return this.memoryViewUint32[16]}set set(e){this.memoryViewUint32[16]=e}}VkDescriptorUpdateTemplateCreateInfoKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pDescriptorUpdateEntries){let e=this._pDescriptorUpdateEntries;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pDescriptorUpdateEntriesNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkDescriptorUpdateTemplateCreateInfoKHR.prototype.reflect=function(e){},VkDescriptorUpdateTemplateCreateInfoKHR.byteLength=72,VkDescriptorUpdateTemplateCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},descriptorUpdateEntryCount:{byteOffset:20,byteLength:4},pDescriptorUpdateEntries:{byteOffset:24,byteLength:8},templateType:{byteOffset:32,byteLength:4},descriptorSetLayout:{byteOffset:40,byteLength:8},pipelineBindPoint:{byteOffset:48,byteLength:4},pipelineLayout:{byteOffset:56,byteLength:8},set:{byteOffset:64,byteLength:4}};class VkXYColorEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.x&&(this.x=e.x),void 0!==e.y&&(this.y=e.y))}get x(){return this.memoryViewFloat32[0]}set x(e){this.memoryViewFloat32[0]=e}get y(){return this.memoryViewFloat32[1]}set y(e){this.memoryViewFloat32[1]=e}}VkXYColorEXT.prototype.flush=function(){return!0},VkXYColorEXT.prototype.reflect=function(e){},VkXYColorEXT.byteLength=8,VkXYColorEXT.memoryLayout={x:{byteOffset:0,byteLength:4},y:{byteOffset:4,byteLength:4}};class VkHdrMetadataEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),this._pNext=null,this._displayPrimaryRed=new VkXYColorEXT({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this._displayPrimaryGreen=new VkXYColorEXT({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+24}),this._displayPrimaryBlue=new VkXYColorEXT({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+32}),this._whitePoint=new VkXYColorEXT({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+40}),this.sType=1000105e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.displayPrimaryRed&&(this.displayPrimaryRed=e.displayPrimaryRed),void 0!==e.displayPrimaryGreen&&(this.displayPrimaryGreen=e.displayPrimaryGreen),void 0!==e.displayPrimaryBlue&&(this.displayPrimaryBlue=e.displayPrimaryBlue),void 0!==e.whitePoint&&(this.whitePoint=e.whitePoint),void 0!==e.maxLuminance&&(this.maxLuminance=e.maxLuminance),void 0!==e.minLuminance&&(this.minLuminance=e.minLuminance),void 0!==e.maxContentLightLevel&&(this.maxContentLightLevel=e.maxContentLightLevel),void 0!==e.maxFrameAverageLightLevel&&(this.maxFrameAverageLightLevel=e.maxFrameAverageLightLevel))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkHdrMetadataEXT.pNext' isn't allowed to be filled")}get displayPrimaryRed(){return this._displayPrimaryRed}set displayPrimaryRed(e){null!==e?(e.flush(),this._displayPrimaryRed=e):null===e&&(this._displayPrimaryRed=null)}get displayPrimaryGreen(){return this._displayPrimaryGreen}set displayPrimaryGreen(e){null!==e?(e.flush(),this._displayPrimaryGreen=e):null===e&&(this._displayPrimaryGreen=null)}get displayPrimaryBlue(){return this._displayPrimaryBlue}set displayPrimaryBlue(e){null!==e?(e.flush(),this._displayPrimaryBlue=e):null===e&&(this._displayPrimaryBlue=null)}get whitePoint(){return this._whitePoint}set whitePoint(e){null!==e?(e.flush(),this._whitePoint=e):null===e&&(this._whitePoint=null)}get maxLuminance(){return this.memoryViewFloat32[12]}set maxLuminance(e){this.memoryViewFloat32[12]=e}get minLuminance(){return this.memoryViewFloat32[13]}set minLuminance(e){this.memoryViewFloat32[13]=e}get maxContentLightLevel(){return this.memoryViewFloat32[14]}set maxContentLightLevel(e){this.memoryViewFloat32[14]=e}get maxFrameAverageLightLevel(){return this.memoryViewFloat32[15]}set maxFrameAverageLightLevel(e){this.memoryViewFloat32[15]=e}}VkHdrMetadataEXT.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._displayPrimaryRed){let e=this._displayPrimaryRed;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,16)}}if(null!==this._displayPrimaryGreen){let e=this._displayPrimaryGreen;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,24)}}if(null!==this._displayPrimaryBlue){let e=this._displayPrimaryBlue;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,32)}}if(null!==this._whitePoint){let e=this._whitePoint;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,40)}}return!0},VkHdrMetadataEXT.prototype.reflect=function(e){},VkHdrMetadataEXT.byteLength=64,VkHdrMetadataEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},displayPrimaryRed:{byteOffset:16,byteLength:8},displayPrimaryGreen:{byteOffset:24,byteLength:8},displayPrimaryBlue:{byteOffset:32,byteLength:8},whitePoint:{byteOffset:40,byteLength:8},maxLuminance:{byteOffset:48,byteLength:4},minLuminance:{byteOffset:52,byteLength:4},maxContentLightLevel:{byteOffset:56,byteLength:4},maxFrameAverageLightLevel:{byteOffset:60,byteLength:4}};class VkDisplayNativeHdrSurfaceCapabilitiesAMD{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000213e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDisplayNativeHdrSurfaceCapabilitiesAMD.pNext' isn't allowed to be filled")}get localDimmingSupport(){return 0!==this.memoryViewUint32[4]}}VkDisplayNativeHdrSurfaceCapabilitiesAMD.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDisplayNativeHdrSurfaceCapabilitiesAMD.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkDisplayNativeHdrSurfaceCapabilitiesAMD.byteLength=24,VkDisplayNativeHdrSurfaceCapabilitiesAMD.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},localDimmingSupport:{byteOffset:16,byteLength:4}};class VkSwapchainDisplayNativeHdrCreateInfoAMD{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000213001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.localDimmingEnable&&(this.localDimmingEnable=e.localDimmingEnable))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSwapchainDisplayNativeHdrCreateInfoAMD.pNext' isn't allowed to be filled")}get localDimmingEnable(){return 0!==this.memoryViewUint32[4]}set localDimmingEnable(e){this.memoryViewUint32[4]=0|e}}VkSwapchainDisplayNativeHdrCreateInfoAMD.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSwapchainDisplayNativeHdrCreateInfoAMD.prototype.reflect=function(e){},VkSwapchainDisplayNativeHdrCreateInfoAMD.byteLength=24,VkSwapchainDisplayNativeHdrCreateInfoAMD.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},localDimmingEnable:{byteOffset:16,byteLength:4}};class VkRefreshCycleDurationGOOGLE{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+8)/8)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer))}get refreshDuration(){return this.memoryViewBigUint64[0]}}VkRefreshCycleDurationGOOGLE.prototype.flush=function(){return!0},VkRefreshCycleDurationGOOGLE.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(8)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,8),0)},VkRefreshCycleDurationGOOGLE.byteLength=8,VkRefreshCycleDurationGOOGLE.memoryLayout={refreshDuration:{byteOffset:0,byteLength:8}};class VkPastPresentationTimingGOOGLE{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer))}get presentID(){return this.memoryViewUint32[0]}get desiredPresentTime(){return this.memoryViewBigUint64[1]}get actualPresentTime(){return this.memoryViewBigUint64[2]}get earliestPresentTime(){return this.memoryViewBigUint64[3]}get presentMargin(){return this.memoryViewBigUint64[4]}}VkPastPresentationTimingGOOGLE.prototype.flush=function(){return!0},VkPastPresentationTimingGOOGLE.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(40)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,40),0)},VkPastPresentationTimingGOOGLE.byteLength=40,VkPastPresentationTimingGOOGLE.memoryLayout={presentID:{byteOffset:0,byteLength:4},desiredPresentTime:{byteOffset:8,byteLength:8},actualPresentTime:{byteOffset:16,byteLength:8},earliestPresentTime:{byteOffset:24,byteLength:8},presentMargin:{byteOffset:32,byteLength:8}};class VkPresentTimesInfoGOOGLE{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pTimes=null,this._pTimesNative=null,this.sType=1000092e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.swapchainCount&&(this.swapchainCount=e.swapchainCount),void 0!==e.pTimes&&(this.pTimes=e.pTimes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPresentTimesInfoGOOGLE.pNext' isn't allowed to be filled")}get swapchainCount(){return this.memoryViewUint32[4]}set swapchainCount(e){this.memoryViewUint32[4]=e}get pTimes(){return this._pTimes}set pTimes(e){null!==e?this._pTimes=e:null===e&&(this._pTimes=null)}}VkPresentTimesInfoGOOGLE.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pTimes){let e=this._pTimes;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pTimesNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkPresentTimesInfoGOOGLE.prototype.reflect=function(e){},VkPresentTimesInfoGOOGLE.byteLength=32,VkPresentTimesInfoGOOGLE.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},swapchainCount:{byteOffset:16,byteLength:4},pTimes:{byteOffset:24,byteLength:8}};class VkPresentTimeGOOGLE{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+16)/8)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.presentID&&(this.presentID=e.presentID),void 0!==e.desiredPresentTime&&(this.desiredPresentTime=e.desiredPresentTime))}get presentID(){return this.memoryViewUint32[0]}set presentID(e){this.memoryViewUint32[0]=e}get desiredPresentTime(){return this.memoryViewBigUint64[1]}set desiredPresentTime(e){this.memoryViewBigUint64[1]=BigInt(e)}}VkPresentTimeGOOGLE.prototype.flush=function(){return!0},VkPresentTimeGOOGLE.prototype.reflect=function(e){},VkPresentTimeGOOGLE.byteLength=16,VkPresentTimeGOOGLE.memoryLayout={presentID:{byteOffset:0,byteLength:4},desiredPresentTime:{byteOffset:8,byteLength:8}};class VkMacOSSurfaceCreateInfoMVK{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._pView=null,this.sType=1000123e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.pView&&(this.pView=e.pView))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMacOSSurfaceCreateInfoMVK.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get pView(){return this._pView}set pView(e){null!==e?(this._pView=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pView=null,this.memoryViewBigInt64[3]=BI0)}}VkMacOSSurfaceCreateInfoMVK.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMacOSSurfaceCreateInfoMVK.prototype.reflect=function(e){},VkMacOSSurfaceCreateInfoMVK.byteLength=32,VkMacOSSurfaceCreateInfoMVK.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},pView:{byteOffset:24,byteLength:8}};class VkViewportWScalingNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.xcoeff&&(this.xcoeff=e.xcoeff),void 0!==e.ycoeff&&(this.ycoeff=e.ycoeff))}get xcoeff(){return this.memoryViewFloat32[0]}set xcoeff(e){this.memoryViewFloat32[0]=e}get ycoeff(){return this.memoryViewFloat32[1]}set ycoeff(e){this.memoryViewFloat32[1]=e}}VkViewportWScalingNV.prototype.flush=function(){return!0},VkViewportWScalingNV.prototype.reflect=function(e){},VkViewportWScalingNV.byteLength=8,VkViewportWScalingNV.memoryLayout={xcoeff:{byteOffset:0,byteLength:4},ycoeff:{byteOffset:4,byteLength:4}};class VkPipelineViewportWScalingStateCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pViewportWScalings=null,this._pViewportWScalingsNative=null,this.sType=1000087e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.viewportWScalingEnable&&(this.viewportWScalingEnable=e.viewportWScalingEnable),void 0!==e.viewportCount&&(this.viewportCount=e.viewportCount),void 0!==e.pViewportWScalings&&(this.pViewportWScalings=e.pViewportWScalings))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineViewportWScalingStateCreateInfoNV.pNext' isn't allowed to be filled")}get viewportWScalingEnable(){return 0!==this.memoryViewUint32[4]}set viewportWScalingEnable(e){this.memoryViewUint32[4]=0|e}get viewportCount(){return this.memoryViewUint32[5]}set viewportCount(e){this.memoryViewUint32[5]=e}get pViewportWScalings(){return this._pViewportWScalings}set pViewportWScalings(e){null!==e?this._pViewportWScalings=e:null===e&&(this._pViewportWScalings=null)}}VkPipelineViewportWScalingStateCreateInfoNV.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pViewportWScalings){let e=this._pViewportWScalings;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pViewportWScalingsNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkPipelineViewportWScalingStateCreateInfoNV.prototype.reflect=function(e){},VkPipelineViewportWScalingStateCreateInfoNV.byteLength=32,VkPipelineViewportWScalingStateCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},viewportWScalingEnable:{byteOffset:16,byteLength:4},viewportCount:{byteOffset:20,byteLength:4},pViewportWScalings:{byteOffset:24,byteLength:8}};class VkViewportSwizzleNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.x&&(this.x=e.x),void 0!==e.y&&(this.y=e.y),void 0!==e.z&&(this.z=e.z),void 0!==e.w&&(this.w=e.w))}get x(){return this.memoryViewInt32[0]}set x(e){this.memoryViewInt32[0]=e}get y(){return this.memoryViewInt32[1]}set y(e){this.memoryViewInt32[1]=e}get z(){return this.memoryViewInt32[2]}set z(e){this.memoryViewInt32[2]=e}get w(){return this.memoryViewInt32[3]}set w(e){this.memoryViewInt32[3]=e}}VkViewportSwizzleNV.prototype.flush=function(){return!0},VkViewportSwizzleNV.prototype.reflect=function(e){},VkViewportSwizzleNV.byteLength=16,VkViewportSwizzleNV.memoryLayout={x:{byteOffset:0,byteLength:4},y:{byteOffset:4,byteLength:4},z:{byteOffset:8,byteLength:4},w:{byteOffset:12,byteLength:4}};class VkPipelineViewportSwizzleStateCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pViewportSwizzles=null,this._pViewportSwizzlesNative=null,this.sType=1000098e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.viewportCount&&(this.viewportCount=e.viewportCount),void 0!==e.pViewportSwizzles&&(this.pViewportSwizzles=e.pViewportSwizzles))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineViewportSwizzleStateCreateInfoNV.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get viewportCount(){return this.memoryViewUint32[5]}set viewportCount(e){this.memoryViewUint32[5]=e}get pViewportSwizzles(){return this._pViewportSwizzles}set pViewportSwizzles(e){null!==e?this._pViewportSwizzles=e:null===e&&(this._pViewportSwizzles=null)}}VkPipelineViewportSwizzleStateCreateInfoNV.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pViewportSwizzles){let e=this._pViewportSwizzles;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pViewportSwizzlesNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkPipelineViewportSwizzleStateCreateInfoNV.prototype.reflect=function(e){},VkPipelineViewportSwizzleStateCreateInfoNV.byteLength=32,VkPipelineViewportSwizzleStateCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},viewportCount:{byteOffset:20,byteLength:4},pViewportSwizzles:{byteOffset:24,byteLength:8}};class VkPhysicalDeviceDiscardRectanglePropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000099e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceDiscardRectanglePropertiesEXT.pNext' isn't allowed to be filled")}get maxDiscardRectangles(){return this.memoryViewUint32[4]}}VkPhysicalDeviceDiscardRectanglePropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceDiscardRectanglePropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkPhysicalDeviceDiscardRectanglePropertiesEXT.byteLength=24,VkPhysicalDeviceDiscardRectanglePropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxDiscardRectangles:{byteOffset:16,byteLength:4}};class VkPipelineDiscardRectangleStateCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDiscardRectangles=null,this._pDiscardRectanglesNative=null,this.sType=1000099001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.discardRectangleMode&&(this.discardRectangleMode=e.discardRectangleMode),void 0!==e.discardRectangleCount&&(this.discardRectangleCount=e.discardRectangleCount),void 0!==e.pDiscardRectangles&&(this.pDiscardRectangles=e.pDiscardRectangles))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineDiscardRectangleStateCreateInfoEXT.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get discardRectangleMode(){return this.memoryViewInt32[5]}set discardRectangleMode(e){this.memoryViewInt32[5]=e}get discardRectangleCount(){return this.memoryViewUint32[6]}set discardRectangleCount(e){this.memoryViewUint32[6]=e}get pDiscardRectangles(){return this._pDiscardRectangles}set pDiscardRectangles(e){null!==e?this._pDiscardRectangles=e:null===e&&(this._pDiscardRectangles=null)}}VkPipelineDiscardRectangleStateCreateInfoEXT.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pDiscardRectangles){let e=this._pDiscardRectangles;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pDiscardRectanglesNative=t,this.memoryViewBigInt64[4]=t.address}return!0},VkPipelineDiscardRectangleStateCreateInfoEXT.prototype.reflect=function(e){},VkPipelineDiscardRectangleStateCreateInfoEXT.byteLength=40,VkPipelineDiscardRectangleStateCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},discardRectangleMode:{byteOffset:20,byteLength:4},discardRectangleCount:{byteOffset:24,byteLength:4},pDiscardRectangles:{byteOffset:32,byteLength:8}};class VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000097e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.pNext' isn't allowed to be filled")}get perViewPositionAllComponents(){return 0!==this.memoryViewUint32[4]}}VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.byteLength=24,VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},perViewPositionAllComponents:{byteOffset:16,byteLength:4}};class VkInputAttachmentAspectReference{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4)):(this.memoryBuffer=new ArrayBuffer(12),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.subpass&&(this.subpass=e.subpass),void 0!==e.inputAttachmentIndex&&(this.inputAttachmentIndex=e.inputAttachmentIndex),void 0!==e.aspectMask&&(this.aspectMask=e.aspectMask))}get subpass(){return this.memoryViewUint32[0]}set subpass(e){this.memoryViewUint32[0]=e}get inputAttachmentIndex(){return this.memoryViewUint32[1]}set inputAttachmentIndex(e){this.memoryViewUint32[1]=e}get aspectMask(){return this.memoryViewInt32[2]}set aspectMask(e){this.memoryViewInt32[2]=e}}VkInputAttachmentAspectReference.prototype.flush=function(){return!0},VkInputAttachmentAspectReference.prototype.reflect=function(e){},VkInputAttachmentAspectReference.byteLength=12,VkInputAttachmentAspectReference.memoryLayout={subpass:{byteOffset:0,byteLength:4},inputAttachmentIndex:{byteOffset:4,byteLength:4},aspectMask:{byteOffset:8,byteLength:4}};class VkInputAttachmentAspectReferenceKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4)):(this.memoryBuffer=new ArrayBuffer(12),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.subpass&&(this.subpass=e.subpass),void 0!==e.inputAttachmentIndex&&(this.inputAttachmentIndex=e.inputAttachmentIndex),void 0!==e.aspectMask&&(this.aspectMask=e.aspectMask))}get subpass(){return this.memoryViewUint32[0]}set subpass(e){this.memoryViewUint32[0]=e}get inputAttachmentIndex(){return this.memoryViewUint32[1]}set inputAttachmentIndex(e){this.memoryViewUint32[1]=e}get aspectMask(){return this.memoryViewInt32[2]}set aspectMask(e){this.memoryViewInt32[2]=e}}VkInputAttachmentAspectReferenceKHR.prototype.flush=function(){return!0},VkInputAttachmentAspectReferenceKHR.prototype.reflect=function(e){},VkInputAttachmentAspectReferenceKHR.byteLength=12,VkInputAttachmentAspectReferenceKHR.memoryLayout={subpass:{byteOffset:0,byteLength:4},inputAttachmentIndex:{byteOffset:4,byteLength:4},aspectMask:{byteOffset:8,byteLength:4}};class VkRenderPassInputAttachmentAspectCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pAspectReferences=null,this._pAspectReferencesNative=null,this.sType=1000117001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.aspectReferenceCount&&(this.aspectReferenceCount=e.aspectReferenceCount),void 0!==e.pAspectReferences&&(this.pAspectReferences=e.pAspectReferences))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkRenderPassInputAttachmentAspectCreateInfo.pNext' isn't allowed to be filled")}get aspectReferenceCount(){return this.memoryViewUint32[4]}set aspectReferenceCount(e){this.memoryViewUint32[4]=e}get pAspectReferences(){return this._pAspectReferences}set pAspectReferences(e){null!==e?this._pAspectReferences=e:null===e&&(this._pAspectReferences=null)}}VkRenderPassInputAttachmentAspectCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pAspectReferences){let e=this._pAspectReferences;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pAspectReferencesNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkRenderPassInputAttachmentAspectCreateInfo.prototype.reflect=function(e){},VkRenderPassInputAttachmentAspectCreateInfo.byteLength=32,VkRenderPassInputAttachmentAspectCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},aspectReferenceCount:{byteOffset:16,byteLength:4},pAspectReferences:{byteOffset:24,byteLength:8}};class VkRenderPassInputAttachmentAspectCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pAspectReferences=null,this._pAspectReferencesNative=null,this.sType=1000117001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.aspectReferenceCount&&(this.aspectReferenceCount=e.aspectReferenceCount),void 0!==e.pAspectReferences&&(this.pAspectReferences=e.pAspectReferences))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkRenderPassInputAttachmentAspectCreateInfoKHR.pNext' isn't allowed to be filled")}get aspectReferenceCount(){return this.memoryViewUint32[4]}set aspectReferenceCount(e){this.memoryViewUint32[4]=e}get pAspectReferences(){return this._pAspectReferences}set pAspectReferences(e){null!==e?this._pAspectReferences=e:null===e&&(this._pAspectReferences=null)}}VkRenderPassInputAttachmentAspectCreateInfoKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pAspectReferences){let e=this._pAspectReferences;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pAspectReferencesNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkRenderPassInputAttachmentAspectCreateInfoKHR.prototype.reflect=function(e){},VkRenderPassInputAttachmentAspectCreateInfoKHR.byteLength=32,VkRenderPassInputAttachmentAspectCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},aspectReferenceCount:{byteOffset:16,byteLength:4},pAspectReferences:{byteOffset:24,byteLength:8}};class VkPhysicalDeviceSurfaceInfo2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._surface=null,this.sType=1000119e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.surface&&(this.surface=e.surface))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000255e3:case 1000255001:break;default:throw new TypeError("Invalid type for 'VkPhysicalDeviceSurfaceInfo2KHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get surface(){return this._surface}set surface(e){null!==e?(this._surface=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._surface=null,this.memoryViewBigInt64[2]=BI0)}}VkPhysicalDeviceSurfaceInfo2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceSurfaceInfo2KHR.prototype.reflect=function(e){},VkPhysicalDeviceSurfaceInfo2KHR.byteLength=24,VkPhysicalDeviceSurfaceInfo2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},surface:{byteOffset:16,byteLength:8}};class VkSurfaceCapabilities2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+72)/8)):(this.memoryBuffer=new ArrayBuffer(72),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._surfaceCapabilities=new VkSurfaceCapabilitiesKHR({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000119001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000213e3:case 1000111e3:case 1000239e3:case 1000255002:break;default:throw new TypeError("Invalid type for 'VkSurfaceCapabilities2KHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get surfaceCapabilities(){return this._surfaceCapabilities}}VkSurfaceCapabilities2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSurfaceCapabilities2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(72)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,72),0)},VkSurfaceCapabilities2KHR.byteLength=72,VkSurfaceCapabilities2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},surfaceCapabilities:{byteOffset:16,byteLength:52}};class VkSurfaceFormat2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._surfaceFormat=new VkSurfaceFormatKHR({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000119002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSurfaceFormat2KHR.pNext' isn't allowed to be filled")}get surfaceFormat(){return this._surfaceFormat}}VkSurfaceFormat2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSurfaceFormat2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkSurfaceFormat2KHR.byteLength=24,VkSurfaceFormat2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},surfaceFormat:{byteOffset:16,byteLength:8}};class VkDisplayProperties2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._displayProperties=new VkDisplayPropertiesKHR({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000121e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDisplayProperties2KHR.pNext' isn't allowed to be filled")}get displayProperties(){return this._displayProperties}}VkDisplayProperties2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDisplayProperties2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(64)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,64),0)},VkDisplayProperties2KHR.byteLength=64,VkDisplayProperties2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},displayProperties:{byteOffset:16,byteLength:48}};class VkDisplayPlaneProperties2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._displayPlaneProperties=new VkDisplayPlanePropertiesKHR({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000121001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDisplayPlaneProperties2KHR.pNext' isn't allowed to be filled")}get displayPlaneProperties(){return this._displayPlaneProperties}}VkDisplayPlaneProperties2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDisplayPlaneProperties2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkDisplayPlaneProperties2KHR.byteLength=32,VkDisplayPlaneProperties2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},displayPlaneProperties:{byteOffset:16,byteLength:16}};class VkDisplayModeProperties2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._displayModeProperties=new VkDisplayModePropertiesKHR({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000121002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDisplayModeProperties2KHR.pNext' isn't allowed to be filled")}get displayModeProperties(){return this._displayModeProperties}}VkDisplayModeProperties2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDisplayModeProperties2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(40)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,40),0)},VkDisplayModeProperties2KHR.byteLength=40,VkDisplayModeProperties2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},displayModeProperties:{byteOffset:16,byteLength:24}};class VkDisplayPlaneInfo2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._mode=null,this.sType=1000121003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.mode&&(this.mode=e.mode),void 0!==e.planeIndex&&(this.planeIndex=e.planeIndex))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDisplayPlaneInfo2KHR.pNext' isn't allowed to be filled")}get mode(){return this._mode}set mode(e){null!==e?(this._mode=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._mode=null,this.memoryViewBigInt64[2]=BI0)}get planeIndex(){return this.memoryViewUint32[6]}set planeIndex(e){this.memoryViewUint32[6]=e}}VkDisplayPlaneInfo2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDisplayPlaneInfo2KHR.prototype.reflect=function(e){},VkDisplayPlaneInfo2KHR.byteLength=32,VkDisplayPlaneInfo2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},mode:{byteOffset:16,byteLength:8},planeIndex:{byteOffset:24,byteLength:4}};class VkDisplayPlaneCapabilities2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+88)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+88)/8)):(this.memoryBuffer=new ArrayBuffer(88),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._capabilities=new VkDisplayPlaneCapabilitiesKHR({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000121004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDisplayPlaneCapabilities2KHR.pNext' isn't allowed to be filled")}get capabilities(){return this._capabilities}}VkDisplayPlaneCapabilities2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDisplayPlaneCapabilities2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(88)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,88),0)},VkDisplayPlaneCapabilities2KHR.byteLength=88,VkDisplayPlaneCapabilities2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},capabilities:{byteOffset:16,byteLength:68}};class VkSharedPresentSurfaceCapabilitiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000111e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSharedPresentSurfaceCapabilitiesKHR.pNext' isn't allowed to be filled")}get sharedPresentSupportedUsageFlags(){return this.memoryViewInt32[4]}}VkSharedPresentSurfaceCapabilitiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSharedPresentSurfaceCapabilitiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkSharedPresentSurfaceCapabilitiesKHR.byteLength=24,VkSharedPresentSurfaceCapabilitiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},sharedPresentSupportedUsageFlags:{byteOffset:16,byteLength:4}};class VkPhysicalDevice16BitStorageFeatures{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000083e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.storageBuffer16BitAccess&&(this.storageBuffer16BitAccess=e.storageBuffer16BitAccess),void 0!==e.uniformAndStorageBuffer16BitAccess&&(this.uniformAndStorageBuffer16BitAccess=e.uniformAndStorageBuffer16BitAccess),void 0!==e.storagePushConstant16&&(this.storagePushConstant16=e.storagePushConstant16),void 0!==e.storageInputOutput16&&(this.storageInputOutput16=e.storageInputOutput16))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDevice16BitStorageFeatures.pNext' isn't allowed to be filled")}get storageBuffer16BitAccess(){return 0!==this.memoryViewUint32[4]}set storageBuffer16BitAccess(e){this.memoryViewUint32[4]=0|e}get uniformAndStorageBuffer16BitAccess(){return 0!==this.memoryViewUint32[5]}set uniformAndStorageBuffer16BitAccess(e){this.memoryViewUint32[5]=0|e}get storagePushConstant16(){return 0!==this.memoryViewUint32[6]}set storagePushConstant16(e){this.memoryViewUint32[6]=0|e}get storageInputOutput16(){return 0!==this.memoryViewUint32[7]}set storageInputOutput16(e){this.memoryViewUint32[7]=0|e}}VkPhysicalDevice16BitStorageFeatures.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDevice16BitStorageFeatures.prototype.reflect=function(e){},VkPhysicalDevice16BitStorageFeatures.byteLength=32,VkPhysicalDevice16BitStorageFeatures.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},storageBuffer16BitAccess:{byteOffset:16,byteLength:4},uniformAndStorageBuffer16BitAccess:{byteOffset:20,byteLength:4},storagePushConstant16:{byteOffset:24,byteLength:4},storageInputOutput16:{byteOffset:28,byteLength:4}};class VkPhysicalDevice16BitStorageFeaturesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000083e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.storageBuffer16BitAccess&&(this.storageBuffer16BitAccess=e.storageBuffer16BitAccess),void 0!==e.uniformAndStorageBuffer16BitAccess&&(this.uniformAndStorageBuffer16BitAccess=e.uniformAndStorageBuffer16BitAccess),void 0!==e.storagePushConstant16&&(this.storagePushConstant16=e.storagePushConstant16),void 0!==e.storageInputOutput16&&(this.storageInputOutput16=e.storageInputOutput16))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDevice16BitStorageFeaturesKHR.pNext' isn't allowed to be filled")}get storageBuffer16BitAccess(){return 0!==this.memoryViewUint32[4]}set storageBuffer16BitAccess(e){this.memoryViewUint32[4]=0|e}get uniformAndStorageBuffer16BitAccess(){return 0!==this.memoryViewUint32[5]}set uniformAndStorageBuffer16BitAccess(e){this.memoryViewUint32[5]=0|e}get storagePushConstant16(){return 0!==this.memoryViewUint32[6]}set storagePushConstant16(e){this.memoryViewUint32[6]=0|e}get storageInputOutput16(){return 0!==this.memoryViewUint32[7]}set storageInputOutput16(e){this.memoryViewUint32[7]=0|e}}VkPhysicalDevice16BitStorageFeaturesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDevice16BitStorageFeaturesKHR.prototype.reflect=function(e){},VkPhysicalDevice16BitStorageFeaturesKHR.byteLength=32,VkPhysicalDevice16BitStorageFeaturesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},storageBuffer16BitAccess:{byteOffset:16,byteLength:4},uniformAndStorageBuffer16BitAccess:{byteOffset:20,byteLength:4},storagePushConstant16:{byteOffset:24,byteLength:4},storageInputOutput16:{byteOffset:28,byteLength:4}};class VkPhysicalDeviceSubgroupProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceSubgroupProperties.pNext' isn't allowed to be filled")}get subgroupSize(){return this.memoryViewUint32[4]}get supportedStages(){return this.memoryViewInt32[5]}get supportedOperations(){return this.memoryViewInt32[6]}get quadOperationsInAllStages(){return 0!==this.memoryViewUint32[7]}}VkPhysicalDeviceSubgroupProperties.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceSubgroupProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkPhysicalDeviceSubgroupProperties.byteLength=32,VkPhysicalDeviceSubgroupProperties.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},subgroupSize:{byteOffset:16,byteLength:4},supportedStages:{byteOffset:20,byteLength:4},supportedOperations:{byteOffset:24,byteLength:4},quadOperationsInAllStages:{byteOffset:28,byteLength:4}};class VkBufferMemoryRequirementsInfo2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._buffer=null,this.sType=1000146e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.buffer&&(this.buffer=e.buffer))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBufferMemoryRequirementsInfo2.pNext' isn't allowed to be filled")}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[2]=BI0)}}VkBufferMemoryRequirementsInfo2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBufferMemoryRequirementsInfo2.prototype.reflect=function(e){},VkBufferMemoryRequirementsInfo2.byteLength=24,VkBufferMemoryRequirementsInfo2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},buffer:{byteOffset:16,byteLength:8}};class VkBufferMemoryRequirementsInfo2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._buffer=null,this.sType=1000146e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.buffer&&(this.buffer=e.buffer))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBufferMemoryRequirementsInfo2KHR.pNext' isn't allowed to be filled")}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[2]=BI0)}}VkBufferMemoryRequirementsInfo2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBufferMemoryRequirementsInfo2KHR.prototype.reflect=function(e){},VkBufferMemoryRequirementsInfo2KHR.byteLength=24,VkBufferMemoryRequirementsInfo2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},buffer:{byteOffset:16,byteLength:8}};class VkImageMemoryRequirementsInfo2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._image=null,this.sType=1000146001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.image&&(this.image=e.image))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000156003:break;default:throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get image(){return this._image}set image(e){null!==e?(this._image=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._image=null,this.memoryViewBigInt64[2]=BI0)}}VkImageMemoryRequirementsInfo2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageMemoryRequirementsInfo2.prototype.reflect=function(e){},VkImageMemoryRequirementsInfo2.byteLength=24,VkImageMemoryRequirementsInfo2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},image:{byteOffset:16,byteLength:8}};class VkImageMemoryRequirementsInfo2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._image=null,this.sType=1000146001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.image&&(this.image=e.image))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000156003:break;default:throw new TypeError("Invalid type for 'VkImageMemoryRequirementsInfo2KHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get image(){return this._image}set image(e){null!==e?(this._image=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._image=null,this.memoryViewBigInt64[2]=BI0)}}VkImageMemoryRequirementsInfo2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageMemoryRequirementsInfo2KHR.prototype.reflect=function(e){},VkImageMemoryRequirementsInfo2KHR.byteLength=24,VkImageMemoryRequirementsInfo2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},image:{byteOffset:16,byteLength:8}};class VkImageSparseMemoryRequirementsInfo2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._image=null,this.sType=1000146002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.image&&(this.image=e.image))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImageSparseMemoryRequirementsInfo2.pNext' isn't allowed to be filled")}get image(){return this._image}set image(e){null!==e?(this._image=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._image=null,this.memoryViewBigInt64[2]=BI0)}}VkImageSparseMemoryRequirementsInfo2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageSparseMemoryRequirementsInfo2.prototype.reflect=function(e){},VkImageSparseMemoryRequirementsInfo2.byteLength=24,VkImageSparseMemoryRequirementsInfo2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},image:{byteOffset:16,byteLength:8}};class VkImageSparseMemoryRequirementsInfo2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._image=null,this.sType=1000146002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.image&&(this.image=e.image))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImageSparseMemoryRequirementsInfo2KHR.pNext' isn't allowed to be filled")}get image(){return this._image}set image(e){null!==e?(this._image=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._image=null,this.memoryViewBigInt64[2]=BI0)}}VkImageSparseMemoryRequirementsInfo2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageSparseMemoryRequirementsInfo2KHR.prototype.reflect=function(e){},VkImageSparseMemoryRequirementsInfo2KHR.byteLength=24,VkImageSparseMemoryRequirementsInfo2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},image:{byteOffset:16,byteLength:8}};class VkMemoryRequirements2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._memoryRequirements=new VkMemoryRequirements({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000146003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000127e3:break;default:throw new TypeError("Invalid type for 'VkMemoryRequirements2.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get memoryRequirements(){return this._memoryRequirements}}VkMemoryRequirements2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryRequirements2.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(40)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,40),0)},VkMemoryRequirements2.byteLength=40,VkMemoryRequirements2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},memoryRequirements:{byteOffset:16,byteLength:24}};class VkMemoryRequirements2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._memoryRequirements=new VkMemoryRequirements({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000146003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000127e3:break;default:throw new TypeError("Invalid type for 'VkMemoryRequirements2KHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get memoryRequirements(){return this._memoryRequirements}}VkMemoryRequirements2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryRequirements2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(40)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,40),0)},VkMemoryRequirements2KHR.byteLength=40,VkMemoryRequirements2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},memoryRequirements:{byteOffset:16,byteLength:24}};class VkSparseImageMemoryRequirements2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._memoryRequirements=new VkSparseImageMemoryRequirements({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000146004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSparseImageMemoryRequirements2.pNext' isn't allowed to be filled")}get memoryRequirements(){return this._memoryRequirements}}VkSparseImageMemoryRequirements2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSparseImageMemoryRequirements2.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(64)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,64),0)},VkSparseImageMemoryRequirements2.byteLength=64,VkSparseImageMemoryRequirements2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},memoryRequirements:{byteOffset:16,byteLength:48}};class VkSparseImageMemoryRequirements2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._memoryRequirements=new VkSparseImageMemoryRequirements({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000146004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSparseImageMemoryRequirements2KHR.pNext' isn't allowed to be filled")}get memoryRequirements(){return this._memoryRequirements}}VkSparseImageMemoryRequirements2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSparseImageMemoryRequirements2KHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(64)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,64),0)},VkSparseImageMemoryRequirements2KHR.byteLength=64,VkSparseImageMemoryRequirements2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},memoryRequirements:{byteOffset:16,byteLength:48}};class VkPhysicalDevicePointClippingProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000117e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDevicePointClippingProperties.pNext' isn't allowed to be filled")}get pointClippingBehavior(){return this.memoryViewInt32[4]}}VkPhysicalDevicePointClippingProperties.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDevicePointClippingProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkPhysicalDevicePointClippingProperties.byteLength=24,VkPhysicalDevicePointClippingProperties.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},pointClippingBehavior:{byteOffset:16,byteLength:4}};class VkPhysicalDevicePointClippingPropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000117e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDevicePointClippingPropertiesKHR.pNext' isn't allowed to be filled")}get pointClippingBehavior(){return this.memoryViewInt32[4]}}VkPhysicalDevicePointClippingPropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDevicePointClippingPropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkPhysicalDevicePointClippingPropertiesKHR.byteLength=24,VkPhysicalDevicePointClippingPropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},pointClippingBehavior:{byteOffset:16,byteLength:4}};class VkMemoryDedicatedRequirements{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000127e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMemoryDedicatedRequirements.pNext' isn't allowed to be filled")}get prefersDedicatedAllocation(){return 0!==this.memoryViewUint32[4]}get requiresDedicatedAllocation(){return 0!==this.memoryViewUint32[5]}}VkMemoryDedicatedRequirements.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryDedicatedRequirements.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkMemoryDedicatedRequirements.byteLength=24,VkMemoryDedicatedRequirements.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},prefersDedicatedAllocation:{byteOffset:16,byteLength:4},requiresDedicatedAllocation:{byteOffset:20,byteLength:4}};class VkMemoryDedicatedRequirementsKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000127e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMemoryDedicatedRequirementsKHR.pNext' isn't allowed to be filled")}get prefersDedicatedAllocation(){return 0!==this.memoryViewUint32[4]}get requiresDedicatedAllocation(){return 0!==this.memoryViewUint32[5]}}VkMemoryDedicatedRequirementsKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryDedicatedRequirementsKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkMemoryDedicatedRequirementsKHR.byteLength=24,VkMemoryDedicatedRequirementsKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},prefersDedicatedAllocation:{byteOffset:16,byteLength:4},requiresDedicatedAllocation:{byteOffset:20,byteLength:4}};class VkMemoryDedicatedAllocateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._image=null,this._buffer=null,this.sType=1000127001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.image&&(this.image=e.image),void 0!==e.buffer&&(this.buffer=e.buffer))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMemoryDedicatedAllocateInfo.pNext' isn't allowed to be filled")}get image(){return this._image}set image(e){null!==e?(this._image=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._image=null,this.memoryViewBigInt64[2]=BI0)}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[3]=BI0)}}VkMemoryDedicatedAllocateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryDedicatedAllocateInfo.prototype.reflect=function(e){},VkMemoryDedicatedAllocateInfo.byteLength=32,VkMemoryDedicatedAllocateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},image:{byteOffset:16,byteLength:8},buffer:{byteOffset:24,byteLength:8}};class VkMemoryDedicatedAllocateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._image=null,this._buffer=null,this.sType=1000127001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.image&&(this.image=e.image),void 0!==e.buffer&&(this.buffer=e.buffer))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMemoryDedicatedAllocateInfoKHR.pNext' isn't allowed to be filled")}get image(){return this._image}set image(e){null!==e?(this._image=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._image=null,this.memoryViewBigInt64[2]=BI0)}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[3]=BI0)}}VkMemoryDedicatedAllocateInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryDedicatedAllocateInfoKHR.prototype.reflect=function(e){},VkMemoryDedicatedAllocateInfoKHR.byteLength=32,VkMemoryDedicatedAllocateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},image:{byteOffset:16,byteLength:8},buffer:{byteOffset:24,byteLength:8}};class VkImageViewUsageCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000117002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.usage&&(this.usage=e.usage))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImageViewUsageCreateInfo.pNext' isn't allowed to be filled")}get usage(){return this.memoryViewInt32[4]}set usage(e){this.memoryViewInt32[4]=e}}VkImageViewUsageCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageViewUsageCreateInfo.prototype.reflect=function(e){},VkImageViewUsageCreateInfo.byteLength=24,VkImageViewUsageCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},usage:{byteOffset:16,byteLength:4}};class VkImageViewUsageCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000117002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.usage&&(this.usage=e.usage))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImageViewUsageCreateInfoKHR.pNext' isn't allowed to be filled")}get usage(){return this.memoryViewInt32[4]}set usage(e){this.memoryViewInt32[4]=e}}VkImageViewUsageCreateInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageViewUsageCreateInfoKHR.prototype.reflect=function(e){},VkImageViewUsageCreateInfoKHR.byteLength=24,VkImageViewUsageCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},usage:{byteOffset:16,byteLength:4}};class VkPipelineTessellationDomainOriginStateCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000117003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.domainOrigin&&(this.domainOrigin=e.domainOrigin))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineTessellationDomainOriginStateCreateInfo.pNext' isn't allowed to be filled")}get domainOrigin(){return this.memoryViewInt32[4]}set domainOrigin(e){this.memoryViewInt32[4]=e}}VkPipelineTessellationDomainOriginStateCreateInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineTessellationDomainOriginStateCreateInfo.prototype.reflect=function(e){},VkPipelineTessellationDomainOriginStateCreateInfo.byteLength=24,VkPipelineTessellationDomainOriginStateCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},domainOrigin:{byteOffset:16,byteLength:4}};class VkPipelineTessellationDomainOriginStateCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000117003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.domainOrigin&&(this.domainOrigin=e.domainOrigin))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineTessellationDomainOriginStateCreateInfoKHR.pNext' isn't allowed to be filled")}get domainOrigin(){return this.memoryViewInt32[4]}set domainOrigin(e){this.memoryViewInt32[4]=e}}VkPipelineTessellationDomainOriginStateCreateInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineTessellationDomainOriginStateCreateInfoKHR.prototype.reflect=function(e){},VkPipelineTessellationDomainOriginStateCreateInfoKHR.byteLength=24,VkPipelineTessellationDomainOriginStateCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},domainOrigin:{byteOffset:16,byteLength:4}};class VkSamplerYcbcrConversionInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._conversion=null,this.sType=1000156001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.conversion&&(this.conversion=e.conversion))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSamplerYcbcrConversionInfo.pNext' isn't allowed to be filled")}get conversion(){return this._conversion}set conversion(e){null!==e?(this._conversion=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._conversion=null,this.memoryViewBigInt64[2]=BI0)}}VkSamplerYcbcrConversionInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSamplerYcbcrConversionInfo.prototype.reflect=function(e){},VkSamplerYcbcrConversionInfo.byteLength=24,VkSamplerYcbcrConversionInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},conversion:{byteOffset:16,byteLength:8}};class VkSamplerYcbcrConversionInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._conversion=null,this.sType=1000156001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.conversion&&(this.conversion=e.conversion))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSamplerYcbcrConversionInfoKHR.pNext' isn't allowed to be filled")}get conversion(){return this._conversion}set conversion(e){null!==e?(this._conversion=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._conversion=null,this.memoryViewBigInt64[2]=BI0)}}VkSamplerYcbcrConversionInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSamplerYcbcrConversionInfoKHR.prototype.reflect=function(e){},VkSamplerYcbcrConversionInfoKHR.byteLength=24,VkSamplerYcbcrConversionInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},conversion:{byteOffset:16,byteLength:8}};class VkSamplerYcbcrConversionCreateInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._components=new VkComponentMapping({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+28}),this.sType=1000156e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.format&&(this.format=e.format),void 0!==e.ycbcrModel&&(this.ycbcrModel=e.ycbcrModel),void 0!==e.ycbcrRange&&(this.ycbcrRange=e.ycbcrRange),void 0!==e.components&&(this.components=e.components),void 0!==e.xChromaOffset&&(this.xChromaOffset=e.xChromaOffset),void 0!==e.yChromaOffset&&(this.yChromaOffset=e.yChromaOffset),void 0!==e.chromaFilter&&(this.chromaFilter=e.chromaFilter),void 0!==e.forceExplicitReconstruction&&(this.forceExplicitReconstruction=e.forceExplicitReconstruction))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000129005:break;default:throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfo.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get format(){return this.memoryViewInt32[4]}set format(e){this.memoryViewInt32[4]=e}get ycbcrModel(){return this.memoryViewInt32[5]}set ycbcrModel(e){this.memoryViewInt32[5]=e}get ycbcrRange(){return this.memoryViewInt32[6]}set ycbcrRange(e){this.memoryViewInt32[6]=e}get components(){return this._components}set components(e){null!==e?(e.flush(),this._components=e):null===e&&(this._components=null)}get xChromaOffset(){return this.memoryViewInt32[11]}set xChromaOffset(e){this.memoryViewInt32[11]=e}get yChromaOffset(){return this.memoryViewInt32[12]}set yChromaOffset(e){this.memoryViewInt32[12]=e}get chromaFilter(){return this.memoryViewInt32[13]}set chromaFilter(e){this.memoryViewInt32[13]=e}get forceExplicitReconstruction(){return 0!==this.memoryViewUint32[14]}set forceExplicitReconstruction(e){this.memoryViewUint32[14]=0|e}}VkSamplerYcbcrConversionCreateInfo.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._components){let e=this._components;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,28)}}return!0},VkSamplerYcbcrConversionCreateInfo.prototype.reflect=function(e){},VkSamplerYcbcrConversionCreateInfo.byteLength=64,VkSamplerYcbcrConversionCreateInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},format:{byteOffset:16,byteLength:4},ycbcrModel:{byteOffset:20,byteLength:4},ycbcrRange:{byteOffset:24,byteLength:4},components:{byteOffset:28,byteLength:16},xChromaOffset:{byteOffset:44,byteLength:4},yChromaOffset:{byteOffset:48,byteLength:4},chromaFilter:{byteOffset:52,byteLength:4},forceExplicitReconstruction:{byteOffset:56,byteLength:4}};class VkSamplerYcbcrConversionCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._components=new VkComponentMapping({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+28}),this.sType=1000156e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.format&&(this.format=e.format),void 0!==e.ycbcrModel&&(this.ycbcrModel=e.ycbcrModel),void 0!==e.ycbcrRange&&(this.ycbcrRange=e.ycbcrRange),void 0!==e.components&&(this.components=e.components),void 0!==e.xChromaOffset&&(this.xChromaOffset=e.xChromaOffset),void 0!==e.yChromaOffset&&(this.yChromaOffset=e.yChromaOffset),void 0!==e.chromaFilter&&(this.chromaFilter=e.chromaFilter),void 0!==e.forceExplicitReconstruction&&(this.forceExplicitReconstruction=e.forceExplicitReconstruction))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000129005:break;default:throw new TypeError("Invalid type for 'VkSamplerYcbcrConversionCreateInfoKHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get format(){return this.memoryViewInt32[4]}set format(e){this.memoryViewInt32[4]=e}get ycbcrModel(){return this.memoryViewInt32[5]}set ycbcrModel(e){this.memoryViewInt32[5]=e}get ycbcrRange(){return this.memoryViewInt32[6]}set ycbcrRange(e){this.memoryViewInt32[6]=e}get components(){return this._components}set components(e){null!==e?(e.flush(),this._components=e):null===e&&(this._components=null)}get xChromaOffset(){return this.memoryViewInt32[11]}set xChromaOffset(e){this.memoryViewInt32[11]=e}get yChromaOffset(){return this.memoryViewInt32[12]}set yChromaOffset(e){this.memoryViewInt32[12]=e}get chromaFilter(){return this.memoryViewInt32[13]}set chromaFilter(e){this.memoryViewInt32[13]=e}get forceExplicitReconstruction(){return 0!==this.memoryViewUint32[14]}set forceExplicitReconstruction(e){this.memoryViewUint32[14]=0|e}}VkSamplerYcbcrConversionCreateInfoKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._components){let e=this._components;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,28)}}return!0},VkSamplerYcbcrConversionCreateInfoKHR.prototype.reflect=function(e){},VkSamplerYcbcrConversionCreateInfoKHR.byteLength=64,VkSamplerYcbcrConversionCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},format:{byteOffset:16,byteLength:4},ycbcrModel:{byteOffset:20,byteLength:4},ycbcrRange:{byteOffset:24,byteLength:4},components:{byteOffset:28,byteLength:16},xChromaOffset:{byteOffset:44,byteLength:4},yChromaOffset:{byteOffset:48,byteLength:4},chromaFilter:{byteOffset:52,byteLength:4},forceExplicitReconstruction:{byteOffset:56,byteLength:4}};class VkBindImagePlaneMemoryInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000156002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.planeAspect&&(this.planeAspect=e.planeAspect))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBindImagePlaneMemoryInfo.pNext' isn't allowed to be filled")}get planeAspect(){return this.memoryViewInt32[4]}set planeAspect(e){this.memoryViewInt32[4]=e}}VkBindImagePlaneMemoryInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBindImagePlaneMemoryInfo.prototype.reflect=function(e){},VkBindImagePlaneMemoryInfo.byteLength=24,VkBindImagePlaneMemoryInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},planeAspect:{byteOffset:16,byteLength:4}};class VkBindImagePlaneMemoryInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000156002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.planeAspect&&(this.planeAspect=e.planeAspect))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBindImagePlaneMemoryInfoKHR.pNext' isn't allowed to be filled")}get planeAspect(){return this.memoryViewInt32[4]}set planeAspect(e){this.memoryViewInt32[4]=e}}VkBindImagePlaneMemoryInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBindImagePlaneMemoryInfoKHR.prototype.reflect=function(e){},VkBindImagePlaneMemoryInfoKHR.byteLength=24,VkBindImagePlaneMemoryInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},planeAspect:{byteOffset:16,byteLength:4}};class VkImagePlaneMemoryRequirementsInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000156003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.planeAspect&&(this.planeAspect=e.planeAspect))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImagePlaneMemoryRequirementsInfo.pNext' isn't allowed to be filled")}get planeAspect(){return this.memoryViewInt32[4]}set planeAspect(e){this.memoryViewInt32[4]=e}}VkImagePlaneMemoryRequirementsInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImagePlaneMemoryRequirementsInfo.prototype.reflect=function(e){},VkImagePlaneMemoryRequirementsInfo.byteLength=24,VkImagePlaneMemoryRequirementsInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},planeAspect:{byteOffset:16,byteLength:4}};class VkImagePlaneMemoryRequirementsInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000156003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.planeAspect&&(this.planeAspect=e.planeAspect))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImagePlaneMemoryRequirementsInfoKHR.pNext' isn't allowed to be filled")}get planeAspect(){return this.memoryViewInt32[4]}set planeAspect(e){this.memoryViewInt32[4]=e}}VkImagePlaneMemoryRequirementsInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImagePlaneMemoryRequirementsInfoKHR.prototype.reflect=function(e){},VkImagePlaneMemoryRequirementsInfoKHR.byteLength=24,VkImagePlaneMemoryRequirementsInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},planeAspect:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceSamplerYcbcrConversionFeatures{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000156004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.samplerYcbcrConversion&&(this.samplerYcbcrConversion=e.samplerYcbcrConversion))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceSamplerYcbcrConversionFeatures.pNext' isn't allowed to be filled")}get samplerYcbcrConversion(){return 0!==this.memoryViewUint32[4]}set samplerYcbcrConversion(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceSamplerYcbcrConversionFeatures.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceSamplerYcbcrConversionFeatures.prototype.reflect=function(e){},VkPhysicalDeviceSamplerYcbcrConversionFeatures.byteLength=24,VkPhysicalDeviceSamplerYcbcrConversionFeatures.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},samplerYcbcrConversion:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000156004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.samplerYcbcrConversion&&(this.samplerYcbcrConversion=e.samplerYcbcrConversion))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.pNext' isn't allowed to be filled")}get samplerYcbcrConversion(){return 0!==this.memoryViewUint32[4]}set samplerYcbcrConversion(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.prototype.reflect=function(e){},VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.byteLength=24,VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},samplerYcbcrConversion:{byteOffset:16,byteLength:4}};class VkSamplerYcbcrConversionImageFormatProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000156005,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSamplerYcbcrConversionImageFormatProperties.pNext' isn't allowed to be filled")}get combinedImageSamplerDescriptorCount(){return this.memoryViewUint32[4]}}VkSamplerYcbcrConversionImageFormatProperties.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSamplerYcbcrConversionImageFormatProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkSamplerYcbcrConversionImageFormatProperties.byteLength=24,VkSamplerYcbcrConversionImageFormatProperties.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},combinedImageSamplerDescriptorCount:{byteOffset:16,byteLength:4}};class VkSamplerYcbcrConversionImageFormatPropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000156005,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSamplerYcbcrConversionImageFormatPropertiesKHR.pNext' isn't allowed to be filled")}get combinedImageSamplerDescriptorCount(){return this.memoryViewUint32[4]}}VkSamplerYcbcrConversionImageFormatPropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSamplerYcbcrConversionImageFormatPropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkSamplerYcbcrConversionImageFormatPropertiesKHR.byteLength=24,VkSamplerYcbcrConversionImageFormatPropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},combinedImageSamplerDescriptorCount:{byteOffset:16,byteLength:4}};class VkTextureLODGatherFormatPropertiesAMD{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000041e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkTextureLODGatherFormatPropertiesAMD.pNext' isn't allowed to be filled")}get supportsTextureGatherLODBiasAMD(){return 0!==this.memoryViewUint32[4]}}VkTextureLODGatherFormatPropertiesAMD.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkTextureLODGatherFormatPropertiesAMD.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkTextureLODGatherFormatPropertiesAMD.byteLength=24,VkTextureLODGatherFormatPropertiesAMD.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},supportsTextureGatherLODBiasAMD:{byteOffset:16,byteLength:4}};class VkConditionalRenderingBeginInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._buffer=null,this.sType=1000081002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.buffer&&(this.buffer=e.buffer),void 0!==e.offset&&(this.offset=e.offset),void 0!==e.flags&&(this.flags=e.flags))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkConditionalRenderingBeginInfoEXT.pNext' isn't allowed to be filled")}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[2]=BI0)}get offset(){return this.memoryViewBigUint64[3]}set offset(e){this.memoryViewBigUint64[3]=BigInt(e)}get flags(){return this.memoryViewInt32[8]}set flags(e){this.memoryViewInt32[8]=e}}VkConditionalRenderingBeginInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkConditionalRenderingBeginInfoEXT.prototype.reflect=function(e){},VkConditionalRenderingBeginInfoEXT.byteLength=40,VkConditionalRenderingBeginInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},buffer:{byteOffset:16,byteLength:8},offset:{byteOffset:24,byteLength:8},flags:{byteOffset:32,byteLength:4}};class VkProtectedSubmitInfo{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=VkStructureType.VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.protectedSubmit&&(this.protectedSubmit=e.protectedSubmit))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkProtectedSubmitInfo.pNext' isn't allowed to be filled")}get protectedSubmit(){return 0!==this.memoryViewUint32[4]}set protectedSubmit(e){this.memoryViewUint32[4]=0|e}}VkProtectedSubmitInfo.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkProtectedSubmitInfo.prototype.reflect=function(e){},VkProtectedSubmitInfo.byteLength=24,VkProtectedSubmitInfo.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},protectedSubmit:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceProtectedMemoryFeatures{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.protectedMemory&&(this.protectedMemory=e.protectedMemory))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceProtectedMemoryFeatures.pNext' isn't allowed to be filled")}get protectedMemory(){return 0!==this.memoryViewUint32[4]}set protectedMemory(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceProtectedMemoryFeatures.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceProtectedMemoryFeatures.prototype.reflect=function(e){},VkPhysicalDeviceProtectedMemoryFeatures.byteLength=24,VkPhysicalDeviceProtectedMemoryFeatures.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},protectedMemory:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceProtectedMemoryProperties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceProtectedMemoryProperties.pNext' isn't allowed to be filled")}get protectedNoFault(){return 0!==this.memoryViewUint32[4]}}VkPhysicalDeviceProtectedMemoryProperties.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceProtectedMemoryProperties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkPhysicalDeviceProtectedMemoryProperties.byteLength=24,VkPhysicalDeviceProtectedMemoryProperties.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},protectedNoFault:{byteOffset:16,byteLength:4}};class VkDeviceQueueInfo2{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=VkStructureType.VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.queueFamilyIndex&&(this.queueFamilyIndex=e.queueFamilyIndex),void 0!==e.queueIndex&&(this.queueIndex=e.queueIndex))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceQueueInfo2.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get queueFamilyIndex(){return this.memoryViewUint32[5]}set queueFamilyIndex(e){this.memoryViewUint32[5]=e}get queueIndex(){return this.memoryViewUint32[6]}set queueIndex(e){this.memoryViewUint32[6]=e}}VkDeviceQueueInfo2.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceQueueInfo2.prototype.reflect=function(e){},VkDeviceQueueInfo2.byteLength=32,VkDeviceQueueInfo2.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},queueFamilyIndex:{byteOffset:20,byteLength:4},queueIndex:{byteOffset:24,byteLength:4}};class VkPipelineCoverageToColorStateCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000149e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.coverageToColorEnable&&(this.coverageToColorEnable=e.coverageToColorEnable),void 0!==e.coverageToColorLocation&&(this.coverageToColorLocation=e.coverageToColorLocation))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineCoverageToColorStateCreateInfoNV.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get coverageToColorEnable(){return 0!==this.memoryViewUint32[5]}set coverageToColorEnable(e){this.memoryViewUint32[5]=0|e}get coverageToColorLocation(){return this.memoryViewUint32[6]}set coverageToColorLocation(e){this.memoryViewUint32[6]=e}}VkPipelineCoverageToColorStateCreateInfoNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineCoverageToColorStateCreateInfoNV.prototype.reflect=function(e){},VkPipelineCoverageToColorStateCreateInfoNV.byteLength=32,VkPipelineCoverageToColorStateCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},coverageToColorEnable:{byteOffset:20,byteLength:4},coverageToColorLocation:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=100013e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.pNext' isn't allowed to be filled")}get filterMinmaxSingleComponentFormats(){return 0!==this.memoryViewUint32[4]}get filterMinmaxImageComponentMapping(){return 0!==this.memoryViewUint32[5]}}VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.byteLength=24,VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},filterMinmaxSingleComponentFormats:{byteOffset:16,byteLength:4},filterMinmaxImageComponentMapping:{byteOffset:20,byteLength:4}};class VkSampleLocationEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.x&&(this.x=e.x),void 0!==e.y&&(this.y=e.y))}get x(){return this.memoryViewFloat32[0]}set x(e){this.memoryViewFloat32[0]=e}get y(){return this.memoryViewFloat32[1]}set y(e){this.memoryViewFloat32[1]=e}}VkSampleLocationEXT.prototype.flush=function(){return!0},VkSampleLocationEXT.prototype.reflect=function(e){},VkSampleLocationEXT.byteLength=8,VkSampleLocationEXT.memoryLayout={x:{byteOffset:0,byteLength:4},y:{byteOffset:4,byteLength:4}};class VkSampleLocationsInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._sampleLocationGridSize=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+20}),this._pSampleLocations=null,this._pSampleLocationsNative=null,this.sType=1000143e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.sampleLocationsPerPixel&&(this.sampleLocationsPerPixel=e.sampleLocationsPerPixel),void 0!==e.sampleLocationGridSize&&(this.sampleLocationGridSize=e.sampleLocationGridSize),void 0!==e.sampleLocationsCount&&(this.sampleLocationsCount=e.sampleLocationsCount),void 0!==e.pSampleLocations&&(this.pSampleLocations=e.pSampleLocations))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSampleLocationsInfoEXT.pNext' isn't allowed to be filled")}get sampleLocationsPerPixel(){return this.memoryViewInt32[4]}set sampleLocationsPerPixel(e){this.memoryViewInt32[4]=e}get sampleLocationGridSize(){return this._sampleLocationGridSize}set sampleLocationGridSize(e){null!==e?(e.flush(),this._sampleLocationGridSize=e):null===e&&(this._sampleLocationGridSize=null)}get sampleLocationsCount(){return this.memoryViewUint32[7]}set sampleLocationsCount(e){this.memoryViewUint32[7]=e}get pSampleLocations(){return this._pSampleLocations}set pSampleLocations(e){null!==e?this._pSampleLocations=e:null===e&&(this._pSampleLocations=null)}}VkSampleLocationsInfoEXT.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._sampleLocationGridSize){let e=this._sampleLocationGridSize;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,20)}}if(null!==this._pSampleLocations){let e=this._pSampleLocations;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pSampleLocationsNative=t,this.memoryViewBigInt64[4]=t.address}return!0},VkSampleLocationsInfoEXT.prototype.reflect=function(e){},VkSampleLocationsInfoEXT.byteLength=40,VkSampleLocationsInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},sampleLocationsPerPixel:{byteOffset:16,byteLength:4},sampleLocationGridSize:{byteOffset:20,byteLength:8},sampleLocationsCount:{byteOffset:28,byteLength:4},pSampleLocations:{byteOffset:32,byteLength:8}};class VkAttachmentSampleLocationsEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._sampleLocationsInfo=new VkSampleLocationsInfoEXT({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+8}),"object"==typeof e&&(void 0!==e.attachmentIndex&&(this.attachmentIndex=e.attachmentIndex),void 0!==e.sampleLocationsInfo&&(this.sampleLocationsInfo=e.sampleLocationsInfo))}get attachmentIndex(){return this.memoryViewUint32[0]}set attachmentIndex(e){this.memoryViewUint32[0]=e}get sampleLocationsInfo(){return this._sampleLocationsInfo}set sampleLocationsInfo(e){null!==e?(e.flush(),this._sampleLocationsInfo=e):null===e&&(this._sampleLocationsInfo=null)}}VkAttachmentSampleLocationsEXT.prototype.flush=function(){if(null!==this._sampleLocationsInfo){let e=this._sampleLocationsInfo;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+40);new Uint8Array(this.memoryBuffer).set(t,8)}}return!0},VkAttachmentSampleLocationsEXT.prototype.reflect=function(e){},VkAttachmentSampleLocationsEXT.byteLength=48,VkAttachmentSampleLocationsEXT.memoryLayout={attachmentIndex:{byteOffset:0,byteLength:4},sampleLocationsInfo:{byteOffset:8,byteLength:40}};class VkSubpassSampleLocationsEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._sampleLocationsInfo=new VkSampleLocationsInfoEXT({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+8}),"object"==typeof e&&(void 0!==e.subpassIndex&&(this.subpassIndex=e.subpassIndex),void 0!==e.sampleLocationsInfo&&(this.sampleLocationsInfo=e.sampleLocationsInfo))}get subpassIndex(){return this.memoryViewUint32[0]}set subpassIndex(e){this.memoryViewUint32[0]=e}get sampleLocationsInfo(){return this._sampleLocationsInfo}set sampleLocationsInfo(e){null!==e?(e.flush(),this._sampleLocationsInfo=e):null===e&&(this._sampleLocationsInfo=null)}}VkSubpassSampleLocationsEXT.prototype.flush=function(){if(null!==this._sampleLocationsInfo){let e=this._sampleLocationsInfo;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+40);new Uint8Array(this.memoryBuffer).set(t,8)}}return!0},VkSubpassSampleLocationsEXT.prototype.reflect=function(e){},VkSubpassSampleLocationsEXT.byteLength=48,VkSubpassSampleLocationsEXT.memoryLayout={subpassIndex:{byteOffset:0,byteLength:4},sampleLocationsInfo:{byteOffset:8,byteLength:40}};class VkRenderPassSampleLocationsBeginInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pAttachmentInitialSampleLocations=null,this._pAttachmentInitialSampleLocationsNative=null,this._pPostSubpassSampleLocations=null,this._pPostSubpassSampleLocationsNative=null,this.sType=1000143001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.attachmentInitialSampleLocationsCount&&(this.attachmentInitialSampleLocationsCount=e.attachmentInitialSampleLocationsCount),void 0!==e.pAttachmentInitialSampleLocations&&(this.pAttachmentInitialSampleLocations=e.pAttachmentInitialSampleLocations),void 0!==e.postSubpassSampleLocationsCount&&(this.postSubpassSampleLocationsCount=e.postSubpassSampleLocationsCount),void 0!==e.pPostSubpassSampleLocations&&(this.pPostSubpassSampleLocations=e.pPostSubpassSampleLocations))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkRenderPassSampleLocationsBeginInfoEXT.pNext' isn't allowed to be filled")}get attachmentInitialSampleLocationsCount(){return this.memoryViewUint32[4]}set attachmentInitialSampleLocationsCount(e){this.memoryViewUint32[4]=e}get pAttachmentInitialSampleLocations(){return this._pAttachmentInitialSampleLocations}set pAttachmentInitialSampleLocations(e){null!==e?this._pAttachmentInitialSampleLocations=e:null===e&&(this._pAttachmentInitialSampleLocations=null)}get postSubpassSampleLocationsCount(){return this.memoryViewUint32[8]}set postSubpassSampleLocationsCount(e){this.memoryViewUint32[8]=e}get pPostSubpassSampleLocations(){return this._pPostSubpassSampleLocations}set pPostSubpassSampleLocations(e){null!==e?this._pPostSubpassSampleLocations=e:null===e&&(this._pPostSubpassSampleLocations=null)}}VkRenderPassSampleLocationsBeginInfoEXT.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pAttachmentInitialSampleLocations){let e=this._pAttachmentInitialSampleLocations;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pAttachmentInitialSampleLocationsNative=t,this.memoryViewBigInt64[3]=t.address}if(null!==this._pPostSubpassSampleLocations){let e=this._pPostSubpassSampleLocations;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pPostSubpassSampleLocationsNative=t,this.memoryViewBigInt64[5]=t.address}return!0},VkRenderPassSampleLocationsBeginInfoEXT.prototype.reflect=function(e){},VkRenderPassSampleLocationsBeginInfoEXT.byteLength=48,VkRenderPassSampleLocationsBeginInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},attachmentInitialSampleLocationsCount:{byteOffset:16,byteLength:4},pAttachmentInitialSampleLocations:{byteOffset:24,byteLength:8},postSubpassSampleLocationsCount:{byteOffset:32,byteLength:4},pPostSubpassSampleLocations:{byteOffset:40,byteLength:8}};class VkPipelineSampleLocationsStateCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._sampleLocationsInfo=new VkSampleLocationsInfoEXT({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+24}),this.sType=1000143002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.sampleLocationsEnable&&(this.sampleLocationsEnable=e.sampleLocationsEnable),void 0!==e.sampleLocationsInfo&&(this.sampleLocationsInfo=e.sampleLocationsInfo))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineSampleLocationsStateCreateInfoEXT.pNext' isn't allowed to be filled")}get sampleLocationsEnable(){return 0!==this.memoryViewUint32[4]}set sampleLocationsEnable(e){this.memoryViewUint32[4]=0|e}get sampleLocationsInfo(){return this._sampleLocationsInfo}set sampleLocationsInfo(e){null!==e?(e.flush(),this._sampleLocationsInfo=e):null===e&&(this._sampleLocationsInfo=null)}}VkPipelineSampleLocationsStateCreateInfoEXT.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._sampleLocationsInfo){let e=this._sampleLocationsInfo;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+40);new Uint8Array(this.memoryBuffer).set(t,24)}}return!0},VkPipelineSampleLocationsStateCreateInfoEXT.prototype.reflect=function(e){},VkPipelineSampleLocationsStateCreateInfoEXT.byteLength=64,VkPipelineSampleLocationsStateCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},sampleLocationsEnable:{byteOffset:16,byteLength:4},sampleLocationsInfo:{byteOffset:24,byteLength:40}};class VkPhysicalDeviceSampleLocationsPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._maxSampleLocationGridSize=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+20}),this._sampleLocationCoordinateRange=[...Array(2)].fill(0),this.sType=1000143003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceSampleLocationsPropertiesEXT.pNext' isn't allowed to be filled")}get sampleLocationSampleCounts(){return this.memoryViewInt32[4]}get maxSampleLocationGridSize(){return this._maxSampleLocationGridSize}get sampleLocationCoordinateRange(){return[this.memoryViewFloat32[7],this.memoryViewFloat32[8]]}get sampleLocationSubPixelBits(){return this.memoryViewUint32[9]}get variableSampleLocations(){return 0!==this.memoryViewUint32[10]}}VkPhysicalDeviceSampleLocationsPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceSampleLocationsPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(48)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,48),0)},VkPhysicalDeviceSampleLocationsPropertiesEXT.byteLength=48,VkPhysicalDeviceSampleLocationsPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},sampleLocationSampleCounts:{byteOffset:16,byteLength:4},maxSampleLocationGridSize:{byteOffset:20,byteLength:8},sampleLocationCoordinateRange:{byteOffset:28,byteLength:8},sampleLocationSubPixelBits:{byteOffset:36,byteLength:4},variableSampleLocations:{byteOffset:40,byteLength:4}};class VkMultisamplePropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._maxSampleLocationGridSize=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000143004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMultisamplePropertiesEXT.pNext' isn't allowed to be filled")}get maxSampleLocationGridSize(){return this._maxSampleLocationGridSize}}VkMultisamplePropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMultisamplePropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkMultisamplePropertiesEXT.byteLength=24,VkMultisamplePropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxSampleLocationGridSize:{byteOffset:16,byteLength:8}};class VkSamplerReductionModeCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000130001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.reductionMode&&(this.reductionMode=e.reductionMode))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSamplerReductionModeCreateInfoEXT.pNext' isn't allowed to be filled")}get reductionMode(){return this.memoryViewInt32[4]}set reductionMode(e){this.memoryViewInt32[4]=e}}VkSamplerReductionModeCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSamplerReductionModeCreateInfoEXT.prototype.reflect=function(e){},VkSamplerReductionModeCreateInfoEXT.byteLength=24,VkSamplerReductionModeCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},reductionMode:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000148e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.advancedBlendCoherentOperations&&(this.advancedBlendCoherentOperations=e.advancedBlendCoherentOperations))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.pNext' isn't allowed to be filled")}get advancedBlendCoherentOperations(){return 0!==this.memoryViewUint32[4]}set advancedBlendCoherentOperations(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.byteLength=24,VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},advancedBlendCoherentOperations:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000148001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.pNext' isn't allowed to be filled")}get advancedBlendMaxColorAttachments(){return this.memoryViewUint32[4]}get advancedBlendIndependentBlend(){return 0!==this.memoryViewUint32[5]}get advancedBlendNonPremultipliedSrcColor(){return 0!==this.memoryViewUint32[6]}get advancedBlendNonPremultipliedDstColor(){return 0!==this.memoryViewUint32[7]}get advancedBlendCorrelatedOverlap(){return 0!==this.memoryViewUint32[8]}get advancedBlendAllOperations(){return 0!==this.memoryViewUint32[9]}}VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(40)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,40),0)},VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.byteLength=40,VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},advancedBlendMaxColorAttachments:{byteOffset:16,byteLength:4},advancedBlendIndependentBlend:{byteOffset:20,byteLength:4},advancedBlendNonPremultipliedSrcColor:{byteOffset:24,byteLength:4},advancedBlendNonPremultipliedDstColor:{byteOffset:28,byteLength:4},advancedBlendCorrelatedOverlap:{byteOffset:32,byteLength:4},advancedBlendAllOperations:{byteOffset:36,byteLength:4}};class VkPipelineColorBlendAdvancedStateCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000148002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.srcPremultiplied&&(this.srcPremultiplied=e.srcPremultiplied),void 0!==e.dstPremultiplied&&(this.dstPremultiplied=e.dstPremultiplied),void 0!==e.blendOverlap&&(this.blendOverlap=e.blendOverlap))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineColorBlendAdvancedStateCreateInfoEXT.pNext' isn't allowed to be filled")}get srcPremultiplied(){return 0!==this.memoryViewUint32[4]}set srcPremultiplied(e){this.memoryViewUint32[4]=0|e}get dstPremultiplied(){return 0!==this.memoryViewUint32[5]}set dstPremultiplied(e){this.memoryViewUint32[5]=0|e}get blendOverlap(){return this.memoryViewInt32[6]}set blendOverlap(e){this.memoryViewInt32[6]=e}}VkPipelineColorBlendAdvancedStateCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineColorBlendAdvancedStateCreateInfoEXT.prototype.reflect=function(e){},VkPipelineColorBlendAdvancedStateCreateInfoEXT.byteLength=32,VkPipelineColorBlendAdvancedStateCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},srcPremultiplied:{byteOffset:16,byteLength:4},dstPremultiplied:{byteOffset:20,byteLength:4},blendOverlap:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceInlineUniformBlockFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000138e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.inlineUniformBlock&&(this.inlineUniformBlock=e.inlineUniformBlock),void 0!==e.descriptorBindingInlineUniformBlockUpdateAfterBind&&(this.descriptorBindingInlineUniformBlockUpdateAfterBind=e.descriptorBindingInlineUniformBlockUpdateAfterBind))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceInlineUniformBlockFeaturesEXT.pNext' isn't allowed to be filled")}get inlineUniformBlock(){return 0!==this.memoryViewUint32[4]}set inlineUniformBlock(e){this.memoryViewUint32[4]=0|e}get descriptorBindingInlineUniformBlockUpdateAfterBind(){return 0!==this.memoryViewUint32[5]}set descriptorBindingInlineUniformBlockUpdateAfterBind(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceInlineUniformBlockFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceInlineUniformBlockFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceInlineUniformBlockFeaturesEXT.byteLength=24,VkPhysicalDeviceInlineUniformBlockFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},inlineUniformBlock:{byteOffset:16,byteLength:4},descriptorBindingInlineUniformBlockUpdateAfterBind:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceInlineUniformBlockPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000138001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceInlineUniformBlockPropertiesEXT.pNext' isn't allowed to be filled")}get maxInlineUniformBlockSize(){return this.memoryViewUint32[4]}get maxPerStageDescriptorInlineUniformBlocks(){return this.memoryViewUint32[5]}get maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks(){return this.memoryViewUint32[6]}get maxDescriptorSetInlineUniformBlocks(){return this.memoryViewUint32[7]}get maxDescriptorSetUpdateAfterBindInlineUniformBlocks(){return this.memoryViewUint32[8]}}VkPhysicalDeviceInlineUniformBlockPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceInlineUniformBlockPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(40)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,40),0)},VkPhysicalDeviceInlineUniformBlockPropertiesEXT.byteLength=40,VkPhysicalDeviceInlineUniformBlockPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxInlineUniformBlockSize:{byteOffset:16,byteLength:4},maxPerStageDescriptorInlineUniformBlocks:{byteOffset:20,byteLength:4},maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks:{byteOffset:24,byteLength:4},maxDescriptorSetInlineUniformBlocks:{byteOffset:28,byteLength:4},maxDescriptorSetUpdateAfterBindInlineUniformBlocks:{byteOffset:32,byteLength:4}};class VkWriteDescriptorSetInlineUniformBlockEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pData=null,this.sType=1000138002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.dataSize&&(this.dataSize=e.dataSize),void 0!==e.pData&&(this.pData=e.pData))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkWriteDescriptorSetInlineUniformBlockEXT.pNext' isn't allowed to be filled")}get dataSize(){return this.memoryViewUint32[4]}set dataSize(e){this.memoryViewUint32[4]=e}get pData(){return this._pData}set pData(e){null!==e?(this._pData=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pData=null,this.memoryViewBigInt64[3]=BI0)}}VkWriteDescriptorSetInlineUniformBlockEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkWriteDescriptorSetInlineUniformBlockEXT.prototype.reflect=function(e){},VkWriteDescriptorSetInlineUniformBlockEXT.byteLength=32,VkWriteDescriptorSetInlineUniformBlockEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},dataSize:{byteOffset:16,byteLength:4},pData:{byteOffset:24,byteLength:8}};class VkDescriptorPoolInlineUniformBlockCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000138003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.maxInlineUniformBlockBindings&&(this.maxInlineUniformBlockBindings=e.maxInlineUniformBlockBindings))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDescriptorPoolInlineUniformBlockCreateInfoEXT.pNext' isn't allowed to be filled")}get maxInlineUniformBlockBindings(){return this.memoryViewUint32[4]}set maxInlineUniformBlockBindings(e){this.memoryViewUint32[4]=e}}VkDescriptorPoolInlineUniformBlockCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDescriptorPoolInlineUniformBlockCreateInfoEXT.prototype.reflect=function(e){},VkDescriptorPoolInlineUniformBlockCreateInfoEXT.byteLength=24,VkDescriptorPoolInlineUniformBlockCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxInlineUniformBlockBindings:{byteOffset:16,byteLength:4}};class VkPipelineCoverageModulationStateCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pCoverageModulationTable=null,this.sType=1000152e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.coverageModulationMode&&(this.coverageModulationMode=e.coverageModulationMode),void 0!==e.coverageModulationTableEnable&&(this.coverageModulationTableEnable=e.coverageModulationTableEnable),void 0!==e.coverageModulationTableCount&&(this.coverageModulationTableCount=e.coverageModulationTableCount),void 0!==e.pCoverageModulationTable&&(this.pCoverageModulationTable=e.pCoverageModulationTable))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineCoverageModulationStateCreateInfoNV.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get coverageModulationMode(){return this.memoryViewInt32[5]}set coverageModulationMode(e){this.memoryViewInt32[5]=e}get coverageModulationTableEnable(){return 0!==this.memoryViewUint32[6]}set coverageModulationTableEnable(e){this.memoryViewUint32[6]=0|e}get coverageModulationTableCount(){return this.memoryViewUint32[7]}set coverageModulationTableCount(e){this.memoryViewUint32[7]=e}get pCoverageModulationTable(){return this._pCoverageModulationTable}set pCoverageModulationTable(e){null!==e?(this._pCoverageModulationTable=e,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pCoverageModulationTable=null,this.memoryViewBigInt64[4]=BI0)}}VkPipelineCoverageModulationStateCreateInfoNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineCoverageModulationStateCreateInfoNV.prototype.reflect=function(e){},VkPipelineCoverageModulationStateCreateInfoNV.byteLength=40,VkPipelineCoverageModulationStateCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},coverageModulationMode:{byteOffset:20,byteLength:4},coverageModulationTableEnable:{byteOffset:24,byteLength:4},coverageModulationTableCount:{byteOffset:28,byteLength:4},pCoverageModulationTable:{byteOffset:32,byteLength:8}};class VkImageFormatListCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pViewFormats=null,this.sType=1000147e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.viewFormatCount&&(this.viewFormatCount=e.viewFormatCount),void 0!==e.pViewFormats&&(this.pViewFormats=e.pViewFormats))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImageFormatListCreateInfoKHR.pNext' isn't allowed to be filled")}get viewFormatCount(){return this.memoryViewUint32[4]}set viewFormatCount(e){this.memoryViewUint32[4]=e}get pViewFormats(){return this._pViewFormats}set pViewFormats(e){null!==e?(this._pViewFormats=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pViewFormats=null,this.memoryViewBigInt64[3]=BI0)}}VkImageFormatListCreateInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageFormatListCreateInfoKHR.prototype.reflect=function(e){},VkImageFormatListCreateInfoKHR.byteLength=32,VkImageFormatListCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},viewFormatCount:{byteOffset:16,byteLength:4},pViewFormats:{byteOffset:24,byteLength:8}};class VkValidationCacheCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._pInitialData=null,this.sType=100016e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.initialDataSize&&(this.initialDataSize=e.initialDataSize),void 0!==e.pInitialData&&(this.pInitialData=e.pInitialData))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkValidationCacheCreateInfoEXT.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get initialDataSize(){return this.memoryViewBigInt64[3]}set initialDataSize(e){this.memoryViewBigInt64[3]=BigInt(e)}get pInitialData(){return this._pInitialData}set pInitialData(e){null!==e?(this._pInitialData=e,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pInitialData=null,this.memoryViewBigInt64[4]=BI0)}}VkValidationCacheCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkValidationCacheCreateInfoEXT.prototype.reflect=function(e){},VkValidationCacheCreateInfoEXT.byteLength=40,VkValidationCacheCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},initialDataSize:{byteOffset:24,byteLength:8},pInitialData:{byteOffset:32,byteLength:8}};class VkShaderModuleValidationCacheCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._validationCache=null,this.sType=1000160001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.validationCache&&(this.validationCache=e.validationCache))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkShaderModuleValidationCacheCreateInfoEXT.pNext' isn't allowed to be filled")}get validationCache(){return this._validationCache}set validationCache(e){null!==e?(this._validationCache=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._validationCache=null,this.memoryViewBigInt64[2]=BI0)}}VkShaderModuleValidationCacheCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkShaderModuleValidationCacheCreateInfoEXT.prototype.reflect=function(e){},VkShaderModuleValidationCacheCreateInfoEXT.byteLength=24,VkShaderModuleValidationCacheCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},validationCache:{byteOffset:16,byteLength:8}};class VkPhysicalDeviceMaintenance3Properties{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000168e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceMaintenance3Properties.pNext' isn't allowed to be filled")}get maxPerSetDescriptors(){return this.memoryViewUint32[4]}get maxMemoryAllocationSize(){return this.memoryViewBigUint64[3]}}VkPhysicalDeviceMaintenance3Properties.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceMaintenance3Properties.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkPhysicalDeviceMaintenance3Properties.byteLength=32,VkPhysicalDeviceMaintenance3Properties.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxPerSetDescriptors:{byteOffset:16,byteLength:4},maxMemoryAllocationSize:{byteOffset:24,byteLength:8}};class VkPhysicalDeviceMaintenance3PropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000168e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceMaintenance3PropertiesKHR.pNext' isn't allowed to be filled")}get maxPerSetDescriptors(){return this.memoryViewUint32[4]}get maxMemoryAllocationSize(){return this.memoryViewBigUint64[3]}}VkPhysicalDeviceMaintenance3PropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceMaintenance3PropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkPhysicalDeviceMaintenance3PropertiesKHR.byteLength=32,VkPhysicalDeviceMaintenance3PropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxPerSetDescriptors:{byteOffset:16,byteLength:4},maxMemoryAllocationSize:{byteOffset:24,byteLength:8}};class VkDescriptorSetLayoutSupport{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000168001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000161004:break;default:throw new TypeError("Invalid type for 'VkDescriptorSetLayoutSupport.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get supported(){return 0!==this.memoryViewUint32[4]}}VkDescriptorSetLayoutSupport.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDescriptorSetLayoutSupport.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkDescriptorSetLayoutSupport.byteLength=24,VkDescriptorSetLayoutSupport.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},supported:{byteOffset:16,byteLength:4}};class VkDescriptorSetLayoutSupportKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000168001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000161004:break;default:throw new TypeError("Invalid type for 'VkDescriptorSetLayoutSupportKHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get supported(){return 0!==this.memoryViewUint32[4]}}VkDescriptorSetLayoutSupportKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDescriptorSetLayoutSupportKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkDescriptorSetLayoutSupportKHR.byteLength=24,VkDescriptorSetLayoutSupportKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},supported:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceShaderDrawParametersFeatures{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.shaderDrawParameters&&(this.shaderDrawParameters=e.shaderDrawParameters))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceShaderDrawParametersFeatures.pNext' isn't allowed to be filled")}get shaderDrawParameters(){return 0!==this.memoryViewUint32[4]}set shaderDrawParameters(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceShaderDrawParametersFeatures.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceShaderDrawParametersFeatures.prototype.reflect=function(e){},VkPhysicalDeviceShaderDrawParametersFeatures.byteLength=24,VkPhysicalDeviceShaderDrawParametersFeatures.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shaderDrawParameters:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceShaderDrawParameterFeatures{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=VkStructureType.VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.shaderDrawParameters&&(this.shaderDrawParameters=e.shaderDrawParameters))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceShaderDrawParameterFeatures.pNext' isn't allowed to be filled")}get shaderDrawParameters(){return 0!==this.memoryViewUint32[4]}set shaderDrawParameters(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceShaderDrawParameterFeatures.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceShaderDrawParameterFeatures.prototype.reflect=function(e){},VkPhysicalDeviceShaderDrawParameterFeatures.byteLength=24,VkPhysicalDeviceShaderDrawParameterFeatures.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shaderDrawParameters:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceFloat16Int8FeaturesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000082e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.shaderFloat16&&(this.shaderFloat16=e.shaderFloat16),void 0!==e.shaderInt8&&(this.shaderInt8=e.shaderInt8))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceFloat16Int8FeaturesKHR.pNext' isn't allowed to be filled")}get shaderFloat16(){return 0!==this.memoryViewUint32[4]}set shaderFloat16(e){this.memoryViewUint32[4]=0|e}get shaderInt8(){return 0!==this.memoryViewUint32[5]}set shaderInt8(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceFloat16Int8FeaturesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceFloat16Int8FeaturesKHR.prototype.reflect=function(e){},VkPhysicalDeviceFloat16Int8FeaturesKHR.byteLength=24,VkPhysicalDeviceFloat16Int8FeaturesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shaderFloat16:{byteOffset:16,byteLength:4},shaderInt8:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceFloatControlsPropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+88)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+88)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+88)/4)):(this.memoryBuffer=new ArrayBuffer(88),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000197e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceFloatControlsPropertiesKHR.pNext' isn't allowed to be filled")}get separateDenormSettings(){return 0!==this.memoryViewUint32[4]}get separateRoundingModeSettings(){return 0!==this.memoryViewUint32[5]}get shaderSignedZeroInfNanPreserveFloat16(){return 0!==this.memoryViewUint32[6]}get shaderSignedZeroInfNanPreserveFloat32(){return 0!==this.memoryViewUint32[7]}get shaderSignedZeroInfNanPreserveFloat64(){return 0!==this.memoryViewUint32[8]}get shaderDenormPreserveFloat16(){return 0!==this.memoryViewUint32[9]}get shaderDenormPreserveFloat32(){return 0!==this.memoryViewUint32[10]}get shaderDenormPreserveFloat64(){return 0!==this.memoryViewUint32[11]}get shaderDenormFlushToZeroFloat16(){return 0!==this.memoryViewUint32[12]}get shaderDenormFlushToZeroFloat32(){return 0!==this.memoryViewUint32[13]}get shaderDenormFlushToZeroFloat64(){return 0!==this.memoryViewUint32[14]}get shaderRoundingModeRTEFloat16(){return 0!==this.memoryViewUint32[15]}get shaderRoundingModeRTEFloat32(){return 0!==this.memoryViewUint32[16]}get shaderRoundingModeRTEFloat64(){return 0!==this.memoryViewUint32[17]}get shaderRoundingModeRTZFloat16(){return 0!==this.memoryViewUint32[18]}get shaderRoundingModeRTZFloat32(){return 0!==this.memoryViewUint32[19]}get shaderRoundingModeRTZFloat64(){return 0!==this.memoryViewUint32[20]}}VkPhysicalDeviceFloatControlsPropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceFloatControlsPropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(88)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,88),0)},VkPhysicalDeviceFloatControlsPropertiesKHR.byteLength=88,VkPhysicalDeviceFloatControlsPropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},separateDenormSettings:{byteOffset:16,byteLength:4},separateRoundingModeSettings:{byteOffset:20,byteLength:4},shaderSignedZeroInfNanPreserveFloat16:{byteOffset:24,byteLength:4},shaderSignedZeroInfNanPreserveFloat32:{byteOffset:28,byteLength:4},shaderSignedZeroInfNanPreserveFloat64:{byteOffset:32,byteLength:4},shaderDenormPreserveFloat16:{byteOffset:36,byteLength:4},shaderDenormPreserveFloat32:{byteOffset:40,byteLength:4},shaderDenormPreserveFloat64:{byteOffset:44,byteLength:4},shaderDenormFlushToZeroFloat16:{byteOffset:48,byteLength:4},shaderDenormFlushToZeroFloat32:{byteOffset:52,byteLength:4},shaderDenormFlushToZeroFloat64:{byteOffset:56,byteLength:4},shaderRoundingModeRTEFloat16:{byteOffset:60,byteLength:4},shaderRoundingModeRTEFloat32:{byteOffset:64,byteLength:4},shaderRoundingModeRTEFloat64:{byteOffset:68,byteLength:4},shaderRoundingModeRTZFloat16:{byteOffset:72,byteLength:4},shaderRoundingModeRTZFloat32:{byteOffset:76,byteLength:4},shaderRoundingModeRTZFloat64:{byteOffset:80,byteLength:4}};class VkPhysicalDeviceHostQueryResetFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000261e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.hostQueryReset&&(this.hostQueryReset=e.hostQueryReset))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceHostQueryResetFeaturesEXT.pNext' isn't allowed to be filled")}get hostQueryReset(){return 0!==this.memoryViewUint32[4]}set hostQueryReset(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceHostQueryResetFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceHostQueryResetFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceHostQueryResetFeaturesEXT.byteLength=24,VkPhysicalDeviceHostQueryResetFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},hostQueryReset:{byteOffset:16,byteLength:4}};class VkShaderResourceUsageAMD{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer))}get numUsedVgprs(){return this.memoryViewUint32[0]}get numUsedSgprs(){return this.memoryViewUint32[1]}get ldsSizePerLocalWorkGroup(){return this.memoryViewUint32[2]}get ldsUsageSizeInBytes(){return this.memoryViewBigInt64[2]}get scratchMemUsageInBytes(){return this.memoryViewBigInt64[3]}}VkShaderResourceUsageAMD.prototype.flush=function(){return!0},VkShaderResourceUsageAMD.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkShaderResourceUsageAMD.byteLength=32,VkShaderResourceUsageAMD.memoryLayout={numUsedVgprs:{byteOffset:0,byteLength:4},numUsedSgprs:{byteOffset:4,byteLength:4},ldsSizePerLocalWorkGroup:{byteOffset:8,byteLength:4},ldsUsageSizeInBytes:{byteOffset:16,byteLength:8},scratchMemUsageInBytes:{byteOffset:24,byteLength:8}};class VkShaderStatisticsInfoAMD{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4)):(this.memoryBuffer=new ArrayBuffer(72),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._resourceUsage=new VkShaderResourceUsageAMD({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+8}),this._computeWorkGroupSize=[...Array(3)].fill(0)}get shaderStageMask(){return this.memoryViewInt32[0]}get resourceUsage(){return this._resourceUsage}get numPhysicalVgprs(){return this.memoryViewUint32[10]}get numPhysicalSgprs(){return this.memoryViewUint32[11]}get numAvailableVgprs(){return this.memoryViewUint32[12]}get numAvailableSgprs(){return this.memoryViewUint32[13]}get computeWorkGroupSize(){return[this.memoryViewUint32[14],this.memoryViewUint32[15],this.memoryViewUint32[16]]}}VkShaderStatisticsInfoAMD.prototype.flush=function(){return!0},VkShaderStatisticsInfoAMD.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(72)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,72),0)},VkShaderStatisticsInfoAMD.byteLength=72,VkShaderStatisticsInfoAMD.memoryLayout={shaderStageMask:{byteOffset:0,byteLength:4},resourceUsage:{byteOffset:8,byteLength:32},numPhysicalVgprs:{byteOffset:40,byteLength:4},numPhysicalSgprs:{byteOffset:44,byteLength:4},numAvailableVgprs:{byteOffset:48,byteLength:4},numAvailableSgprs:{byteOffset:52,byteLength:4},computeWorkGroupSize:{byteOffset:56,byteLength:12}};class VkDeviceQueueGlobalPriorityCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000174e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.globalPriority&&(this.globalPriority=e.globalPriority))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceQueueGlobalPriorityCreateInfoEXT.pNext' isn't allowed to be filled")}get globalPriority(){return this.memoryViewInt32[4]}set globalPriority(e){this.memoryViewInt32[4]=e}}VkDeviceQueueGlobalPriorityCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceQueueGlobalPriorityCreateInfoEXT.prototype.reflect=function(e){},VkDeviceQueueGlobalPriorityCreateInfoEXT.byteLength=24,VkDeviceQueueGlobalPriorityCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},globalPriority:{byteOffset:16,byteLength:4}};class VkDebugUtilsObjectNameInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._pObjectName=null,this.sType=1000128e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.objectType&&(this.objectType=e.objectType),void 0!==e.objectHandle&&(this.objectHandle=e.objectHandle),void 0!==e.pObjectName&&(this.pObjectName=e.pObjectName))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDebugUtilsObjectNameInfoEXT.pNext' isn't allowed to be filled")}get objectType(){return this.memoryViewInt32[4]}set objectType(e){this.memoryViewInt32[4]=e}get objectHandle(){return this.memoryViewBigUint64[3]}set objectHandle(e){this.memoryViewBigUint64[3]=BigInt(e)}get pObjectName(){if(null!==this._pObjectName){let e=textDecoder.decode(this._pObjectName);return e.substr(0,e.length-1)}return null}set pObjectName(e){null!==e?(this._pObjectName=textEncoder.encode(e+NULLT).buffer,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(this._pObjectName)):null===e&&(this._pObjectName=null,this.memoryViewBigInt64[4]=BI0)}}VkDebugUtilsObjectNameInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDebugUtilsObjectNameInfoEXT.prototype.reflect=function(e){},VkDebugUtilsObjectNameInfoEXT.byteLength=40,VkDebugUtilsObjectNameInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},objectType:{byteOffset:16,byteLength:4},objectHandle:{byteOffset:24,byteLength:8},pObjectName:{byteOffset:32,byteLength:8}};class VkDebugUtilsObjectTagInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._pTag=null,this.sType=1000128001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.objectType&&(this.objectType=e.objectType),void 0!==e.objectHandle&&(this.objectHandle=e.objectHandle),void 0!==e.tagName&&(this.tagName=e.tagName),void 0!==e.tagSize&&(this.tagSize=e.tagSize),void 0!==e.pTag&&(this.pTag=e.pTag))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDebugUtilsObjectTagInfoEXT.pNext' isn't allowed to be filled")}get objectType(){return this.memoryViewInt32[4]}set objectType(e){this.memoryViewInt32[4]=e}get objectHandle(){return this.memoryViewBigUint64[3]}set objectHandle(e){this.memoryViewBigUint64[3]=BigInt(e)}get tagName(){return this.memoryViewBigUint64[4]}set tagName(e){this.memoryViewBigUint64[4]=BigInt(e)}get tagSize(){return this.memoryViewBigInt64[5]}set tagSize(e){this.memoryViewBigInt64[5]=BigInt(e)}get pTag(){return this._pTag}set pTag(e){null!==e?(this._pTag=e,this.memoryViewBigInt64[6]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pTag=null,this.memoryViewBigInt64[6]=BI0)}}VkDebugUtilsObjectTagInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDebugUtilsObjectTagInfoEXT.prototype.reflect=function(e){},VkDebugUtilsObjectTagInfoEXT.byteLength=56,VkDebugUtilsObjectTagInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},objectType:{byteOffset:16,byteLength:4},objectHandle:{byteOffset:24,byteLength:8},tagName:{byteOffset:32,byteLength:8},tagSize:{byteOffset:40,byteLength:8},pTag:{byteOffset:48,byteLength:8}};class VkDebugUtilsLabelEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),this._pNext=null,this._pLabelName=null,this._color=[...Array(4)].fill(0),this.sType=1000128002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.pLabelName&&(this.pLabelName=e.pLabelName),void 0!==e.color&&(this.color=e.color))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDebugUtilsLabelEXT.pNext' isn't allowed to be filled")}get pLabelName(){if(null!==this._pLabelName){let e=textDecoder.decode(this._pLabelName);return e.substr(0,e.length-1)}return null}set pLabelName(e){null!==e?(this._pLabelName=textEncoder.encode(e+NULLT).buffer,this.memoryViewBigInt64[2]=getAddressFromArrayBuffer(this._pLabelName)):null===e&&(this._pLabelName=null,this.memoryViewBigInt64[2]=BI0)}get color(){return this._color}set color(e){null!==e?this._color=e:null===e&&(this._color=null)}}VkDebugUtilsLabelEXT.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._color){let e=this._color;for(let t=0;t<e.length;++t)this.memoryViewFloat32[6+t]=e[t]}else this.memoryViewFloat32[6]=0;return!0},VkDebugUtilsLabelEXT.prototype.reflect=function(e){},VkDebugUtilsLabelEXT.byteLength=40,VkDebugUtilsLabelEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},pLabelName:{byteOffset:16,byteLength:8},color:{byteOffset:24,byteLength:16}};class VkDebugUtilsMessengerCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._pfnUserCallback=null,this._pUserData=null,this.sType=1000128004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.messageSeverity&&(this.messageSeverity=e.messageSeverity),void 0!==e.messageType&&(this.messageType=e.messageType),void 0!==e.pfnUserCallback&&(this.pfnUserCallback=e.pfnUserCallback),void 0!==e.pUserData&&(this.pUserData=e.pUserData))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDebugUtilsMessengerCreateInfoEXT.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get messageSeverity(){return this.memoryViewInt32[5]}set messageSeverity(e){this.memoryViewInt32[5]=e}get messageType(){return this.memoryViewInt32[6]}set messageType(e){this.memoryViewInt32[6]=e}get pfnUserCallback(){return this._pfnUserCallback}set pfnUserCallback(e){null!==e?this._pfnUserCallback=e:null===e&&(this._pfnUserCallback=null)}get pUserData(){return this._pUserData}set pUserData(e){null!==e?(this._pUserData=e,this.memoryViewBigInt64[5]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pUserData=null,this.memoryViewBigInt64[5]=BI0)}}VkDebugUtilsMessengerCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDebugUtilsMessengerCreateInfoEXT.prototype.reflect=function(e){},VkDebugUtilsMessengerCreateInfoEXT.byteLength=48,VkDebugUtilsMessengerCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},messageSeverity:{byteOffset:20,byteLength:4},messageType:{byteOffset:24,byteLength:4},pfnUserCallback:{byteOffset:32,byteLength:8},pUserData:{byteOffset:40,byteLength:8}};class VkDebugUtilsMessengerCallbackDataEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+96)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+96)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+96)/4)):(this.memoryBuffer=new ArrayBuffer(96),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pMessageIdName=null,this._pMessage=null,this._pQueueLabels=null,this._pQueueLabelsNative=null,this._pCmdBufLabels=null,this._pCmdBufLabelsNative=null,this._pObjects=null,this._pObjectsNative=null,this.sType=1000128003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.pMessageIdName&&(this.pMessageIdName=e.pMessageIdName),void 0!==e.messageIdNumber&&(this.messageIdNumber=e.messageIdNumber),void 0!==e.pMessage&&(this.pMessage=e.pMessage),void 0!==e.queueLabelCount&&(this.queueLabelCount=e.queueLabelCount),void 0!==e.pQueueLabels&&(this.pQueueLabels=e.pQueueLabels),void 0!==e.cmdBufLabelCount&&(this.cmdBufLabelCount=e.cmdBufLabelCount),void 0!==e.pCmdBufLabels&&(this.pCmdBufLabels=e.pCmdBufLabels),void 0!==e.objectCount&&(this.objectCount=e.objectCount),void 0!==e.pObjects&&(this.pObjects=e.pObjects))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDebugUtilsMessengerCallbackDataEXT.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get pMessageIdName(){if(null!==this._pMessageIdName){let e=textDecoder.decode(this._pMessageIdName);return e.substr(0,e.length-1)}return null}set pMessageIdName(e){null!==e?(this._pMessageIdName=textEncoder.encode(e+NULLT).buffer,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(this._pMessageIdName)):null===e&&(this._pMessageIdName=null,this.memoryViewBigInt64[3]=BI0)}get messageIdNumber(){return this.memoryViewInt32[8]}set messageIdNumber(e){this.memoryViewInt32[8]=e}get pMessage(){if(null!==this._pMessage){let e=textDecoder.decode(this._pMessage);return e.substr(0,e.length-1)}return null}set pMessage(e){null!==e?(this._pMessage=textEncoder.encode(e+NULLT).buffer,this.memoryViewBigInt64[5]=getAddressFromArrayBuffer(this._pMessage)):null===e&&(this._pMessage=null,this.memoryViewBigInt64[5]=BI0)}get queueLabelCount(){return this.memoryViewUint32[12]}set queueLabelCount(e){this.memoryViewUint32[12]=e}get pQueueLabels(){return this._pQueueLabels}set pQueueLabels(e){null!==e?this._pQueueLabels=e:null===e&&(this._pQueueLabels=null)}get cmdBufLabelCount(){return this.memoryViewUint32[16]}set cmdBufLabelCount(e){this.memoryViewUint32[16]=e}get pCmdBufLabels(){return this._pCmdBufLabels}set pCmdBufLabels(e){null!==e?this._pCmdBufLabels=e:null===e&&(this._pCmdBufLabels=null)}get objectCount(){return this.memoryViewUint32[20]}set objectCount(e){this.memoryViewUint32[20]=e}get pObjects(){return this._pObjects}set pObjects(e){null!==e?this._pObjects=e:null===e&&(this._pObjects=null)}}VkDebugUtilsMessengerCallbackDataEXT.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pQueueLabels){let e=this._pQueueLabels;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pQueueLabelsNative=t,this.memoryViewBigInt64[7]=t.address}if(null!==this._pCmdBufLabels){let e=this._pCmdBufLabels;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pCmdBufLabelsNative=t,this.memoryViewBigInt64[9]=t.address}if(null!==this._pObjects){let e=this._pObjects;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pObjectsNative=t,this.memoryViewBigInt64[11]=t.address}return!0},VkDebugUtilsMessengerCallbackDataEXT.prototype.reflect=function(e){},VkDebugUtilsMessengerCallbackDataEXT.byteLength=96,VkDebugUtilsMessengerCallbackDataEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},pMessageIdName:{byteOffset:24,byteLength:8},messageIdNumber:{byteOffset:32,byteLength:4},pMessage:{byteOffset:40,byteLength:8},queueLabelCount:{byteOffset:48,byteLength:4},pQueueLabels:{byteOffset:56,byteLength:8},cmdBufLabelCount:{byteOffset:64,byteLength:4},pCmdBufLabels:{byteOffset:72,byteLength:8},objectCount:{byteOffset:80,byteLength:4},pObjects:{byteOffset:88,byteLength:8}};class VkImportMemoryHostPointerInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._pHostPointer=null,this.sType=1000178e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.handleType&&(this.handleType=e.handleType),void 0!==e.pHostPointer&&(this.pHostPointer=e.pHostPointer))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImportMemoryHostPointerInfoEXT.pNext' isn't allowed to be filled")}get handleType(){return this.memoryViewInt32[4]}set handleType(e){this.memoryViewInt32[4]=e}get pHostPointer(){return this._pHostPointer}set pHostPointer(e){null!==e?(this._pHostPointer=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pHostPointer=null,this.memoryViewBigInt64[3]=BI0)}}VkImportMemoryHostPointerInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImportMemoryHostPointerInfoEXT.prototype.reflect=function(e){},VkImportMemoryHostPointerInfoEXT.byteLength=32,VkImportMemoryHostPointerInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},handleType:{byteOffset:16,byteLength:4},pHostPointer:{byteOffset:24,byteLength:8}};class VkMemoryHostPointerPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000178001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMemoryHostPointerPropertiesEXT.pNext' isn't allowed to be filled")}get memoryTypeBits(){return this.memoryViewUint32[4]}}VkMemoryHostPointerPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryHostPointerPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkMemoryHostPointerPropertiesEXT.byteLength=24,VkMemoryHostPointerPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},memoryTypeBits:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceExternalMemoryHostPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000178002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceExternalMemoryHostPropertiesEXT.pNext' isn't allowed to be filled")}get minImportedHostPointerAlignment(){return this.memoryViewBigUint64[2]}}VkPhysicalDeviceExternalMemoryHostPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceExternalMemoryHostPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkPhysicalDeviceExternalMemoryHostPropertiesEXT.byteLength=24,VkPhysicalDeviceExternalMemoryHostPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},minImportedHostPointerAlignment:{byteOffset:16,byteLength:8}};class VkPhysicalDeviceConservativeRasterizationPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000101e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceConservativeRasterizationPropertiesEXT.pNext' isn't allowed to be filled")}get primitiveOverestimationSize(){return this.memoryViewFloat32[4]}get maxExtraPrimitiveOverestimationSize(){return this.memoryViewFloat32[5]}get extraPrimitiveOverestimationSizeGranularity(){return this.memoryViewFloat32[6]}get primitiveUnderestimation(){return 0!==this.memoryViewUint32[7]}get conservativePointAndLineRasterization(){return 0!==this.memoryViewUint32[8]}get degenerateTrianglesRasterized(){return 0!==this.memoryViewUint32[9]}get degenerateLinesRasterized(){return 0!==this.memoryViewUint32[10]}get fullyCoveredFragmentShaderInputVariable(){return 0!==this.memoryViewUint32[11]}get conservativeRasterizationPostDepthCoverage(){return 0!==this.memoryViewUint32[12]}}VkPhysicalDeviceConservativeRasterizationPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceConservativeRasterizationPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(56)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,56),0)},VkPhysicalDeviceConservativeRasterizationPropertiesEXT.byteLength=56,VkPhysicalDeviceConservativeRasterizationPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},primitiveOverestimationSize:{byteOffset:16,byteLength:4},maxExtraPrimitiveOverestimationSize:{byteOffset:20,byteLength:4},extraPrimitiveOverestimationSizeGranularity:{byteOffset:24,byteLength:4},primitiveUnderestimation:{byteOffset:28,byteLength:4},conservativePointAndLineRasterization:{byteOffset:32,byteLength:4},degenerateTrianglesRasterized:{byteOffset:36,byteLength:4},degenerateLinesRasterized:{byteOffset:40,byteLength:4},fullyCoveredFragmentShaderInputVariable:{byteOffset:44,byteLength:4},conservativeRasterizationPostDepthCoverage:{byteOffset:48,byteLength:4}};class VkCalibratedTimestampInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000184e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.timeDomain&&(this.timeDomain=e.timeDomain))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkCalibratedTimestampInfoEXT.pNext' isn't allowed to be filled")}get timeDomain(){return this.memoryViewInt32[4]}set timeDomain(e){this.memoryViewInt32[4]=e}}VkCalibratedTimestampInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkCalibratedTimestampInfoEXT.prototype.reflect=function(e){},VkCalibratedTimestampInfoEXT.byteLength=24,VkCalibratedTimestampInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},timeDomain:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceShaderCorePropertiesAMD{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+72)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+72)/4)):(this.memoryBuffer=new ArrayBuffer(72),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000185e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceShaderCorePropertiesAMD.pNext' isn't allowed to be filled")}get shaderEngineCount(){return this.memoryViewUint32[4]}get shaderArraysPerEngineCount(){return this.memoryViewUint32[5]}get computeUnitsPerShaderArray(){return this.memoryViewUint32[6]}get simdPerComputeUnit(){return this.memoryViewUint32[7]}get wavefrontsPerSimd(){return this.memoryViewUint32[8]}get wavefrontSize(){return this.memoryViewUint32[9]}get sgprsPerSimd(){return this.memoryViewUint32[10]}get minSgprAllocation(){return this.memoryViewUint32[11]}get maxSgprAllocation(){return this.memoryViewUint32[12]}get sgprAllocationGranularity(){return this.memoryViewUint32[13]}get vgprsPerSimd(){return this.memoryViewUint32[14]}get minVgprAllocation(){return this.memoryViewUint32[15]}get maxVgprAllocation(){return this.memoryViewUint32[16]}get vgprAllocationGranularity(){return this.memoryViewUint32[17]}}VkPhysicalDeviceShaderCorePropertiesAMD.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceShaderCorePropertiesAMD.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(72)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,72),0)},VkPhysicalDeviceShaderCorePropertiesAMD.byteLength=72,VkPhysicalDeviceShaderCorePropertiesAMD.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shaderEngineCount:{byteOffset:16,byteLength:4},shaderArraysPerEngineCount:{byteOffset:20,byteLength:4},computeUnitsPerShaderArray:{byteOffset:24,byteLength:4},simdPerComputeUnit:{byteOffset:28,byteLength:4},wavefrontsPerSimd:{byteOffset:32,byteLength:4},wavefrontSize:{byteOffset:36,byteLength:4},sgprsPerSimd:{byteOffset:40,byteLength:4},minSgprAllocation:{byteOffset:44,byteLength:4},maxSgprAllocation:{byteOffset:48,byteLength:4},sgprAllocationGranularity:{byteOffset:52,byteLength:4},vgprsPerSimd:{byteOffset:56,byteLength:4},minVgprAllocation:{byteOffset:60,byteLength:4},maxVgprAllocation:{byteOffset:64,byteLength:4},vgprAllocationGranularity:{byteOffset:68,byteLength:4}};class VkPipelineRasterizationConservativeStateCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000101001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.conservativeRasterizationMode&&(this.conservativeRasterizationMode=e.conservativeRasterizationMode),void 0!==e.extraPrimitiveOverestimationSize&&(this.extraPrimitiveOverestimationSize=e.extraPrimitiveOverestimationSize))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineRasterizationConservativeStateCreateInfoEXT.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get conservativeRasterizationMode(){return this.memoryViewInt32[5]}set conservativeRasterizationMode(e){this.memoryViewInt32[5]=e}get extraPrimitiveOverestimationSize(){return this.memoryViewFloat32[6]}set extraPrimitiveOverestimationSize(e){this.memoryViewFloat32[6]=e}}VkPipelineRasterizationConservativeStateCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineRasterizationConservativeStateCreateInfoEXT.prototype.reflect=function(e){},VkPipelineRasterizationConservativeStateCreateInfoEXT.byteLength=32,VkPipelineRasterizationConservativeStateCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},conservativeRasterizationMode:{byteOffset:20,byteLength:4},extraPrimitiveOverestimationSize:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceDescriptorIndexingFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+96)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+96)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+96)/4)):(this.memoryBuffer=new ArrayBuffer(96),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000161001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.shaderInputAttachmentArrayDynamicIndexing&&(this.shaderInputAttachmentArrayDynamicIndexing=e.shaderInputAttachmentArrayDynamicIndexing),void 0!==e.shaderUniformTexelBufferArrayDynamicIndexing&&(this.shaderUniformTexelBufferArrayDynamicIndexing=e.shaderUniformTexelBufferArrayDynamicIndexing),void 0!==e.shaderStorageTexelBufferArrayDynamicIndexing&&(this.shaderStorageTexelBufferArrayDynamicIndexing=e.shaderStorageTexelBufferArrayDynamicIndexing),void 0!==e.shaderUniformBufferArrayNonUniformIndexing&&(this.shaderUniformBufferArrayNonUniformIndexing=e.shaderUniformBufferArrayNonUniformIndexing),void 0!==e.shaderSampledImageArrayNonUniformIndexing&&(this.shaderSampledImageArrayNonUniformIndexing=e.shaderSampledImageArrayNonUniformIndexing),void 0!==e.shaderStorageBufferArrayNonUniformIndexing&&(this.shaderStorageBufferArrayNonUniformIndexing=e.shaderStorageBufferArrayNonUniformIndexing),void 0!==e.shaderStorageImageArrayNonUniformIndexing&&(this.shaderStorageImageArrayNonUniformIndexing=e.shaderStorageImageArrayNonUniformIndexing),void 0!==e.shaderInputAttachmentArrayNonUniformIndexing&&(this.shaderInputAttachmentArrayNonUniformIndexing=e.shaderInputAttachmentArrayNonUniformIndexing),void 0!==e.shaderUniformTexelBufferArrayNonUniformIndexing&&(this.shaderUniformTexelBufferArrayNonUniformIndexing=e.shaderUniformTexelBufferArrayNonUniformIndexing),void 0!==e.shaderStorageTexelBufferArrayNonUniformIndexing&&(this.shaderStorageTexelBufferArrayNonUniformIndexing=e.shaderStorageTexelBufferArrayNonUniformIndexing),void 0!==e.descriptorBindingUniformBufferUpdateAfterBind&&(this.descriptorBindingUniformBufferUpdateAfterBind=e.descriptorBindingUniformBufferUpdateAfterBind),void 0!==e.descriptorBindingSampledImageUpdateAfterBind&&(this.descriptorBindingSampledImageUpdateAfterBind=e.descriptorBindingSampledImageUpdateAfterBind),void 0!==e.descriptorBindingStorageImageUpdateAfterBind&&(this.descriptorBindingStorageImageUpdateAfterBind=e.descriptorBindingStorageImageUpdateAfterBind),void 0!==e.descriptorBindingStorageBufferUpdateAfterBind&&(this.descriptorBindingStorageBufferUpdateAfterBind=e.descriptorBindingStorageBufferUpdateAfterBind),void 0!==e.descriptorBindingUniformTexelBufferUpdateAfterBind&&(this.descriptorBindingUniformTexelBufferUpdateAfterBind=e.descriptorBindingUniformTexelBufferUpdateAfterBind),void 0!==e.descriptorBindingStorageTexelBufferUpdateAfterBind&&(this.descriptorBindingStorageTexelBufferUpdateAfterBind=e.descriptorBindingStorageTexelBufferUpdateAfterBind),void 0!==e.descriptorBindingUpdateUnusedWhilePending&&(this.descriptorBindingUpdateUnusedWhilePending=e.descriptorBindingUpdateUnusedWhilePending),void 0!==e.descriptorBindingPartiallyBound&&(this.descriptorBindingPartiallyBound=e.descriptorBindingPartiallyBound),void 0!==e.descriptorBindingVariableDescriptorCount&&(this.descriptorBindingVariableDescriptorCount=e.descriptorBindingVariableDescriptorCount),void 0!==e.runtimeDescriptorArray&&(this.runtimeDescriptorArray=e.runtimeDescriptorArray))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceDescriptorIndexingFeaturesEXT.pNext' isn't allowed to be filled")}get shaderInputAttachmentArrayDynamicIndexing(){return 0!==this.memoryViewUint32[4]}set shaderInputAttachmentArrayDynamicIndexing(e){this.memoryViewUint32[4]=0|e}get shaderUniformTexelBufferArrayDynamicIndexing(){return 0!==this.memoryViewUint32[5]}set shaderUniformTexelBufferArrayDynamicIndexing(e){this.memoryViewUint32[5]=0|e}get shaderStorageTexelBufferArrayDynamicIndexing(){return 0!==this.memoryViewUint32[6]}set shaderStorageTexelBufferArrayDynamicIndexing(e){this.memoryViewUint32[6]=0|e}get shaderUniformBufferArrayNonUniformIndexing(){return 0!==this.memoryViewUint32[7]}set shaderUniformBufferArrayNonUniformIndexing(e){this.memoryViewUint32[7]=0|e}get shaderSampledImageArrayNonUniformIndexing(){return 0!==this.memoryViewUint32[8]}set shaderSampledImageArrayNonUniformIndexing(e){this.memoryViewUint32[8]=0|e}get shaderStorageBufferArrayNonUniformIndexing(){return 0!==this.memoryViewUint32[9]}set shaderStorageBufferArrayNonUniformIndexing(e){this.memoryViewUint32[9]=0|e}get shaderStorageImageArrayNonUniformIndexing(){return 0!==this.memoryViewUint32[10]}set shaderStorageImageArrayNonUniformIndexing(e){this.memoryViewUint32[10]=0|e}get shaderInputAttachmentArrayNonUniformIndexing(){return 0!==this.memoryViewUint32[11]}set shaderInputAttachmentArrayNonUniformIndexing(e){this.memoryViewUint32[11]=0|e}get shaderUniformTexelBufferArrayNonUniformIndexing(){return 0!==this.memoryViewUint32[12]}set shaderUniformTexelBufferArrayNonUniformIndexing(e){this.memoryViewUint32[12]=0|e}get shaderStorageTexelBufferArrayNonUniformIndexing(){return 0!==this.memoryViewUint32[13]}set shaderStorageTexelBufferArrayNonUniformIndexing(e){this.memoryViewUint32[13]=0|e}get descriptorBindingUniformBufferUpdateAfterBind(){return 0!==this.memoryViewUint32[14]}set descriptorBindingUniformBufferUpdateAfterBind(e){this.memoryViewUint32[14]=0|e}get descriptorBindingSampledImageUpdateAfterBind(){return 0!==this.memoryViewUint32[15]}set descriptorBindingSampledImageUpdateAfterBind(e){this.memoryViewUint32[15]=0|e}get descriptorBindingStorageImageUpdateAfterBind(){return 0!==this.memoryViewUint32[16]}set descriptorBindingStorageImageUpdateAfterBind(e){this.memoryViewUint32[16]=0|e}get descriptorBindingStorageBufferUpdateAfterBind(){return 0!==this.memoryViewUint32[17]}set descriptorBindingStorageBufferUpdateAfterBind(e){this.memoryViewUint32[17]=0|e}get descriptorBindingUniformTexelBufferUpdateAfterBind(){return 0!==this.memoryViewUint32[18]}set descriptorBindingUniformTexelBufferUpdateAfterBind(e){this.memoryViewUint32[18]=0|e}get descriptorBindingStorageTexelBufferUpdateAfterBind(){return 0!==this.memoryViewUint32[19]}set descriptorBindingStorageTexelBufferUpdateAfterBind(e){this.memoryViewUint32[19]=0|e}get descriptorBindingUpdateUnusedWhilePending(){return 0!==this.memoryViewUint32[20]}set descriptorBindingUpdateUnusedWhilePending(e){this.memoryViewUint32[20]=0|e}get descriptorBindingPartiallyBound(){return 0!==this.memoryViewUint32[21]}set descriptorBindingPartiallyBound(e){this.memoryViewUint32[21]=0|e}get descriptorBindingVariableDescriptorCount(){return 0!==this.memoryViewUint32[22]}set descriptorBindingVariableDescriptorCount(e){this.memoryViewUint32[22]=0|e}get runtimeDescriptorArray(){return 0!==this.memoryViewUint32[23]}set runtimeDescriptorArray(e){this.memoryViewUint32[23]=0|e}}VkPhysicalDeviceDescriptorIndexingFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceDescriptorIndexingFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceDescriptorIndexingFeaturesEXT.byteLength=96,VkPhysicalDeviceDescriptorIndexingFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shaderInputAttachmentArrayDynamicIndexing:{byteOffset:16,byteLength:4},shaderUniformTexelBufferArrayDynamicIndexing:{byteOffset:20,byteLength:4},shaderStorageTexelBufferArrayDynamicIndexing:{byteOffset:24,byteLength:4},shaderUniformBufferArrayNonUniformIndexing:{byteOffset:28,byteLength:4},shaderSampledImageArrayNonUniformIndexing:{byteOffset:32,byteLength:4},shaderStorageBufferArrayNonUniformIndexing:{byteOffset:36,byteLength:4},shaderStorageImageArrayNonUniformIndexing:{byteOffset:40,byteLength:4},shaderInputAttachmentArrayNonUniformIndexing:{byteOffset:44,byteLength:4},shaderUniformTexelBufferArrayNonUniformIndexing:{byteOffset:48,byteLength:4},shaderStorageTexelBufferArrayNonUniformIndexing:{byteOffset:52,byteLength:4},descriptorBindingUniformBufferUpdateAfterBind:{byteOffset:56,byteLength:4},descriptorBindingSampledImageUpdateAfterBind:{byteOffset:60,byteLength:4},descriptorBindingStorageImageUpdateAfterBind:{byteOffset:64,byteLength:4},descriptorBindingStorageBufferUpdateAfterBind:{byteOffset:68,byteLength:4},descriptorBindingUniformTexelBufferUpdateAfterBind:{byteOffset:72,byteLength:4},descriptorBindingStorageTexelBufferUpdateAfterBind:{byteOffset:76,byteLength:4},descriptorBindingUpdateUnusedWhilePending:{byteOffset:80,byteLength:4},descriptorBindingPartiallyBound:{byteOffset:84,byteLength:4},descriptorBindingVariableDescriptorCount:{byteOffset:88,byteLength:4},runtimeDescriptorArray:{byteOffset:92,byteLength:4}};class VkPhysicalDeviceDescriptorIndexingPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+112)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+112)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+112)/4)):(this.memoryBuffer=new ArrayBuffer(112),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000161002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceDescriptorIndexingPropertiesEXT.pNext' isn't allowed to be filled")}get maxUpdateAfterBindDescriptorsInAllPools(){return this.memoryViewUint32[4]}get shaderUniformBufferArrayNonUniformIndexingNative(){return 0!==this.memoryViewUint32[5]}get shaderSampledImageArrayNonUniformIndexingNative(){return 0!==this.memoryViewUint32[6]}get shaderStorageBufferArrayNonUniformIndexingNative(){return 0!==this.memoryViewUint32[7]}get shaderStorageImageArrayNonUniformIndexingNative(){return 0!==this.memoryViewUint32[8]}get shaderInputAttachmentArrayNonUniformIndexingNative(){return 0!==this.memoryViewUint32[9]}get robustBufferAccessUpdateAfterBind(){return 0!==this.memoryViewUint32[10]}get quadDivergentImplicitLod(){return 0!==this.memoryViewUint32[11]}get maxPerStageDescriptorUpdateAfterBindSamplers(){return this.memoryViewUint32[12]}get maxPerStageDescriptorUpdateAfterBindUniformBuffers(){return this.memoryViewUint32[13]}get maxPerStageDescriptorUpdateAfterBindStorageBuffers(){return this.memoryViewUint32[14]}get maxPerStageDescriptorUpdateAfterBindSampledImages(){return this.memoryViewUint32[15]}get maxPerStageDescriptorUpdateAfterBindStorageImages(){return this.memoryViewUint32[16]}get maxPerStageDescriptorUpdateAfterBindInputAttachments(){return this.memoryViewUint32[17]}get maxPerStageUpdateAfterBindResources(){return this.memoryViewUint32[18]}get maxDescriptorSetUpdateAfterBindSamplers(){return this.memoryViewUint32[19]}get maxDescriptorSetUpdateAfterBindUniformBuffers(){return this.memoryViewUint32[20]}get maxDescriptorSetUpdateAfterBindUniformBuffersDynamic(){return this.memoryViewUint32[21]}get maxDescriptorSetUpdateAfterBindStorageBuffers(){return this.memoryViewUint32[22]}get maxDescriptorSetUpdateAfterBindStorageBuffersDynamic(){return this.memoryViewUint32[23]}get maxDescriptorSetUpdateAfterBindSampledImages(){return this.memoryViewUint32[24]}get maxDescriptorSetUpdateAfterBindStorageImages(){return this.memoryViewUint32[25]}get maxDescriptorSetUpdateAfterBindInputAttachments(){return this.memoryViewUint32[26]}}VkPhysicalDeviceDescriptorIndexingPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceDescriptorIndexingPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(112)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,112),0)},VkPhysicalDeviceDescriptorIndexingPropertiesEXT.byteLength=112,VkPhysicalDeviceDescriptorIndexingPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxUpdateAfterBindDescriptorsInAllPools:{byteOffset:16,byteLength:4},shaderUniformBufferArrayNonUniformIndexingNative:{byteOffset:20,byteLength:4},shaderSampledImageArrayNonUniformIndexingNative:{byteOffset:24,byteLength:4},shaderStorageBufferArrayNonUniformIndexingNative:{byteOffset:28,byteLength:4},shaderStorageImageArrayNonUniformIndexingNative:{byteOffset:32,byteLength:4},shaderInputAttachmentArrayNonUniformIndexingNative:{byteOffset:36,byteLength:4},robustBufferAccessUpdateAfterBind:{byteOffset:40,byteLength:4},quadDivergentImplicitLod:{byteOffset:44,byteLength:4},maxPerStageDescriptorUpdateAfterBindSamplers:{byteOffset:48,byteLength:4},maxPerStageDescriptorUpdateAfterBindUniformBuffers:{byteOffset:52,byteLength:4},maxPerStageDescriptorUpdateAfterBindStorageBuffers:{byteOffset:56,byteLength:4},maxPerStageDescriptorUpdateAfterBindSampledImages:{byteOffset:60,byteLength:4},maxPerStageDescriptorUpdateAfterBindStorageImages:{byteOffset:64,byteLength:4},maxPerStageDescriptorUpdateAfterBindInputAttachments:{byteOffset:68,byteLength:4},maxPerStageUpdateAfterBindResources:{byteOffset:72,byteLength:4},maxDescriptorSetUpdateAfterBindSamplers:{byteOffset:76,byteLength:4},maxDescriptorSetUpdateAfterBindUniformBuffers:{byteOffset:80,byteLength:4},maxDescriptorSetUpdateAfterBindUniformBuffersDynamic:{byteOffset:84,byteLength:4},maxDescriptorSetUpdateAfterBindStorageBuffers:{byteOffset:88,byteLength:4},maxDescriptorSetUpdateAfterBindStorageBuffersDynamic:{byteOffset:92,byteLength:4},maxDescriptorSetUpdateAfterBindSampledImages:{byteOffset:96,byteLength:4},maxDescriptorSetUpdateAfterBindStorageImages:{byteOffset:100,byteLength:4},maxDescriptorSetUpdateAfterBindInputAttachments:{byteOffset:104,byteLength:4}};class VkDescriptorSetLayoutBindingFlagsCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pBindingFlags=null,this.sType=1000161e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.bindingCount&&(this.bindingCount=e.bindingCount),void 0!==e.pBindingFlags&&(this.pBindingFlags=e.pBindingFlags))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.pNext' isn't allowed to be filled")}get bindingCount(){return this.memoryViewUint32[4]}set bindingCount(e){this.memoryViewUint32[4]=e}get pBindingFlags(){return this._pBindingFlags}set pBindingFlags(e){null!==e?(this._pBindingFlags=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pBindingFlags=null,this.memoryViewBigInt64[3]=BI0)}}VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.prototype.reflect=function(e){},VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.byteLength=32,VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},bindingCount:{byteOffset:16,byteLength:4},pBindingFlags:{byteOffset:24,byteLength:8}};class VkDescriptorSetVariableDescriptorCountAllocateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDescriptorCounts=null,this.sType=1000161003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.descriptorSetCount&&(this.descriptorSetCount=e.descriptorSetCount),void 0!==e.pDescriptorCounts&&(this.pDescriptorCounts=e.pDescriptorCounts))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.pNext' isn't allowed to be filled")}get descriptorSetCount(){return this.memoryViewUint32[4]}set descriptorSetCount(e){this.memoryViewUint32[4]=e}get pDescriptorCounts(){return this._pDescriptorCounts}set pDescriptorCounts(e){null!==e?(this._pDescriptorCounts=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pDescriptorCounts=null,this.memoryViewBigInt64[3]=BI0)}}VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.prototype.reflect=function(e){},VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.byteLength=32,VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},descriptorSetCount:{byteOffset:16,byteLength:4},pDescriptorCounts:{byteOffset:24,byteLength:8}};class VkDescriptorSetVariableDescriptorCountLayoutSupportEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000161004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.pNext' isn't allowed to be filled")}get maxVariableDescriptorCount(){return this.memoryViewUint32[4]}}VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.byteLength=24,VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxVariableDescriptorCount:{byteOffset:16,byteLength:4}};class VkAttachmentDescription2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000109e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.format&&(this.format=e.format),void 0!==e.samples&&(this.samples=e.samples),void 0!==e.loadOp&&(this.loadOp=e.loadOp),void 0!==e.storeOp&&(this.storeOp=e.storeOp),void 0!==e.stencilLoadOp&&(this.stencilLoadOp=e.stencilLoadOp),void 0!==e.stencilStoreOp&&(this.stencilStoreOp=e.stencilStoreOp),void 0!==e.initialLayout&&(this.initialLayout=e.initialLayout),void 0!==e.finalLayout&&(this.finalLayout=e.finalLayout))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkAttachmentDescription2KHR.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get format(){return this.memoryViewInt32[5]}set format(e){this.memoryViewInt32[5]=e}get samples(){return this.memoryViewInt32[6]}set samples(e){this.memoryViewInt32[6]=e}get loadOp(){return this.memoryViewInt32[7]}set loadOp(e){this.memoryViewInt32[7]=e}get storeOp(){return this.memoryViewInt32[8]}set storeOp(e){this.memoryViewInt32[8]=e}get stencilLoadOp(){return this.memoryViewInt32[9]}set stencilLoadOp(e){this.memoryViewInt32[9]=e}get stencilStoreOp(){return this.memoryViewInt32[10]}set stencilStoreOp(e){this.memoryViewInt32[10]=e}get initialLayout(){return this.memoryViewInt32[11]}set initialLayout(e){this.memoryViewInt32[11]=e}get finalLayout(){return this.memoryViewInt32[12]}set finalLayout(e){this.memoryViewInt32[12]=e}}VkAttachmentDescription2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkAttachmentDescription2KHR.prototype.reflect=function(e){},VkAttachmentDescription2KHR.byteLength=56,VkAttachmentDescription2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},format:{byteOffset:20,byteLength:4},samples:{byteOffset:24,byteLength:4},loadOp:{byteOffset:28,byteLength:4},storeOp:{byteOffset:32,byteLength:4},stencilLoadOp:{byteOffset:36,byteLength:4},stencilStoreOp:{byteOffset:40,byteLength:4},initialLayout:{byteOffset:44,byteLength:4},finalLayout:{byteOffset:48,byteLength:4}};class VkAttachmentReference2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000109001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.attachment&&(this.attachment=e.attachment),void 0!==e.layout&&(this.layout=e.layout),void 0!==e.aspectMask&&(this.aspectMask=e.aspectMask))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkAttachmentReference2KHR.pNext' isn't allowed to be filled")}get attachment(){return this.memoryViewUint32[4]}set attachment(e){this.memoryViewUint32[4]=e}get layout(){return this.memoryViewInt32[5]}set layout(e){this.memoryViewInt32[5]=e}get aspectMask(){return this.memoryViewInt32[6]}set aspectMask(e){this.memoryViewInt32[6]=e}}VkAttachmentReference2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkAttachmentReference2KHR.prototype.reflect=function(e){},VkAttachmentReference2KHR.byteLength=32,VkAttachmentReference2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},attachment:{byteOffset:16,byteLength:4},layout:{byteOffset:20,byteLength:4},aspectMask:{byteOffset:24,byteLength:4}};class VkSubpassDescription2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+88)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+88)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+88)/4)):(this.memoryBuffer=new ArrayBuffer(88),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pInputAttachments=null,this._pInputAttachmentsNative=null,this._pColorAttachments=null,this._pColorAttachmentsNative=null,this._pResolveAttachments=null,this._pResolveAttachmentsNative=null,this._pDepthStencilAttachment=null,this._pPreserveAttachments=null,this.sType=1000109002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.pipelineBindPoint&&(this.pipelineBindPoint=e.pipelineBindPoint),void 0!==e.viewMask&&(this.viewMask=e.viewMask),void 0!==e.inputAttachmentCount&&(this.inputAttachmentCount=e.inputAttachmentCount),void 0!==e.pInputAttachments&&(this.pInputAttachments=e.pInputAttachments),void 0!==e.colorAttachmentCount&&(this.colorAttachmentCount=e.colorAttachmentCount),void 0!==e.pColorAttachments&&(this.pColorAttachments=e.pColorAttachments),void 0!==e.pResolveAttachments&&(this.pResolveAttachments=e.pResolveAttachments),void 0!==e.pDepthStencilAttachment&&(this.pDepthStencilAttachment=e.pDepthStencilAttachment),void 0!==e.preserveAttachmentCount&&(this.preserveAttachmentCount=e.preserveAttachmentCount),void 0!==e.pPreserveAttachments&&(this.pPreserveAttachments=e.pPreserveAttachments))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000199001:break;default:throw new TypeError("Invalid type for 'VkSubpassDescription2KHR.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get pipelineBindPoint(){return this.memoryViewInt32[5]}set pipelineBindPoint(e){this.memoryViewInt32[5]=e}get viewMask(){return this.memoryViewUint32[6]}set viewMask(e){this.memoryViewUint32[6]=e}get inputAttachmentCount(){return this.memoryViewUint32[7]}set inputAttachmentCount(e){this.memoryViewUint32[7]=e}get pInputAttachments(){return this._pInputAttachments}set pInputAttachments(e){null!==e?this._pInputAttachments=e:null===e&&(this._pInputAttachments=null)}get colorAttachmentCount(){return this.memoryViewUint32[10]}set colorAttachmentCount(e){this.memoryViewUint32[10]=e}get pColorAttachments(){return this._pColorAttachments}set pColorAttachments(e){null!==e?this._pColorAttachments=e:null===e&&(this._pColorAttachments=null)}get pResolveAttachments(){return this._pResolveAttachments}set pResolveAttachments(e){null!==e?this._pResolveAttachments=e:null===e&&(this._pResolveAttachments=null)}get pDepthStencilAttachment(){return this._pDepthStencilAttachment}set pDepthStencilAttachment(e){null!==e?(e.flush(),this._pDepthStencilAttachment=e,this.memoryViewBigInt64[8]=e.memoryAddress):null===e&&(this._pDepthStencilAttachment=null,this.memoryViewBigInt64[8]=BI0)}get preserveAttachmentCount(){return this.memoryViewUint32[18]}set preserveAttachmentCount(e){this.memoryViewUint32[18]=e}get pPreserveAttachments(){return this._pPreserveAttachments}set pPreserveAttachments(e){null!==e?(this._pPreserveAttachments=e,this.memoryViewBigInt64[10]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pPreserveAttachments=null,this.memoryViewBigInt64[10]=BI0)}}VkSubpassDescription2KHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pInputAttachments){let e=this._pInputAttachments;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pInputAttachmentsNative=t,this.memoryViewBigInt64[4]=t.address}if(null!==this._pColorAttachments){let e=this._pColorAttachments;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pColorAttachmentsNative=t,this.memoryViewBigInt64[6]=t.address}if(null!==this._pResolveAttachments){let e=this._pResolveAttachments;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pResolveAttachmentsNative=t,this.memoryViewBigInt64[7]=t.address}return!0},VkSubpassDescription2KHR.prototype.reflect=function(e){},VkSubpassDescription2KHR.byteLength=88,VkSubpassDescription2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},pipelineBindPoint:{byteOffset:20,byteLength:4},viewMask:{byteOffset:24,byteLength:4},inputAttachmentCount:{byteOffset:28,byteLength:4},pInputAttachments:{byteOffset:32,byteLength:8},colorAttachmentCount:{byteOffset:40,byteLength:4},pColorAttachments:{byteOffset:48,byteLength:8},pResolveAttachments:{byteOffset:56,byteLength:8},pDepthStencilAttachment:{byteOffset:64,byteLength:8},preserveAttachmentCount:{byteOffset:72,byteLength:4},pPreserveAttachments:{byteOffset:80,byteLength:8}};class VkSubpassDependency2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000109003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.srcSubpass&&(this.srcSubpass=e.srcSubpass),void 0!==e.dstSubpass&&(this.dstSubpass=e.dstSubpass),void 0!==e.srcStageMask&&(this.srcStageMask=e.srcStageMask),void 0!==e.dstStageMask&&(this.dstStageMask=e.dstStageMask),void 0!==e.srcAccessMask&&(this.srcAccessMask=e.srcAccessMask),void 0!==e.dstAccessMask&&(this.dstAccessMask=e.dstAccessMask),void 0!==e.dependencyFlags&&(this.dependencyFlags=e.dependencyFlags),void 0!==e.viewOffset&&(this.viewOffset=e.viewOffset))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSubpassDependency2KHR.pNext' isn't allowed to be filled")}get srcSubpass(){return this.memoryViewUint32[4]}set srcSubpass(e){this.memoryViewUint32[4]=e}get dstSubpass(){return this.memoryViewUint32[5]}set dstSubpass(e){this.memoryViewUint32[5]=e}get srcStageMask(){return this.memoryViewInt32[6]}set srcStageMask(e){this.memoryViewInt32[6]=e}get dstStageMask(){return this.memoryViewInt32[7]}set dstStageMask(e){this.memoryViewInt32[7]=e}get srcAccessMask(){return this.memoryViewInt32[8]}set srcAccessMask(e){this.memoryViewInt32[8]=e}get dstAccessMask(){return this.memoryViewInt32[9]}set dstAccessMask(e){this.memoryViewInt32[9]=e}get dependencyFlags(){return this.memoryViewInt32[10]}set dependencyFlags(e){this.memoryViewInt32[10]=e}get viewOffset(){return this.memoryViewInt32[11]}set viewOffset(e){this.memoryViewInt32[11]=e}}VkSubpassDependency2KHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSubpassDependency2KHR.prototype.reflect=function(e){},VkSubpassDependency2KHR.byteLength=48,VkSubpassDependency2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},srcSubpass:{byteOffset:16,byteLength:4},dstSubpass:{byteOffset:20,byteLength:4},srcStageMask:{byteOffset:24,byteLength:4},dstStageMask:{byteOffset:28,byteLength:4},srcAccessMask:{byteOffset:32,byteLength:4},dstAccessMask:{byteOffset:36,byteLength:4},dependencyFlags:{byteOffset:40,byteLength:4},viewOffset:{byteOffset:44,byteLength:4}};class VkRenderPassCreateInfo2KHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+80)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+80)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+80)/4)):(this.memoryBuffer=new ArrayBuffer(80),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pAttachments=null,this._pAttachmentsNative=null,this._pSubpasses=null,this._pSubpassesNative=null,this._pDependencies=null,this._pDependenciesNative=null,this._pCorrelatedViewMasks=null,this.sType=1000109004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.attachmentCount&&(this.attachmentCount=e.attachmentCount),void 0!==e.pAttachments&&(this.pAttachments=e.pAttachments),void 0!==e.subpassCount&&(this.subpassCount=e.subpassCount),void 0!==e.pSubpasses&&(this.pSubpasses=e.pSubpasses),void 0!==e.dependencyCount&&(this.dependencyCount=e.dependencyCount),void 0!==e.pDependencies&&(this.pDependencies=e.pDependencies),void 0!==e.correlatedViewMaskCount&&(this.correlatedViewMaskCount=e.correlatedViewMaskCount),void 0!==e.pCorrelatedViewMasks&&(this.pCorrelatedViewMasks=e.pCorrelatedViewMasks))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkRenderPassCreateInfo2KHR.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get attachmentCount(){return this.memoryViewUint32[5]}set attachmentCount(e){this.memoryViewUint32[5]=e}get pAttachments(){return this._pAttachments}set pAttachments(e){null!==e?this._pAttachments=e:null===e&&(this._pAttachments=null)}get subpassCount(){return this.memoryViewUint32[8]}set subpassCount(e){this.memoryViewUint32[8]=e}get pSubpasses(){return this._pSubpasses}set pSubpasses(e){null!==e?this._pSubpasses=e:null===e&&(this._pSubpasses=null)}get dependencyCount(){return this.memoryViewUint32[12]}set dependencyCount(e){this.memoryViewUint32[12]=e}get pDependencies(){return this._pDependencies}set pDependencies(e){null!==e?this._pDependencies=e:null===e&&(this._pDependencies=null)}get correlatedViewMaskCount(){return this.memoryViewUint32[16]}set correlatedViewMaskCount(e){this.memoryViewUint32[16]=e}get pCorrelatedViewMasks(){return this._pCorrelatedViewMasks}set pCorrelatedViewMasks(e){null!==e?(this._pCorrelatedViewMasks=e,this.memoryViewBigInt64[9]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pCorrelatedViewMasks=null,this.memoryViewBigInt64[9]=BI0)}}VkRenderPassCreateInfo2KHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pAttachments){let e=this._pAttachments;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pAttachmentsNative=t,this.memoryViewBigInt64[3]=t.address}if(null!==this._pSubpasses){let e=this._pSubpasses;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pSubpassesNative=t,this.memoryViewBigInt64[5]=t.address}if(null!==this._pDependencies){let e=this._pDependencies;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pDependenciesNative=t,this.memoryViewBigInt64[7]=t.address}return!0},VkRenderPassCreateInfo2KHR.prototype.reflect=function(e){},VkRenderPassCreateInfo2KHR.byteLength=80,VkRenderPassCreateInfo2KHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},attachmentCount:{byteOffset:20,byteLength:4},pAttachments:{byteOffset:24,byteLength:8},subpassCount:{byteOffset:32,byteLength:4},pSubpasses:{byteOffset:40,byteLength:8},dependencyCount:{byteOffset:48,byteLength:4},pDependencies:{byteOffset:56,byteLength:8},correlatedViewMaskCount:{byteOffset:64,byteLength:4},pCorrelatedViewMasks:{byteOffset:72,byteLength:8}};class VkSubpassBeginInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000109005,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.contents&&(this.contents=e.contents))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSubpassBeginInfoKHR.pNext' isn't allowed to be filled")}get contents(){return this.memoryViewInt32[4]}set contents(e){this.memoryViewInt32[4]=e}}VkSubpassBeginInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSubpassBeginInfoKHR.prototype.reflect=function(e){},VkSubpassBeginInfoKHR.byteLength=24,VkSubpassBeginInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},contents:{byteOffset:16,byteLength:4}};class VkSubpassEndInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+16)/8)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000109006,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSubpassEndInfoKHR.pNext' isn't allowed to be filled")}}VkSubpassEndInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSubpassEndInfoKHR.prototype.reflect=function(e){},VkSubpassEndInfoKHR.byteLength=16,VkSubpassEndInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8}};class VkVertexInputBindingDivisorDescriptionEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.binding&&(this.binding=e.binding),void 0!==e.divisor&&(this.divisor=e.divisor))}get binding(){return this.memoryViewUint32[0]}set binding(e){this.memoryViewUint32[0]=e}get divisor(){return this.memoryViewUint32[1]}set divisor(e){this.memoryViewUint32[1]=e}}VkVertexInputBindingDivisorDescriptionEXT.prototype.flush=function(){return!0},VkVertexInputBindingDivisorDescriptionEXT.prototype.reflect=function(e){},VkVertexInputBindingDivisorDescriptionEXT.byteLength=8,VkVertexInputBindingDivisorDescriptionEXT.memoryLayout={binding:{byteOffset:0,byteLength:4},divisor:{byteOffset:4,byteLength:4}};class VkPipelineVertexInputDivisorStateCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pVertexBindingDivisors=null,this._pVertexBindingDivisorsNative=null,this.sType=1000190001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.vertexBindingDivisorCount&&(this.vertexBindingDivisorCount=e.vertexBindingDivisorCount),void 0!==e.pVertexBindingDivisors&&(this.pVertexBindingDivisors=e.pVertexBindingDivisors))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineVertexInputDivisorStateCreateInfoEXT.pNext' isn't allowed to be filled")}get vertexBindingDivisorCount(){return this.memoryViewUint32[4]}set vertexBindingDivisorCount(e){this.memoryViewUint32[4]=e}get pVertexBindingDivisors(){return this._pVertexBindingDivisors}set pVertexBindingDivisors(e){null!==e?this._pVertexBindingDivisors=e:null===e&&(this._pVertexBindingDivisors=null)}}VkPipelineVertexInputDivisorStateCreateInfoEXT.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pVertexBindingDivisors){let e=this._pVertexBindingDivisors;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pVertexBindingDivisorsNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkPipelineVertexInputDivisorStateCreateInfoEXT.prototype.reflect=function(e){},VkPipelineVertexInputDivisorStateCreateInfoEXT.byteLength=32,VkPipelineVertexInputDivisorStateCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},vertexBindingDivisorCount:{byteOffset:16,byteLength:4},pVertexBindingDivisors:{byteOffset:24,byteLength:8}};class VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=100019e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.pNext' isn't allowed to be filled")}get maxVertexAttribDivisor(){return this.memoryViewUint32[4]}}VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.byteLength=24,VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxVertexAttribDivisor:{byteOffset:16,byteLength:4}};class VkPhysicalDevicePCIBusInfoPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000212e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDevicePCIBusInfoPropertiesEXT.pNext' isn't allowed to be filled")}get pciDomain(){return this.memoryViewUint32[4]}get pciBus(){return this.memoryViewUint32[5]}get pciDevice(){return this.memoryViewUint32[6]}get pciFunction(){return this.memoryViewUint32[7]}}VkPhysicalDevicePCIBusInfoPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDevicePCIBusInfoPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkPhysicalDevicePCIBusInfoPropertiesEXT.byteLength=32,VkPhysicalDevicePCIBusInfoPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},pciDomain:{byteOffset:16,byteLength:4},pciBus:{byteOffset:20,byteLength:4},pciDevice:{byteOffset:24,byteLength:4},pciFunction:{byteOffset:28,byteLength:4}};class VkCommandBufferInheritanceConditionalRenderingInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000081e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.conditionalRenderingEnable&&(this.conditionalRenderingEnable=e.conditionalRenderingEnable))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkCommandBufferInheritanceConditionalRenderingInfoEXT.pNext' isn't allowed to be filled")}get conditionalRenderingEnable(){return 0!==this.memoryViewUint32[4]}set conditionalRenderingEnable(e){this.memoryViewUint32[4]=0|e}}VkCommandBufferInheritanceConditionalRenderingInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkCommandBufferInheritanceConditionalRenderingInfoEXT.prototype.reflect=function(e){},VkCommandBufferInheritanceConditionalRenderingInfoEXT.byteLength=24,VkCommandBufferInheritanceConditionalRenderingInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},conditionalRenderingEnable:{byteOffset:16,byteLength:4}};class VkPhysicalDevice8BitStorageFeaturesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000177e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.storageBuffer8BitAccess&&(this.storageBuffer8BitAccess=e.storageBuffer8BitAccess),void 0!==e.uniformAndStorageBuffer8BitAccess&&(this.uniformAndStorageBuffer8BitAccess=e.uniformAndStorageBuffer8BitAccess),void 0!==e.storagePushConstant8&&(this.storagePushConstant8=e.storagePushConstant8))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDevice8BitStorageFeaturesKHR.pNext' isn't allowed to be filled")}get storageBuffer8BitAccess(){return 0!==this.memoryViewUint32[4]}set storageBuffer8BitAccess(e){this.memoryViewUint32[4]=0|e}get uniformAndStorageBuffer8BitAccess(){return 0!==this.memoryViewUint32[5]}set uniformAndStorageBuffer8BitAccess(e){this.memoryViewUint32[5]=0|e}get storagePushConstant8(){return 0!==this.memoryViewUint32[6]}set storagePushConstant8(e){this.memoryViewUint32[6]=0|e}}VkPhysicalDevice8BitStorageFeaturesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDevice8BitStorageFeaturesKHR.prototype.reflect=function(e){},VkPhysicalDevice8BitStorageFeaturesKHR.byteLength=32,VkPhysicalDevice8BitStorageFeaturesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},storageBuffer8BitAccess:{byteOffset:16,byteLength:4},uniformAndStorageBuffer8BitAccess:{byteOffset:20,byteLength:4},storagePushConstant8:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceConditionalRenderingFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000081001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.conditionalRendering&&(this.conditionalRendering=e.conditionalRendering),void 0!==e.inheritedConditionalRendering&&(this.inheritedConditionalRendering=e.inheritedConditionalRendering))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceConditionalRenderingFeaturesEXT.pNext' isn't allowed to be filled")}get conditionalRendering(){return 0!==this.memoryViewUint32[4]}set conditionalRendering(e){this.memoryViewUint32[4]=0|e}get inheritedConditionalRendering(){return 0!==this.memoryViewUint32[5]}set inheritedConditionalRendering(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceConditionalRenderingFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceConditionalRenderingFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceConditionalRenderingFeaturesEXT.byteLength=24,VkPhysicalDeviceConditionalRenderingFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},conditionalRendering:{byteOffset:16,byteLength:4},inheritedConditionalRendering:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceVulkanMemoryModelFeaturesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000211e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.vulkanMemoryModel&&(this.vulkanMemoryModel=e.vulkanMemoryModel),void 0!==e.vulkanMemoryModelDeviceScope&&(this.vulkanMemoryModelDeviceScope=e.vulkanMemoryModelDeviceScope),void 0!==e.vulkanMemoryModelAvailabilityVisibilityChains&&(this.vulkanMemoryModelAvailabilityVisibilityChains=e.vulkanMemoryModelAvailabilityVisibilityChains))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.pNext' isn't allowed to be filled")}get vulkanMemoryModel(){return 0!==this.memoryViewUint32[4]}set vulkanMemoryModel(e){this.memoryViewUint32[4]=0|e}get vulkanMemoryModelDeviceScope(){return 0!==this.memoryViewUint32[5]}set vulkanMemoryModelDeviceScope(e){this.memoryViewUint32[5]=0|e}get vulkanMemoryModelAvailabilityVisibilityChains(){return 0!==this.memoryViewUint32[6]}set vulkanMemoryModelAvailabilityVisibilityChains(e){this.memoryViewUint32[6]=0|e}}VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.prototype.reflect=function(e){},VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.byteLength=32,VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},vulkanMemoryModel:{byteOffset:16,byteLength:4},vulkanMemoryModelDeviceScope:{byteOffset:20,byteLength:4},vulkanMemoryModelAvailabilityVisibilityChains:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceShaderAtomicInt64FeaturesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=100018e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.shaderBufferInt64Atomics&&(this.shaderBufferInt64Atomics=e.shaderBufferInt64Atomics),void 0!==e.shaderSharedInt64Atomics&&(this.shaderSharedInt64Atomics=e.shaderSharedInt64Atomics))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.pNext' isn't allowed to be filled")}get shaderBufferInt64Atomics(){return 0!==this.memoryViewUint32[4]}set shaderBufferInt64Atomics(e){this.memoryViewUint32[4]=0|e}get shaderSharedInt64Atomics(){return 0!==this.memoryViewUint32[5]}set shaderSharedInt64Atomics(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.prototype.reflect=function(e){},VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.byteLength=24,VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shaderBufferInt64Atomics:{byteOffset:16,byteLength:4},shaderSharedInt64Atomics:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000190002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.vertexAttributeInstanceRateDivisor&&(this.vertexAttributeInstanceRateDivisor=e.vertexAttributeInstanceRateDivisor),void 0!==e.vertexAttributeInstanceRateZeroDivisor&&(this.vertexAttributeInstanceRateZeroDivisor=e.vertexAttributeInstanceRateZeroDivisor))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.pNext' isn't allowed to be filled")}get vertexAttributeInstanceRateDivisor(){return 0!==this.memoryViewUint32[4]}set vertexAttributeInstanceRateDivisor(e){this.memoryViewUint32[4]=0|e}get vertexAttributeInstanceRateZeroDivisor(){return 0!==this.memoryViewUint32[5]}set vertexAttributeInstanceRateZeroDivisor(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.byteLength=24,VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},vertexAttributeInstanceRateDivisor:{byteOffset:16,byteLength:4},vertexAttributeInstanceRateZeroDivisor:{byteOffset:20,byteLength:4}};class VkQueueFamilyCheckpointPropertiesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000206001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkQueueFamilyCheckpointPropertiesNV.pNext' isn't allowed to be filled")}get checkpointExecutionStageMask(){return this.memoryViewInt32[4]}}VkQueueFamilyCheckpointPropertiesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkQueueFamilyCheckpointPropertiesNV.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkQueueFamilyCheckpointPropertiesNV.byteLength=24,VkQueueFamilyCheckpointPropertiesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},checkpointExecutionStageMask:{byteOffset:16,byteLength:4}};class VkCheckpointDataNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._pCheckpointMarker=null,this.sType=1000206e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.pCheckpointMarker&&(this.pCheckpointMarker=e.pCheckpointMarker))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkCheckpointDataNV.pNext' isn't allowed to be filled")}get stage(){return this.memoryViewInt32[4]}get pCheckpointMarker(){return this._pCheckpointMarker}set pCheckpointMarker(e){null!==e?(this._pCheckpointMarker=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pCheckpointMarker=null,this.memoryViewBigInt64[3]=BI0)}}VkCheckpointDataNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkCheckpointDataNV.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkCheckpointDataNV.byteLength=32,VkCheckpointDataNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},stage:{byteOffset:16,byteLength:4},pCheckpointMarker:{byteOffset:24,byteLength:8}};class VkPhysicalDeviceDepthStencilResolvePropertiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000199e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceDepthStencilResolvePropertiesKHR.pNext' isn't allowed to be filled")}get supportedDepthResolveModes(){return this.memoryViewInt32[4]}get supportedStencilResolveModes(){return this.memoryViewInt32[5]}get independentResolveNone(){return 0!==this.memoryViewUint32[6]}get independentResolve(){return 0!==this.memoryViewUint32[7]}}VkPhysicalDeviceDepthStencilResolvePropertiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceDepthStencilResolvePropertiesKHR.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkPhysicalDeviceDepthStencilResolvePropertiesKHR.byteLength=32,VkPhysicalDeviceDepthStencilResolvePropertiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},supportedDepthResolveModes:{byteOffset:16,byteLength:4},supportedStencilResolveModes:{byteOffset:20,byteLength:4},independentResolveNone:{byteOffset:24,byteLength:4},independentResolve:{byteOffset:28,byteLength:4}};class VkSubpassDescriptionDepthStencilResolveKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._pDepthStencilResolveAttachment=null,this.sType=1000199001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.depthResolveMode&&(this.depthResolveMode=e.depthResolveMode),void 0!==e.stencilResolveMode&&(this.stencilResolveMode=e.stencilResolveMode),void 0!==e.pDepthStencilResolveAttachment&&(this.pDepthStencilResolveAttachment=e.pDepthStencilResolveAttachment))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSubpassDescriptionDepthStencilResolveKHR.pNext' isn't allowed to be filled")}get depthResolveMode(){return this.memoryViewInt32[4]}set depthResolveMode(e){this.memoryViewInt32[4]=e}get stencilResolveMode(){return this.memoryViewInt32[5]}set stencilResolveMode(e){this.memoryViewInt32[5]=e}get pDepthStencilResolveAttachment(){return this._pDepthStencilResolveAttachment}set pDepthStencilResolveAttachment(e){null!==e?(e.flush(),this._pDepthStencilResolveAttachment=e,this.memoryViewBigInt64[3]=e.memoryAddress):null===e&&(this._pDepthStencilResolveAttachment=null,this.memoryViewBigInt64[3]=BI0)}}VkSubpassDescriptionDepthStencilResolveKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSubpassDescriptionDepthStencilResolveKHR.prototype.reflect=function(e){},VkSubpassDescriptionDepthStencilResolveKHR.byteLength=32,VkSubpassDescriptionDepthStencilResolveKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},depthResolveMode:{byteOffset:16,byteLength:4},stencilResolveMode:{byteOffset:20,byteLength:4},pDepthStencilResolveAttachment:{byteOffset:24,byteLength:8}};class VkImageViewASTCDecodeModeEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000067e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.decodeMode&&(this.decodeMode=e.decodeMode))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImageViewASTCDecodeModeEXT.pNext' isn't allowed to be filled")}get decodeMode(){return this.memoryViewInt32[4]}set decodeMode(e){this.memoryViewInt32[4]=e}}VkImageViewASTCDecodeModeEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageViewASTCDecodeModeEXT.prototype.reflect=function(e){},VkImageViewASTCDecodeModeEXT.byteLength=24,VkImageViewASTCDecodeModeEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},decodeMode:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceASTCDecodeFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000067001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.decodeModeSharedExponent&&(this.decodeModeSharedExponent=e.decodeModeSharedExponent))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceASTCDecodeFeaturesEXT.pNext' isn't allowed to be filled")}get decodeModeSharedExponent(){return 0!==this.memoryViewUint32[4]}set decodeModeSharedExponent(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceASTCDecodeFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceASTCDecodeFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceASTCDecodeFeaturesEXT.byteLength=24,VkPhysicalDeviceASTCDecodeFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},decodeModeSharedExponent:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceTransformFeedbackFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000028e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.transformFeedback&&(this.transformFeedback=e.transformFeedback),void 0!==e.geometryStreams&&(this.geometryStreams=e.geometryStreams))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceTransformFeedbackFeaturesEXT.pNext' isn't allowed to be filled")}get transformFeedback(){return 0!==this.memoryViewUint32[4]}set transformFeedback(e){this.memoryViewUint32[4]=0|e}get geometryStreams(){return 0!==this.memoryViewUint32[5]}set geometryStreams(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceTransformFeedbackFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceTransformFeedbackFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceTransformFeedbackFeaturesEXT.byteLength=24,VkPhysicalDeviceTransformFeedbackFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},transformFeedback:{byteOffset:16,byteLength:4},geometryStreams:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceTransformFeedbackPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000028001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceTransformFeedbackPropertiesEXT.pNext' isn't allowed to be filled")}get maxTransformFeedbackStreams(){return this.memoryViewUint32[4]}get maxTransformFeedbackBuffers(){return this.memoryViewUint32[5]}get maxTransformFeedbackBufferSize(){return this.memoryViewBigUint64[3]}get maxTransformFeedbackStreamDataSize(){return this.memoryViewUint32[8]}get maxTransformFeedbackBufferDataSize(){return this.memoryViewUint32[9]}get maxTransformFeedbackBufferDataStride(){return this.memoryViewUint32[10]}get transformFeedbackQueries(){return 0!==this.memoryViewUint32[11]}get transformFeedbackStreamsLinesTriangles(){return 0!==this.memoryViewUint32[12]}get transformFeedbackRasterizationStreamSelect(){return 0!==this.memoryViewUint32[13]}get transformFeedbackDraw(){return 0!==this.memoryViewUint32[14]}}VkPhysicalDeviceTransformFeedbackPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceTransformFeedbackPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(64)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,64),0)},VkPhysicalDeviceTransformFeedbackPropertiesEXT.byteLength=64,VkPhysicalDeviceTransformFeedbackPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxTransformFeedbackStreams:{byteOffset:16,byteLength:4},maxTransformFeedbackBuffers:{byteOffset:20,byteLength:4},maxTransformFeedbackBufferSize:{byteOffset:24,byteLength:8},maxTransformFeedbackStreamDataSize:{byteOffset:32,byteLength:4},maxTransformFeedbackBufferDataSize:{byteOffset:36,byteLength:4},maxTransformFeedbackBufferDataStride:{byteOffset:40,byteLength:4},transformFeedbackQueries:{byteOffset:44,byteLength:4},transformFeedbackStreamsLinesTriangles:{byteOffset:48,byteLength:4},transformFeedbackRasterizationStreamSelect:{byteOffset:52,byteLength:4},transformFeedbackDraw:{byteOffset:56,byteLength:4}};class VkPipelineRasterizationStateStreamCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000028002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.rasterizationStream&&(this.rasterizationStream=e.rasterizationStream))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineRasterizationStateStreamCreateInfoEXT.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get rasterizationStream(){return this.memoryViewUint32[5]}set rasterizationStream(e){this.memoryViewUint32[5]=e}}VkPipelineRasterizationStateStreamCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineRasterizationStateStreamCreateInfoEXT.prototype.reflect=function(e){},VkPipelineRasterizationStateStreamCreateInfoEXT.byteLength=24,VkPipelineRasterizationStateStreamCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},rasterizationStream:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000166e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.representativeFragmentTest&&(this.representativeFragmentTest=e.representativeFragmentTest))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.pNext' isn't allowed to be filled")}get representativeFragmentTest(){return 0!==this.memoryViewUint32[4]}set representativeFragmentTest(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.prototype.reflect=function(e){},VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.byteLength=24,VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},representativeFragmentTest:{byteOffset:16,byteLength:4}};class VkPipelineRepresentativeFragmentTestStateCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000166001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.representativeFragmentTestEnable&&(this.representativeFragmentTestEnable=e.representativeFragmentTestEnable))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineRepresentativeFragmentTestStateCreateInfoNV.pNext' isn't allowed to be filled")}get representativeFragmentTestEnable(){return 0!==this.memoryViewUint32[4]}set representativeFragmentTestEnable(e){this.memoryViewUint32[4]=0|e}}VkPipelineRepresentativeFragmentTestStateCreateInfoNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineRepresentativeFragmentTestStateCreateInfoNV.prototype.reflect=function(e){},VkPipelineRepresentativeFragmentTestStateCreateInfoNV.byteLength=24,VkPipelineRepresentativeFragmentTestStateCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},representativeFragmentTestEnable:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceExclusiveScissorFeaturesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000205002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.exclusiveScissor&&(this.exclusiveScissor=e.exclusiveScissor))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceExclusiveScissorFeaturesNV.pNext' isn't allowed to be filled")}get exclusiveScissor(){return 0!==this.memoryViewUint32[4]}set exclusiveScissor(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceExclusiveScissorFeaturesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceExclusiveScissorFeaturesNV.prototype.reflect=function(e){},VkPhysicalDeviceExclusiveScissorFeaturesNV.byteLength=24,VkPhysicalDeviceExclusiveScissorFeaturesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},exclusiveScissor:{byteOffset:16,byteLength:4}};class VkPipelineViewportExclusiveScissorStateCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pExclusiveScissors=null,this._pExclusiveScissorsNative=null,this.sType=1000205e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.exclusiveScissorCount&&(this.exclusiveScissorCount=e.exclusiveScissorCount),void 0!==e.pExclusiveScissors&&(this.pExclusiveScissors=e.pExclusiveScissors))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineViewportExclusiveScissorStateCreateInfoNV.pNext' isn't allowed to be filled")}get exclusiveScissorCount(){return this.memoryViewUint32[4]}set exclusiveScissorCount(e){this.memoryViewUint32[4]=e}get pExclusiveScissors(){return this._pExclusiveScissors}set pExclusiveScissors(e){null!==e?this._pExclusiveScissors=e:null===e&&(this._pExclusiveScissors=null)}}VkPipelineViewportExclusiveScissorStateCreateInfoNV.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pExclusiveScissors){let e=this._pExclusiveScissors;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pExclusiveScissorsNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkPipelineViewportExclusiveScissorStateCreateInfoNV.prototype.reflect=function(e){},VkPipelineViewportExclusiveScissorStateCreateInfoNV.byteLength=32,VkPipelineViewportExclusiveScissorStateCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},exclusiveScissorCount:{byteOffset:16,byteLength:4},pExclusiveScissors:{byteOffset:24,byteLength:8}};class VkPhysicalDeviceCornerSampledImageFeaturesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=100005e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.cornerSampledImage&&(this.cornerSampledImage=e.cornerSampledImage))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceCornerSampledImageFeaturesNV.pNext' isn't allowed to be filled")}get cornerSampledImage(){return 0!==this.memoryViewUint32[4]}set cornerSampledImage(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceCornerSampledImageFeaturesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceCornerSampledImageFeaturesNV.prototype.reflect=function(e){},VkPhysicalDeviceCornerSampledImageFeaturesNV.byteLength=24,VkPhysicalDeviceCornerSampledImageFeaturesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},cornerSampledImage:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceComputeShaderDerivativesFeaturesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000201e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.computeDerivativeGroupQuads&&(this.computeDerivativeGroupQuads=e.computeDerivativeGroupQuads),void 0!==e.computeDerivativeGroupLinear&&(this.computeDerivativeGroupLinear=e.computeDerivativeGroupLinear))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.pNext' isn't allowed to be filled")}get computeDerivativeGroupQuads(){return 0!==this.memoryViewUint32[4]}set computeDerivativeGroupQuads(e){this.memoryViewUint32[4]=0|e}get computeDerivativeGroupLinear(){return 0!==this.memoryViewUint32[5]}set computeDerivativeGroupLinear(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.prototype.reflect=function(e){},VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.byteLength=24,VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},computeDerivativeGroupQuads:{byteOffset:16,byteLength:4},computeDerivativeGroupLinear:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000203e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.fragmentShaderBarycentric&&(this.fragmentShaderBarycentric=e.fragmentShaderBarycentric))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.pNext' isn't allowed to be filled")}get fragmentShaderBarycentric(){return 0!==this.memoryViewUint32[4]}set fragmentShaderBarycentric(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.prototype.reflect=function(e){},VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.byteLength=24,VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},fragmentShaderBarycentric:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceShaderImageFootprintFeaturesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000204e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.imageFootprint&&(this.imageFootprint=e.imageFootprint))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceShaderImageFootprintFeaturesNV.pNext' isn't allowed to be filled")}get imageFootprint(){return 0!==this.memoryViewUint32[4]}set imageFootprint(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceShaderImageFootprintFeaturesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceShaderImageFootprintFeaturesNV.prototype.reflect=function(e){},VkPhysicalDeviceShaderImageFootprintFeaturesNV.byteLength=24,VkPhysicalDeviceShaderImageFootprintFeaturesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},imageFootprint:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=100024e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.dedicatedAllocationImageAliasing&&(this.dedicatedAllocationImageAliasing=e.dedicatedAllocationImageAliasing))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.pNext' isn't allowed to be filled")}get dedicatedAllocationImageAliasing(){return 0!==this.memoryViewUint32[4]}set dedicatedAllocationImageAliasing(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.prototype.reflect=function(e){},VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.byteLength=24,VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},dedicatedAllocationImageAliasing:{byteOffset:16,byteLength:4}};class VkShadingRatePaletteNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+16)/8)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pShadingRatePaletteEntries=null,"object"==typeof e&&(void 0!==e.shadingRatePaletteEntryCount&&(this.shadingRatePaletteEntryCount=e.shadingRatePaletteEntryCount),void 0!==e.pShadingRatePaletteEntries&&(this.pShadingRatePaletteEntries=e.pShadingRatePaletteEntries))}get shadingRatePaletteEntryCount(){return this.memoryViewUint32[0]}set shadingRatePaletteEntryCount(e){this.memoryViewUint32[0]=e}get pShadingRatePaletteEntries(){return this._pShadingRatePaletteEntries}set pShadingRatePaletteEntries(e){null!==e?(this._pShadingRatePaletteEntries=e,this.memoryViewBigInt64[1]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pShadingRatePaletteEntries=null,this.memoryViewBigInt64[1]=BI0)}}VkShadingRatePaletteNV.prototype.flush=function(){return!0},VkShadingRatePaletteNV.prototype.reflect=function(e){},VkShadingRatePaletteNV.byteLength=16,VkShadingRatePaletteNV.memoryLayout={shadingRatePaletteEntryCount:{byteOffset:0,byteLength:4},pShadingRatePaletteEntries:{byteOffset:8,byteLength:8}};class VkPipelineViewportShadingRateImageStateCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pShadingRatePalettes=null,this._pShadingRatePalettesNative=null,this.sType=1000164e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.shadingRateImageEnable&&(this.shadingRateImageEnable=e.shadingRateImageEnable),void 0!==e.viewportCount&&(this.viewportCount=e.viewportCount),void 0!==e.pShadingRatePalettes&&(this.pShadingRatePalettes=e.pShadingRatePalettes))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineViewportShadingRateImageStateCreateInfoNV.pNext' isn't allowed to be filled")}get shadingRateImageEnable(){return 0!==this.memoryViewUint32[4]}set shadingRateImageEnable(e){this.memoryViewUint32[4]=0|e}get viewportCount(){return this.memoryViewUint32[5]}set viewportCount(e){this.memoryViewUint32[5]=e}get pShadingRatePalettes(){return this._pShadingRatePalettes}set pShadingRatePalettes(e){null!==e?this._pShadingRatePalettes=e:null===e&&(this._pShadingRatePalettes=null)}}VkPipelineViewportShadingRateImageStateCreateInfoNV.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pShadingRatePalettes){let e=this._pShadingRatePalettes;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pShadingRatePalettesNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkPipelineViewportShadingRateImageStateCreateInfoNV.prototype.reflect=function(e){},VkPipelineViewportShadingRateImageStateCreateInfoNV.byteLength=32,VkPipelineViewportShadingRateImageStateCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shadingRateImageEnable:{byteOffset:16,byteLength:4},viewportCount:{byteOffset:20,byteLength:4},pShadingRatePalettes:{byteOffset:24,byteLength:8}};class VkPhysicalDeviceShadingRateImageFeaturesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000164001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.shadingRateImage&&(this.shadingRateImage=e.shadingRateImage),void 0!==e.shadingRateCoarseSampleOrder&&(this.shadingRateCoarseSampleOrder=e.shadingRateCoarseSampleOrder))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceShadingRateImageFeaturesNV.pNext' isn't allowed to be filled")}get shadingRateImage(){return 0!==this.memoryViewUint32[4]}set shadingRateImage(e){this.memoryViewUint32[4]=0|e}get shadingRateCoarseSampleOrder(){return 0!==this.memoryViewUint32[5]}set shadingRateCoarseSampleOrder(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceShadingRateImageFeaturesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceShadingRateImageFeaturesNV.prototype.reflect=function(e){},VkPhysicalDeviceShadingRateImageFeaturesNV.byteLength=24,VkPhysicalDeviceShadingRateImageFeaturesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shadingRateImage:{byteOffset:16,byteLength:4},shadingRateCoarseSampleOrder:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceShadingRateImagePropertiesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._shadingRateTexelSize=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000164002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceShadingRateImagePropertiesNV.pNext' isn't allowed to be filled")}get shadingRateTexelSize(){return this._shadingRateTexelSize}get shadingRatePaletteSize(){return this.memoryViewUint32[6]}get shadingRateMaxCoarseSamples(){return this.memoryViewUint32[7]}}VkPhysicalDeviceShadingRateImagePropertiesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceShadingRateImagePropertiesNV.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkPhysicalDeviceShadingRateImagePropertiesNV.byteLength=32,VkPhysicalDeviceShadingRateImagePropertiesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shadingRateTexelSize:{byteOffset:16,byteLength:8},shadingRatePaletteSize:{byteOffset:24,byteLength:4},shadingRateMaxCoarseSamples:{byteOffset:28,byteLength:4}};class VkCoarseSampleLocationNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+12)/4)):(this.memoryBuffer=new ArrayBuffer(12),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.pixelX&&(this.pixelX=e.pixelX),void 0!==e.pixelY&&(this.pixelY=e.pixelY),void 0!==e.sample&&(this.sample=e.sample))}get pixelX(){return this.memoryViewUint32[0]}set pixelX(e){this.memoryViewUint32[0]=e}get pixelY(){return this.memoryViewUint32[1]}set pixelY(e){this.memoryViewUint32[1]=e}get sample(){return this.memoryViewUint32[2]}set sample(e){this.memoryViewUint32[2]=e}}VkCoarseSampleLocationNV.prototype.flush=function(){return!0},VkCoarseSampleLocationNV.prototype.reflect=function(e){},VkCoarseSampleLocationNV.byteLength=12,VkCoarseSampleLocationNV.memoryLayout={pixelX:{byteOffset:0,byteLength:4},pixelY:{byteOffset:4,byteLength:4},sample:{byteOffset:8,byteLength:4}};class VkCoarseSampleOrderCustomNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pSampleLocations=null,this._pSampleLocationsNative=null,"object"==typeof e&&(void 0!==e.shadingRate&&(this.shadingRate=e.shadingRate),void 0!==e.sampleCount&&(this.sampleCount=e.sampleCount),void 0!==e.sampleLocationCount&&(this.sampleLocationCount=e.sampleLocationCount),void 0!==e.pSampleLocations&&(this.pSampleLocations=e.pSampleLocations))}get shadingRate(){return this.memoryViewInt32[0]}set shadingRate(e){this.memoryViewInt32[0]=e}get sampleCount(){return this.memoryViewUint32[1]}set sampleCount(e){this.memoryViewUint32[1]=e}get sampleLocationCount(){return this.memoryViewUint32[2]}set sampleLocationCount(e){this.memoryViewUint32[2]=e}get pSampleLocations(){return this._pSampleLocations}set pSampleLocations(e){null!==e?this._pSampleLocations=e:null===e&&(this._pSampleLocations=null)}}VkCoarseSampleOrderCustomNV.prototype.flush=function(){if(null!==this._pSampleLocations){let e=this._pSampleLocations;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pSampleLocationsNative=t,this.memoryViewBigInt64[2]=t.address}return!0},VkCoarseSampleOrderCustomNV.prototype.reflect=function(e){},VkCoarseSampleOrderCustomNV.byteLength=24,VkCoarseSampleOrderCustomNV.memoryLayout={shadingRate:{byteOffset:0,byteLength:4},sampleCount:{byteOffset:4,byteLength:4},sampleLocationCount:{byteOffset:8,byteLength:4},pSampleLocations:{byteOffset:16,byteLength:8}};class VkPipelineViewportCoarseSampleOrderStateCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pCustomSampleOrders=null,this._pCustomSampleOrdersNative=null,this.sType=1000164005,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.sampleOrderType&&(this.sampleOrderType=e.sampleOrderType),void 0!==e.customSampleOrderCount&&(this.customSampleOrderCount=e.customSampleOrderCount),void 0!==e.pCustomSampleOrders&&(this.pCustomSampleOrders=e.pCustomSampleOrders))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.pNext' isn't allowed to be filled")}get sampleOrderType(){return this.memoryViewInt32[4]}set sampleOrderType(e){this.memoryViewInt32[4]=e}get customSampleOrderCount(){return this.memoryViewUint32[5]}set customSampleOrderCount(e){this.memoryViewUint32[5]=e}get pCustomSampleOrders(){return this._pCustomSampleOrders}set pCustomSampleOrders(e){null!==e?this._pCustomSampleOrders=e:null===e&&(this._pCustomSampleOrders=null)}}VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pCustomSampleOrders){let e=this._pCustomSampleOrders;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pCustomSampleOrdersNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.prototype.reflect=function(e){},VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.byteLength=32,VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},sampleOrderType:{byteOffset:16,byteLength:4},customSampleOrderCount:{byteOffset:20,byteLength:4},pCustomSampleOrders:{byteOffset:24,byteLength:8}};class VkPhysicalDeviceMeshShaderFeaturesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000202e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.taskShader&&(this.taskShader=e.taskShader),void 0!==e.meshShader&&(this.meshShader=e.meshShader))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceMeshShaderFeaturesNV.pNext' isn't allowed to be filled")}get taskShader(){return 0!==this.memoryViewUint32[4]}set taskShader(e){this.memoryViewUint32[4]=0|e}get meshShader(){return 0!==this.memoryViewUint32[5]}set meshShader(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceMeshShaderFeaturesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceMeshShaderFeaturesNV.prototype.reflect=function(e){},VkPhysicalDeviceMeshShaderFeaturesNV.byteLength=24,VkPhysicalDeviceMeshShaderFeaturesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},taskShader:{byteOffset:16,byteLength:4},meshShader:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceMeshShaderPropertiesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+88)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+88)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+88)/4)):(this.memoryBuffer=new ArrayBuffer(88),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._maxTaskWorkGroupSize=[...Array(3)].fill(0),this._maxMeshWorkGroupSize=[...Array(3)].fill(0),this.sType=1000202001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceMeshShaderPropertiesNV.pNext' isn't allowed to be filled")}get maxDrawMeshTasksCount(){return this.memoryViewUint32[4]}get maxTaskWorkGroupInvocations(){return this.memoryViewUint32[5]}get maxTaskWorkGroupSize(){return[this.memoryViewUint32[6],this.memoryViewUint32[7],this.memoryViewUint32[8]]}get maxTaskTotalMemorySize(){return this.memoryViewUint32[9]}get maxTaskOutputCount(){return this.memoryViewUint32[10]}get maxMeshWorkGroupInvocations(){return this.memoryViewUint32[11]}get maxMeshWorkGroupSize(){return[this.memoryViewUint32[12],this.memoryViewUint32[13],this.memoryViewUint32[14]]}get maxMeshTotalMemorySize(){return this.memoryViewUint32[15]}get maxMeshOutputVertices(){return this.memoryViewUint32[16]}get maxMeshOutputPrimitives(){return this.memoryViewUint32[17]}get maxMeshMultiviewViewCount(){return this.memoryViewUint32[18]}get meshOutputPerVertexGranularity(){return this.memoryViewUint32[19]}get meshOutputPerPrimitiveGranularity(){return this.memoryViewUint32[20]}}VkPhysicalDeviceMeshShaderPropertiesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceMeshShaderPropertiesNV.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(88)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,88),0)},VkPhysicalDeviceMeshShaderPropertiesNV.byteLength=88,VkPhysicalDeviceMeshShaderPropertiesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},maxDrawMeshTasksCount:{byteOffset:16,byteLength:4},maxTaskWorkGroupInvocations:{byteOffset:20,byteLength:4},maxTaskWorkGroupSize:{byteOffset:24,byteLength:12},maxTaskTotalMemorySize:{byteOffset:36,byteLength:4},maxTaskOutputCount:{byteOffset:40,byteLength:4},maxMeshWorkGroupInvocations:{byteOffset:44,byteLength:4},maxMeshWorkGroupSize:{byteOffset:48,byteLength:12},maxMeshTotalMemorySize:{byteOffset:60,byteLength:4},maxMeshOutputVertices:{byteOffset:64,byteLength:4},maxMeshOutputPrimitives:{byteOffset:68,byteLength:4},maxMeshMultiviewViewCount:{byteOffset:72,byteLength:4},meshOutputPerVertexGranularity:{byteOffset:76,byteLength:4},meshOutputPerPrimitiveGranularity:{byteOffset:80,byteLength:4}};class VkDrawMeshTasksIndirectCommandNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),"object"==typeof e&&(void 0!==e.taskCount&&(this.taskCount=e.taskCount),void 0!==e.firstTask&&(this.firstTask=e.firstTask))}get taskCount(){return this.memoryViewUint32[0]}set taskCount(e){this.memoryViewUint32[0]=e}get firstTask(){return this.memoryViewUint32[1]}set firstTask(e){this.memoryViewUint32[1]=e}}VkDrawMeshTasksIndirectCommandNV.prototype.flush=function(){return!0},VkDrawMeshTasksIndirectCommandNV.prototype.reflect=function(e){},VkDrawMeshTasksIndirectCommandNV.byteLength=8,VkDrawMeshTasksIndirectCommandNV.memoryLayout={taskCount:{byteOffset:0,byteLength:4},firstTask:{byteOffset:4,byteLength:4}};class VkRayTracingShaderGroupCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000165011,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.type&&(this.type=e.type),void 0!==e.generalShader&&(this.generalShader=e.generalShader),void 0!==e.closestHitShader&&(this.closestHitShader=e.closestHitShader),void 0!==e.anyHitShader&&(this.anyHitShader=e.anyHitShader),void 0!==e.intersectionShader&&(this.intersectionShader=e.intersectionShader))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkRayTracingShaderGroupCreateInfoNV.pNext' isn't allowed to be filled")}get type(){return this.memoryViewInt32[4]}set type(e){this.memoryViewInt32[4]=e}get generalShader(){return this.memoryViewUint32[5]}set generalShader(e){this.memoryViewUint32[5]=e}get closestHitShader(){return this.memoryViewUint32[6]}set closestHitShader(e){this.memoryViewUint32[6]=e}get anyHitShader(){return this.memoryViewUint32[7]}set anyHitShader(e){this.memoryViewUint32[7]=e}get intersectionShader(){return this.memoryViewUint32[8]}set intersectionShader(e){this.memoryViewUint32[8]=e}}VkRayTracingShaderGroupCreateInfoNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkRayTracingShaderGroupCreateInfoNV.prototype.reflect=function(e){},VkRayTracingShaderGroupCreateInfoNV.byteLength=40,VkRayTracingShaderGroupCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},type:{byteOffset:16,byteLength:4},generalShader:{byteOffset:20,byteLength:4},closestHitShader:{byteOffset:24,byteLength:4},anyHitShader:{byteOffset:28,byteLength:4},intersectionShader:{byteOffset:32,byteLength:4}};class VkRayTracingPipelineCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+80)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+80)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+80)/4)):(this.memoryBuffer=new ArrayBuffer(80),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pStages=null,this._pStagesNative=null,this._pGroups=null,this._pGroupsNative=null,this._layout=null,this._basePipelineHandle=null,this.sType=1000165e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.stageCount&&(this.stageCount=e.stageCount),void 0!==e.pStages&&(this.pStages=e.pStages),void 0!==e.groupCount&&(this.groupCount=e.groupCount),void 0!==e.pGroups&&(this.pGroups=e.pGroups),void 0!==e.maxRecursionDepth&&(this.maxRecursionDepth=e.maxRecursionDepth),void 0!==e.layout&&(this.layout=e.layout),void 0!==e.basePipelineHandle&&(this.basePipelineHandle=e.basePipelineHandle),void 0!==e.basePipelineIndex&&(this.basePipelineIndex=e.basePipelineIndex))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){if(null!==e){let{sType:t}=e;switch(t){case 1000192e3:break;default:throw new TypeError("Invalid type for 'VkRayTracingPipelineCreateInfoNV.pNext'")}this._pNext=e,this.memoryViewBigInt64[1]=e.memoryAddress}else null===e&&(this._pNext=null,this.memoryViewBigInt64[1]=BI0)}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get stageCount(){return this.memoryViewUint32[5]}set stageCount(e){this.memoryViewUint32[5]=e}get pStages(){return this._pStages}set pStages(e){null!==e?this._pStages=e:null===e&&(this._pStages=null)}get groupCount(){return this.memoryViewUint32[8]}set groupCount(e){this.memoryViewUint32[8]=e}get pGroups(){return this._pGroups}set pGroups(e){null!==e?this._pGroups=e:null===e&&(this._pGroups=null)}get maxRecursionDepth(){return this.memoryViewUint32[12]}set maxRecursionDepth(e){this.memoryViewUint32[12]=e}get layout(){return this._layout}set layout(e){null!==e?(this._layout=e,this.memoryViewBigInt64[7]=e.memoryViewBigInt64[0]):null===e&&(this._layout=null,this.memoryViewBigInt64[7]=BI0)}get basePipelineHandle(){return this._basePipelineHandle}set basePipelineHandle(e){null!==e?(this._basePipelineHandle=e,this.memoryViewBigInt64[8]=e.memoryViewBigInt64[0]):null===e&&(this._basePipelineHandle=null,this.memoryViewBigInt64[8]=BI0)}get basePipelineIndex(){return this.memoryViewInt32[18]}set basePipelineIndex(e){this.memoryViewInt32[18]=e}}VkRayTracingPipelineCreateInfoNV.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pStages){let e=this._pStages;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pStagesNative=t,this.memoryViewBigInt64[3]=t.address}if(null!==this._pGroups){let e=this._pGroups;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pGroupsNative=t,this.memoryViewBigInt64[5]=t.address}return!0},VkRayTracingPipelineCreateInfoNV.prototype.reflect=function(e){},VkRayTracingPipelineCreateInfoNV.byteLength=80,VkRayTracingPipelineCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},stageCount:{byteOffset:20,byteLength:4},pStages:{byteOffset:24,byteLength:8},groupCount:{byteOffset:32,byteLength:4},pGroups:{byteOffset:40,byteLength:8},maxRecursionDepth:{byteOffset:48,byteLength:4},layout:{byteOffset:56,byteLength:8},basePipelineHandle:{byteOffset:64,byteLength:8},basePipelineIndex:{byteOffset:72,byteLength:4}};class VkGeometryTrianglesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+96)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+96)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+96)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+96)/4)):(this.memoryBuffer=new ArrayBuffer(96),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._vertexData=null,this._indexData=null,this._transformData=null,this.sType=1000165004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.vertexData&&(this.vertexData=e.vertexData),void 0!==e.vertexOffset&&(this.vertexOffset=e.vertexOffset),void 0!==e.vertexCount&&(this.vertexCount=e.vertexCount),void 0!==e.vertexStride&&(this.vertexStride=e.vertexStride),void 0!==e.vertexFormat&&(this.vertexFormat=e.vertexFormat),void 0!==e.indexData&&(this.indexData=e.indexData),void 0!==e.indexOffset&&(this.indexOffset=e.indexOffset),void 0!==e.indexCount&&(this.indexCount=e.indexCount),void 0!==e.indexType&&(this.indexType=e.indexType),void 0!==e.transformData&&(this.transformData=e.transformData),void 0!==e.transformOffset&&(this.transformOffset=e.transformOffset))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkGeometryTrianglesNV.pNext' isn't allowed to be filled")}get vertexData(){return this._vertexData}set vertexData(e){null!==e?(this._vertexData=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._vertexData=null,this.memoryViewBigInt64[2]=BI0)}get vertexOffset(){return this.memoryViewBigUint64[3]}set vertexOffset(e){this.memoryViewBigUint64[3]=BigInt(e)}get vertexCount(){return this.memoryViewUint32[8]}set vertexCount(e){this.memoryViewUint32[8]=e}get vertexStride(){return this.memoryViewBigUint64[5]}set vertexStride(e){this.memoryViewBigUint64[5]=BigInt(e)}get vertexFormat(){return this.memoryViewInt32[12]}set vertexFormat(e){this.memoryViewInt32[12]=e}get indexData(){return this._indexData}set indexData(e){null!==e?(this._indexData=e,this.memoryViewBigInt64[7]=e.memoryViewBigInt64[0]):null===e&&(this._indexData=null,this.memoryViewBigInt64[7]=BI0)}get indexOffset(){return this.memoryViewBigUint64[8]}set indexOffset(e){this.memoryViewBigUint64[8]=BigInt(e)}get indexCount(){return this.memoryViewUint32[18]}set indexCount(e){this.memoryViewUint32[18]=e}get indexType(){return this.memoryViewInt32[19]}set indexType(e){this.memoryViewInt32[19]=e}get transformData(){return this._transformData}set transformData(e){null!==e?(this._transformData=e,this.memoryViewBigInt64[10]=e.memoryViewBigInt64[0]):null===e&&(this._transformData=null,this.memoryViewBigInt64[10]=BI0)}get transformOffset(){return this.memoryViewBigUint64[11]}set transformOffset(e){this.memoryViewBigUint64[11]=BigInt(e)}}VkGeometryTrianglesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkGeometryTrianglesNV.prototype.reflect=function(e){},VkGeometryTrianglesNV.byteLength=96,VkGeometryTrianglesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},vertexData:{byteOffset:16,byteLength:8},vertexOffset:{byteOffset:24,byteLength:8},vertexCount:{byteOffset:32,byteLength:4},vertexStride:{byteOffset:40,byteLength:8},vertexFormat:{byteOffset:48,byteLength:4},indexData:{byteOffset:56,byteLength:8},indexOffset:{byteOffset:64,byteLength:8},indexCount:{byteOffset:72,byteLength:4},indexType:{byteOffset:76,byteLength:4},transformData:{byteOffset:80,byteLength:8},transformOffset:{byteOffset:88,byteLength:8}};class VkGeometryAABBNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._aabbData=null,this.sType=1000165005,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.aabbData&&(this.aabbData=e.aabbData),void 0!==e.numAABBs&&(this.numAABBs=e.numAABBs),void 0!==e.stride&&(this.stride=e.stride),void 0!==e.offset&&(this.offset=e.offset))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkGeometryAABBNV.pNext' isn't allowed to be filled")}get aabbData(){return this._aabbData}set aabbData(e){null!==e?(this._aabbData=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._aabbData=null,this.memoryViewBigInt64[2]=BI0)}get numAABBs(){return this.memoryViewUint32[6]}set numAABBs(e){this.memoryViewUint32[6]=e}get stride(){return this.memoryViewUint32[7]}set stride(e){this.memoryViewUint32[7]=e}get offset(){return this.memoryViewBigUint64[4]}set offset(e){this.memoryViewBigUint64[4]=BigInt(e)}}VkGeometryAABBNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkGeometryAABBNV.prototype.reflect=function(e){},VkGeometryAABBNV.byteLength=40,VkGeometryAABBNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},aabbData:{byteOffset:16,byteLength:8},numAABBs:{byteOffset:24,byteLength:4},stride:{byteOffset:28,byteLength:4},offset:{byteOffset:32,byteLength:8}};class VkGeometryDataNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset):(this.memoryBuffer=new ArrayBuffer(136),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)),this._triangles=new VkGeometryTrianglesNV({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0}),this._aabbs=new VkGeometryAABBNV({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+96}),"object"==typeof e&&(void 0!==e.triangles&&(this.triangles=e.triangles),void 0!==e.aabbs&&(this.aabbs=e.aabbs))}get triangles(){return this._triangles}set triangles(e){null!==e?(e.flush(),this._triangles=e):null===e&&(this._triangles=null)}get aabbs(){return this._aabbs}set aabbs(e){null!==e?(e.flush(),this._aabbs=e):null===e&&(this._aabbs=null)}}VkGeometryDataNV.prototype.flush=function(){if(null!==this._triangles){let e=this._triangles;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+96);new Uint8Array(this.memoryBuffer).set(t,0)}}if(null!==this._aabbs){let e=this._aabbs;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+40);new Uint8Array(this.memoryBuffer).set(t,96)}}return!0},VkGeometryDataNV.prototype.reflect=function(e){},VkGeometryDataNV.byteLength=136,VkGeometryDataNV.memoryLayout={triangles:{byteOffset:0,byteLength:96},aabbs:{byteOffset:96,byteLength:40}};class VkGeometryNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+168)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+168)/8)):(this.memoryBuffer=new ArrayBuffer(168),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._geometry=new VkGeometryDataNV({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+24}),this.sType=1000165003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.geometryType&&(this.geometryType=e.geometryType),void 0!==e.geometry&&(this.geometry=e.geometry),void 0!==e.flags&&(this.flags=e.flags))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkGeometryNV.pNext' isn't allowed to be filled")}get geometryType(){return this.memoryViewInt32[4]}set geometryType(e){this.memoryViewInt32[4]=e}get geometry(){return this._geometry}set geometry(e){null!==e?(e.flush(),this._geometry=e):null===e&&(this._geometry=null)}get flags(){return this.memoryViewInt32[40]}set flags(e){this.memoryViewInt32[40]=e}}VkGeometryNV.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._geometry){let e=this._geometry;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+136);new Uint8Array(this.memoryBuffer).set(t,24)}}return!0},VkGeometryNV.prototype.reflect=function(e){},VkGeometryNV.byteLength=168,VkGeometryNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},geometryType:{byteOffset:16,byteLength:4},geometry:{byteOffset:24,byteLength:136},flags:{byteOffset:160,byteLength:4}};class VkAccelerationStructureInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pGeometries=null,this._pGeometriesNative=null,this.sType=1000165012,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.type&&(this.type=e.type),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.instanceCount&&(this.instanceCount=e.instanceCount),void 0!==e.geometryCount&&(this.geometryCount=e.geometryCount),void 0!==e.pGeometries&&(this.pGeometries=e.pGeometries))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkAccelerationStructureInfoNV.pNext' isn't allowed to be filled")}get type(){return this.memoryViewInt32[4]}set type(e){this.memoryViewInt32[4]=e}get flags(){return this.memoryViewInt32[5]}set flags(e){this.memoryViewInt32[5]=e}get instanceCount(){return this.memoryViewUint32[6]}set instanceCount(e){this.memoryViewUint32[6]=e}get geometryCount(){return this.memoryViewUint32[7]}set geometryCount(e){this.memoryViewUint32[7]=e}get pGeometries(){return this._pGeometries}set pGeometries(e){null!==e?this._pGeometries=e:null===e&&(this._pGeometries=null)}}VkAccelerationStructureInfoNV.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pGeometries){let e=this._pGeometries;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pGeometriesNative=t,this.memoryViewBigInt64[4]=t.address}return!0},VkAccelerationStructureInfoNV.prototype.reflect=function(e){},VkAccelerationStructureInfoNV.byteLength=40,VkAccelerationStructureInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},type:{byteOffset:16,byteLength:4},flags:{byteOffset:20,byteLength:4},instanceCount:{byteOffset:24,byteLength:4},geometryCount:{byteOffset:28,byteLength:4},pGeometries:{byteOffset:32,byteLength:8}};class VkAccelerationStructureCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._info=new VkAccelerationStructureInfoNV({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+24}),this.sType=1000165001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.compactedSize&&(this.compactedSize=e.compactedSize),void 0!==e.info&&(this.info=e.info))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkAccelerationStructureCreateInfoNV.pNext' isn't allowed to be filled")}get compactedSize(){return this.memoryViewBigUint64[2]}set compactedSize(e){this.memoryViewBigUint64[2]=BigInt(e)}get info(){return this._info}set info(e){null!==e?(e.flush(),this._info=e):null===e&&(this._info=null)}}VkAccelerationStructureCreateInfoNV.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._info){let e=this._info;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+40);new Uint8Array(this.memoryBuffer).set(t,24)}}return!0},VkAccelerationStructureCreateInfoNV.prototype.reflect=function(e){},VkAccelerationStructureCreateInfoNV.byteLength=64,VkAccelerationStructureCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},compactedSize:{byteOffset:16,byteLength:8},info:{byteOffset:24,byteLength:40}};class VkBindAccelerationStructureMemoryInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+56)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+56)/4)):(this.memoryBuffer=new ArrayBuffer(56),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._accelerationStructure=null,this._memory=null,this._pDeviceIndices=null,this.sType=1000165006,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.accelerationStructure&&(this.accelerationStructure=e.accelerationStructure),void 0!==e.memory&&(this.memory=e.memory),void 0!==e.memoryOffset&&(this.memoryOffset=e.memoryOffset),void 0!==e.deviceIndexCount&&(this.deviceIndexCount=e.deviceIndexCount),void 0!==e.pDeviceIndices&&(this.pDeviceIndices=e.pDeviceIndices))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBindAccelerationStructureMemoryInfoNV.pNext' isn't allowed to be filled")}get accelerationStructure(){return this._accelerationStructure}set accelerationStructure(e){null!==e?(this._accelerationStructure=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._accelerationStructure=null,this.memoryViewBigInt64[2]=BI0)}get memory(){return this._memory}set memory(e){null!==e?(this._memory=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._memory=null,this.memoryViewBigInt64[3]=BI0)}get memoryOffset(){return this.memoryViewBigUint64[4]}set memoryOffset(e){this.memoryViewBigUint64[4]=BigInt(e)}get deviceIndexCount(){return this.memoryViewUint32[10]}set deviceIndexCount(e){this.memoryViewUint32[10]=e}get pDeviceIndices(){return this._pDeviceIndices}set pDeviceIndices(e){null!==e?(this._pDeviceIndices=e,this.memoryViewBigInt64[6]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pDeviceIndices=null,this.memoryViewBigInt64[6]=BI0)}}VkBindAccelerationStructureMemoryInfoNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBindAccelerationStructureMemoryInfoNV.prototype.reflect=function(e){},VkBindAccelerationStructureMemoryInfoNV.byteLength=56,VkBindAccelerationStructureMemoryInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},accelerationStructure:{byteOffset:16,byteLength:8},memory:{byteOffset:24,byteLength:8},memoryOffset:{byteOffset:32,byteLength:8},deviceIndexCount:{byteOffset:40,byteLength:4},pDeviceIndices:{byteOffset:48,byteLength:8}};class VkWriteDescriptorSetAccelerationStructureNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pAccelerationStructures=null,this._pAccelerationStructuresNative=null,this.sType=1000165007,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.accelerationStructureCount&&(this.accelerationStructureCount=e.accelerationStructureCount),void 0!==e.pAccelerationStructures&&(this.pAccelerationStructures=e.pAccelerationStructures))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkWriteDescriptorSetAccelerationStructureNV.pNext' isn't allowed to be filled")}get accelerationStructureCount(){return this.memoryViewUint32[4]}set accelerationStructureCount(e){this.memoryViewUint32[4]=e}get pAccelerationStructures(){return this._pAccelerationStructures}set pAccelerationStructures(e){null!==e?this._pAccelerationStructures=e:null===e&&(this._pAccelerationStructures=null)}}VkWriteDescriptorSetAccelerationStructureNV.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pAccelerationStructures){let e=this._pAccelerationStructures;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pAccelerationStructuresNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkWriteDescriptorSetAccelerationStructureNV.prototype.reflect=function(e){},VkWriteDescriptorSetAccelerationStructureNV.byteLength=32,VkWriteDescriptorSetAccelerationStructureNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},accelerationStructureCount:{byteOffset:16,byteLength:4},pAccelerationStructures:{byteOffset:24,byteLength:8}};class VkAccelerationStructureMemoryRequirementsInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._accelerationStructure=null,this.sType=1000165008,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.type&&(this.type=e.type),void 0!==e.accelerationStructure&&(this.accelerationStructure=e.accelerationStructure))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkAccelerationStructureMemoryRequirementsInfoNV.pNext' isn't allowed to be filled")}get type(){return this.memoryViewInt32[4]}set type(e){this.memoryViewInt32[4]=e}get accelerationStructure(){return this._accelerationStructure}set accelerationStructure(e){null!==e?(this._accelerationStructure=e,this.memoryViewBigInt64[3]=e.memoryViewBigInt64[0]):null===e&&(this._accelerationStructure=null,this.memoryViewBigInt64[3]=BI0)}}VkAccelerationStructureMemoryRequirementsInfoNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkAccelerationStructureMemoryRequirementsInfoNV.prototype.reflect=function(e){},VkAccelerationStructureMemoryRequirementsInfoNV.byteLength=32,VkAccelerationStructureMemoryRequirementsInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},type:{byteOffset:16,byteLength:4},accelerationStructure:{byteOffset:24,byteLength:8}};class VkPhysicalDeviceRayTracingPropertiesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+64)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+64)/8)):(this.memoryBuffer=new ArrayBuffer(64),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000165009,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceRayTracingPropertiesNV.pNext' isn't allowed to be filled")}get shaderGroupHandleSize(){return this.memoryViewUint32[4]}get maxRecursionDepth(){return this.memoryViewUint32[5]}get maxShaderGroupStride(){return this.memoryViewUint32[6]}get shaderGroupBaseAlignment(){return this.memoryViewUint32[7]}get maxGeometryCount(){return this.memoryViewBigUint64[4]}get maxInstanceCount(){return this.memoryViewBigUint64[5]}get maxTriangleCount(){return this.memoryViewBigUint64[6]}get maxDescriptorSetAccelerationStructures(){return this.memoryViewUint32[14]}}VkPhysicalDeviceRayTracingPropertiesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceRayTracingPropertiesNV.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(64)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,64),0)},VkPhysicalDeviceRayTracingPropertiesNV.byteLength=64,VkPhysicalDeviceRayTracingPropertiesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shaderGroupHandleSize:{byteOffset:16,byteLength:4},maxRecursionDepth:{byteOffset:20,byteLength:4},maxShaderGroupStride:{byteOffset:24,byteLength:4},shaderGroupBaseAlignment:{byteOffset:28,byteLength:4},maxGeometryCount:{byteOffset:32,byteLength:8},maxInstanceCount:{byteOffset:40,byteLength:8},maxTriangleCount:{byteOffset:48,byteLength:8},maxDescriptorSetAccelerationStructures:{byteOffset:56,byteLength:4}};class VkDrmFormatModifierPropertiesListEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDrmFormatModifierProperties=null,this._pDrmFormatModifierPropertiesNative=null,this.sType=1000158e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDrmFormatModifierPropertiesListEXT.pNext' isn't allowed to be filled")}get drmFormatModifierCount(){return this.memoryViewUint32[4]}get pDrmFormatModifierProperties(){return this._pDrmFormatModifierProperties}}VkDrmFormatModifierPropertiesListEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDrmFormatModifierPropertiesListEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkDrmFormatModifierPropertiesListEXT.byteLength=32,VkDrmFormatModifierPropertiesListEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},drmFormatModifierCount:{byteOffset:16,byteLength:4},pDrmFormatModifierProperties:{byteOffset:24,byteLength:8}};class VkDrmFormatModifierPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+16)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer))}get drmFormatModifier(){return this.memoryViewBigUint64[0]}get drmFormatModifierPlaneCount(){return this.memoryViewUint32[2]}get drmFormatModifierTilingFeatures(){return this.memoryViewInt32[3]}}VkDrmFormatModifierPropertiesEXT.prototype.flush=function(){return!0},VkDrmFormatModifierPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(16)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,16),0)},VkDrmFormatModifierPropertiesEXT.byteLength=16,VkDrmFormatModifierPropertiesEXT.memoryLayout={drmFormatModifier:{byteOffset:0,byteLength:8},drmFormatModifierPlaneCount:{byteOffset:8,byteLength:4},drmFormatModifierTilingFeatures:{byteOffset:12,byteLength:4}};class VkPhysicalDeviceImageDrmFormatModifierInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pQueueFamilyIndices=null,this.sType=1000158002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.drmFormatModifier&&(this.drmFormatModifier=e.drmFormatModifier),void 0!==e.sharingMode&&(this.sharingMode=e.sharingMode),void 0!==e.queueFamilyIndexCount&&(this.queueFamilyIndexCount=e.queueFamilyIndexCount),void 0!==e.pQueueFamilyIndices&&(this.pQueueFamilyIndices=e.pQueueFamilyIndices))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceImageDrmFormatModifierInfoEXT.pNext' isn't allowed to be filled")}get drmFormatModifier(){return this.memoryViewBigUint64[2]}set drmFormatModifier(e){this.memoryViewBigUint64[2]=BigInt(e)}get sharingMode(){return this.memoryViewInt32[6]}set sharingMode(e){this.memoryViewInt32[6]=e}get queueFamilyIndexCount(){return this.memoryViewUint32[7]}set queueFamilyIndexCount(e){this.memoryViewUint32[7]=e}get pQueueFamilyIndices(){return this._pQueueFamilyIndices}set pQueueFamilyIndices(e){null!==e?(this._pQueueFamilyIndices=e,this.memoryViewBigInt64[4]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pQueueFamilyIndices=null,this.memoryViewBigInt64[4]=BI0)}}VkPhysicalDeviceImageDrmFormatModifierInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceImageDrmFormatModifierInfoEXT.prototype.reflect=function(e){},VkPhysicalDeviceImageDrmFormatModifierInfoEXT.byteLength=40,VkPhysicalDeviceImageDrmFormatModifierInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},drmFormatModifier:{byteOffset:16,byteLength:8},sharingMode:{byteOffset:24,byteLength:4},queueFamilyIndexCount:{byteOffset:28,byteLength:4},pQueueFamilyIndices:{byteOffset:32,byteLength:8}};class VkImageDrmFormatModifierListCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pDrmFormatModifiers=null,this.sType=1000158003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.drmFormatModifierCount&&(this.drmFormatModifierCount=e.drmFormatModifierCount),void 0!==e.pDrmFormatModifiers&&(this.pDrmFormatModifiers=e.pDrmFormatModifiers))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImageDrmFormatModifierListCreateInfoEXT.pNext' isn't allowed to be filled")}get drmFormatModifierCount(){return this.memoryViewUint32[4]}set drmFormatModifierCount(e){this.memoryViewUint32[4]=e}get pDrmFormatModifiers(){return this._pDrmFormatModifiers}set pDrmFormatModifiers(e){null!==e?(this._pDrmFormatModifiers=e,this.memoryViewBigInt64[3]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pDrmFormatModifiers=null,this.memoryViewBigInt64[3]=BI0)}}VkImageDrmFormatModifierListCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageDrmFormatModifierListCreateInfoEXT.prototype.reflect=function(e){},VkImageDrmFormatModifierListCreateInfoEXT.byteLength=32,VkImageDrmFormatModifierListCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},drmFormatModifierCount:{byteOffset:16,byteLength:4},pDrmFormatModifiers:{byteOffset:24,byteLength:8}};class VkImageDrmFormatModifierExplicitCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pPlaneLayouts=null,this._pPlaneLayoutsNative=null,this.sType=1000158004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.drmFormatModifier&&(this.drmFormatModifier=e.drmFormatModifier),void 0!==e.drmFormatModifierPlaneCount&&(this.drmFormatModifierPlaneCount=e.drmFormatModifierPlaneCount),void 0!==e.pPlaneLayouts&&(this.pPlaneLayouts=e.pPlaneLayouts))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImageDrmFormatModifierExplicitCreateInfoEXT.pNext' isn't allowed to be filled")}get drmFormatModifier(){return this.memoryViewBigUint64[2]}set drmFormatModifier(e){this.memoryViewBigUint64[2]=BigInt(e)}get drmFormatModifierPlaneCount(){return this.memoryViewUint32[6]}set drmFormatModifierPlaneCount(e){this.memoryViewUint32[6]=e}get pPlaneLayouts(){return this._pPlaneLayouts}set pPlaneLayouts(e){null!==e?this._pPlaneLayouts=e:null===e&&(this._pPlaneLayouts=null)}}VkImageDrmFormatModifierExplicitCreateInfoEXT.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pPlaneLayouts){let e=this._pPlaneLayouts;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pPlaneLayoutsNative=t,this.memoryViewBigInt64[4]=t.address}return!0},VkImageDrmFormatModifierExplicitCreateInfoEXT.prototype.reflect=function(e){},VkImageDrmFormatModifierExplicitCreateInfoEXT.byteLength=40,VkImageDrmFormatModifierExplicitCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},drmFormatModifier:{byteOffset:16,byteLength:8},drmFormatModifierPlaneCount:{byteOffset:24,byteLength:4},pPlaneLayouts:{byteOffset:32,byteLength:8}};class VkImageDrmFormatModifierPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000158005,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImageDrmFormatModifierPropertiesEXT.pNext' isn't allowed to be filled")}get drmFormatModifier(){return this.memoryViewBigUint64[2]}}VkImageDrmFormatModifierPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageDrmFormatModifierPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkImageDrmFormatModifierPropertiesEXT.byteLength=24,VkImageDrmFormatModifierPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},drmFormatModifier:{byteOffset:16,byteLength:8}};class VkImageStencilUsageCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000246e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.stencilUsage&&(this.stencilUsage=e.stencilUsage))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImageStencilUsageCreateInfoEXT.pNext' isn't allowed to be filled")}get stencilUsage(){return this.memoryViewInt32[4]}set stencilUsage(e){this.memoryViewInt32[4]=e}}VkImageStencilUsageCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageStencilUsageCreateInfoEXT.prototype.reflect=function(e){},VkImageStencilUsageCreateInfoEXT.byteLength=24,VkImageStencilUsageCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},stencilUsage:{byteOffset:16,byteLength:4}};class VkDeviceMemoryOverallocationCreateInfoAMD{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000189e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.overallocationBehavior&&(this.overallocationBehavior=e.overallocationBehavior))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkDeviceMemoryOverallocationCreateInfoAMD.pNext' isn't allowed to be filled")}get overallocationBehavior(){return this.memoryViewInt32[4]}set overallocationBehavior(e){this.memoryViewInt32[4]=e}}VkDeviceMemoryOverallocationCreateInfoAMD.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkDeviceMemoryOverallocationCreateInfoAMD.prototype.reflect=function(e){},VkDeviceMemoryOverallocationCreateInfoAMD.byteLength=24,VkDeviceMemoryOverallocationCreateInfoAMD.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},overallocationBehavior:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceFragmentDensityMapFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000218e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceFragmentDensityMapFeaturesEXT.pNext' isn't allowed to be filled")}get fragmentDensityMap(){return 0!==this.memoryViewUint32[4]}get fragmentDensityMapDynamic(){return 0!==this.memoryViewUint32[5]}get fragmentDensityMapNonSubsampledImages(){return 0!==this.memoryViewUint32[6]}}VkPhysicalDeviceFragmentDensityMapFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceFragmentDensityMapFeaturesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkPhysicalDeviceFragmentDensityMapFeaturesEXT.byteLength=32,VkPhysicalDeviceFragmentDensityMapFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},fragmentDensityMap:{byteOffset:16,byteLength:4},fragmentDensityMapDynamic:{byteOffset:20,byteLength:4},fragmentDensityMapNonSubsampledImages:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceFragmentDensityMapPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._minFragmentDensityTexelSize=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this._maxFragmentDensityTexelSize=new VkExtent2D({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+24}),this.sType=1000218001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceFragmentDensityMapPropertiesEXT.pNext' isn't allowed to be filled")}get minFragmentDensityTexelSize(){return this._minFragmentDensityTexelSize}get maxFragmentDensityTexelSize(){return this._maxFragmentDensityTexelSize}get fragmentDensityInvocations(){return 0!==this.memoryViewUint32[8]}}VkPhysicalDeviceFragmentDensityMapPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceFragmentDensityMapPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(40)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,40),0)},VkPhysicalDeviceFragmentDensityMapPropertiesEXT.byteLength=40,VkPhysicalDeviceFragmentDensityMapPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},minFragmentDensityTexelSize:{byteOffset:16,byteLength:8},maxFragmentDensityTexelSize:{byteOffset:24,byteLength:8},fragmentDensityInvocations:{byteOffset:32,byteLength:4}};class VkRenderPassFragmentDensityMapCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._fragmentDensityMapAttachment=new VkAttachmentReference({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+16}),this.sType=1000218002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.fragmentDensityMapAttachment&&(this.fragmentDensityMapAttachment=e.fragmentDensityMapAttachment))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkRenderPassFragmentDensityMapCreateInfoEXT.pNext' isn't allowed to be filled")}get fragmentDensityMapAttachment(){return this._fragmentDensityMapAttachment}set fragmentDensityMapAttachment(e){null!==e?(e.flush(),this._fragmentDensityMapAttachment=e):null===e&&(this._fragmentDensityMapAttachment=null)}}VkRenderPassFragmentDensityMapCreateInfoEXT.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._fragmentDensityMapAttachment){let e=this._fragmentDensityMapAttachment;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,16)}}return!0},VkRenderPassFragmentDensityMapCreateInfoEXT.prototype.reflect=function(e){},VkRenderPassFragmentDensityMapCreateInfoEXT.byteLength=24,VkRenderPassFragmentDensityMapCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},fragmentDensityMapAttachment:{byteOffset:16,byteLength:8}};class VkPhysicalDeviceScalarBlockLayoutFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000221e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.scalarBlockLayout&&(this.scalarBlockLayout=e.scalarBlockLayout))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.pNext' isn't allowed to be filled")}get scalarBlockLayout(){return 0!==this.memoryViewUint32[4]}set scalarBlockLayout(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.byteLength=24,VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},scalarBlockLayout:{byteOffset:16,byteLength:4}};class VkSurfaceProtectedCapabilitiesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000239e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.supportsProtected&&(this.supportsProtected=e.supportsProtected))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkSurfaceProtectedCapabilitiesKHR.pNext' isn't allowed to be filled")}get supportsProtected(){return 0!==this.memoryViewUint32[4]}set supportsProtected(e){this.memoryViewUint32[4]=0|e}}VkSurfaceProtectedCapabilitiesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkSurfaceProtectedCapabilitiesKHR.prototype.reflect=function(e){},VkSurfaceProtectedCapabilitiesKHR.byteLength=24,VkSurfaceProtectedCapabilitiesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},supportsProtected:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000253e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.uniformBufferStandardLayout&&(this.uniformBufferStandardLayout=e.uniformBufferStandardLayout))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.pNext' isn't allowed to be filled")}get uniformBufferStandardLayout(){return 0!==this.memoryViewUint32[4]}set uniformBufferStandardLayout(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.prototype.reflect=function(e){},VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.byteLength=24,VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},uniformBufferStandardLayout:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceDepthClipEnableFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000102e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.depthClipEnable&&(this.depthClipEnable=e.depthClipEnable))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceDepthClipEnableFeaturesEXT.pNext' isn't allowed to be filled")}get depthClipEnable(){return 0!==this.memoryViewUint32[4]}set depthClipEnable(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceDepthClipEnableFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceDepthClipEnableFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceDepthClipEnableFeaturesEXT.byteLength=24,VkPhysicalDeviceDepthClipEnableFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},depthClipEnable:{byteOffset:16,byteLength:4}};class VkPipelineRasterizationDepthClipStateCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000102001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.depthClipEnable&&(this.depthClipEnable=e.depthClipEnable))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineRasterizationDepthClipStateCreateInfoEXT.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get depthClipEnable(){return 0!==this.memoryViewUint32[5]}set depthClipEnable(e){this.memoryViewUint32[5]=0|e}}VkPipelineRasterizationDepthClipStateCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineRasterizationDepthClipStateCreateInfoEXT.prototype.reflect=function(e){},VkPipelineRasterizationDepthClipStateCreateInfoEXT.byteLength=24,VkPipelineRasterizationDepthClipStateCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},depthClipEnable:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceMemoryBudgetPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+272)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+272)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+272)/8)):(this.memoryBuffer=new ArrayBuffer(272),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this._heapBudget=[...Array(16)].fill(0),this._heapUsage=[...Array(16)].fill(0),this.sType=1000237e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceMemoryBudgetPropertiesEXT.pNext' isn't allowed to be filled")}get heapBudget(){return[this.memoryViewBigUint64[2],this.memoryViewBigUint64[3],this.memoryViewBigUint64[4],this.memoryViewBigUint64[5],this.memoryViewBigUint64[6],this.memoryViewBigUint64[7],this.memoryViewBigUint64[8],this.memoryViewBigUint64[9],this.memoryViewBigUint64[10],this.memoryViewBigUint64[11],this.memoryViewBigUint64[12],this.memoryViewBigUint64[13],this.memoryViewBigUint64[14],this.memoryViewBigUint64[15],this.memoryViewBigUint64[16],this.memoryViewBigUint64[17]]}get heapUsage(){return[this.memoryViewBigUint64[18],this.memoryViewBigUint64[19],this.memoryViewBigUint64[20],this.memoryViewBigUint64[21],this.memoryViewBigUint64[22],this.memoryViewBigUint64[23],this.memoryViewBigUint64[24],this.memoryViewBigUint64[25],this.memoryViewBigUint64[26],this.memoryViewBigUint64[27],this.memoryViewBigUint64[28],this.memoryViewBigUint64[29],this.memoryViewBigUint64[30],this.memoryViewBigUint64[31],this.memoryViewBigUint64[32],this.memoryViewBigUint64[33]]}}VkPhysicalDeviceMemoryBudgetPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceMemoryBudgetPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(272)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,272),0)},VkPhysicalDeviceMemoryBudgetPropertiesEXT.byteLength=272,VkPhysicalDeviceMemoryBudgetPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},heapBudget:{byteOffset:16,byteLength:128},heapUsage:{byteOffset:144,byteLength:128}};class VkPhysicalDeviceMemoryPriorityFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000238e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.memoryPriority&&(this.memoryPriority=e.memoryPriority))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceMemoryPriorityFeaturesEXT.pNext' isn't allowed to be filled")}get memoryPriority(){return 0!==this.memoryViewUint32[4]}set memoryPriority(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceMemoryPriorityFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceMemoryPriorityFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceMemoryPriorityFeaturesEXT.byteLength=24,VkPhysicalDeviceMemoryPriorityFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},memoryPriority:{byteOffset:16,byteLength:4}};class VkMemoryPriorityAllocateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000238001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.priority&&(this.priority=e.priority))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkMemoryPriorityAllocateInfoEXT.pNext' isn't allowed to be filled")}get priority(){return this.memoryViewFloat32[4]}set priority(e){this.memoryViewFloat32[4]=e}}VkMemoryPriorityAllocateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkMemoryPriorityAllocateInfoEXT.prototype.reflect=function(e){},VkMemoryPriorityAllocateInfoEXT.byteLength=24,VkMemoryPriorityAllocateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},priority:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceBufferDeviceAddressFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000244e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.bufferDeviceAddress&&(this.bufferDeviceAddress=e.bufferDeviceAddress),void 0!==e.bufferDeviceAddressCaptureReplay&&(this.bufferDeviceAddressCaptureReplay=e.bufferDeviceAddressCaptureReplay),void 0!==e.bufferDeviceAddressMultiDevice&&(this.bufferDeviceAddressMultiDevice=e.bufferDeviceAddressMultiDevice))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.pNext' isn't allowed to be filled")}get bufferDeviceAddress(){return 0!==this.memoryViewUint32[4]}set bufferDeviceAddress(e){this.memoryViewUint32[4]=0|e}get bufferDeviceAddressCaptureReplay(){return 0!==this.memoryViewUint32[5]}set bufferDeviceAddressCaptureReplay(e){this.memoryViewUint32[5]=0|e}get bufferDeviceAddressMultiDevice(){return 0!==this.memoryViewUint32[6]}set bufferDeviceAddressMultiDevice(e){this.memoryViewUint32[6]=0|e}}VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.byteLength=32,VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},bufferDeviceAddress:{byteOffset:16,byteLength:4},bufferDeviceAddressCaptureReplay:{byteOffset:20,byteLength:4},bufferDeviceAddressMultiDevice:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceBufferAddressFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000244e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.bufferDeviceAddress&&(this.bufferDeviceAddress=e.bufferDeviceAddress),void 0!==e.bufferDeviceAddressCaptureReplay&&(this.bufferDeviceAddressCaptureReplay=e.bufferDeviceAddressCaptureReplay),void 0!==e.bufferDeviceAddressMultiDevice&&(this.bufferDeviceAddressMultiDevice=e.bufferDeviceAddressMultiDevice))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceBufferAddressFeaturesEXT.pNext' isn't allowed to be filled")}get bufferDeviceAddress(){return 0!==this.memoryViewUint32[4]}set bufferDeviceAddress(e){this.memoryViewUint32[4]=0|e}get bufferDeviceAddressCaptureReplay(){return 0!==this.memoryViewUint32[5]}set bufferDeviceAddressCaptureReplay(e){this.memoryViewUint32[5]=0|e}get bufferDeviceAddressMultiDevice(){return 0!==this.memoryViewUint32[6]}set bufferDeviceAddressMultiDevice(e){this.memoryViewUint32[6]=0|e}}VkPhysicalDeviceBufferAddressFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceBufferAddressFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceBufferAddressFeaturesEXT.byteLength=32,VkPhysicalDeviceBufferAddressFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},bufferDeviceAddress:{byteOffset:16,byteLength:4},bufferDeviceAddressCaptureReplay:{byteOffset:20,byteLength:4},bufferDeviceAddressMultiDevice:{byteOffset:24,byteLength:4}};class VkBufferDeviceAddressInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._buffer=null,this.sType=1000244001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.buffer&&(this.buffer=e.buffer))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBufferDeviceAddressInfoEXT.pNext' isn't allowed to be filled")}get buffer(){return this._buffer}set buffer(e){null!==e?(this._buffer=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._buffer=null,this.memoryViewBigInt64[2]=BI0)}}VkBufferDeviceAddressInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBufferDeviceAddressInfoEXT.prototype.reflect=function(e){},VkBufferDeviceAddressInfoEXT.byteLength=24,VkBufferDeviceAddressInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},buffer:{byteOffset:16,byteLength:8}};class VkBufferDeviceAddressCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000244002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.deviceAddress&&(this.deviceAddress=e.deviceAddress))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkBufferDeviceAddressCreateInfoEXT.pNext' isn't allowed to be filled")}get deviceAddress(){return this.memoryViewBigUint64[2]}set deviceAddress(e){this.memoryViewBigUint64[2]=BigInt(e)}}VkBufferDeviceAddressCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkBufferDeviceAddressCreateInfoEXT.prototype.reflect=function(e){},VkBufferDeviceAddressCreateInfoEXT.byteLength=24,VkBufferDeviceAddressCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},deviceAddress:{byteOffset:16,byteLength:8}};class VkPhysicalDeviceImageViewImageFormatInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=100017e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.imageViewType&&(this.imageViewType=e.imageViewType))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceImageViewImageFormatInfoEXT.pNext' isn't allowed to be filled")}get imageViewType(){return this.memoryViewInt32[4]}set imageViewType(e){this.memoryViewInt32[4]=e}}VkPhysicalDeviceImageViewImageFormatInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceImageViewImageFormatInfoEXT.prototype.reflect=function(e){},VkPhysicalDeviceImageViewImageFormatInfoEXT.byteLength=24,VkPhysicalDeviceImageViewImageFormatInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},imageViewType:{byteOffset:16,byteLength:4}};class VkFilterCubicImageViewImageFormatPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000170001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkFilterCubicImageViewImageFormatPropertiesEXT.pNext' isn't allowed to be filled")}get filterCubic(){return 0!==this.memoryViewUint32[4]}get filterCubicMinmax(){return 0!==this.memoryViewUint32[5]}}VkFilterCubicImageViewImageFormatPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkFilterCubicImageViewImageFormatPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkFilterCubicImageViewImageFormatPropertiesEXT.byteLength=24,VkFilterCubicImageViewImageFormatPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},filterCubic:{byteOffset:16,byteLength:4},filterCubicMinmax:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceImagelessFramebufferFeaturesKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000108e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.imagelessFramebuffer&&(this.imagelessFramebuffer=e.imagelessFramebuffer))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceImagelessFramebufferFeaturesKHR.pNext' isn't allowed to be filled")}get imagelessFramebuffer(){return 0!==this.memoryViewUint32[4]}set imagelessFramebuffer(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceImagelessFramebufferFeaturesKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceImagelessFramebufferFeaturesKHR.prototype.reflect=function(e){},VkPhysicalDeviceImagelessFramebufferFeaturesKHR.byteLength=24,VkPhysicalDeviceImagelessFramebufferFeaturesKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},imagelessFramebuffer:{byteOffset:16,byteLength:4}};class VkFramebufferAttachmentsCreateInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pAttachmentImageInfos=null,this._pAttachmentImageInfosNative=null,this.sType=1000108001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.attachmentImageInfoCount&&(this.attachmentImageInfoCount=e.attachmentImageInfoCount),void 0!==e.pAttachmentImageInfos&&(this.pAttachmentImageInfos=e.pAttachmentImageInfos))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkFramebufferAttachmentsCreateInfoKHR.pNext' isn't allowed to be filled")}get attachmentImageInfoCount(){return this.memoryViewUint32[4]}set attachmentImageInfoCount(e){this.memoryViewUint32[4]=e}get pAttachmentImageInfos(){return this._pAttachmentImageInfos}set pAttachmentImageInfos(e){null!==e?this._pAttachmentImageInfos=e:null===e&&(this._pAttachmentImageInfos=null)}}VkFramebufferAttachmentsCreateInfoKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pAttachmentImageInfos){let e=this._pAttachmentImageInfos;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pAttachmentImageInfosNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkFramebufferAttachmentsCreateInfoKHR.prototype.reflect=function(e){},VkFramebufferAttachmentsCreateInfoKHR.byteLength=32,VkFramebufferAttachmentsCreateInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},attachmentImageInfoCount:{byteOffset:16,byteLength:4},pAttachmentImageInfos:{byteOffset:24,byteLength:8}};class VkFramebufferAttachmentImageInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pViewFormats=null,this.sType=1000108002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.usage&&(this.usage=e.usage),void 0!==e.width&&(this.width=e.width),void 0!==e.height&&(this.height=e.height),void 0!==e.layerCount&&(this.layerCount=e.layerCount),void 0!==e.viewFormatCount&&(this.viewFormatCount=e.viewFormatCount),void 0!==e.pViewFormats&&(this.pViewFormats=e.pViewFormats))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkFramebufferAttachmentImageInfoKHR.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get usage(){return this.memoryViewInt32[5]}set usage(e){this.memoryViewInt32[5]=e}get width(){return this.memoryViewUint32[6]}set width(e){this.memoryViewUint32[6]=e}get height(){return this.memoryViewUint32[7]}set height(e){this.memoryViewUint32[7]=e}get layerCount(){return this.memoryViewUint32[8]}set layerCount(e){this.memoryViewUint32[8]=e}get viewFormatCount(){return this.memoryViewUint32[9]}set viewFormatCount(e){this.memoryViewUint32[9]=e}get pViewFormats(){return this._pViewFormats}set pViewFormats(e){null!==e?(this._pViewFormats=e,this.memoryViewBigInt64[5]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pViewFormats=null,this.memoryViewBigInt64[5]=BI0)}}VkFramebufferAttachmentImageInfoKHR.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkFramebufferAttachmentImageInfoKHR.prototype.reflect=function(e){},VkFramebufferAttachmentImageInfoKHR.byteLength=48,VkFramebufferAttachmentImageInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},usage:{byteOffset:20,byteLength:4},width:{byteOffset:24,byteLength:4},height:{byteOffset:28,byteLength:4},layerCount:{byteOffset:32,byteLength:4},viewFormatCount:{byteOffset:36,byteLength:4},pViewFormats:{byteOffset:40,byteLength:8}};class VkRenderPassAttachmentBeginInfoKHR{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pAttachments=null,this._pAttachmentsNative=null,this.sType=1000108003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.attachmentCount&&(this.attachmentCount=e.attachmentCount),void 0!==e.pAttachments&&(this.pAttachments=e.pAttachments))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkRenderPassAttachmentBeginInfoKHR.pNext' isn't allowed to be filled")}get attachmentCount(){return this.memoryViewUint32[4]}set attachmentCount(e){this.memoryViewUint32[4]=e}get pAttachments(){return this._pAttachments}set pAttachments(e){null!==e?this._pAttachments=e:null===e&&(this._pAttachments=null)}}VkRenderPassAttachmentBeginInfoKHR.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pAttachments){let e=this._pAttachments;for(let t=0;t<e.length;++t);let t=new NativeObjectArray(e);this._pAttachmentsNative=t,this.memoryViewBigInt64[3]=t.address}return!0},VkRenderPassAttachmentBeginInfoKHR.prototype.reflect=function(e){},VkRenderPassAttachmentBeginInfoKHR.byteLength=32,VkRenderPassAttachmentBeginInfoKHR.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},attachmentCount:{byteOffset:16,byteLength:4},pAttachments:{byteOffset:24,byteLength:8}};class VkPhysicalDeviceCooperativeMatrixFeaturesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000249e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.cooperativeMatrix&&(this.cooperativeMatrix=e.cooperativeMatrix),void 0!==e.cooperativeMatrixRobustBufferAccess&&(this.cooperativeMatrixRobustBufferAccess=e.cooperativeMatrixRobustBufferAccess))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceCooperativeMatrixFeaturesNV.pNext' isn't allowed to be filled")}get cooperativeMatrix(){return 0!==this.memoryViewUint32[4]}set cooperativeMatrix(e){this.memoryViewUint32[4]=0|e}get cooperativeMatrixRobustBufferAccess(){return 0!==this.memoryViewUint32[5]}set cooperativeMatrixRobustBufferAccess(e){this.memoryViewUint32[5]=0|e}}VkPhysicalDeviceCooperativeMatrixFeaturesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceCooperativeMatrixFeaturesNV.prototype.reflect=function(e){},VkPhysicalDeviceCooperativeMatrixFeaturesNV.byteLength=24,VkPhysicalDeviceCooperativeMatrixFeaturesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},cooperativeMatrix:{byteOffset:16,byteLength:4},cooperativeMatrixRobustBufferAccess:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceCooperativeMatrixPropertiesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000249002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceCooperativeMatrixPropertiesNV.pNext' isn't allowed to be filled")}get cooperativeMatrixSupportedStages(){return this.memoryViewInt32[4]}}VkPhysicalDeviceCooperativeMatrixPropertiesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceCooperativeMatrixPropertiesNV.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkPhysicalDeviceCooperativeMatrixPropertiesNV.byteLength=24,VkPhysicalDeviceCooperativeMatrixPropertiesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},cooperativeMatrixSupportedStages:{byteOffset:16,byteLength:4}};class VkCooperativeMatrixPropertiesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000249001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.MSize&&(this.MSize=e.MSize),void 0!==e.NSize&&(this.NSize=e.NSize),void 0!==e.KSize&&(this.KSize=e.KSize),void 0!==e.AType&&(this.AType=e.AType),void 0!==e.BType&&(this.BType=e.BType),void 0!==e.CType&&(this.CType=e.CType),void 0!==e.DType&&(this.DType=e.DType),void 0!==e.scope&&(this.scope=e.scope))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkCooperativeMatrixPropertiesNV.pNext' isn't allowed to be filled")}get MSize(){return this.memoryViewUint32[4]}set MSize(e){this.memoryViewUint32[4]=e}get NSize(){return this.memoryViewUint32[5]}set NSize(e){this.memoryViewUint32[5]=e}get KSize(){return this.memoryViewUint32[6]}set KSize(e){this.memoryViewUint32[6]=e}get AType(){return this.memoryViewInt32[7]}set AType(e){this.memoryViewInt32[7]=e}get BType(){return this.memoryViewInt32[8]}set BType(e){this.memoryViewInt32[8]=e}get CType(){return this.memoryViewInt32[9]}set CType(e){this.memoryViewInt32[9]=e}get DType(){return this.memoryViewInt32[10]}set DType(e){this.memoryViewInt32[10]=e}get scope(){return this.memoryViewInt32[11]}set scope(e){this.memoryViewInt32[11]=e}}VkCooperativeMatrixPropertiesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkCooperativeMatrixPropertiesNV.prototype.reflect=function(e){},VkCooperativeMatrixPropertiesNV.byteLength=48,VkCooperativeMatrixPropertiesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},MSize:{byteOffset:16,byteLength:4},NSize:{byteOffset:20,byteLength:4},KSize:{byteOffset:24,byteLength:4},AType:{byteOffset:28,byteLength:4},BType:{byteOffset:32,byteLength:4},CType:{byteOffset:36,byteLength:4},DType:{byteOffset:40,byteLength:4},scope:{byteOffset:44,byteLength:4}};class VkPhysicalDeviceYcbcrImageArraysFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000252e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.ycbcrImageArrays&&(this.ycbcrImageArrays=e.ycbcrImageArrays))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.pNext' isn't allowed to be filled")}get ycbcrImageArrays(){return 0!==this.memoryViewUint32[4]}set ycbcrImageArrays(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.byteLength=24,VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},ycbcrImageArrays:{byteOffset:16,byteLength:4}};class VkImageViewHandleInfoNVX{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._imageView=null,this._sampler=null,this.sType=100003e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.imageView&&(this.imageView=e.imageView),void 0!==e.descriptorType&&(this.descriptorType=e.descriptorType),void 0!==e.sampler&&(this.sampler=e.sampler))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkImageViewHandleInfoNVX.pNext' isn't allowed to be filled")}get imageView(){return this._imageView}set imageView(e){null!==e?(this._imageView=e,this.memoryViewBigInt64[2]=e.memoryViewBigInt64[0]):null===e&&(this._imageView=null,this.memoryViewBigInt64[2]=BI0)}get descriptorType(){return this.memoryViewInt32[6]}set descriptorType(e){this.memoryViewInt32[6]=e}get sampler(){return this._sampler}set sampler(e){null!==e?(this._sampler=e,this.memoryViewBigInt64[4]=e.memoryViewBigInt64[0]):null===e&&(this._sampler=null,this.memoryViewBigInt64[4]=BI0)}}VkImageViewHandleInfoNVX.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkImageViewHandleInfoNVX.prototype.reflect=function(e){},VkImageViewHandleInfoNVX.byteLength=40,VkImageViewHandleInfoNVX.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},imageView:{byteOffset:16,byteLength:8},descriptorType:{byteOffset:24,byteLength:4},sampler:{byteOffset:32,byteLength:8}};class VkPipelineCreationFeedbackEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+16)/8)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer))}get flags(){return this.memoryViewInt32[0]}get duration(){return this.memoryViewBigUint64[1]}}VkPipelineCreationFeedbackEXT.prototype.flush=function(){return!0},VkPipelineCreationFeedbackEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(16)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,16),0)},VkPipelineCreationFeedbackEXT.byteLength=16,VkPipelineCreationFeedbackEXT.memoryLayout={flags:{byteOffset:0,byteLength:4},duration:{byteOffset:8,byteLength:8}};class VkPipelineCreationFeedbackCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+40)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+40)/4)):(this.memoryBuffer=new ArrayBuffer(40),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this._pPipelineCreationFeedback=null,this._pPipelineStageCreationFeedbacks=null,this._pPipelineStageCreationFeedbacksNative=null,this.sType=1000192e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.pPipelineCreationFeedback&&(this.pPipelineCreationFeedback=e.pPipelineCreationFeedback),void 0!==e.pipelineStageCreationFeedbackCount&&(this.pipelineStageCreationFeedbackCount=e.pipelineStageCreationFeedbackCount),void 0!==e.pPipelineStageCreationFeedbacks&&(this.pPipelineStageCreationFeedbacks=e.pPipelineStageCreationFeedbacks))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineCreationFeedbackCreateInfoEXT.pNext' isn't allowed to be filled")}get pPipelineCreationFeedback(){return this._pPipelineCreationFeedback}set pPipelineCreationFeedback(e){null!==e?(e.flush(),this._pPipelineCreationFeedback=e,this.memoryViewBigInt64[2]=e.memoryAddress):null===e&&(this._pPipelineCreationFeedback=null,this.memoryViewBigInt64[2]=BI0)}get pipelineStageCreationFeedbackCount(){return this.memoryViewUint32[6]}set pipelineStageCreationFeedbackCount(e){this.memoryViewUint32[6]=e}get pPipelineStageCreationFeedbacks(){return this._pPipelineStageCreationFeedbacks}set pPipelineStageCreationFeedbacks(e){null!==e?this._pPipelineStageCreationFeedbacks=e:null===e&&(this._pPipelineStageCreationFeedbacks=null)}}VkPipelineCreationFeedbackCreateInfoEXT.prototype.flush=function(){if(null!==this._pNext&&!this._pNext.flush())return!1;if(null!==this._pPipelineStageCreationFeedbacks){let e=this._pPipelineStageCreationFeedbacks;for(let t=0;t<e.length;++t)if(!e[t].flush())return!1;let t=new NativeObjectArray(e);this._pPipelineStageCreationFeedbacksNative=t,this.memoryViewBigInt64[4]=t.address}return!0},VkPipelineCreationFeedbackCreateInfoEXT.prototype.reflect=function(e){},VkPipelineCreationFeedbackCreateInfoEXT.byteLength=40,VkPipelineCreationFeedbackCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},pPipelineCreationFeedback:{byteOffset:16,byteLength:8},pipelineStageCreationFeedbackCount:{byteOffset:24,byteLength:4},pPipelineStageCreationFeedbacks:{byteOffset:32,byteLength:8}};class VkHeadlessSurfaceCreateInfoEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000256e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkHeadlessSurfaceCreateInfoEXT.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}}VkHeadlessSurfaceCreateInfoEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkHeadlessSurfaceCreateInfoEXT.prototype.reflect=function(e){},VkHeadlessSurfaceCreateInfoEXT.byteLength=24,VkHeadlessSurfaceCreateInfoEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceCoverageReductionModeFeaturesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=100025e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.coverageReductionMode&&(this.coverageReductionMode=e.coverageReductionMode))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceCoverageReductionModeFeaturesNV.pNext' isn't allowed to be filled")}get coverageReductionMode(){return 0!==this.memoryViewUint32[4]}set coverageReductionMode(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceCoverageReductionModeFeaturesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceCoverageReductionModeFeaturesNV.prototype.reflect=function(e){},VkPhysicalDeviceCoverageReductionModeFeaturesNV.byteLength=24,VkPhysicalDeviceCoverageReductionModeFeaturesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},coverageReductionMode:{byteOffset:16,byteLength:4}};class VkPipelineCoverageReductionStateCreateInfoNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000250001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.flags&&(this.flags=e.flags),void 0!==e.coverageReductionMode&&(this.coverageReductionMode=e.coverageReductionMode))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPipelineCoverageReductionStateCreateInfoNV.pNext' isn't allowed to be filled")}get flags(){return this.memoryViewInt32[4]}set flags(e){this.memoryViewInt32[4]=e}get coverageReductionMode(){return this.memoryViewInt32[5]}set coverageReductionMode(e){this.memoryViewInt32[5]=e}}VkPipelineCoverageReductionStateCreateInfoNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPipelineCoverageReductionStateCreateInfoNV.prototype.reflect=function(e){},VkPipelineCoverageReductionStateCreateInfoNV.byteLength=24,VkPipelineCoverageReductionStateCreateInfoNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},flags:{byteOffset:16,byteLength:4},coverageReductionMode:{byteOffset:20,byteLength:4}};class VkFramebufferMixedSamplesCombinationNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000250002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkFramebufferMixedSamplesCombinationNV.pNext' isn't allowed to be filled")}get coverageReductionMode(){return this.memoryViewInt32[4]}get rasterizationSamples(){return this.memoryViewInt32[5]}get depthStencilSamples(){return this.memoryViewInt32[6]}get colorSamples(){return this.memoryViewInt32[7]}}VkFramebufferMixedSamplesCombinationNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkFramebufferMixedSamplesCombinationNV.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(32)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,32),0)},VkFramebufferMixedSamplesCombinationNV.byteLength=32,VkFramebufferMixedSamplesCombinationNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},coverageReductionMode:{byteOffset:16,byteLength:4},rasterizationSamples:{byteOffset:20,byteLength:4},depthStencilSamples:{byteOffset:24,byteLength:4},colorSamples:{byteOffset:28,byteLength:4}};class VkPhysicalDeviceShaderIntegerFunctions2INTEL{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000209e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.shaderIntegerFunctions2&&(this.shaderIntegerFunctions2=e.shaderIntegerFunctions2))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceShaderIntegerFunctions2INTEL.pNext' isn't allowed to be filled")}get shaderIntegerFunctions2(){return 0!==this.memoryViewUint32[4]}set shaderIntegerFunctions2(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceShaderIntegerFunctions2INTEL.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceShaderIntegerFunctions2INTEL.prototype.reflect=function(e){},VkPhysicalDeviceShaderIntegerFunctions2INTEL.byteLength=24,VkPhysicalDeviceShaderIntegerFunctions2INTEL.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shaderIntegerFunctions2:{byteOffset:16,byteLength:4}};class VkPerformanceValueINTEL{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer)),this._data=new VkPerformanceValueDataINTEL({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+8}),"object"==typeof e&&(void 0!==e.type&&(this.type=e.type),void 0!==e.data&&(this.data=e.data))}get type(){return this.memoryViewInt32[0]}set type(e){this.memoryViewInt32[0]=e}get data(){return this._data}set data(e){null!==e?(e.flush(),this._data=e):null===e&&(this._data=null)}}VkPerformanceValueINTEL.prototype.flush=function(){if(null!==this._data){let e=this._data;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,8)}}return!0},VkPerformanceValueINTEL.prototype.reflect=function(e){},VkPerformanceValueINTEL.byteLength=16,VkPerformanceValueINTEL.memoryLayout={type:{byteOffset:0,byteLength:4},data:{byteOffset:8,byteLength:8}};class VkInitializePerformanceApiInfoINTEL{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this._pUserData=null,this.sType=1000210001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.pUserData&&(this.pUserData=e.pUserData))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkInitializePerformanceApiInfoINTEL.pNext' isn't allowed to be filled")}get pUserData(){return this._pUserData}set pUserData(e){null!==e?(this._pUserData=e,this.memoryViewBigInt64[2]=getAddressFromArrayBuffer(e.buffer)):null===e&&(this._pUserData=null,this.memoryViewBigInt64[2]=BI0)}}VkInitializePerformanceApiInfoINTEL.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkInitializePerformanceApiInfoINTEL.prototype.reflect=function(e){},VkInitializePerformanceApiInfoINTEL.byteLength=24,VkInitializePerformanceApiInfoINTEL.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},pUserData:{byteOffset:16,byteLength:8}};class VkQueryPoolCreateInfoINTEL{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=100021e4,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.performanceCountersSampling&&(this.performanceCountersSampling=e.performanceCountersSampling))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkQueryPoolCreateInfoINTEL.pNext' isn't allowed to be filled")}get performanceCountersSampling(){return this.memoryViewInt32[4]}set performanceCountersSampling(e){this.memoryViewInt32[4]=e}}VkQueryPoolCreateInfoINTEL.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkQueryPoolCreateInfoINTEL.prototype.reflect=function(e){},VkQueryPoolCreateInfoINTEL.byteLength=24,VkQueryPoolCreateInfoINTEL.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},performanceCountersSampling:{byteOffset:16,byteLength:4}};class VkPerformanceMarkerInfoINTEL{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000210002,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.marker&&(this.marker=e.marker))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPerformanceMarkerInfoINTEL.pNext' isn't allowed to be filled")}get marker(){return this.memoryViewBigUint64[2]}set marker(e){this.memoryViewBigUint64[2]=BigInt(e)}}VkPerformanceMarkerInfoINTEL.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPerformanceMarkerInfoINTEL.prototype.reflect=function(e){},VkPerformanceMarkerInfoINTEL.byteLength=24,VkPerformanceMarkerInfoINTEL.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},marker:{byteOffset:16,byteLength:8}};class VkPerformanceStreamMarkerInfoINTEL{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000210003,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.marker&&(this.marker=e.marker))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPerformanceStreamMarkerInfoINTEL.pNext' isn't allowed to be filled")}get marker(){return this.memoryViewUint32[4]}set marker(e){this.memoryViewUint32[4]=e}}VkPerformanceStreamMarkerInfoINTEL.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPerformanceStreamMarkerInfoINTEL.prototype.reflect=function(e){},VkPerformanceStreamMarkerInfoINTEL.byteLength=24,VkPerformanceStreamMarkerInfoINTEL.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},marker:{byteOffset:16,byteLength:4}};class VkPerformanceOverrideInfoINTEL{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000210004,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.type&&(this.type=e.type),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.parameter&&(this.parameter=e.parameter))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPerformanceOverrideInfoINTEL.pNext' isn't allowed to be filled")}get type(){return this.memoryViewInt32[4]}set type(e){this.memoryViewInt32[4]=e}get enable(){return 0!==this.memoryViewUint32[5]}set enable(e){this.memoryViewUint32[5]=0|e}get parameter(){return this.memoryViewBigUint64[3]}set parameter(e){this.memoryViewBigUint64[3]=BigInt(e)}}VkPerformanceOverrideInfoINTEL.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPerformanceOverrideInfoINTEL.prototype.reflect=function(e){},VkPerformanceOverrideInfoINTEL.byteLength=32,VkPerformanceOverrideInfoINTEL.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},type:{byteOffset:16,byteLength:4},enable:{byteOffset:20,byteLength:4},parameter:{byteOffset:24,byteLength:8}};class VkPerformanceConfigurationAcquireInfoINTEL{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._pNext=null,this.sType=1000210005,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.type&&(this.type=e.type))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPerformanceConfigurationAcquireInfoINTEL.pNext' isn't allowed to be filled")}get type(){return this.memoryViewInt32[4]}set type(e){this.memoryViewInt32[4]=e}}VkPerformanceConfigurationAcquireInfoINTEL.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPerformanceConfigurationAcquireInfoINTEL.prototype.reflect=function(e){},VkPerformanceConfigurationAcquireInfoINTEL.byteLength=24,VkPerformanceConfigurationAcquireInfoINTEL.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},type:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceShaderSMBuiltinsPropertiesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000154001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.pNext' isn't allowed to be filled")}get shaderSMCount(){return this.memoryViewUint32[4]}get shaderWarpsPerSM(){return this.memoryViewUint32[5]}}VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(24)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,24),0)},VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.byteLength=24,VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shaderSMCount:{byteOffset:16,byteLength:4},shaderWarpsPerSM:{byteOffset:20,byteLength:4}};class VkPhysicalDeviceShaderSMBuiltinsFeaturesNV{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000154e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.shaderSMBuiltins&&(this.shaderSMBuiltins=e.shaderSMBuiltins))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.pNext' isn't allowed to be filled")}get shaderSMBuiltins(){return 0!==this.memoryViewUint32[4]}set shaderSMBuiltins(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.prototype.reflect=function(e){},VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.byteLength=24,VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shaderSMBuiltins:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+32)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+32)/4)):(this.memoryBuffer=new ArrayBuffer(32),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000251e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.fragmentShaderSampleInterlock&&(this.fragmentShaderSampleInterlock=e.fragmentShaderSampleInterlock),void 0!==e.fragmentShaderPixelInterlock&&(this.fragmentShaderPixelInterlock=e.fragmentShaderPixelInterlock),void 0!==e.fragmentShaderShadingRateInterlock&&(this.fragmentShaderShadingRateInterlock=e.fragmentShaderShadingRateInterlock))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.pNext' isn't allowed to be filled")}get fragmentShaderSampleInterlock(){return 0!==this.memoryViewUint32[4]}set fragmentShaderSampleInterlock(e){this.memoryViewUint32[4]=0|e}get fragmentShaderPixelInterlock(){return 0!==this.memoryViewUint32[5]}set fragmentShaderPixelInterlock(e){this.memoryViewUint32[5]=0|e}get fragmentShaderShadingRateInterlock(){return 0!==this.memoryViewUint32[6]}set fragmentShaderShadingRateInterlock(e){this.memoryViewUint32[6]=0|e}}VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.byteLength=32,VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},fragmentShaderSampleInterlock:{byteOffset:16,byteLength:4},fragmentShaderPixelInterlock:{byteOffset:20,byteLength:4},fragmentShaderShadingRateInterlock:{byteOffset:24,byteLength:4}};class VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000276e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.shaderDemoteToHelperInvocation&&(this.shaderDemoteToHelperInvocation=e.shaderDemoteToHelperInvocation))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.pNext' isn't allowed to be filled")}get shaderDemoteToHelperInvocation(){return 0!==this.memoryViewUint32[4]}set shaderDemoteToHelperInvocation(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.byteLength=24,VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},shaderDemoteToHelperInvocation:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+24)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+24)/4)):(this.memoryBuffer=new ArrayBuffer(24),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000281e3,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext),void 0!==e.texelBufferAlignment&&(this.texelBufferAlignment=e.texelBufferAlignment))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.pNext' isn't allowed to be filled")}get texelBufferAlignment(){return 0!==this.memoryViewUint32[4]}set texelBufferAlignment(e){this.memoryViewUint32[4]=0|e}}VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.prototype.reflect=function(e){},VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.byteLength=24,VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},texelBufferAlignment:{byteOffset:16,byteLength:4}};class VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+48)/8),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+48)/4)):(this.memoryBuffer=new ArrayBuffer(48),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._pNext=null,this.sType=1000281001,"object"==typeof e&&(void 0!==e.sType&&(this.sType=e.sType),void 0!==e.pNext&&(this.pNext=e.pNext))}get sType(){return this.memoryViewInt32[0]}set sType(e){this.memoryViewInt32[0]=e}get pNext(){return this._pNext}set pNext(e){throw new TypeError("'VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.pNext' isn't allowed to be filled")}get storageTexelBufferOffsetAlignmentBytes(){return this.memoryViewBigUint64[2]}get storageTexelBufferOffsetSingleTexelAlignment(){return 0!==this.memoryViewUint32[6]}get uniformTexelBufferOffsetAlignmentBytes(){return this.memoryViewBigUint64[4]}get uniformTexelBufferOffsetSingleTexelAlignment(){return 0!==this.memoryViewUint32[10]}}VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.prototype.flush=function(){return!(null!==this._pNext&&!this._pNext.flush())},VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.prototype.reflect=function(e){let t=getArrayBufferFromAddress(e,BigInt(48)),r=this.memoryBuffer,s=new Uint8Array(t);new Uint8Array(r).set(s.subarray(0,48),0)},VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.byteLength=48,VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.memoryLayout={sType:{byteOffset:0,byteLength:4},pNext:{byteOffset:8,byteLength:8},storageTexelBufferOffsetAlignmentBytes:{byteOffset:16,byteLength:8},storageTexelBufferOffsetSingleTexelAlignment:{byteOffset:24,byteLength:4},uniformTexelBufferOffsetAlignmentBytes:{byteOffset:32,byteLength:8},uniformTexelBufferOffsetSingleTexelAlignment:{byteOffset:40,byteLength:4}};class VkClearColorValue{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewInt32=new Int32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4),this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+16)/4)):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer),this.memoryViewInt32=new Int32Array(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer)),this._float32=null,this._int32=null,this._uint32=null,"object"==typeof e&&(void 0!==e.float32&&(this.float32=e.float32),void 0!==e.int32&&(this.int32=e.int32),void 0!==e.uint32&&(this.uint32=e.uint32))}get float32(){return this._float32}set float32(e){null!==e?this._float32=e:null===e&&(this._float32=null)}get int32(){return this._int32}set int32(e){null!==e?this._int32=e:null===e&&(this._int32=null)}get uint32(){return this._uint32}set uint32(e){null!==e?this._uint32=e:null===e&&(this._uint32=null)}}VkClearColorValue.prototype.flush=function(){if(null!==this._float32){let e=this._float32;for(let t=0;t<e.length;++t)this.memoryViewFloat32[0+t]=e[t]}if(null!==this._int32){let e=this._int32;for(let t=0;t<e.length;++t)this.memoryViewInt32[0+t]=e[t]}if(null!==this._uint32){let e=this._uint32;for(let t=0;t<e.length;++t)this.memoryViewUint32[0+t]=e[t]}return!0},VkClearColorValue.prototype.reflect=function(e){},VkClearColorValue.byteLength=16,VkClearColorValue.memoryLayout={float32:{byteOffset:0,byteLength:16},int32:{byteOffset:0,byteLength:16},uint32:{byteOffset:0,byteLength:16}};class VkClearValue{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset):(this.memoryBuffer=new ArrayBuffer(16),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)),this._color=new VkClearColorValue({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0}),this._depthStencil=new VkClearDepthStencilValue({$memoryBuffer:this.memoryBuffer,$memoryOffset:this.$memoryOffset+0}),"object"==typeof e&&(void 0!==e.color&&(this.color=e.color),void 0!==e.depthStencil&&(this.depthStencil=e.depthStencil))}get color(){return this._color}set color(e){null!==e?(e.flush(),this._color=e):null===e&&(this._color=null)}get depthStencil(){return this._depthStencil}set depthStencil(e){null!==e?(e.flush(),this._depthStencil=e):null===e&&(this._depthStencil=null)}}VkClearValue.prototype.flush=function(){if(null!==this._color){let e=this._color;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+16);new Uint8Array(this.memoryBuffer).set(t,0)}}if(null!==this._depthStencil){let e=this._depthStencil;if(e.flush(),this.memoryBuffer!==e.memoryBuffer){let t=new Uint8Array(e.memoryBuffer).subarray(e.$memoryOffset,e.$memoryOffset+8);new Uint8Array(this.memoryBuffer).set(t,0)}}return!0},VkClearValue.prototype.reflect=function(e){},VkClearValue.byteLength=16,VkClearValue.memoryLayout={color:{byteOffset:0,byteLength:16},depthStencil:{byteOffset:0,byteLength:8}};class VkPerformanceValueDataINTEL{constructor(e){this.memoryBuffer=null,this.memoryAddress=BI0,this.$memoryOffset=0,"object"==typeof e&&void 0!==e.$memoryOffset?(this.memoryBuffer=e.$memoryBuffer,this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer)+BigInt(e.$memoryOffset),this.$memoryOffset=0|e.$memoryOffset,this.memoryViewUint32=new Uint32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+8)/8),this.memoryViewFloat32=new Float32Array(this.memoryBuffer).subarray(e.$memoryOffset/4,(e.$memoryOffset+8)/4),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer).subarray(e.$memoryOffset/8,(e.$memoryOffset+8)/8)):(this.memoryBuffer=new ArrayBuffer(8),this.memoryAddress=getAddressFromArrayBuffer(this.memoryBuffer),this.memoryViewUint32=new Uint32Array(this.memoryBuffer),this.memoryViewBigUint64=new BigUint64Array(this.memoryBuffer),this.memoryViewFloat32=new Float32Array(this.memoryBuffer),this.memoryViewBigInt64=new BigInt64Array(this.memoryBuffer)),this._valueString=null,"object"==typeof e&&(void 0!==e.value32&&(this.value32=e.value32),void 0!==e.value64&&(this.value64=e.value64),void 0!==e.valueFloat&&(this.valueFloat=e.valueFloat),void 0!==e.valueBool&&(this.valueBool=e.valueBool),void 0!==e.valueString&&(this.valueString=e.valueString))}get value32(){return this.memoryViewUint32[0]}set value32(e){this.memoryViewUint32[0]=e}get value64(){return this.memoryViewBigUint64[0]}set value64(e){this.memoryViewBigUint64[0]=BigInt(e)}get valueFloat(){return this.memoryViewFloat32[0]}set valueFloat(e){this.memoryViewFloat32[0]=e}get valueBool(){return 0!==this.memoryViewUint32[0]}set valueBool(e){this.memoryViewUint32[0]=0|e}get valueString(){if(null!==this._valueString){let e=textDecoder.decode(this._valueString);return e.substr(0,e.length-1)}return null}set valueString(e){null!==e?(this._valueString=textEncoder.encode(e+NULLT).buffer,this.memoryViewBigInt64[0]=getAddressFromArrayBuffer(this._valueString)):null===e&&(this._valueString=null,this.memoryViewBigInt64[0]=BI0)}}VkPerformanceValueDataINTEL.prototype.flush=function(){return!0},VkPerformanceValueDataINTEL.prototype.reflect=function(e){},VkPerformanceValueDataINTEL.byteLength=8,VkPerformanceValueDataINTEL.memoryLayout={value32:{byteOffset:0,byteLength:4},value64:{byteOffset:0,byteLength:8},valueFloat:{byteOffset:0,byteLength:4},valueBool:{byteOffset:0,byteLength:4},valueString:{byteOffset:0,byteLength:8}},module.exports={...nvk.$getVulkanEnumerations(),VK_MAKE_VERSION:nvk.VK_MAKE_VERSION,VK_VERSION_MAJOR:nvk.VK_VERSION_MAJOR,VK_VERSION_MINOR:nvk.VK_VERSION_MINOR,VK_VERSION_PATCH:nvk.VK_VERSION_PATCH,VK_API_VERSION_1_0:nvk.VK_API_VERSION_1_0,VK_API_VERSION_1_1:nvk.VK_API_VERSION_1_1,vkUseDevice:nvk.vkUseDevice,vkUseInstance:nvk.vkUseInstance,VulkanWindow:nvk.VulkanWindow,vkCreateInstance:nvk.vkCreateInstance,vkDestroyInstance:nvk.vkDestroyInstance,vkEnumeratePhysicalDevices:nvk.vkEnumeratePhysicalDevices,vkGetDeviceProcAddr:nvk.vkGetDeviceProcAddr,vkGetInstanceProcAddr:nvk.vkGetInstanceProcAddr,vkGetPhysicalDeviceProperties:nvk.vkGetPhysicalDeviceProperties,vkGetPhysicalDeviceQueueFamilyProperties:nvk.vkGetPhysicalDeviceQueueFamilyProperties,vkGetPhysicalDeviceMemoryProperties:nvk.vkGetPhysicalDeviceMemoryProperties,vkGetPhysicalDeviceFeatures:nvk.vkGetPhysicalDeviceFeatures,vkGetPhysicalDeviceFormatProperties:nvk.vkGetPhysicalDeviceFormatProperties,vkGetPhysicalDeviceImageFormatProperties:nvk.vkGetPhysicalDeviceImageFormatProperties,vkCreateDevice:nvk.vkCreateDevice,vkDestroyDevice:nvk.vkDestroyDevice,vkEnumerateInstanceVersion:nvk.vkEnumerateInstanceVersion,vkEnumerateInstanceLayerProperties:nvk.vkEnumerateInstanceLayerProperties,vkEnumerateInstanceExtensionProperties:nvk.vkEnumerateInstanceExtensionProperties,vkEnumerateDeviceLayerProperties:nvk.vkEnumerateDeviceLayerProperties,vkEnumerateDeviceExtensionProperties:nvk.vkEnumerateDeviceExtensionProperties,vkGetDeviceQueue:nvk.vkGetDeviceQueue,vkQueueSubmit:nvk.vkQueueSubmit,vkQueueWaitIdle:nvk.vkQueueWaitIdle,vkDeviceWaitIdle:nvk.vkDeviceWaitIdle,vkAllocateMemory:nvk.vkAllocateMemory,vkFreeMemory:nvk.vkFreeMemory,vkMapMemory:nvk.vkMapMemory,vkUnmapMemory:nvk.vkUnmapMemory,vkFlushMappedMemoryRanges:nvk.vkFlushMappedMemoryRanges,vkInvalidateMappedMemoryRanges:nvk.vkInvalidateMappedMemoryRanges,vkGetDeviceMemoryCommitment:nvk.vkGetDeviceMemoryCommitment,vkGetBufferMemoryRequirements:nvk.vkGetBufferMemoryRequirements,vkBindBufferMemory:nvk.vkBindBufferMemory,vkGetImageMemoryRequirements:nvk.vkGetImageMemoryRequirements,vkBindImageMemory:nvk.vkBindImageMemory,vkGetImageSparseMemoryRequirements:nvk.vkGetImageSparseMemoryRequirements,vkGetPhysicalDeviceSparseImageFormatProperties:nvk.vkGetPhysicalDeviceSparseImageFormatProperties,vkQueueBindSparse:nvk.vkQueueBindSparse,vkCreateFence:nvk.vkCreateFence,vkDestroyFence:nvk.vkDestroyFence,vkResetFences:nvk.vkResetFences,vkGetFenceStatus:nvk.vkGetFenceStatus,vkWaitForFences:nvk.vkWaitForFences,vkCreateSemaphore:nvk.vkCreateSemaphore,vkDestroySemaphore:nvk.vkDestroySemaphore,vkCreateEvent:nvk.vkCreateEvent,vkDestroyEvent:nvk.vkDestroyEvent,vkGetEventStatus:nvk.vkGetEventStatus,vkSetEvent:nvk.vkSetEvent,vkResetEvent:nvk.vkResetEvent,vkCreateQueryPool:nvk.vkCreateQueryPool,vkDestroyQueryPool:nvk.vkDestroyQueryPool,vkGetQueryPoolResults:nvk.vkGetQueryPoolResults,vkResetQueryPoolEXT:nvk.vkResetQueryPoolEXT,vkCreateBuffer:nvk.vkCreateBuffer,vkDestroyBuffer:nvk.vkDestroyBuffer,vkCreateBufferView:nvk.vkCreateBufferView,vkDestroyBufferView:nvk.vkDestroyBufferView,vkCreateImage:nvk.vkCreateImage,vkDestroyImage:nvk.vkDestroyImage,vkGetImageSubresourceLayout:nvk.vkGetImageSubresourceLayout,vkCreateImageView:nvk.vkCreateImageView,vkDestroyImageView:nvk.vkDestroyImageView,vkCreateShaderModule:nvk.vkCreateShaderModule,vkDestroyShaderModule:nvk.vkDestroyShaderModule,vkCreatePipelineCache:nvk.vkCreatePipelineCache,vkDestroyPipelineCache:nvk.vkDestroyPipelineCache,vkGetPipelineCacheData:nvk.vkGetPipelineCacheData,vkMergePipelineCaches:nvk.vkMergePipelineCaches,vkCreateGraphicsPipelines:nvk.vkCreateGraphicsPipelines,vkCreateComputePipelines:nvk.vkCreateComputePipelines,vkDestroyPipeline:nvk.vkDestroyPipeline,vkCreatePipelineLayout:nvk.vkCreatePipelineLayout,vkDestroyPipelineLayout:nvk.vkDestroyPipelineLayout,vkCreateSampler:nvk.vkCreateSampler,vkDestroySampler:nvk.vkDestroySampler,vkCreateDescriptorSetLayout:nvk.vkCreateDescriptorSetLayout,vkDestroyDescriptorSetLayout:nvk.vkDestroyDescriptorSetLayout,vkCreateDescriptorPool:nvk.vkCreateDescriptorPool,vkDestroyDescriptorPool:nvk.vkDestroyDescriptorPool,vkResetDescriptorPool:nvk.vkResetDescriptorPool,vkAllocateDescriptorSets:nvk.vkAllocateDescriptorSets,vkFreeDescriptorSets:nvk.vkFreeDescriptorSets,vkUpdateDescriptorSets:nvk.vkUpdateDescriptorSets,vkCreateFramebuffer:nvk.vkCreateFramebuffer,vkDestroyFramebuffer:nvk.vkDestroyFramebuffer,vkCreateRenderPass:nvk.vkCreateRenderPass,vkDestroyRenderPass:nvk.vkDestroyRenderPass,vkGetRenderAreaGranularity:nvk.vkGetRenderAreaGranularity,vkCreateCommandPool:nvk.vkCreateCommandPool,vkDestroyCommandPool:nvk.vkDestroyCommandPool,vkResetCommandPool:nvk.vkResetCommandPool,vkAllocateCommandBuffers:nvk.vkAllocateCommandBuffers,vkFreeCommandBuffers:nvk.vkFreeCommandBuffers,vkBeginCommandBuffer:nvk.vkBeginCommandBuffer,vkEndCommandBuffer:nvk.vkEndCommandBuffer,vkResetCommandBuffer:nvk.vkResetCommandBuffer,vkCmdBindPipeline:nvk.vkCmdBindPipeline,vkCmdSetViewport:nvk.vkCmdSetViewport,vkCmdSetScissor:nvk.vkCmdSetScissor,vkCmdSetLineWidth:nvk.vkCmdSetLineWidth,vkCmdSetDepthBias:nvk.vkCmdSetDepthBias,vkCmdSetBlendConstants:nvk.vkCmdSetBlendConstants,vkCmdSetDepthBounds:nvk.vkCmdSetDepthBounds,vkCmdSetStencilCompareMask:nvk.vkCmdSetStencilCompareMask,vkCmdSetStencilWriteMask:nvk.vkCmdSetStencilWriteMask,vkCmdSetStencilReference:nvk.vkCmdSetStencilReference,vkCmdBindDescriptorSets:nvk.vkCmdBindDescriptorSets,vkCmdBindIndexBuffer:nvk.vkCmdBindIndexBuffer,vkCmdBindVertexBuffers:nvk.vkCmdBindVertexBuffers,vkCmdDraw:nvk.vkCmdDraw,vkCmdDrawIndexed:nvk.vkCmdDrawIndexed,vkCmdDrawIndirect:nvk.vkCmdDrawIndirect,vkCmdDrawIndexedIndirect:nvk.vkCmdDrawIndexedIndirect,vkCmdDispatch:nvk.vkCmdDispatch,vkCmdDispatchIndirect:nvk.vkCmdDispatchIndirect,vkCmdCopyBuffer:nvk.vkCmdCopyBuffer,vkCmdCopyImage:nvk.vkCmdCopyImage,vkCmdBlitImage:nvk.vkCmdBlitImage,vkCmdCopyBufferToImage:nvk.vkCmdCopyBufferToImage,vkCmdCopyImageToBuffer:nvk.vkCmdCopyImageToBuffer,vkCmdUpdateBuffer:nvk.vkCmdUpdateBuffer,vkCmdFillBuffer:nvk.vkCmdFillBuffer,vkCmdClearColorImage:nvk.vkCmdClearColorImage,vkCmdClearDepthStencilImage:nvk.vkCmdClearDepthStencilImage,vkCmdClearAttachments:nvk.vkCmdClearAttachments,vkCmdResolveImage:nvk.vkCmdResolveImage,vkCmdSetEvent:nvk.vkCmdSetEvent,vkCmdResetEvent:nvk.vkCmdResetEvent,vkCmdWaitEvents:nvk.vkCmdWaitEvents,vkCmdPipelineBarrier:nvk.vkCmdPipelineBarrier,vkCmdBeginQuery:nvk.vkCmdBeginQuery,vkCmdEndQuery:nvk.vkCmdEndQuery,vkCmdBeginConditionalRenderingEXT:nvk.vkCmdBeginConditionalRenderingEXT,vkCmdEndConditionalRenderingEXT:nvk.vkCmdEndConditionalRenderingEXT,vkCmdResetQueryPool:nvk.vkCmdResetQueryPool,vkCmdWriteTimestamp:nvk.vkCmdWriteTimestamp,vkCmdCopyQueryPoolResults:nvk.vkCmdCopyQueryPoolResults,vkCmdPushConstants:nvk.vkCmdPushConstants,vkCmdBeginRenderPass:nvk.vkCmdBeginRenderPass,vkCmdNextSubpass:nvk.vkCmdNextSubpass,vkCmdEndRenderPass:nvk.vkCmdEndRenderPass,vkCmdExecuteCommands:nvk.vkCmdExecuteCommands,vkGetPhysicalDeviceDisplayPropertiesKHR:nvk.vkGetPhysicalDeviceDisplayPropertiesKHR,vkGetPhysicalDeviceDisplayPlanePropertiesKHR:nvk.vkGetPhysicalDeviceDisplayPlanePropertiesKHR,vkGetDisplayPlaneSupportedDisplaysKHR:nvk.vkGetDisplayPlaneSupportedDisplaysKHR,vkGetDisplayModePropertiesKHR:nvk.vkGetDisplayModePropertiesKHR,vkCreateDisplayModeKHR:nvk.vkCreateDisplayModeKHR,vkGetDisplayPlaneCapabilitiesKHR:nvk.vkGetDisplayPlaneCapabilitiesKHR,vkCreateDisplayPlaneSurfaceKHR:nvk.vkCreateDisplayPlaneSurfaceKHR,vkCreateSharedSwapchainsKHR:nvk.vkCreateSharedSwapchainsKHR,vkDestroySurfaceKHR:nvk.vkDestroySurfaceKHR,vkGetPhysicalDeviceSurfaceSupportKHR:nvk.vkGetPhysicalDeviceSurfaceSupportKHR,vkGetPhysicalDeviceSurfaceCapabilitiesKHR:nvk.vkGetPhysicalDeviceSurfaceCapabilitiesKHR,vkGetPhysicalDeviceSurfaceFormatsKHR:nvk.vkGetPhysicalDeviceSurfaceFormatsKHR,vkGetPhysicalDeviceSurfacePresentModesKHR:nvk.vkGetPhysicalDeviceSurfacePresentModesKHR,vkCreateSwapchainKHR:nvk.vkCreateSwapchainKHR,vkDestroySwapchainKHR:nvk.vkDestroySwapchainKHR,vkGetSwapchainImagesKHR:nvk.vkGetSwapchainImagesKHR,vkAcquireNextImageKHR:nvk.vkAcquireNextImageKHR,vkQueuePresentKHR:nvk.vkQueuePresentKHR,vkCreateDebugReportCallbackEXT:nvk.vkCreateDebugReportCallbackEXT,vkDestroyDebugReportCallbackEXT:nvk.vkDestroyDebugReportCallbackEXT,vkDebugReportMessageEXT:nvk.vkDebugReportMessageEXT,vkDebugMarkerSetObjectNameEXT:nvk.vkDebugMarkerSetObjectNameEXT,vkDebugMarkerSetObjectTagEXT:nvk.vkDebugMarkerSetObjectTagEXT,vkCmdDebugMarkerBeginEXT:nvk.vkCmdDebugMarkerBeginEXT,vkCmdDebugMarkerEndEXT:nvk.vkCmdDebugMarkerEndEXT,vkCmdDebugMarkerInsertEXT:nvk.vkCmdDebugMarkerInsertEXT,vkGetPhysicalDeviceExternalImageFormatPropertiesNV:nvk.vkGetPhysicalDeviceExternalImageFormatPropertiesNV,vkCmdProcessCommandsNVX:nvk.vkCmdProcessCommandsNVX,vkCmdReserveSpaceForCommandsNVX:nvk.vkCmdReserveSpaceForCommandsNVX,vkCreateIndirectCommandsLayoutNVX:nvk.vkCreateIndirectCommandsLayoutNVX,vkDestroyIndirectCommandsLayoutNVX:nvk.vkDestroyIndirectCommandsLayoutNVX,vkCreateObjectTableNVX:nvk.vkCreateObjectTableNVX,vkDestroyObjectTableNVX:nvk.vkDestroyObjectTableNVX,vkRegisterObjectsNVX:nvk.vkRegisterObjectsNVX,vkUnregisterObjectsNVX:nvk.vkUnregisterObjectsNVX,vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX:nvk.vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX,vkGetPhysicalDeviceFeatures2:nvk.vkGetPhysicalDeviceFeatures2,vkGetPhysicalDeviceProperties2:nvk.vkGetPhysicalDeviceProperties2,vkGetPhysicalDeviceFormatProperties2:nvk.vkGetPhysicalDeviceFormatProperties2,vkGetPhysicalDeviceImageFormatProperties2:nvk.vkGetPhysicalDeviceImageFormatProperties2,vkGetPhysicalDeviceQueueFamilyProperties2:nvk.vkGetPhysicalDeviceQueueFamilyProperties2,vkGetPhysicalDeviceMemoryProperties2:nvk.vkGetPhysicalDeviceMemoryProperties2,vkGetPhysicalDeviceSparseImageFormatProperties2:nvk.vkGetPhysicalDeviceSparseImageFormatProperties2,vkCmdPushDescriptorSetKHR:nvk.vkCmdPushDescriptorSetKHR,vkTrimCommandPool:nvk.vkTrimCommandPool,vkGetPhysicalDeviceExternalBufferProperties:nvk.vkGetPhysicalDeviceExternalBufferProperties,vkGetMemoryFdKHR:nvk.vkGetMemoryFdKHR,vkGetMemoryFdPropertiesKHR:nvk.vkGetMemoryFdPropertiesKHR,vkGetPhysicalDeviceExternalSemaphoreProperties:nvk.vkGetPhysicalDeviceExternalSemaphoreProperties,vkGetSemaphoreFdKHR:nvk.vkGetSemaphoreFdKHR,vkImportSemaphoreFdKHR:nvk.vkImportSemaphoreFdKHR,vkGetPhysicalDeviceExternalFenceProperties:nvk.vkGetPhysicalDeviceExternalFenceProperties,vkGetFenceFdKHR:nvk.vkGetFenceFdKHR,vkImportFenceFdKHR:nvk.vkImportFenceFdKHR,vkReleaseDisplayEXT:nvk.vkReleaseDisplayEXT,vkDisplayPowerControlEXT:nvk.vkDisplayPowerControlEXT,vkRegisterDeviceEventEXT:nvk.vkRegisterDeviceEventEXT,vkRegisterDisplayEventEXT:nvk.vkRegisterDisplayEventEXT,vkGetSwapchainCounterEXT:nvk.vkGetSwapchainCounterEXT,vkGetPhysicalDeviceSurfaceCapabilities2EXT:nvk.vkGetPhysicalDeviceSurfaceCapabilities2EXT,vkEnumeratePhysicalDeviceGroups:nvk.vkEnumeratePhysicalDeviceGroups,vkGetDeviceGroupPeerMemoryFeatures:nvk.vkGetDeviceGroupPeerMemoryFeatures,vkBindBufferMemory2:nvk.vkBindBufferMemory2,vkBindImageMemory2:nvk.vkBindImageMemory2,vkCmdSetDeviceMask:nvk.vkCmdSetDeviceMask,vkGetDeviceGroupPresentCapabilitiesKHR:nvk.vkGetDeviceGroupPresentCapabilitiesKHR,vkGetDeviceGroupSurfacePresentModesKHR:nvk.vkGetDeviceGroupSurfacePresentModesKHR,vkAcquireNextImage2KHR:nvk.vkAcquireNextImage2KHR,vkCmdDispatchBase:nvk.vkCmdDispatchBase,vkGetPhysicalDevicePresentRectanglesKHR:nvk.vkGetPhysicalDevicePresentRectanglesKHR,vkCreateDescriptorUpdateTemplate:nvk.vkCreateDescriptorUpdateTemplate,vkDestroyDescriptorUpdateTemplate:nvk.vkDestroyDescriptorUpdateTemplate,vkUpdateDescriptorSetWithTemplate:nvk.vkUpdateDescriptorSetWithTemplate,vkCmdPushDescriptorSetWithTemplateKHR:nvk.vkCmdPushDescriptorSetWithTemplateKHR,vkSetHdrMetadataEXT:nvk.vkSetHdrMetadataEXT,vkGetSwapchainStatusKHR:nvk.vkGetSwapchainStatusKHR,vkGetRefreshCycleDurationGOOGLE:nvk.vkGetRefreshCycleDurationGOOGLE,vkGetPastPresentationTimingGOOGLE:nvk.vkGetPastPresentationTimingGOOGLE,vkCreateMacOSSurfaceMVK:nvk.vkCreateMacOSSurfaceMVK,vkCmdSetViewportWScalingNV:nvk.vkCmdSetViewportWScalingNV,vkCmdSetDiscardRectangleEXT:nvk.vkCmdSetDiscardRectangleEXT,vkCmdSetSampleLocationsEXT:nvk.vkCmdSetSampleLocationsEXT,vkGetPhysicalDeviceMultisamplePropertiesEXT:nvk.vkGetPhysicalDeviceMultisamplePropertiesEXT,vkGetPhysicalDeviceSurfaceCapabilities2KHR:nvk.vkGetPhysicalDeviceSurfaceCapabilities2KHR,vkGetPhysicalDeviceSurfaceFormats2KHR:nvk.vkGetPhysicalDeviceSurfaceFormats2KHR,vkGetPhysicalDeviceDisplayProperties2KHR:nvk.vkGetPhysicalDeviceDisplayProperties2KHR,vkGetPhysicalDeviceDisplayPlaneProperties2KHR:nvk.vkGetPhysicalDeviceDisplayPlaneProperties2KHR,vkGetDisplayModeProperties2KHR:nvk.vkGetDisplayModeProperties2KHR,vkGetDisplayPlaneCapabilities2KHR:nvk.vkGetDisplayPlaneCapabilities2KHR,vkGetBufferMemoryRequirements2:nvk.vkGetBufferMemoryRequirements2,vkGetImageMemoryRequirements2:nvk.vkGetImageMemoryRequirements2,vkGetImageSparseMemoryRequirements2:nvk.vkGetImageSparseMemoryRequirements2,vkCreateSamplerYcbcrConversion:nvk.vkCreateSamplerYcbcrConversion,vkDestroySamplerYcbcrConversion:nvk.vkDestroySamplerYcbcrConversion,vkGetDeviceQueue2:nvk.vkGetDeviceQueue2,vkCreateValidationCacheEXT:nvk.vkCreateValidationCacheEXT,vkDestroyValidationCacheEXT:nvk.vkDestroyValidationCacheEXT,vkGetValidationCacheDataEXT:nvk.vkGetValidationCacheDataEXT,vkMergeValidationCachesEXT:nvk.vkMergeValidationCachesEXT,vkGetDescriptorSetLayoutSupport:nvk.vkGetDescriptorSetLayoutSupport,vkGetShaderInfoAMD:nvk.vkGetShaderInfoAMD,vkSetLocalDimmingAMD:nvk.vkSetLocalDimmingAMD,vkGetPhysicalDeviceCalibrateableTimeDomainsEXT:nvk.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT,vkGetCalibratedTimestampsEXT:nvk.vkGetCalibratedTimestampsEXT,vkSetDebugUtilsObjectNameEXT:nvk.vkSetDebugUtilsObjectNameEXT,vkSetDebugUtilsObjectTagEXT:nvk.vkSetDebugUtilsObjectTagEXT,vkQueueBeginDebugUtilsLabelEXT:nvk.vkQueueBeginDebugUtilsLabelEXT,vkQueueEndDebugUtilsLabelEXT:nvk.vkQueueEndDebugUtilsLabelEXT,vkQueueInsertDebugUtilsLabelEXT:nvk.vkQueueInsertDebugUtilsLabelEXT,vkCmdBeginDebugUtilsLabelEXT:nvk.vkCmdBeginDebugUtilsLabelEXT,vkCmdEndDebugUtilsLabelEXT:nvk.vkCmdEndDebugUtilsLabelEXT,vkCmdInsertDebugUtilsLabelEXT:nvk.vkCmdInsertDebugUtilsLabelEXT,vkCreateDebugUtilsMessengerEXT:nvk.vkCreateDebugUtilsMessengerEXT,vkDestroyDebugUtilsMessengerEXT:nvk.vkDestroyDebugUtilsMessengerEXT,vkSubmitDebugUtilsMessageEXT:nvk.vkSubmitDebugUtilsMessageEXT,vkGetMemoryHostPointerPropertiesEXT:nvk.vkGetMemoryHostPointerPropertiesEXT,vkCmdWriteBufferMarkerAMD:nvk.vkCmdWriteBufferMarkerAMD,vkCreateRenderPass2KHR:nvk.vkCreateRenderPass2KHR,vkCmdBeginRenderPass2KHR:nvk.vkCmdBeginRenderPass2KHR,vkCmdNextSubpass2KHR:nvk.vkCmdNextSubpass2KHR,vkCmdEndRenderPass2KHR:nvk.vkCmdEndRenderPass2KHR,vkCmdDrawIndirectCountKHR:nvk.vkCmdDrawIndirectCountKHR,vkCmdDrawIndexedIndirectCountKHR:nvk.vkCmdDrawIndexedIndirectCountKHR,vkCmdSetCheckpointNV:nvk.vkCmdSetCheckpointNV,vkGetQueueCheckpointDataNV:nvk.vkGetQueueCheckpointDataNV,vkCmdBindTransformFeedbackBuffersEXT:nvk.vkCmdBindTransformFeedbackBuffersEXT,vkCmdBeginTransformFeedbackEXT:nvk.vkCmdBeginTransformFeedbackEXT,vkCmdEndTransformFeedbackEXT:nvk.vkCmdEndTransformFeedbackEXT,vkCmdBeginQueryIndexedEXT:nvk.vkCmdBeginQueryIndexedEXT,vkCmdEndQueryIndexedEXT:nvk.vkCmdEndQueryIndexedEXT,vkCmdDrawIndirectByteCountEXT:nvk.vkCmdDrawIndirectByteCountEXT,vkCmdSetExclusiveScissorNV:nvk.vkCmdSetExclusiveScissorNV,vkCmdBindShadingRateImageNV:nvk.vkCmdBindShadingRateImageNV,vkCmdSetViewportShadingRatePaletteNV:nvk.vkCmdSetViewportShadingRatePaletteNV,vkCmdSetCoarseSampleOrderNV:nvk.vkCmdSetCoarseSampleOrderNV,vkCmdDrawMeshTasksNV:nvk.vkCmdDrawMeshTasksNV,vkCmdDrawMeshTasksIndirectNV:nvk.vkCmdDrawMeshTasksIndirectNV,vkCmdDrawMeshTasksIndirectCountNV:nvk.vkCmdDrawMeshTasksIndirectCountNV,vkCompileDeferredNV:nvk.vkCompileDeferredNV,vkCreateAccelerationStructureNV:nvk.vkCreateAccelerationStructureNV,vkDestroyAccelerationStructureNV:nvk.vkDestroyAccelerationStructureNV,vkGetAccelerationStructureMemoryRequirementsNV:nvk.vkGetAccelerationStructureMemoryRequirementsNV,vkBindAccelerationStructureMemoryNV:nvk.vkBindAccelerationStructureMemoryNV,vkCmdCopyAccelerationStructureNV:nvk.vkCmdCopyAccelerationStructureNV,vkCmdWriteAccelerationStructuresPropertiesNV:nvk.vkCmdWriteAccelerationStructuresPropertiesNV,vkCmdBuildAccelerationStructureNV:nvk.vkCmdBuildAccelerationStructureNV,vkCmdTraceRaysNV:nvk.vkCmdTraceRaysNV,vkGetRayTracingShaderGroupHandlesNV:nvk.vkGetRayTracingShaderGroupHandlesNV,vkGetAccelerationStructureHandleNV:nvk.vkGetAccelerationStructureHandleNV,vkCreateRayTracingPipelinesNV:nvk.vkCreateRayTracingPipelinesNV,vkGetImageDrmFormatModifierPropertiesEXT:nvk.vkGetImageDrmFormatModifierPropertiesEXT,vkGetBufferDeviceAddressEXT:nvk.vkGetBufferDeviceAddressEXT,vkGetPhysicalDeviceCooperativeMatrixPropertiesNV:nvk.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV,vkGetImageViewHandleNVX:nvk.vkGetImageViewHandleNVX,vkCreateHeadlessSurfaceEXT:nvk.vkCreateHeadlessSurfaceEXT,vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV:nvk.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV,vkInitializePerformanceApiINTEL:nvk.vkInitializePerformanceApiINTEL,vkUninitializePerformanceApiINTEL:nvk.vkUninitializePerformanceApiINTEL,vkCmdSetPerformanceMarkerINTEL:nvk.vkCmdSetPerformanceMarkerINTEL,vkCmdSetPerformanceStreamMarkerINTEL:nvk.vkCmdSetPerformanceStreamMarkerINTEL,vkCmdSetPerformanceOverrideINTEL:nvk.vkCmdSetPerformanceOverrideINTEL,vkAcquirePerformanceConfigurationINTEL:nvk.vkAcquirePerformanceConfigurationINTEL,vkReleasePerformanceConfigurationINTEL:nvk.vkReleasePerformanceConfigurationINTEL,vkQueueSetPerformanceConfigurationINTEL:nvk.vkQueueSetPerformanceConfigurationINTEL,vkGetPerformanceParameterINTEL:nvk.vkGetPerformanceParameterINTEL,VkInstance:VkInstance,VkPhysicalDevice:VkPhysicalDevice,VkDevice:VkDevice,VkQueue:VkQueue,VkCommandBuffer:VkCommandBuffer,VkDeviceMemory:VkDeviceMemory,VkCommandPool:VkCommandPool,VkBuffer:VkBuffer,VkBufferView:VkBufferView,VkImage:VkImage,VkImageView:VkImageView,VkShaderModule:VkShaderModule,VkPipeline:VkPipeline,VkPipelineLayout:VkPipelineLayout,VkSampler:VkSampler,VkDescriptorSet:VkDescriptorSet,VkDescriptorSetLayout:VkDescriptorSetLayout,VkDescriptorPool:VkDescriptorPool,VkFence:VkFence,VkSemaphore:VkSemaphore,VkEvent:VkEvent,VkQueryPool:VkQueryPool,VkFramebuffer:VkFramebuffer,VkRenderPass:VkRenderPass,VkPipelineCache:VkPipelineCache,VkObjectTableNVX:VkObjectTableNVX,VkIndirectCommandsLayoutNVX:VkIndirectCommandsLayoutNVX,VkDescriptorUpdateTemplate:VkDescriptorUpdateTemplate,VkSamplerYcbcrConversion:VkSamplerYcbcrConversion,VkValidationCacheEXT:VkValidationCacheEXT,VkAccelerationStructureNV:VkAccelerationStructureNV,VkPerformanceConfigurationINTEL:VkPerformanceConfigurationINTEL,VkDisplayKHR:VkDisplayKHR,VkDisplayModeKHR:VkDisplayModeKHR,VkSurfaceKHR:VkSurfaceKHR,VkSwapchainKHR:VkSwapchainKHR,VkDebugReportCallbackEXT:VkDebugReportCallbackEXT,VkDebugUtilsMessengerEXT:VkDebugUtilsMessengerEXT,VkBaseOutStructure:VkBaseOutStructure,VkBaseInStructure:VkBaseInStructure,VkOffset2D:VkOffset2D,VkOffset3D:VkOffset3D,VkExtent2D:VkExtent2D,VkExtent3D:VkExtent3D,VkViewport:VkViewport,VkRect2D:VkRect2D,VkClearRect:VkClearRect,VkComponentMapping:VkComponentMapping,VkPhysicalDeviceProperties:VkPhysicalDeviceProperties,VkExtensionProperties:VkExtensionProperties,VkLayerProperties:VkLayerProperties,VkApplicationInfo:VkApplicationInfo,VkAllocationCallbacks:VkAllocationCallbacks,VkDeviceQueueCreateInfo:VkDeviceQueueCreateInfo,VkDeviceCreateInfo:VkDeviceCreateInfo,VkInstanceCreateInfo:VkInstanceCreateInfo,VkQueueFamilyProperties:VkQueueFamilyProperties,VkPhysicalDeviceMemoryProperties:VkPhysicalDeviceMemoryProperties,VkMemoryAllocateInfo:VkMemoryAllocateInfo,VkMemoryRequirements:VkMemoryRequirements,VkSparseImageFormatProperties:VkSparseImageFormatProperties,VkSparseImageMemoryRequirements:VkSparseImageMemoryRequirements,VkMemoryType:VkMemoryType,VkMemoryHeap:VkMemoryHeap,VkMappedMemoryRange:VkMappedMemoryRange,VkFormatProperties:VkFormatProperties,VkImageFormatProperties:VkImageFormatProperties,VkDescriptorBufferInfo:VkDescriptorBufferInfo,VkDescriptorImageInfo:VkDescriptorImageInfo,VkWriteDescriptorSet:VkWriteDescriptorSet,VkCopyDescriptorSet:VkCopyDescriptorSet,VkBufferCreateInfo:VkBufferCreateInfo,VkBufferViewCreateInfo:VkBufferViewCreateInfo,VkImageSubresource:VkImageSubresource,VkImageSubresourceLayers:VkImageSubresourceLayers,VkImageSubresourceRange:VkImageSubresourceRange,VkMemoryBarrier:VkMemoryBarrier,VkBufferMemoryBarrier:VkBufferMemoryBarrier,VkImageMemoryBarrier:VkImageMemoryBarrier,VkImageCreateInfo:VkImageCreateInfo,VkSubresourceLayout:VkSubresourceLayout,VkImageViewCreateInfo:VkImageViewCreateInfo,VkBufferCopy:VkBufferCopy,VkSparseMemoryBind:VkSparseMemoryBind,VkSparseImageMemoryBind:VkSparseImageMemoryBind,VkSparseBufferMemoryBindInfo:VkSparseBufferMemoryBindInfo,VkSparseImageOpaqueMemoryBindInfo:VkSparseImageOpaqueMemoryBindInfo,VkSparseImageMemoryBindInfo:VkSparseImageMemoryBindInfo,VkBindSparseInfo:VkBindSparseInfo,VkImageCopy:VkImageCopy,VkImageBlit:VkImageBlit,VkBufferImageCopy:VkBufferImageCopy,VkImageResolve:VkImageResolve,VkShaderModuleCreateInfo:VkShaderModuleCreateInfo,VkDescriptorSetLayoutBinding:VkDescriptorSetLayoutBinding,VkDescriptorSetLayoutCreateInfo:VkDescriptorSetLayoutCreateInfo,VkDescriptorPoolSize:VkDescriptorPoolSize,VkDescriptorPoolCreateInfo:VkDescriptorPoolCreateInfo,VkDescriptorSetAllocateInfo:VkDescriptorSetAllocateInfo,VkSpecializationMapEntry:VkSpecializationMapEntry,VkSpecializationInfo:VkSpecializationInfo,VkPipelineShaderStageCreateInfo:VkPipelineShaderStageCreateInfo,VkComputePipelineCreateInfo:VkComputePipelineCreateInfo,VkVertexInputBindingDescription:VkVertexInputBindingDescription,VkVertexInputAttributeDescription:VkVertexInputAttributeDescription,VkPipelineVertexInputStateCreateInfo:VkPipelineVertexInputStateCreateInfo,VkPipelineInputAssemblyStateCreateInfo:VkPipelineInputAssemblyStateCreateInfo,VkPipelineTessellationStateCreateInfo:VkPipelineTessellationStateCreateInfo,VkPipelineViewportStateCreateInfo:VkPipelineViewportStateCreateInfo,VkPipelineRasterizationStateCreateInfo:VkPipelineRasterizationStateCreateInfo,VkPipelineMultisampleStateCreateInfo:VkPipelineMultisampleStateCreateInfo,VkPipelineColorBlendAttachmentState:VkPipelineColorBlendAttachmentState,VkPipelineColorBlendStateCreateInfo:VkPipelineColorBlendStateCreateInfo,VkPipelineDynamicStateCreateInfo:VkPipelineDynamicStateCreateInfo,VkStencilOpState:VkStencilOpState,VkPipelineDepthStencilStateCreateInfo:VkPipelineDepthStencilStateCreateInfo,VkGraphicsPipelineCreateInfo:VkGraphicsPipelineCreateInfo,VkPipelineCacheCreateInfo:VkPipelineCacheCreateInfo,VkPushConstantRange:VkPushConstantRange,VkPipelineLayoutCreateInfo:VkPipelineLayoutCreateInfo,VkSamplerCreateInfo:VkSamplerCreateInfo,VkCommandPoolCreateInfo:VkCommandPoolCreateInfo,VkCommandBufferAllocateInfo:VkCommandBufferAllocateInfo,VkCommandBufferInheritanceInfo:VkCommandBufferInheritanceInfo,VkCommandBufferBeginInfo:VkCommandBufferBeginInfo,VkRenderPassBeginInfo:VkRenderPassBeginInfo,VkClearDepthStencilValue:VkClearDepthStencilValue,VkClearAttachment:VkClearAttachment,VkAttachmentDescription:VkAttachmentDescription,VkAttachmentReference:VkAttachmentReference,VkSubpassDescription:VkSubpassDescription,VkSubpassDependency:VkSubpassDependency,VkRenderPassCreateInfo:VkRenderPassCreateInfo,VkEventCreateInfo:VkEventCreateInfo,VkFenceCreateInfo:VkFenceCreateInfo,VkPhysicalDeviceFeatures:VkPhysicalDeviceFeatures,VkPhysicalDeviceSparseProperties:VkPhysicalDeviceSparseProperties,VkPhysicalDeviceLimits:VkPhysicalDeviceLimits,VkSemaphoreCreateInfo:VkSemaphoreCreateInfo,VkQueryPoolCreateInfo:VkQueryPoolCreateInfo,VkFramebufferCreateInfo:VkFramebufferCreateInfo,VkDrawIndirectCommand:VkDrawIndirectCommand,VkDrawIndexedIndirectCommand:VkDrawIndexedIndirectCommand,VkDispatchIndirectCommand:VkDispatchIndirectCommand,VkSubmitInfo:VkSubmitInfo,VkDisplayPropertiesKHR:VkDisplayPropertiesKHR,VkDisplayPlanePropertiesKHR:VkDisplayPlanePropertiesKHR,VkDisplayModeParametersKHR:VkDisplayModeParametersKHR,VkDisplayModePropertiesKHR:VkDisplayModePropertiesKHR,VkDisplayModeCreateInfoKHR:VkDisplayModeCreateInfoKHR,VkDisplayPlaneCapabilitiesKHR:VkDisplayPlaneCapabilitiesKHR,VkDisplaySurfaceCreateInfoKHR:VkDisplaySurfaceCreateInfoKHR,VkDisplayPresentInfoKHR:VkDisplayPresentInfoKHR,VkSurfaceCapabilitiesKHR:VkSurfaceCapabilitiesKHR,VkSurfaceFormatKHR:VkSurfaceFormatKHR,VkSwapchainCreateInfoKHR:VkSwapchainCreateInfoKHR,VkPresentInfoKHR:VkPresentInfoKHR,VkDebugReportCallbackCreateInfoEXT:VkDebugReportCallbackCreateInfoEXT,VkValidationFlagsEXT:VkValidationFlagsEXT,VkValidationFeaturesEXT:VkValidationFeaturesEXT,VkPipelineRasterizationStateRasterizationOrderAMD:VkPipelineRasterizationStateRasterizationOrderAMD,VkDebugMarkerObjectNameInfoEXT:VkDebugMarkerObjectNameInfoEXT,VkDebugMarkerObjectTagInfoEXT:VkDebugMarkerObjectTagInfoEXT,VkDebugMarkerMarkerInfoEXT:VkDebugMarkerMarkerInfoEXT,VkDedicatedAllocationImageCreateInfoNV:VkDedicatedAllocationImageCreateInfoNV,VkDedicatedAllocationBufferCreateInfoNV:VkDedicatedAllocationBufferCreateInfoNV,VkDedicatedAllocationMemoryAllocateInfoNV:VkDedicatedAllocationMemoryAllocateInfoNV,VkExternalImageFormatPropertiesNV:VkExternalImageFormatPropertiesNV,VkExternalMemoryImageCreateInfoNV:VkExternalMemoryImageCreateInfoNV,VkExportMemoryAllocateInfoNV:VkExportMemoryAllocateInfoNV,VkDeviceGeneratedCommandsFeaturesNVX:VkDeviceGeneratedCommandsFeaturesNVX,VkDeviceGeneratedCommandsLimitsNVX:VkDeviceGeneratedCommandsLimitsNVX,VkIndirectCommandsTokenNVX:VkIndirectCommandsTokenNVX,VkIndirectCommandsLayoutTokenNVX:VkIndirectCommandsLayoutTokenNVX,VkIndirectCommandsLayoutCreateInfoNVX:VkIndirectCommandsLayoutCreateInfoNVX,VkCmdProcessCommandsInfoNVX:VkCmdProcessCommandsInfoNVX,VkCmdReserveSpaceForCommandsInfoNVX:VkCmdReserveSpaceForCommandsInfoNVX,VkObjectTableCreateInfoNVX:VkObjectTableCreateInfoNVX,VkObjectTableEntryNVX:VkObjectTableEntryNVX,VkObjectTablePipelineEntryNVX:VkObjectTablePipelineEntryNVX,VkObjectTableDescriptorSetEntryNVX:VkObjectTableDescriptorSetEntryNVX,VkObjectTableVertexBufferEntryNVX:VkObjectTableVertexBufferEntryNVX,VkObjectTableIndexBufferEntryNVX:VkObjectTableIndexBufferEntryNVX,VkObjectTablePushConstantEntryNVX:VkObjectTablePushConstantEntryNVX,VkPhysicalDeviceFeatures2:VkPhysicalDeviceFeatures2,VkPhysicalDeviceFeatures2KHR:VkPhysicalDeviceFeatures2KHR,VkPhysicalDeviceProperties2:VkPhysicalDeviceProperties2,VkPhysicalDeviceProperties2KHR:VkPhysicalDeviceProperties2KHR,VkFormatProperties2:VkFormatProperties2,VkFormatProperties2KHR:VkFormatProperties2KHR,VkImageFormatProperties2:VkImageFormatProperties2,VkImageFormatProperties2KHR:VkImageFormatProperties2KHR,VkPhysicalDeviceImageFormatInfo2:VkPhysicalDeviceImageFormatInfo2,VkPhysicalDeviceImageFormatInfo2KHR:VkPhysicalDeviceImageFormatInfo2KHR,VkQueueFamilyProperties2:VkQueueFamilyProperties2,VkQueueFamilyProperties2KHR:VkQueueFamilyProperties2KHR,VkPhysicalDeviceMemoryProperties2:VkPhysicalDeviceMemoryProperties2,VkPhysicalDeviceMemoryProperties2KHR:VkPhysicalDeviceMemoryProperties2KHR,VkSparseImageFormatProperties2:VkSparseImageFormatProperties2,VkSparseImageFormatProperties2KHR:VkSparseImageFormatProperties2KHR,VkPhysicalDeviceSparseImageFormatInfo2:VkPhysicalDeviceSparseImageFormatInfo2,VkPhysicalDeviceSparseImageFormatInfo2KHR:VkPhysicalDeviceSparseImageFormatInfo2KHR,VkPhysicalDevicePushDescriptorPropertiesKHR:VkPhysicalDevicePushDescriptorPropertiesKHR,VkConformanceVersionKHR:VkConformanceVersionKHR,VkPhysicalDeviceDriverPropertiesKHR:VkPhysicalDeviceDriverPropertiesKHR,VkPresentRegionsKHR:VkPresentRegionsKHR,VkPresentRegionKHR:VkPresentRegionKHR,VkRectLayerKHR:VkRectLayerKHR,VkPhysicalDeviceVariablePointersFeatures:VkPhysicalDeviceVariablePointersFeatures,VkPhysicalDeviceVariablePointersFeaturesKHR:VkPhysicalDeviceVariablePointersFeaturesKHR,VkPhysicalDeviceVariablePointerFeaturesKHR:VkPhysicalDeviceVariablePointerFeaturesKHR,VkPhysicalDeviceVariablePointerFeatures:VkPhysicalDeviceVariablePointerFeatures,VkExternalMemoryProperties:VkExternalMemoryProperties,VkExternalMemoryPropertiesKHR:VkExternalMemoryPropertiesKHR,VkPhysicalDeviceExternalImageFormatInfo:VkPhysicalDeviceExternalImageFormatInfo,VkPhysicalDeviceExternalImageFormatInfoKHR:VkPhysicalDeviceExternalImageFormatInfoKHR,VkExternalImageFormatProperties:VkExternalImageFormatProperties,VkExternalImageFormatPropertiesKHR:VkExternalImageFormatPropertiesKHR,VkPhysicalDeviceExternalBufferInfo:VkPhysicalDeviceExternalBufferInfo,VkPhysicalDeviceExternalBufferInfoKHR:VkPhysicalDeviceExternalBufferInfoKHR,VkExternalBufferProperties:VkExternalBufferProperties,VkExternalBufferPropertiesKHR:VkExternalBufferPropertiesKHR,VkPhysicalDeviceIDProperties:VkPhysicalDeviceIDProperties,VkPhysicalDeviceIDPropertiesKHR:VkPhysicalDeviceIDPropertiesKHR,VkExternalMemoryImageCreateInfo:VkExternalMemoryImageCreateInfo,VkExternalMemoryImageCreateInfoKHR:VkExternalMemoryImageCreateInfoKHR,VkExternalMemoryBufferCreateInfo:VkExternalMemoryBufferCreateInfo,VkExternalMemoryBufferCreateInfoKHR:VkExternalMemoryBufferCreateInfoKHR,VkExportMemoryAllocateInfo:VkExportMemoryAllocateInfo,VkExportMemoryAllocateInfoKHR:VkExportMemoryAllocateInfoKHR,VkImportMemoryFdInfoKHR:VkImportMemoryFdInfoKHR,VkMemoryFdPropertiesKHR:VkMemoryFdPropertiesKHR,VkMemoryGetFdInfoKHR:VkMemoryGetFdInfoKHR,VkPhysicalDeviceExternalSemaphoreInfo:VkPhysicalDeviceExternalSemaphoreInfo,VkPhysicalDeviceExternalSemaphoreInfoKHR:VkPhysicalDeviceExternalSemaphoreInfoKHR,VkExternalSemaphoreProperties:VkExternalSemaphoreProperties,VkExternalSemaphorePropertiesKHR:VkExternalSemaphorePropertiesKHR,VkExportSemaphoreCreateInfo:VkExportSemaphoreCreateInfo,VkExportSemaphoreCreateInfoKHR:VkExportSemaphoreCreateInfoKHR,VkImportSemaphoreFdInfoKHR:VkImportSemaphoreFdInfoKHR,VkSemaphoreGetFdInfoKHR:VkSemaphoreGetFdInfoKHR,VkPhysicalDeviceExternalFenceInfo:VkPhysicalDeviceExternalFenceInfo,VkPhysicalDeviceExternalFenceInfoKHR:VkPhysicalDeviceExternalFenceInfoKHR,VkExternalFenceProperties:VkExternalFenceProperties,VkExternalFencePropertiesKHR:VkExternalFencePropertiesKHR,VkExportFenceCreateInfo:VkExportFenceCreateInfo,VkExportFenceCreateInfoKHR:VkExportFenceCreateInfoKHR,VkImportFenceFdInfoKHR:VkImportFenceFdInfoKHR,VkFenceGetFdInfoKHR:VkFenceGetFdInfoKHR,VkPhysicalDeviceMultiviewFeatures:VkPhysicalDeviceMultiviewFeatures,VkPhysicalDeviceMultiviewFeaturesKHR:VkPhysicalDeviceMultiviewFeaturesKHR,VkPhysicalDeviceMultiviewProperties:VkPhysicalDeviceMultiviewProperties,VkPhysicalDeviceMultiviewPropertiesKHR:VkPhysicalDeviceMultiviewPropertiesKHR,VkRenderPassMultiviewCreateInfo:VkRenderPassMultiviewCreateInfo,VkRenderPassMultiviewCreateInfoKHR:VkRenderPassMultiviewCreateInfoKHR,VkSurfaceCapabilities2EXT:VkSurfaceCapabilities2EXT,VkDisplayPowerInfoEXT:VkDisplayPowerInfoEXT,VkDeviceEventInfoEXT:VkDeviceEventInfoEXT,VkDisplayEventInfoEXT:VkDisplayEventInfoEXT,VkSwapchainCounterCreateInfoEXT:VkSwapchainCounterCreateInfoEXT,VkPhysicalDeviceGroupProperties:VkPhysicalDeviceGroupProperties,VkPhysicalDeviceGroupPropertiesKHR:VkPhysicalDeviceGroupPropertiesKHR,VkMemoryAllocateFlagsInfo:VkMemoryAllocateFlagsInfo,VkMemoryAllocateFlagsInfoKHR:VkMemoryAllocateFlagsInfoKHR,VkBindBufferMemoryInfo:VkBindBufferMemoryInfo,VkBindBufferMemoryInfoKHR:VkBindBufferMemoryInfoKHR,VkBindBufferMemoryDeviceGroupInfo:VkBindBufferMemoryDeviceGroupInfo,VkBindBufferMemoryDeviceGroupInfoKHR:VkBindBufferMemoryDeviceGroupInfoKHR,VkBindImageMemoryInfo:VkBindImageMemoryInfo,VkBindImageMemoryInfoKHR:VkBindImageMemoryInfoKHR,VkBindImageMemoryDeviceGroupInfo:VkBindImageMemoryDeviceGroupInfo,VkBindImageMemoryDeviceGroupInfoKHR:VkBindImageMemoryDeviceGroupInfoKHR,VkDeviceGroupRenderPassBeginInfo:VkDeviceGroupRenderPassBeginInfo,VkDeviceGroupRenderPassBeginInfoKHR:VkDeviceGroupRenderPassBeginInfoKHR,VkDeviceGroupCommandBufferBeginInfo:VkDeviceGroupCommandBufferBeginInfo,VkDeviceGroupCommandBufferBeginInfoKHR:VkDeviceGroupCommandBufferBeginInfoKHR,VkDeviceGroupSubmitInfo:VkDeviceGroupSubmitInfo,VkDeviceGroupSubmitInfoKHR:VkDeviceGroupSubmitInfoKHR,VkDeviceGroupBindSparseInfo:VkDeviceGroupBindSparseInfo,VkDeviceGroupBindSparseInfoKHR:VkDeviceGroupBindSparseInfoKHR,VkDeviceGroupPresentCapabilitiesKHR:VkDeviceGroupPresentCapabilitiesKHR,VkImageSwapchainCreateInfoKHR:VkImageSwapchainCreateInfoKHR,VkBindImageMemorySwapchainInfoKHR:VkBindImageMemorySwapchainInfoKHR,VkAcquireNextImageInfoKHR:VkAcquireNextImageInfoKHR,VkDeviceGroupPresentInfoKHR:VkDeviceGroupPresentInfoKHR,VkDeviceGroupDeviceCreateInfo:VkDeviceGroupDeviceCreateInfo,VkDeviceGroupDeviceCreateInfoKHR:VkDeviceGroupDeviceCreateInfoKHR,VkDeviceGroupSwapchainCreateInfoKHR:VkDeviceGroupSwapchainCreateInfoKHR,VkDescriptorUpdateTemplateEntry:VkDescriptorUpdateTemplateEntry,VkDescriptorUpdateTemplateEntryKHR:VkDescriptorUpdateTemplateEntryKHR,VkDescriptorUpdateTemplateCreateInfo:VkDescriptorUpdateTemplateCreateInfo,VkDescriptorUpdateTemplateCreateInfoKHR:VkDescriptorUpdateTemplateCreateInfoKHR,VkXYColorEXT:VkXYColorEXT,VkHdrMetadataEXT:VkHdrMetadataEXT,VkDisplayNativeHdrSurfaceCapabilitiesAMD:VkDisplayNativeHdrSurfaceCapabilitiesAMD,VkSwapchainDisplayNativeHdrCreateInfoAMD:VkSwapchainDisplayNativeHdrCreateInfoAMD,VkRefreshCycleDurationGOOGLE:VkRefreshCycleDurationGOOGLE,VkPastPresentationTimingGOOGLE:VkPastPresentationTimingGOOGLE,VkPresentTimesInfoGOOGLE:VkPresentTimesInfoGOOGLE,VkPresentTimeGOOGLE:VkPresentTimeGOOGLE,VkMacOSSurfaceCreateInfoMVK:VkMacOSSurfaceCreateInfoMVK,VkViewportWScalingNV:VkViewportWScalingNV,VkPipelineViewportWScalingStateCreateInfoNV:VkPipelineViewportWScalingStateCreateInfoNV,VkViewportSwizzleNV:VkViewportSwizzleNV,VkPipelineViewportSwizzleStateCreateInfoNV:VkPipelineViewportSwizzleStateCreateInfoNV,VkPhysicalDeviceDiscardRectanglePropertiesEXT:VkPhysicalDeviceDiscardRectanglePropertiesEXT,VkPipelineDiscardRectangleStateCreateInfoEXT:VkPipelineDiscardRectangleStateCreateInfoEXT,VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX:VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,VkInputAttachmentAspectReference:VkInputAttachmentAspectReference,VkInputAttachmentAspectReferenceKHR:VkInputAttachmentAspectReferenceKHR,VkRenderPassInputAttachmentAspectCreateInfo:VkRenderPassInputAttachmentAspectCreateInfo,VkRenderPassInputAttachmentAspectCreateInfoKHR:VkRenderPassInputAttachmentAspectCreateInfoKHR,VkPhysicalDeviceSurfaceInfo2KHR:VkPhysicalDeviceSurfaceInfo2KHR,VkSurfaceCapabilities2KHR:VkSurfaceCapabilities2KHR,VkSurfaceFormat2KHR:VkSurfaceFormat2KHR,VkDisplayProperties2KHR:VkDisplayProperties2KHR,VkDisplayPlaneProperties2KHR:VkDisplayPlaneProperties2KHR,VkDisplayModeProperties2KHR:VkDisplayModeProperties2KHR,VkDisplayPlaneInfo2KHR:VkDisplayPlaneInfo2KHR,VkDisplayPlaneCapabilities2KHR:VkDisplayPlaneCapabilities2KHR,VkSharedPresentSurfaceCapabilitiesKHR:VkSharedPresentSurfaceCapabilitiesKHR,VkPhysicalDevice16BitStorageFeatures:VkPhysicalDevice16BitStorageFeatures,VkPhysicalDevice16BitStorageFeaturesKHR:VkPhysicalDevice16BitStorageFeaturesKHR,VkPhysicalDeviceSubgroupProperties:VkPhysicalDeviceSubgroupProperties,VkBufferMemoryRequirementsInfo2:VkBufferMemoryRequirementsInfo2,VkBufferMemoryRequirementsInfo2KHR:VkBufferMemoryRequirementsInfo2KHR,VkImageMemoryRequirementsInfo2:VkImageMemoryRequirementsInfo2,VkImageMemoryRequirementsInfo2KHR:VkImageMemoryRequirementsInfo2KHR,VkImageSparseMemoryRequirementsInfo2:VkImageSparseMemoryRequirementsInfo2,VkImageSparseMemoryRequirementsInfo2KHR:VkImageSparseMemoryRequirementsInfo2KHR,VkMemoryRequirements2:VkMemoryRequirements2,VkMemoryRequirements2KHR:VkMemoryRequirements2KHR,VkSparseImageMemoryRequirements2:VkSparseImageMemoryRequirements2,VkSparseImageMemoryRequirements2KHR:VkSparseImageMemoryRequirements2KHR,VkPhysicalDevicePointClippingProperties:VkPhysicalDevicePointClippingProperties,VkPhysicalDevicePointClippingPropertiesKHR:VkPhysicalDevicePointClippingPropertiesKHR,VkMemoryDedicatedRequirements:VkMemoryDedicatedRequirements,VkMemoryDedicatedRequirementsKHR:VkMemoryDedicatedRequirementsKHR,VkMemoryDedicatedAllocateInfo:VkMemoryDedicatedAllocateInfo,VkMemoryDedicatedAllocateInfoKHR:VkMemoryDedicatedAllocateInfoKHR,VkImageViewUsageCreateInfo:VkImageViewUsageCreateInfo,VkImageViewUsageCreateInfoKHR:VkImageViewUsageCreateInfoKHR,VkPipelineTessellationDomainOriginStateCreateInfo:VkPipelineTessellationDomainOriginStateCreateInfo,VkPipelineTessellationDomainOriginStateCreateInfoKHR:VkPipelineTessellationDomainOriginStateCreateInfoKHR,VkSamplerYcbcrConversionInfo:VkSamplerYcbcrConversionInfo,VkSamplerYcbcrConversionInfoKHR:VkSamplerYcbcrConversionInfoKHR,VkSamplerYcbcrConversionCreateInfo:VkSamplerYcbcrConversionCreateInfo,VkSamplerYcbcrConversionCreateInfoKHR:VkSamplerYcbcrConversionCreateInfoKHR,VkBindImagePlaneMemoryInfo:VkBindImagePlaneMemoryInfo,VkBindImagePlaneMemoryInfoKHR:VkBindImagePlaneMemoryInfoKHR,VkImagePlaneMemoryRequirementsInfo:VkImagePlaneMemoryRequirementsInfo,VkImagePlaneMemoryRequirementsInfoKHR:VkImagePlaneMemoryRequirementsInfoKHR,VkPhysicalDeviceSamplerYcbcrConversionFeatures:VkPhysicalDeviceSamplerYcbcrConversionFeatures,VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR:VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR,VkSamplerYcbcrConversionImageFormatProperties:VkSamplerYcbcrConversionImageFormatProperties,VkSamplerYcbcrConversionImageFormatPropertiesKHR:VkSamplerYcbcrConversionImageFormatPropertiesKHR,VkTextureLODGatherFormatPropertiesAMD:VkTextureLODGatherFormatPropertiesAMD,VkConditionalRenderingBeginInfoEXT:VkConditionalRenderingBeginInfoEXT,VkProtectedSubmitInfo:VkProtectedSubmitInfo,VkPhysicalDeviceProtectedMemoryFeatures:VkPhysicalDeviceProtectedMemoryFeatures,VkPhysicalDeviceProtectedMemoryProperties:VkPhysicalDeviceProtectedMemoryProperties,VkDeviceQueueInfo2:VkDeviceQueueInfo2,VkPipelineCoverageToColorStateCreateInfoNV:VkPipelineCoverageToColorStateCreateInfoNV,VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT:VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT,VkSampleLocationEXT:VkSampleLocationEXT,VkSampleLocationsInfoEXT:VkSampleLocationsInfoEXT,VkAttachmentSampleLocationsEXT:VkAttachmentSampleLocationsEXT,VkSubpassSampleLocationsEXT:VkSubpassSampleLocationsEXT,VkRenderPassSampleLocationsBeginInfoEXT:VkRenderPassSampleLocationsBeginInfoEXT,VkPipelineSampleLocationsStateCreateInfoEXT:VkPipelineSampleLocationsStateCreateInfoEXT,VkPhysicalDeviceSampleLocationsPropertiesEXT:VkPhysicalDeviceSampleLocationsPropertiesEXT,VkMultisamplePropertiesEXT:VkMultisamplePropertiesEXT,VkSamplerReductionModeCreateInfoEXT:VkSamplerReductionModeCreateInfoEXT,VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT:VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT,VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT:VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT,VkPipelineColorBlendAdvancedStateCreateInfoEXT:VkPipelineColorBlendAdvancedStateCreateInfoEXT,VkPhysicalDeviceInlineUniformBlockFeaturesEXT:VkPhysicalDeviceInlineUniformBlockFeaturesEXT,VkPhysicalDeviceInlineUniformBlockPropertiesEXT:VkPhysicalDeviceInlineUniformBlockPropertiesEXT,VkWriteDescriptorSetInlineUniformBlockEXT:VkWriteDescriptorSetInlineUniformBlockEXT,VkDescriptorPoolInlineUniformBlockCreateInfoEXT:VkDescriptorPoolInlineUniformBlockCreateInfoEXT,VkPipelineCoverageModulationStateCreateInfoNV:VkPipelineCoverageModulationStateCreateInfoNV,VkImageFormatListCreateInfoKHR:VkImageFormatListCreateInfoKHR,VkValidationCacheCreateInfoEXT:VkValidationCacheCreateInfoEXT,VkShaderModuleValidationCacheCreateInfoEXT:VkShaderModuleValidationCacheCreateInfoEXT,VkPhysicalDeviceMaintenance3Properties:VkPhysicalDeviceMaintenance3Properties,VkPhysicalDeviceMaintenance3PropertiesKHR:VkPhysicalDeviceMaintenance3PropertiesKHR,VkDescriptorSetLayoutSupport:VkDescriptorSetLayoutSupport,VkDescriptorSetLayoutSupportKHR:VkDescriptorSetLayoutSupportKHR,VkPhysicalDeviceShaderDrawParametersFeatures:VkPhysicalDeviceShaderDrawParametersFeatures,VkPhysicalDeviceShaderDrawParameterFeatures:VkPhysicalDeviceShaderDrawParameterFeatures,VkPhysicalDeviceFloat16Int8FeaturesKHR:VkPhysicalDeviceFloat16Int8FeaturesKHR,VkPhysicalDeviceFloatControlsPropertiesKHR:VkPhysicalDeviceFloatControlsPropertiesKHR,VkPhysicalDeviceHostQueryResetFeaturesEXT:VkPhysicalDeviceHostQueryResetFeaturesEXT,VkShaderResourceUsageAMD:VkShaderResourceUsageAMD,VkShaderStatisticsInfoAMD:VkShaderStatisticsInfoAMD,VkDeviceQueueGlobalPriorityCreateInfoEXT:VkDeviceQueueGlobalPriorityCreateInfoEXT,VkDebugUtilsObjectNameInfoEXT:VkDebugUtilsObjectNameInfoEXT,VkDebugUtilsObjectTagInfoEXT:VkDebugUtilsObjectTagInfoEXT,VkDebugUtilsLabelEXT:VkDebugUtilsLabelEXT,VkDebugUtilsMessengerCreateInfoEXT:VkDebugUtilsMessengerCreateInfoEXT,VkDebugUtilsMessengerCallbackDataEXT:VkDebugUtilsMessengerCallbackDataEXT,VkImportMemoryHostPointerInfoEXT:VkImportMemoryHostPointerInfoEXT,VkMemoryHostPointerPropertiesEXT:VkMemoryHostPointerPropertiesEXT,VkPhysicalDeviceExternalMemoryHostPropertiesEXT:VkPhysicalDeviceExternalMemoryHostPropertiesEXT,VkPhysicalDeviceConservativeRasterizationPropertiesEXT:VkPhysicalDeviceConservativeRasterizationPropertiesEXT,VkCalibratedTimestampInfoEXT:VkCalibratedTimestampInfoEXT,VkPhysicalDeviceShaderCorePropertiesAMD:VkPhysicalDeviceShaderCorePropertiesAMD,VkPipelineRasterizationConservativeStateCreateInfoEXT:VkPipelineRasterizationConservativeStateCreateInfoEXT,VkPhysicalDeviceDescriptorIndexingFeaturesEXT:VkPhysicalDeviceDescriptorIndexingFeaturesEXT,VkPhysicalDeviceDescriptorIndexingPropertiesEXT:VkPhysicalDeviceDescriptorIndexingPropertiesEXT,VkDescriptorSetLayoutBindingFlagsCreateInfoEXT:VkDescriptorSetLayoutBindingFlagsCreateInfoEXT,VkDescriptorSetVariableDescriptorCountAllocateInfoEXT:VkDescriptorSetVariableDescriptorCountAllocateInfoEXT,VkDescriptorSetVariableDescriptorCountLayoutSupportEXT:VkDescriptorSetVariableDescriptorCountLayoutSupportEXT,VkAttachmentDescription2KHR:VkAttachmentDescription2KHR,VkAttachmentReference2KHR:VkAttachmentReference2KHR,VkSubpassDescription2KHR:VkSubpassDescription2KHR,VkSubpassDependency2KHR:VkSubpassDependency2KHR,VkRenderPassCreateInfo2KHR:VkRenderPassCreateInfo2KHR,VkSubpassBeginInfoKHR:VkSubpassBeginInfoKHR,VkSubpassEndInfoKHR:VkSubpassEndInfoKHR,VkVertexInputBindingDivisorDescriptionEXT:VkVertexInputBindingDivisorDescriptionEXT,VkPipelineVertexInputDivisorStateCreateInfoEXT:VkPipelineVertexInputDivisorStateCreateInfoEXT,VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT:VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT,VkPhysicalDevicePCIBusInfoPropertiesEXT:VkPhysicalDevicePCIBusInfoPropertiesEXT,VkCommandBufferInheritanceConditionalRenderingInfoEXT:VkCommandBufferInheritanceConditionalRenderingInfoEXT,VkPhysicalDevice8BitStorageFeaturesKHR:VkPhysicalDevice8BitStorageFeaturesKHR,VkPhysicalDeviceConditionalRenderingFeaturesEXT:VkPhysicalDeviceConditionalRenderingFeaturesEXT,VkPhysicalDeviceVulkanMemoryModelFeaturesKHR:VkPhysicalDeviceVulkanMemoryModelFeaturesKHR,VkPhysicalDeviceShaderAtomicInt64FeaturesKHR:VkPhysicalDeviceShaderAtomicInt64FeaturesKHR,VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT:VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT,VkQueueFamilyCheckpointPropertiesNV:VkQueueFamilyCheckpointPropertiesNV,VkCheckpointDataNV:VkCheckpointDataNV,VkPhysicalDeviceDepthStencilResolvePropertiesKHR:VkPhysicalDeviceDepthStencilResolvePropertiesKHR,VkSubpassDescriptionDepthStencilResolveKHR:VkSubpassDescriptionDepthStencilResolveKHR,VkImageViewASTCDecodeModeEXT:VkImageViewASTCDecodeModeEXT,VkPhysicalDeviceASTCDecodeFeaturesEXT:VkPhysicalDeviceASTCDecodeFeaturesEXT,VkPhysicalDeviceTransformFeedbackFeaturesEXT:VkPhysicalDeviceTransformFeedbackFeaturesEXT,VkPhysicalDeviceTransformFeedbackPropertiesEXT:VkPhysicalDeviceTransformFeedbackPropertiesEXT,VkPipelineRasterizationStateStreamCreateInfoEXT:VkPipelineRasterizationStateStreamCreateInfoEXT,VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV:VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV,VkPipelineRepresentativeFragmentTestStateCreateInfoNV:VkPipelineRepresentativeFragmentTestStateCreateInfoNV,VkPhysicalDeviceExclusiveScissorFeaturesNV:VkPhysicalDeviceExclusiveScissorFeaturesNV,VkPipelineViewportExclusiveScissorStateCreateInfoNV:VkPipelineViewportExclusiveScissorStateCreateInfoNV,VkPhysicalDeviceCornerSampledImageFeaturesNV:VkPhysicalDeviceCornerSampledImageFeaturesNV,VkPhysicalDeviceComputeShaderDerivativesFeaturesNV:VkPhysicalDeviceComputeShaderDerivativesFeaturesNV,VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV:VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV,VkPhysicalDeviceShaderImageFootprintFeaturesNV:VkPhysicalDeviceShaderImageFootprintFeaturesNV,VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV:VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,VkShadingRatePaletteNV:VkShadingRatePaletteNV,VkPipelineViewportShadingRateImageStateCreateInfoNV:VkPipelineViewportShadingRateImageStateCreateInfoNV,VkPhysicalDeviceShadingRateImageFeaturesNV:VkPhysicalDeviceShadingRateImageFeaturesNV,VkPhysicalDeviceShadingRateImagePropertiesNV:VkPhysicalDeviceShadingRateImagePropertiesNV,VkCoarseSampleLocationNV:VkCoarseSampleLocationNV,VkCoarseSampleOrderCustomNV:VkCoarseSampleOrderCustomNV,VkPipelineViewportCoarseSampleOrderStateCreateInfoNV:VkPipelineViewportCoarseSampleOrderStateCreateInfoNV,VkPhysicalDeviceMeshShaderFeaturesNV:VkPhysicalDeviceMeshShaderFeaturesNV,VkPhysicalDeviceMeshShaderPropertiesNV:VkPhysicalDeviceMeshShaderPropertiesNV,VkDrawMeshTasksIndirectCommandNV:VkDrawMeshTasksIndirectCommandNV,VkRayTracingShaderGroupCreateInfoNV:VkRayTracingShaderGroupCreateInfoNV,VkRayTracingPipelineCreateInfoNV:VkRayTracingPipelineCreateInfoNV,VkGeometryTrianglesNV:VkGeometryTrianglesNV,VkGeometryAABBNV:VkGeometryAABBNV,VkGeometryDataNV:VkGeometryDataNV,VkGeometryNV:VkGeometryNV,VkAccelerationStructureInfoNV:VkAccelerationStructureInfoNV,VkAccelerationStructureCreateInfoNV:VkAccelerationStructureCreateInfoNV,VkBindAccelerationStructureMemoryInfoNV:VkBindAccelerationStructureMemoryInfoNV,VkWriteDescriptorSetAccelerationStructureNV:VkWriteDescriptorSetAccelerationStructureNV,VkAccelerationStructureMemoryRequirementsInfoNV:VkAccelerationStructureMemoryRequirementsInfoNV,VkPhysicalDeviceRayTracingPropertiesNV:VkPhysicalDeviceRayTracingPropertiesNV,VkDrmFormatModifierPropertiesListEXT:VkDrmFormatModifierPropertiesListEXT,VkDrmFormatModifierPropertiesEXT:VkDrmFormatModifierPropertiesEXT,VkPhysicalDeviceImageDrmFormatModifierInfoEXT:VkPhysicalDeviceImageDrmFormatModifierInfoEXT,VkImageDrmFormatModifierListCreateInfoEXT:VkImageDrmFormatModifierListCreateInfoEXT,VkImageDrmFormatModifierExplicitCreateInfoEXT:VkImageDrmFormatModifierExplicitCreateInfoEXT,VkImageDrmFormatModifierPropertiesEXT:VkImageDrmFormatModifierPropertiesEXT,VkImageStencilUsageCreateInfoEXT:VkImageStencilUsageCreateInfoEXT,VkDeviceMemoryOverallocationCreateInfoAMD:VkDeviceMemoryOverallocationCreateInfoAMD,VkPhysicalDeviceFragmentDensityMapFeaturesEXT:VkPhysicalDeviceFragmentDensityMapFeaturesEXT,VkPhysicalDeviceFragmentDensityMapPropertiesEXT:VkPhysicalDeviceFragmentDensityMapPropertiesEXT,VkRenderPassFragmentDensityMapCreateInfoEXT:VkRenderPassFragmentDensityMapCreateInfoEXT,VkPhysicalDeviceScalarBlockLayoutFeaturesEXT:VkPhysicalDeviceScalarBlockLayoutFeaturesEXT,VkSurfaceProtectedCapabilitiesKHR:VkSurfaceProtectedCapabilitiesKHR,VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR:VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR,VkPhysicalDeviceDepthClipEnableFeaturesEXT:VkPhysicalDeviceDepthClipEnableFeaturesEXT,VkPipelineRasterizationDepthClipStateCreateInfoEXT:VkPipelineRasterizationDepthClipStateCreateInfoEXT,VkPhysicalDeviceMemoryBudgetPropertiesEXT:VkPhysicalDeviceMemoryBudgetPropertiesEXT,VkPhysicalDeviceMemoryPriorityFeaturesEXT:VkPhysicalDeviceMemoryPriorityFeaturesEXT,VkMemoryPriorityAllocateInfoEXT:VkMemoryPriorityAllocateInfoEXT,VkPhysicalDeviceBufferDeviceAddressFeaturesEXT:VkPhysicalDeviceBufferDeviceAddressFeaturesEXT,VkPhysicalDeviceBufferAddressFeaturesEXT:VkPhysicalDeviceBufferAddressFeaturesEXT,VkBufferDeviceAddressInfoEXT:VkBufferDeviceAddressInfoEXT,VkBufferDeviceAddressCreateInfoEXT:VkBufferDeviceAddressCreateInfoEXT,VkPhysicalDeviceImageViewImageFormatInfoEXT:VkPhysicalDeviceImageViewImageFormatInfoEXT,VkFilterCubicImageViewImageFormatPropertiesEXT:VkFilterCubicImageViewImageFormatPropertiesEXT,VkPhysicalDeviceImagelessFramebufferFeaturesKHR:VkPhysicalDeviceImagelessFramebufferFeaturesKHR,VkFramebufferAttachmentsCreateInfoKHR:VkFramebufferAttachmentsCreateInfoKHR,VkFramebufferAttachmentImageInfoKHR:VkFramebufferAttachmentImageInfoKHR,VkRenderPassAttachmentBeginInfoKHR:VkRenderPassAttachmentBeginInfoKHR,VkPhysicalDeviceCooperativeMatrixFeaturesNV:VkPhysicalDeviceCooperativeMatrixFeaturesNV,VkPhysicalDeviceCooperativeMatrixPropertiesNV:VkPhysicalDeviceCooperativeMatrixPropertiesNV,VkCooperativeMatrixPropertiesNV:VkCooperativeMatrixPropertiesNV,VkPhysicalDeviceYcbcrImageArraysFeaturesEXT:VkPhysicalDeviceYcbcrImageArraysFeaturesEXT,VkImageViewHandleInfoNVX:VkImageViewHandleInfoNVX,VkPipelineCreationFeedbackEXT:VkPipelineCreationFeedbackEXT,VkPipelineCreationFeedbackCreateInfoEXT:VkPipelineCreationFeedbackCreateInfoEXT,VkHeadlessSurfaceCreateInfoEXT:VkHeadlessSurfaceCreateInfoEXT,VkPhysicalDeviceCoverageReductionModeFeaturesNV:VkPhysicalDeviceCoverageReductionModeFeaturesNV,VkPipelineCoverageReductionStateCreateInfoNV:VkPipelineCoverageReductionStateCreateInfoNV,VkFramebufferMixedSamplesCombinationNV:VkFramebufferMixedSamplesCombinationNV,VkPhysicalDeviceShaderIntegerFunctions2INTEL:VkPhysicalDeviceShaderIntegerFunctions2INTEL,VkPerformanceValueINTEL:VkPerformanceValueINTEL,VkInitializePerformanceApiInfoINTEL:VkInitializePerformanceApiInfoINTEL,VkQueryPoolCreateInfoINTEL:VkQueryPoolCreateInfoINTEL,VkPerformanceMarkerInfoINTEL:VkPerformanceMarkerInfoINTEL,VkPerformanceStreamMarkerInfoINTEL:VkPerformanceStreamMarkerInfoINTEL,VkPerformanceOverrideInfoINTEL:VkPerformanceOverrideInfoINTEL,VkPerformanceConfigurationAcquireInfoINTEL:VkPerformanceConfigurationAcquireInfoINTEL,VkPhysicalDeviceShaderSMBuiltinsPropertiesNV:VkPhysicalDeviceShaderSMBuiltinsPropertiesNV,VkPhysicalDeviceShaderSMBuiltinsFeaturesNV:VkPhysicalDeviceShaderSMBuiltinsFeaturesNV,VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT:VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT,VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT:VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT,VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT:VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT,VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT:VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT,VkClearColorValue:VkClearColorValue,VkClearValue:VkClearValue,VkPerformanceValueDataINTEL:VkPerformanceValueDataINTEL};