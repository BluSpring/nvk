/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.5.9
 */
#define NAPI_EXPERIMENTAL
#include <napi.h>

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>



#include "calls.h"
#include "enums.h"
#include "window.h"


static Napi::Value getAddressFromArrayBuffer(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  if (!(info[0].IsArrayBuffer())) {
    Napi::TypeError::New(env, "Argument 1 must be of type 'ArrayBuffer'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  Napi::ArrayBuffer buffer = info[0].As<Napi::ArrayBuffer>();
  int64_t addr = reinterpret_cast<int64_t>(buffer.Data());
  return Napi::BigInt::New(env, addr);
};

static Napi::Value getArrayBufferFromAddress(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  if (!(info[0].IsBigInt())) {
    Napi::TypeError::New(env, "Argument 1 must be of type 'BigInt'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  if (!(info[1].IsBigInt())) {
    Napi::TypeError::New(env, "Argument 2 must be of type 'BigInt'").ThrowAsJavaScriptException();
    return env.Undefined();
  }
  bool lossless0;
  int64_t addr = info[0].As<Napi::BigInt>().Int64Value(&lossless0);
  bool lossless1;
  int64_t size = info[1].As<Napi::BigInt>().Int64Value(&lossless1);
  Napi::ArrayBuffer buffer = Napi::ArrayBuffer::New(
    env,
    reinterpret_cast<void *>(addr),
    size
  );
  return buffer;
};

static Napi::Value _VK_MAKE_VERSION(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  if (!(info[0].IsNumber())) Napi::TypeError::New(env, "Argument 1 must be of type 'Number'").ThrowAsJavaScriptException();
  if (!(info[1].IsNumber())) Napi::TypeError::New(env, "Argument 2 must be of type 'Number'").ThrowAsJavaScriptException();
  if (!(info[2].IsNumber())) Napi::TypeError::New(env, "Argument 3 must be of type 'Number'").ThrowAsJavaScriptException();
  uint32_t major = info[0].As<Napi::Number>().Uint32Value();
  uint32_t minor = info[1].As<Napi::Number>().Uint32Value();
  uint32_t patch = info[2].As<Napi::Number>().Uint32Value();
  return Napi::Number::New(env, VK_MAKE_VERSION(major, minor, patch));
};

static Napi::Value _VK_VERSION_MAJOR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  if (!(info[0].IsNumber())) Napi::TypeError::New(env, "Argument 1 must be of type 'Number'").ThrowAsJavaScriptException();
  uint32_t version = info[0].As<Napi::Number>().Uint32Value();
  return Napi::Number::New(env, (uint32_t)(version) >> 22);
};

static Napi::Value _VK_VERSION_MINOR(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  if (!(info[0].IsNumber())) Napi::TypeError::New(env, "Argument 1 must be of type 'Number'").ThrowAsJavaScriptException();
  uint32_t version = info[0].As<Napi::Number>().Uint32Value();
  return Napi::Number::New(env, ((uint32_t)(version) >> 12) & 0x3ff);
};

static Napi::Value _VK_VERSION_PATCH(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  if (!(info[0].IsNumber())) Napi::TypeError::New(env, "Argument 1 must be of type 'Number'").ThrowAsJavaScriptException();
  uint32_t version = info[0].As<Napi::Number>().Uint32Value();
  return Napi::Number::New(env, (uint32_t)(version) & 0xfff);
};

Napi::Object Init(Napi::Env env, Napi::Object exports) {
  VulkanWindow::Initialize(env, exports);
  exports["VK_MAKE_VERSION"] = Napi::Function::New(env, _VK_MAKE_VERSION, "VK_MAKE_VERSION");
  exports["VK_VERSION_MAJOR"] = Napi::Function::New(env, _VK_VERSION_MAJOR, "VK_VERSION_MAJOR");
  exports["VK_VERSION_MINOR"] = Napi::Function::New(env, _VK_VERSION_MINOR, "VK_VERSION_MINOR");
  exports["VK_VERSION_PATCH"] = Napi::Function::New(env, _VK_VERSION_PATCH, "VK_VERSION_PATCH");
  exports["VK_API_VERSION_1_0"] = Napi::Number::New(env, VK_MAKE_VERSION(1, 0, 0));
  exports["VK_API_VERSION_1_1"] = Napi::Number::New(env, VK_MAKE_VERSION(1, 1, 0));
  exports["vkUseDevice"] = Napi::Function::New(env, _vkUseDevice, "vkUseDevice");
  exports["vkUseInstance"] = Napi::Function::New(env, _vkUseInstance, "vkUseInstance");
  exports["getAddressFromArrayBuffer"] = Napi::Function::New(env, getAddressFromArrayBuffer, "getAddressFromArrayBuffer");
  exports["getArrayBufferFromAddress"] = Napi::Function::New(env, getArrayBufferFromAddress, "getArrayBufferFromAddress");
  
  exports["$getVulkanEnumerations"] = Napi::Function::New(env, getVulkanEnumerations, "getVulkanEnumerations");
  // calls
  exports["vkCreateInstance"] = Napi::Function::New(env, _vkCreateInstance, "vkCreateInstance");
  exports["vkDestroyInstance"] = Napi::Function::New(env, _vkDestroyInstance, "vkDestroyInstance");
  exports["vkEnumeratePhysicalDevices"] = Napi::Function::New(env, _vkEnumeratePhysicalDevices, "vkEnumeratePhysicalDevices");
  exports["vkGetDeviceProcAddr"] = Napi::Function::New(env, _vkGetDeviceProcAddr, "vkGetDeviceProcAddr");
  exports["vkGetInstanceProcAddr"] = Napi::Function::New(env, _vkGetInstanceProcAddr, "vkGetInstanceProcAddr");
  exports["vkGetPhysicalDeviceProperties"] = Napi::Function::New(env, _vkGetPhysicalDeviceProperties, "vkGetPhysicalDeviceProperties");
  exports["vkGetPhysicalDeviceQueueFamilyProperties"] = Napi::Function::New(env, _vkGetPhysicalDeviceQueueFamilyProperties, "vkGetPhysicalDeviceQueueFamilyProperties");
  exports["vkGetPhysicalDeviceMemoryProperties"] = Napi::Function::New(env, _vkGetPhysicalDeviceMemoryProperties, "vkGetPhysicalDeviceMemoryProperties");
  exports["vkGetPhysicalDeviceFeatures"] = Napi::Function::New(env, _vkGetPhysicalDeviceFeatures, "vkGetPhysicalDeviceFeatures");
  exports["vkGetPhysicalDeviceFormatProperties"] = Napi::Function::New(env, _vkGetPhysicalDeviceFormatProperties, "vkGetPhysicalDeviceFormatProperties");
  exports["vkGetPhysicalDeviceImageFormatProperties"] = Napi::Function::New(env, _vkGetPhysicalDeviceImageFormatProperties, "vkGetPhysicalDeviceImageFormatProperties");
  exports["vkCreateDevice"] = Napi::Function::New(env, _vkCreateDevice, "vkCreateDevice");
  exports["vkDestroyDevice"] = Napi::Function::New(env, _vkDestroyDevice, "vkDestroyDevice");
  exports["vkEnumerateInstanceVersion"] = Napi::Function::New(env, _vkEnumerateInstanceVersion, "vkEnumerateInstanceVersion");
  exports["vkEnumerateInstanceLayerProperties"] = Napi::Function::New(env, _vkEnumerateInstanceLayerProperties, "vkEnumerateInstanceLayerProperties");
  exports["vkEnumerateInstanceExtensionProperties"] = Napi::Function::New(env, _vkEnumerateInstanceExtensionProperties, "vkEnumerateInstanceExtensionProperties");
  exports["vkEnumerateDeviceLayerProperties"] = Napi::Function::New(env, _vkEnumerateDeviceLayerProperties, "vkEnumerateDeviceLayerProperties");
  exports["vkEnumerateDeviceExtensionProperties"] = Napi::Function::New(env, _vkEnumerateDeviceExtensionProperties, "vkEnumerateDeviceExtensionProperties");
  exports["vkGetDeviceQueue"] = Napi::Function::New(env, _vkGetDeviceQueue, "vkGetDeviceQueue");
  exports["vkQueueSubmit"] = Napi::Function::New(env, _vkQueueSubmit, "vkQueueSubmit");
  exports["vkQueueWaitIdle"] = Napi::Function::New(env, _vkQueueWaitIdle, "vkQueueWaitIdle");
  exports["vkDeviceWaitIdle"] = Napi::Function::New(env, _vkDeviceWaitIdle, "vkDeviceWaitIdle");
  exports["vkAllocateMemory"] = Napi::Function::New(env, _vkAllocateMemory, "vkAllocateMemory");
  exports["vkFreeMemory"] = Napi::Function::New(env, _vkFreeMemory, "vkFreeMemory");
  exports["vkMapMemory"] = Napi::Function::New(env, _vkMapMemory, "vkMapMemory");
  exports["vkUnmapMemory"] = Napi::Function::New(env, _vkUnmapMemory, "vkUnmapMemory");
  exports["vkFlushMappedMemoryRanges"] = Napi::Function::New(env, _vkFlushMappedMemoryRanges, "vkFlushMappedMemoryRanges");
  exports["vkInvalidateMappedMemoryRanges"] = Napi::Function::New(env, _vkInvalidateMappedMemoryRanges, "vkInvalidateMappedMemoryRanges");
  exports["vkGetDeviceMemoryCommitment"] = Napi::Function::New(env, _vkGetDeviceMemoryCommitment, "vkGetDeviceMemoryCommitment");
  exports["vkGetBufferMemoryRequirements"] = Napi::Function::New(env, _vkGetBufferMemoryRequirements, "vkGetBufferMemoryRequirements");
  exports["vkBindBufferMemory"] = Napi::Function::New(env, _vkBindBufferMemory, "vkBindBufferMemory");
  exports["vkGetImageMemoryRequirements"] = Napi::Function::New(env, _vkGetImageMemoryRequirements, "vkGetImageMemoryRequirements");
  exports["vkBindImageMemory"] = Napi::Function::New(env, _vkBindImageMemory, "vkBindImageMemory");
  exports["vkGetImageSparseMemoryRequirements"] = Napi::Function::New(env, _vkGetImageSparseMemoryRequirements, "vkGetImageSparseMemoryRequirements");
  exports["vkGetPhysicalDeviceSparseImageFormatProperties"] = Napi::Function::New(env, _vkGetPhysicalDeviceSparseImageFormatProperties, "vkGetPhysicalDeviceSparseImageFormatProperties");
  exports["vkQueueBindSparse"] = Napi::Function::New(env, _vkQueueBindSparse, "vkQueueBindSparse");
  exports["vkCreateFence"] = Napi::Function::New(env, _vkCreateFence, "vkCreateFence");
  exports["vkDestroyFence"] = Napi::Function::New(env, _vkDestroyFence, "vkDestroyFence");
  exports["vkResetFences"] = Napi::Function::New(env, _vkResetFences, "vkResetFences");
  exports["vkGetFenceStatus"] = Napi::Function::New(env, _vkGetFenceStatus, "vkGetFenceStatus");
  exports["vkWaitForFences"] = Napi::Function::New(env, _vkWaitForFences, "vkWaitForFences");
  exports["vkCreateSemaphore"] = Napi::Function::New(env, _vkCreateSemaphore, "vkCreateSemaphore");
  exports["vkDestroySemaphore"] = Napi::Function::New(env, _vkDestroySemaphore, "vkDestroySemaphore");
  exports["vkCreateEvent"] = Napi::Function::New(env, _vkCreateEvent, "vkCreateEvent");
  exports["vkDestroyEvent"] = Napi::Function::New(env, _vkDestroyEvent, "vkDestroyEvent");
  exports["vkGetEventStatus"] = Napi::Function::New(env, _vkGetEventStatus, "vkGetEventStatus");
  exports["vkSetEvent"] = Napi::Function::New(env, _vkSetEvent, "vkSetEvent");
  exports["vkResetEvent"] = Napi::Function::New(env, _vkResetEvent, "vkResetEvent");
  exports["vkCreateQueryPool"] = Napi::Function::New(env, _vkCreateQueryPool, "vkCreateQueryPool");
  exports["vkDestroyQueryPool"] = Napi::Function::New(env, _vkDestroyQueryPool, "vkDestroyQueryPool");
  exports["vkGetQueryPoolResults"] = Napi::Function::New(env, _vkGetQueryPoolResults, "vkGetQueryPoolResults");
  exports["vkResetQueryPoolEXT"] = Napi::Function::New(env, _vkResetQueryPoolEXT, "vkResetQueryPoolEXT");
  exports["vkCreateBuffer"] = Napi::Function::New(env, _vkCreateBuffer, "vkCreateBuffer");
  exports["vkDestroyBuffer"] = Napi::Function::New(env, _vkDestroyBuffer, "vkDestroyBuffer");
  exports["vkCreateBufferView"] = Napi::Function::New(env, _vkCreateBufferView, "vkCreateBufferView");
  exports["vkDestroyBufferView"] = Napi::Function::New(env, _vkDestroyBufferView, "vkDestroyBufferView");
  exports["vkCreateImage"] = Napi::Function::New(env, _vkCreateImage, "vkCreateImage");
  exports["vkDestroyImage"] = Napi::Function::New(env, _vkDestroyImage, "vkDestroyImage");
  exports["vkGetImageSubresourceLayout"] = Napi::Function::New(env, _vkGetImageSubresourceLayout, "vkGetImageSubresourceLayout");
  exports["vkCreateImageView"] = Napi::Function::New(env, _vkCreateImageView, "vkCreateImageView");
  exports["vkDestroyImageView"] = Napi::Function::New(env, _vkDestroyImageView, "vkDestroyImageView");
  exports["vkCreateShaderModule"] = Napi::Function::New(env, _vkCreateShaderModule, "vkCreateShaderModule");
  exports["vkDestroyShaderModule"] = Napi::Function::New(env, _vkDestroyShaderModule, "vkDestroyShaderModule");
  exports["vkCreatePipelineCache"] = Napi::Function::New(env, _vkCreatePipelineCache, "vkCreatePipelineCache");
  exports["vkDestroyPipelineCache"] = Napi::Function::New(env, _vkDestroyPipelineCache, "vkDestroyPipelineCache");
  exports["vkGetPipelineCacheData"] = Napi::Function::New(env, _vkGetPipelineCacheData, "vkGetPipelineCacheData");
  exports["vkMergePipelineCaches"] = Napi::Function::New(env, _vkMergePipelineCaches, "vkMergePipelineCaches");
  exports["vkCreateGraphicsPipelines"] = Napi::Function::New(env, _vkCreateGraphicsPipelines, "vkCreateGraphicsPipelines");
  exports["vkCreateComputePipelines"] = Napi::Function::New(env, _vkCreateComputePipelines, "vkCreateComputePipelines");
  exports["vkDestroyPipeline"] = Napi::Function::New(env, _vkDestroyPipeline, "vkDestroyPipeline");
  exports["vkCreatePipelineLayout"] = Napi::Function::New(env, _vkCreatePipelineLayout, "vkCreatePipelineLayout");
  exports["vkDestroyPipelineLayout"] = Napi::Function::New(env, _vkDestroyPipelineLayout, "vkDestroyPipelineLayout");
  exports["vkCreateSampler"] = Napi::Function::New(env, _vkCreateSampler, "vkCreateSampler");
  exports["vkDestroySampler"] = Napi::Function::New(env, _vkDestroySampler, "vkDestroySampler");
  exports["vkCreateDescriptorSetLayout"] = Napi::Function::New(env, _vkCreateDescriptorSetLayout, "vkCreateDescriptorSetLayout");
  exports["vkDestroyDescriptorSetLayout"] = Napi::Function::New(env, _vkDestroyDescriptorSetLayout, "vkDestroyDescriptorSetLayout");
  exports["vkCreateDescriptorPool"] = Napi::Function::New(env, _vkCreateDescriptorPool, "vkCreateDescriptorPool");
  exports["vkDestroyDescriptorPool"] = Napi::Function::New(env, _vkDestroyDescriptorPool, "vkDestroyDescriptorPool");
  exports["vkResetDescriptorPool"] = Napi::Function::New(env, _vkResetDescriptorPool, "vkResetDescriptorPool");
  exports["vkAllocateDescriptorSets"] = Napi::Function::New(env, _vkAllocateDescriptorSets, "vkAllocateDescriptorSets");
  exports["vkFreeDescriptorSets"] = Napi::Function::New(env, _vkFreeDescriptorSets, "vkFreeDescriptorSets");
  exports["vkUpdateDescriptorSets"] = Napi::Function::New(env, _vkUpdateDescriptorSets, "vkUpdateDescriptorSets");
  exports["vkCreateFramebuffer"] = Napi::Function::New(env, _vkCreateFramebuffer, "vkCreateFramebuffer");
  exports["vkDestroyFramebuffer"] = Napi::Function::New(env, _vkDestroyFramebuffer, "vkDestroyFramebuffer");
  exports["vkCreateRenderPass"] = Napi::Function::New(env, _vkCreateRenderPass, "vkCreateRenderPass");
  exports["vkDestroyRenderPass"] = Napi::Function::New(env, _vkDestroyRenderPass, "vkDestroyRenderPass");
  exports["vkGetRenderAreaGranularity"] = Napi::Function::New(env, _vkGetRenderAreaGranularity, "vkGetRenderAreaGranularity");
  exports["vkCreateCommandPool"] = Napi::Function::New(env, _vkCreateCommandPool, "vkCreateCommandPool");
  exports["vkDestroyCommandPool"] = Napi::Function::New(env, _vkDestroyCommandPool, "vkDestroyCommandPool");
  exports["vkResetCommandPool"] = Napi::Function::New(env, _vkResetCommandPool, "vkResetCommandPool");
  exports["vkAllocateCommandBuffers"] = Napi::Function::New(env, _vkAllocateCommandBuffers, "vkAllocateCommandBuffers");
  exports["vkFreeCommandBuffers"] = Napi::Function::New(env, _vkFreeCommandBuffers, "vkFreeCommandBuffers");
  exports["vkBeginCommandBuffer"] = Napi::Function::New(env, _vkBeginCommandBuffer, "vkBeginCommandBuffer");
  exports["vkEndCommandBuffer"] = Napi::Function::New(env, _vkEndCommandBuffer, "vkEndCommandBuffer");
  exports["vkResetCommandBuffer"] = Napi::Function::New(env, _vkResetCommandBuffer, "vkResetCommandBuffer");
  exports["vkCmdBindPipeline"] = Napi::Function::New(env, _vkCmdBindPipeline, "vkCmdBindPipeline");
  exports["vkCmdSetViewport"] = Napi::Function::New(env, _vkCmdSetViewport, "vkCmdSetViewport");
  exports["vkCmdSetScissor"] = Napi::Function::New(env, _vkCmdSetScissor, "vkCmdSetScissor");
  exports["vkCmdSetLineWidth"] = Napi::Function::New(env, _vkCmdSetLineWidth, "vkCmdSetLineWidth");
  exports["vkCmdSetDepthBias"] = Napi::Function::New(env, _vkCmdSetDepthBias, "vkCmdSetDepthBias");
  exports["vkCmdSetBlendConstants"] = Napi::Function::New(env, _vkCmdSetBlendConstants, "vkCmdSetBlendConstants");
  exports["vkCmdSetDepthBounds"] = Napi::Function::New(env, _vkCmdSetDepthBounds, "vkCmdSetDepthBounds");
  exports["vkCmdSetStencilCompareMask"] = Napi::Function::New(env, _vkCmdSetStencilCompareMask, "vkCmdSetStencilCompareMask");
  exports["vkCmdSetStencilWriteMask"] = Napi::Function::New(env, _vkCmdSetStencilWriteMask, "vkCmdSetStencilWriteMask");
  exports["vkCmdSetStencilReference"] = Napi::Function::New(env, _vkCmdSetStencilReference, "vkCmdSetStencilReference");
  exports["vkCmdBindDescriptorSets"] = Napi::Function::New(env, _vkCmdBindDescriptorSets, "vkCmdBindDescriptorSets");
  exports["vkCmdBindIndexBuffer"] = Napi::Function::New(env, _vkCmdBindIndexBuffer, "vkCmdBindIndexBuffer");
  exports["vkCmdBindVertexBuffers"] = Napi::Function::New(env, _vkCmdBindVertexBuffers, "vkCmdBindVertexBuffers");
  exports["vkCmdDraw"] = Napi::Function::New(env, _vkCmdDraw, "vkCmdDraw");
  exports["vkCmdDrawIndexed"] = Napi::Function::New(env, _vkCmdDrawIndexed, "vkCmdDrawIndexed");
  exports["vkCmdDrawIndirect"] = Napi::Function::New(env, _vkCmdDrawIndirect, "vkCmdDrawIndirect");
  exports["vkCmdDrawIndexedIndirect"] = Napi::Function::New(env, _vkCmdDrawIndexedIndirect, "vkCmdDrawIndexedIndirect");
  exports["vkCmdDispatch"] = Napi::Function::New(env, _vkCmdDispatch, "vkCmdDispatch");
  exports["vkCmdDispatchIndirect"] = Napi::Function::New(env, _vkCmdDispatchIndirect, "vkCmdDispatchIndirect");
  exports["vkCmdCopyBuffer"] = Napi::Function::New(env, _vkCmdCopyBuffer, "vkCmdCopyBuffer");
  exports["vkCmdCopyImage"] = Napi::Function::New(env, _vkCmdCopyImage, "vkCmdCopyImage");
  exports["vkCmdBlitImage"] = Napi::Function::New(env, _vkCmdBlitImage, "vkCmdBlitImage");
  exports["vkCmdCopyBufferToImage"] = Napi::Function::New(env, _vkCmdCopyBufferToImage, "vkCmdCopyBufferToImage");
  exports["vkCmdCopyImageToBuffer"] = Napi::Function::New(env, _vkCmdCopyImageToBuffer, "vkCmdCopyImageToBuffer");
  exports["vkCmdUpdateBuffer"] = Napi::Function::New(env, _vkCmdUpdateBuffer, "vkCmdUpdateBuffer");
  exports["vkCmdFillBuffer"] = Napi::Function::New(env, _vkCmdFillBuffer, "vkCmdFillBuffer");
  exports["vkCmdClearColorImage"] = Napi::Function::New(env, _vkCmdClearColorImage, "vkCmdClearColorImage");
  exports["vkCmdClearDepthStencilImage"] = Napi::Function::New(env, _vkCmdClearDepthStencilImage, "vkCmdClearDepthStencilImage");
  exports["vkCmdClearAttachments"] = Napi::Function::New(env, _vkCmdClearAttachments, "vkCmdClearAttachments");
  exports["vkCmdResolveImage"] = Napi::Function::New(env, _vkCmdResolveImage, "vkCmdResolveImage");
  exports["vkCmdSetEvent"] = Napi::Function::New(env, _vkCmdSetEvent, "vkCmdSetEvent");
  exports["vkCmdResetEvent"] = Napi::Function::New(env, _vkCmdResetEvent, "vkCmdResetEvent");
  exports["vkCmdWaitEvents"] = Napi::Function::New(env, _vkCmdWaitEvents, "vkCmdWaitEvents");
  exports["vkCmdPipelineBarrier"] = Napi::Function::New(env, _vkCmdPipelineBarrier, "vkCmdPipelineBarrier");
  exports["vkCmdBeginQuery"] = Napi::Function::New(env, _vkCmdBeginQuery, "vkCmdBeginQuery");
  exports["vkCmdEndQuery"] = Napi::Function::New(env, _vkCmdEndQuery, "vkCmdEndQuery");
  exports["vkCmdBeginConditionalRenderingEXT"] = Napi::Function::New(env, _vkCmdBeginConditionalRenderingEXT, "vkCmdBeginConditionalRenderingEXT");
  exports["vkCmdEndConditionalRenderingEXT"] = Napi::Function::New(env, _vkCmdEndConditionalRenderingEXT, "vkCmdEndConditionalRenderingEXT");
  exports["vkCmdResetQueryPool"] = Napi::Function::New(env, _vkCmdResetQueryPool, "vkCmdResetQueryPool");
  exports["vkCmdWriteTimestamp"] = Napi::Function::New(env, _vkCmdWriteTimestamp, "vkCmdWriteTimestamp");
  exports["vkCmdCopyQueryPoolResults"] = Napi::Function::New(env, _vkCmdCopyQueryPoolResults, "vkCmdCopyQueryPoolResults");
  exports["vkCmdPushConstants"] = Napi::Function::New(env, _vkCmdPushConstants, "vkCmdPushConstants");
  exports["vkCmdBeginRenderPass"] = Napi::Function::New(env, _vkCmdBeginRenderPass, "vkCmdBeginRenderPass");
  exports["vkCmdNextSubpass"] = Napi::Function::New(env, _vkCmdNextSubpass, "vkCmdNextSubpass");
  exports["vkCmdEndRenderPass"] = Napi::Function::New(env, _vkCmdEndRenderPass, "vkCmdEndRenderPass");
  exports["vkCmdExecuteCommands"] = Napi::Function::New(env, _vkCmdExecuteCommands, "vkCmdExecuteCommands");
  exports["vkGetPhysicalDeviceDisplayPropertiesKHR"] = Napi::Function::New(env, _vkGetPhysicalDeviceDisplayPropertiesKHR, "vkGetPhysicalDeviceDisplayPropertiesKHR");
  exports["vkGetPhysicalDeviceDisplayPlanePropertiesKHR"] = Napi::Function::New(env, _vkGetPhysicalDeviceDisplayPlanePropertiesKHR, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
  exports["vkGetDisplayPlaneSupportedDisplaysKHR"] = Napi::Function::New(env, _vkGetDisplayPlaneSupportedDisplaysKHR, "vkGetDisplayPlaneSupportedDisplaysKHR");
  exports["vkGetDisplayModePropertiesKHR"] = Napi::Function::New(env, _vkGetDisplayModePropertiesKHR, "vkGetDisplayModePropertiesKHR");
  exports["vkCreateDisplayModeKHR"] = Napi::Function::New(env, _vkCreateDisplayModeKHR, "vkCreateDisplayModeKHR");
  exports["vkGetDisplayPlaneCapabilitiesKHR"] = Napi::Function::New(env, _vkGetDisplayPlaneCapabilitiesKHR, "vkGetDisplayPlaneCapabilitiesKHR");
  exports["vkCreateDisplayPlaneSurfaceKHR"] = Napi::Function::New(env, _vkCreateDisplayPlaneSurfaceKHR, "vkCreateDisplayPlaneSurfaceKHR");
  exports["vkCreateSharedSwapchainsKHR"] = Napi::Function::New(env, _vkCreateSharedSwapchainsKHR, "vkCreateSharedSwapchainsKHR");
  exports["vkDestroySurfaceKHR"] = Napi::Function::New(env, _vkDestroySurfaceKHR, "vkDestroySurfaceKHR");
  exports["vkGetPhysicalDeviceSurfaceSupportKHR"] = Napi::Function::New(env, _vkGetPhysicalDeviceSurfaceSupportKHR, "vkGetPhysicalDeviceSurfaceSupportKHR");
  exports["vkGetPhysicalDeviceSurfaceCapabilitiesKHR"] = Napi::Function::New(env, _vkGetPhysicalDeviceSurfaceCapabilitiesKHR, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
  exports["vkGetPhysicalDeviceSurfaceFormatsKHR"] = Napi::Function::New(env, _vkGetPhysicalDeviceSurfaceFormatsKHR, "vkGetPhysicalDeviceSurfaceFormatsKHR");
  exports["vkGetPhysicalDeviceSurfacePresentModesKHR"] = Napi::Function::New(env, _vkGetPhysicalDeviceSurfacePresentModesKHR, "vkGetPhysicalDeviceSurfacePresentModesKHR");
  exports["vkCreateSwapchainKHR"] = Napi::Function::New(env, _vkCreateSwapchainKHR, "vkCreateSwapchainKHR");
  exports["vkDestroySwapchainKHR"] = Napi::Function::New(env, _vkDestroySwapchainKHR, "vkDestroySwapchainKHR");
  exports["vkGetSwapchainImagesKHR"] = Napi::Function::New(env, _vkGetSwapchainImagesKHR, "vkGetSwapchainImagesKHR");
  exports["vkAcquireNextImageKHR"] = Napi::Function::New(env, _vkAcquireNextImageKHR, "vkAcquireNextImageKHR");
  exports["vkQueuePresentKHR"] = Napi::Function::New(env, _vkQueuePresentKHR, "vkQueuePresentKHR");
  exports["vkCreateDebugReportCallbackEXT"] = Napi::Function::New(env, _vkCreateDebugReportCallbackEXT, "vkCreateDebugReportCallbackEXT");
  exports["vkDestroyDebugReportCallbackEXT"] = Napi::Function::New(env, _vkDestroyDebugReportCallbackEXT, "vkDestroyDebugReportCallbackEXT");
  exports["vkDebugReportMessageEXT"] = Napi::Function::New(env, _vkDebugReportMessageEXT, "vkDebugReportMessageEXT");
  exports["vkDebugMarkerSetObjectNameEXT"] = Napi::Function::New(env, _vkDebugMarkerSetObjectNameEXT, "vkDebugMarkerSetObjectNameEXT");
  exports["vkDebugMarkerSetObjectTagEXT"] = Napi::Function::New(env, _vkDebugMarkerSetObjectTagEXT, "vkDebugMarkerSetObjectTagEXT");
  exports["vkCmdDebugMarkerBeginEXT"] = Napi::Function::New(env, _vkCmdDebugMarkerBeginEXT, "vkCmdDebugMarkerBeginEXT");
  exports["vkCmdDebugMarkerEndEXT"] = Napi::Function::New(env, _vkCmdDebugMarkerEndEXT, "vkCmdDebugMarkerEndEXT");
  exports["vkCmdDebugMarkerInsertEXT"] = Napi::Function::New(env, _vkCmdDebugMarkerInsertEXT, "vkCmdDebugMarkerInsertEXT");
  exports["vkGetPhysicalDeviceExternalImageFormatPropertiesNV"] = Napi::Function::New(env, _vkGetPhysicalDeviceExternalImageFormatPropertiesNV, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
  exports["vkCmdProcessCommandsNVX"] = Napi::Function::New(env, _vkCmdProcessCommandsNVX, "vkCmdProcessCommandsNVX");
  exports["vkCmdReserveSpaceForCommandsNVX"] = Napi::Function::New(env, _vkCmdReserveSpaceForCommandsNVX, "vkCmdReserveSpaceForCommandsNVX");
  exports["vkCreateIndirectCommandsLayoutNVX"] = Napi::Function::New(env, _vkCreateIndirectCommandsLayoutNVX, "vkCreateIndirectCommandsLayoutNVX");
  exports["vkDestroyIndirectCommandsLayoutNVX"] = Napi::Function::New(env, _vkDestroyIndirectCommandsLayoutNVX, "vkDestroyIndirectCommandsLayoutNVX");
  exports["vkCreateObjectTableNVX"] = Napi::Function::New(env, _vkCreateObjectTableNVX, "vkCreateObjectTableNVX");
  exports["vkDestroyObjectTableNVX"] = Napi::Function::New(env, _vkDestroyObjectTableNVX, "vkDestroyObjectTableNVX");
  exports["vkRegisterObjectsNVX"] = Napi::Function::New(env, _vkRegisterObjectsNVX, "vkRegisterObjectsNVX");
  exports["vkUnregisterObjectsNVX"] = Napi::Function::New(env, _vkUnregisterObjectsNVX, "vkUnregisterObjectsNVX");
  exports["vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX"] = Napi::Function::New(env, _vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX, "vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX");
  exports["vkGetPhysicalDeviceFeatures2"] = Napi::Function::New(env, _vkGetPhysicalDeviceFeatures2, "vkGetPhysicalDeviceFeatures2");
  exports["vkGetPhysicalDeviceProperties2"] = Napi::Function::New(env, _vkGetPhysicalDeviceProperties2, "vkGetPhysicalDeviceProperties2");
  exports["vkGetPhysicalDeviceFormatProperties2"] = Napi::Function::New(env, _vkGetPhysicalDeviceFormatProperties2, "vkGetPhysicalDeviceFormatProperties2");
  exports["vkGetPhysicalDeviceImageFormatProperties2"] = Napi::Function::New(env, _vkGetPhysicalDeviceImageFormatProperties2, "vkGetPhysicalDeviceImageFormatProperties2");
  exports["vkGetPhysicalDeviceQueueFamilyProperties2"] = Napi::Function::New(env, _vkGetPhysicalDeviceQueueFamilyProperties2, "vkGetPhysicalDeviceQueueFamilyProperties2");
  exports["vkGetPhysicalDeviceMemoryProperties2"] = Napi::Function::New(env, _vkGetPhysicalDeviceMemoryProperties2, "vkGetPhysicalDeviceMemoryProperties2");
  exports["vkGetPhysicalDeviceSparseImageFormatProperties2"] = Napi::Function::New(env, _vkGetPhysicalDeviceSparseImageFormatProperties2, "vkGetPhysicalDeviceSparseImageFormatProperties2");
  exports["vkCmdPushDescriptorSetKHR"] = Napi::Function::New(env, _vkCmdPushDescriptorSetKHR, "vkCmdPushDescriptorSetKHR");
  exports["vkTrimCommandPool"] = Napi::Function::New(env, _vkTrimCommandPool, "vkTrimCommandPool");
  exports["vkGetPhysicalDeviceExternalBufferProperties"] = Napi::Function::New(env, _vkGetPhysicalDeviceExternalBufferProperties, "vkGetPhysicalDeviceExternalBufferProperties");
  exports["vkGetMemoryFdKHR"] = Napi::Function::New(env, _vkGetMemoryFdKHR, "vkGetMemoryFdKHR");
  exports["vkGetMemoryFdPropertiesKHR"] = Napi::Function::New(env, _vkGetMemoryFdPropertiesKHR, "vkGetMemoryFdPropertiesKHR");
  exports["vkGetPhysicalDeviceExternalSemaphoreProperties"] = Napi::Function::New(env, _vkGetPhysicalDeviceExternalSemaphoreProperties, "vkGetPhysicalDeviceExternalSemaphoreProperties");
  exports["vkGetSemaphoreFdKHR"] = Napi::Function::New(env, _vkGetSemaphoreFdKHR, "vkGetSemaphoreFdKHR");
  exports["vkImportSemaphoreFdKHR"] = Napi::Function::New(env, _vkImportSemaphoreFdKHR, "vkImportSemaphoreFdKHR");
  exports["vkGetPhysicalDeviceExternalFenceProperties"] = Napi::Function::New(env, _vkGetPhysicalDeviceExternalFenceProperties, "vkGetPhysicalDeviceExternalFenceProperties");
  exports["vkGetFenceFdKHR"] = Napi::Function::New(env, _vkGetFenceFdKHR, "vkGetFenceFdKHR");
  exports["vkImportFenceFdKHR"] = Napi::Function::New(env, _vkImportFenceFdKHR, "vkImportFenceFdKHR");
  exports["vkReleaseDisplayEXT"] = Napi::Function::New(env, _vkReleaseDisplayEXT, "vkReleaseDisplayEXT");
  exports["vkDisplayPowerControlEXT"] = Napi::Function::New(env, _vkDisplayPowerControlEXT, "vkDisplayPowerControlEXT");
  exports["vkRegisterDeviceEventEXT"] = Napi::Function::New(env, _vkRegisterDeviceEventEXT, "vkRegisterDeviceEventEXT");
  exports["vkRegisterDisplayEventEXT"] = Napi::Function::New(env, _vkRegisterDisplayEventEXT, "vkRegisterDisplayEventEXT");
  exports["vkGetSwapchainCounterEXT"] = Napi::Function::New(env, _vkGetSwapchainCounterEXT, "vkGetSwapchainCounterEXT");
  exports["vkGetPhysicalDeviceSurfaceCapabilities2EXT"] = Napi::Function::New(env, _vkGetPhysicalDeviceSurfaceCapabilities2EXT, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
  exports["vkEnumeratePhysicalDeviceGroups"] = Napi::Function::New(env, _vkEnumeratePhysicalDeviceGroups, "vkEnumeratePhysicalDeviceGroups");
  exports["vkGetDeviceGroupPeerMemoryFeatures"] = Napi::Function::New(env, _vkGetDeviceGroupPeerMemoryFeatures, "vkGetDeviceGroupPeerMemoryFeatures");
  exports["vkBindBufferMemory2"] = Napi::Function::New(env, _vkBindBufferMemory2, "vkBindBufferMemory2");
  exports["vkBindImageMemory2"] = Napi::Function::New(env, _vkBindImageMemory2, "vkBindImageMemory2");
  exports["vkCmdSetDeviceMask"] = Napi::Function::New(env, _vkCmdSetDeviceMask, "vkCmdSetDeviceMask");
  exports["vkGetDeviceGroupPresentCapabilitiesKHR"] = Napi::Function::New(env, _vkGetDeviceGroupPresentCapabilitiesKHR, "vkGetDeviceGroupPresentCapabilitiesKHR");
  exports["vkGetDeviceGroupSurfacePresentModesKHR"] = Napi::Function::New(env, _vkGetDeviceGroupSurfacePresentModesKHR, "vkGetDeviceGroupSurfacePresentModesKHR");
  exports["vkAcquireNextImage2KHR"] = Napi::Function::New(env, _vkAcquireNextImage2KHR, "vkAcquireNextImage2KHR");
  exports["vkCmdDispatchBase"] = Napi::Function::New(env, _vkCmdDispatchBase, "vkCmdDispatchBase");
  exports["vkGetPhysicalDevicePresentRectanglesKHR"] = Napi::Function::New(env, _vkGetPhysicalDevicePresentRectanglesKHR, "vkGetPhysicalDevicePresentRectanglesKHR");
  exports["vkCreateDescriptorUpdateTemplate"] = Napi::Function::New(env, _vkCreateDescriptorUpdateTemplate, "vkCreateDescriptorUpdateTemplate");
  exports["vkDestroyDescriptorUpdateTemplate"] = Napi::Function::New(env, _vkDestroyDescriptorUpdateTemplate, "vkDestroyDescriptorUpdateTemplate");
  exports["vkUpdateDescriptorSetWithTemplate"] = Napi::Function::New(env, _vkUpdateDescriptorSetWithTemplate, "vkUpdateDescriptorSetWithTemplate");
  exports["vkCmdPushDescriptorSetWithTemplateKHR"] = Napi::Function::New(env, _vkCmdPushDescriptorSetWithTemplateKHR, "vkCmdPushDescriptorSetWithTemplateKHR");
  exports["vkSetHdrMetadataEXT"] = Napi::Function::New(env, _vkSetHdrMetadataEXT, "vkSetHdrMetadataEXT");
  exports["vkGetSwapchainStatusKHR"] = Napi::Function::New(env, _vkGetSwapchainStatusKHR, "vkGetSwapchainStatusKHR");
  exports["vkGetRefreshCycleDurationGOOGLE"] = Napi::Function::New(env, _vkGetRefreshCycleDurationGOOGLE, "vkGetRefreshCycleDurationGOOGLE");
  exports["vkGetPastPresentationTimingGOOGLE"] = Napi::Function::New(env, _vkGetPastPresentationTimingGOOGLE, "vkGetPastPresentationTimingGOOGLE");
  exports["vkCmdSetViewportWScalingNV"] = Napi::Function::New(env, _vkCmdSetViewportWScalingNV, "vkCmdSetViewportWScalingNV");
  exports["vkCmdSetDiscardRectangleEXT"] = Napi::Function::New(env, _vkCmdSetDiscardRectangleEXT, "vkCmdSetDiscardRectangleEXT");
  exports["vkCmdSetSampleLocationsEXT"] = Napi::Function::New(env, _vkCmdSetSampleLocationsEXT, "vkCmdSetSampleLocationsEXT");
  exports["vkGetPhysicalDeviceMultisamplePropertiesEXT"] = Napi::Function::New(env, _vkGetPhysicalDeviceMultisamplePropertiesEXT, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
  exports["vkGetPhysicalDeviceSurfaceCapabilities2KHR"] = Napi::Function::New(env, _vkGetPhysicalDeviceSurfaceCapabilities2KHR, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
  exports["vkGetPhysicalDeviceSurfaceFormats2KHR"] = Napi::Function::New(env, _vkGetPhysicalDeviceSurfaceFormats2KHR, "vkGetPhysicalDeviceSurfaceFormats2KHR");
  exports["vkGetPhysicalDeviceDisplayProperties2KHR"] = Napi::Function::New(env, _vkGetPhysicalDeviceDisplayProperties2KHR, "vkGetPhysicalDeviceDisplayProperties2KHR");
  exports["vkGetPhysicalDeviceDisplayPlaneProperties2KHR"] = Napi::Function::New(env, _vkGetPhysicalDeviceDisplayPlaneProperties2KHR, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
  exports["vkGetDisplayModeProperties2KHR"] = Napi::Function::New(env, _vkGetDisplayModeProperties2KHR, "vkGetDisplayModeProperties2KHR");
  exports["vkGetDisplayPlaneCapabilities2KHR"] = Napi::Function::New(env, _vkGetDisplayPlaneCapabilities2KHR, "vkGetDisplayPlaneCapabilities2KHR");
  exports["vkGetBufferMemoryRequirements2"] = Napi::Function::New(env, _vkGetBufferMemoryRequirements2, "vkGetBufferMemoryRequirements2");
  exports["vkGetImageMemoryRequirements2"] = Napi::Function::New(env, _vkGetImageMemoryRequirements2, "vkGetImageMemoryRequirements2");
  exports["vkGetImageSparseMemoryRequirements2"] = Napi::Function::New(env, _vkGetImageSparseMemoryRequirements2, "vkGetImageSparseMemoryRequirements2");
  exports["vkCreateSamplerYcbcrConversion"] = Napi::Function::New(env, _vkCreateSamplerYcbcrConversion, "vkCreateSamplerYcbcrConversion");
  exports["vkDestroySamplerYcbcrConversion"] = Napi::Function::New(env, _vkDestroySamplerYcbcrConversion, "vkDestroySamplerYcbcrConversion");
  exports["vkGetDeviceQueue2"] = Napi::Function::New(env, _vkGetDeviceQueue2, "vkGetDeviceQueue2");
  exports["vkCreateValidationCacheEXT"] = Napi::Function::New(env, _vkCreateValidationCacheEXT, "vkCreateValidationCacheEXT");
  exports["vkDestroyValidationCacheEXT"] = Napi::Function::New(env, _vkDestroyValidationCacheEXT, "vkDestroyValidationCacheEXT");
  exports["vkGetValidationCacheDataEXT"] = Napi::Function::New(env, _vkGetValidationCacheDataEXT, "vkGetValidationCacheDataEXT");
  exports["vkMergeValidationCachesEXT"] = Napi::Function::New(env, _vkMergeValidationCachesEXT, "vkMergeValidationCachesEXT");
  exports["vkGetDescriptorSetLayoutSupport"] = Napi::Function::New(env, _vkGetDescriptorSetLayoutSupport, "vkGetDescriptorSetLayoutSupport");
  exports["vkGetShaderInfoAMD"] = Napi::Function::New(env, _vkGetShaderInfoAMD, "vkGetShaderInfoAMD");
  exports["vkSetLocalDimmingAMD"] = Napi::Function::New(env, _vkSetLocalDimmingAMD, "vkSetLocalDimmingAMD");
  exports["vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"] = Napi::Function::New(env, _vkGetPhysicalDeviceCalibrateableTimeDomainsEXT, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
  exports["vkGetCalibratedTimestampsEXT"] = Napi::Function::New(env, _vkGetCalibratedTimestampsEXT, "vkGetCalibratedTimestampsEXT");
  exports["vkSetDebugUtilsObjectNameEXT"] = Napi::Function::New(env, _vkSetDebugUtilsObjectNameEXT, "vkSetDebugUtilsObjectNameEXT");
  exports["vkSetDebugUtilsObjectTagEXT"] = Napi::Function::New(env, _vkSetDebugUtilsObjectTagEXT, "vkSetDebugUtilsObjectTagEXT");
  exports["vkQueueBeginDebugUtilsLabelEXT"] = Napi::Function::New(env, _vkQueueBeginDebugUtilsLabelEXT, "vkQueueBeginDebugUtilsLabelEXT");
  exports["vkQueueEndDebugUtilsLabelEXT"] = Napi::Function::New(env, _vkQueueEndDebugUtilsLabelEXT, "vkQueueEndDebugUtilsLabelEXT");
  exports["vkQueueInsertDebugUtilsLabelEXT"] = Napi::Function::New(env, _vkQueueInsertDebugUtilsLabelEXT, "vkQueueInsertDebugUtilsLabelEXT");
  exports["vkCmdBeginDebugUtilsLabelEXT"] = Napi::Function::New(env, _vkCmdBeginDebugUtilsLabelEXT, "vkCmdBeginDebugUtilsLabelEXT");
  exports["vkCmdEndDebugUtilsLabelEXT"] = Napi::Function::New(env, _vkCmdEndDebugUtilsLabelEXT, "vkCmdEndDebugUtilsLabelEXT");
  exports["vkCmdInsertDebugUtilsLabelEXT"] = Napi::Function::New(env, _vkCmdInsertDebugUtilsLabelEXT, "vkCmdInsertDebugUtilsLabelEXT");
  exports["vkCreateDebugUtilsMessengerEXT"] = Napi::Function::New(env, _vkCreateDebugUtilsMessengerEXT, "vkCreateDebugUtilsMessengerEXT");
  exports["vkDestroyDebugUtilsMessengerEXT"] = Napi::Function::New(env, _vkDestroyDebugUtilsMessengerEXT, "vkDestroyDebugUtilsMessengerEXT");
  exports["vkSubmitDebugUtilsMessageEXT"] = Napi::Function::New(env, _vkSubmitDebugUtilsMessageEXT, "vkSubmitDebugUtilsMessageEXT");
  exports["vkGetMemoryHostPointerPropertiesEXT"] = Napi::Function::New(env, _vkGetMemoryHostPointerPropertiesEXT, "vkGetMemoryHostPointerPropertiesEXT");
  exports["vkCmdWriteBufferMarkerAMD"] = Napi::Function::New(env, _vkCmdWriteBufferMarkerAMD, "vkCmdWriteBufferMarkerAMD");
  exports["vkCreateRenderPass2KHR"] = Napi::Function::New(env, _vkCreateRenderPass2KHR, "vkCreateRenderPass2KHR");
  exports["vkCmdBeginRenderPass2KHR"] = Napi::Function::New(env, _vkCmdBeginRenderPass2KHR, "vkCmdBeginRenderPass2KHR");
  exports["vkCmdNextSubpass2KHR"] = Napi::Function::New(env, _vkCmdNextSubpass2KHR, "vkCmdNextSubpass2KHR");
  exports["vkCmdEndRenderPass2KHR"] = Napi::Function::New(env, _vkCmdEndRenderPass2KHR, "vkCmdEndRenderPass2KHR");
  exports["vkCmdDrawIndirectCountKHR"] = Napi::Function::New(env, _vkCmdDrawIndirectCountKHR, "vkCmdDrawIndirectCountKHR");
  exports["vkCmdDrawIndexedIndirectCountKHR"] = Napi::Function::New(env, _vkCmdDrawIndexedIndirectCountKHR, "vkCmdDrawIndexedIndirectCountKHR");
  exports["vkCmdSetCheckpointNV"] = Napi::Function::New(env, _vkCmdSetCheckpointNV, "vkCmdSetCheckpointNV");
  exports["vkGetQueueCheckpointDataNV"] = Napi::Function::New(env, _vkGetQueueCheckpointDataNV, "vkGetQueueCheckpointDataNV");
  exports["vkCmdBindTransformFeedbackBuffersEXT"] = Napi::Function::New(env, _vkCmdBindTransformFeedbackBuffersEXT, "vkCmdBindTransformFeedbackBuffersEXT");
  exports["vkCmdBeginTransformFeedbackEXT"] = Napi::Function::New(env, _vkCmdBeginTransformFeedbackEXT, "vkCmdBeginTransformFeedbackEXT");
  exports["vkCmdEndTransformFeedbackEXT"] = Napi::Function::New(env, _vkCmdEndTransformFeedbackEXT, "vkCmdEndTransformFeedbackEXT");
  exports["vkCmdBeginQueryIndexedEXT"] = Napi::Function::New(env, _vkCmdBeginQueryIndexedEXT, "vkCmdBeginQueryIndexedEXT");
  exports["vkCmdEndQueryIndexedEXT"] = Napi::Function::New(env, _vkCmdEndQueryIndexedEXT, "vkCmdEndQueryIndexedEXT");
  exports["vkCmdDrawIndirectByteCountEXT"] = Napi::Function::New(env, _vkCmdDrawIndirectByteCountEXT, "vkCmdDrawIndirectByteCountEXT");
  exports["vkCmdSetExclusiveScissorNV"] = Napi::Function::New(env, _vkCmdSetExclusiveScissorNV, "vkCmdSetExclusiveScissorNV");
  exports["vkCmdBindShadingRateImageNV"] = Napi::Function::New(env, _vkCmdBindShadingRateImageNV, "vkCmdBindShadingRateImageNV");
  exports["vkCmdSetViewportShadingRatePaletteNV"] = Napi::Function::New(env, _vkCmdSetViewportShadingRatePaletteNV, "vkCmdSetViewportShadingRatePaletteNV");
  exports["vkCmdSetCoarseSampleOrderNV"] = Napi::Function::New(env, _vkCmdSetCoarseSampleOrderNV, "vkCmdSetCoarseSampleOrderNV");
  exports["vkCmdDrawMeshTasksNV"] = Napi::Function::New(env, _vkCmdDrawMeshTasksNV, "vkCmdDrawMeshTasksNV");
  exports["vkCmdDrawMeshTasksIndirectNV"] = Napi::Function::New(env, _vkCmdDrawMeshTasksIndirectNV, "vkCmdDrawMeshTasksIndirectNV");
  exports["vkCmdDrawMeshTasksIndirectCountNV"] = Napi::Function::New(env, _vkCmdDrawMeshTasksIndirectCountNV, "vkCmdDrawMeshTasksIndirectCountNV");
  exports["vkCompileDeferredNV"] = Napi::Function::New(env, _vkCompileDeferredNV, "vkCompileDeferredNV");
  exports["vkCreateAccelerationStructureNV"] = Napi::Function::New(env, _vkCreateAccelerationStructureNV, "vkCreateAccelerationStructureNV");
  exports["vkDestroyAccelerationStructureNV"] = Napi::Function::New(env, _vkDestroyAccelerationStructureNV, "vkDestroyAccelerationStructureNV");
  exports["vkGetAccelerationStructureMemoryRequirementsNV"] = Napi::Function::New(env, _vkGetAccelerationStructureMemoryRequirementsNV, "vkGetAccelerationStructureMemoryRequirementsNV");
  exports["vkBindAccelerationStructureMemoryNV"] = Napi::Function::New(env, _vkBindAccelerationStructureMemoryNV, "vkBindAccelerationStructureMemoryNV");
  exports["vkCmdCopyAccelerationStructureNV"] = Napi::Function::New(env, _vkCmdCopyAccelerationStructureNV, "vkCmdCopyAccelerationStructureNV");
  exports["vkCmdWriteAccelerationStructuresPropertiesNV"] = Napi::Function::New(env, _vkCmdWriteAccelerationStructuresPropertiesNV, "vkCmdWriteAccelerationStructuresPropertiesNV");
  exports["vkCmdBuildAccelerationStructureNV"] = Napi::Function::New(env, _vkCmdBuildAccelerationStructureNV, "vkCmdBuildAccelerationStructureNV");
  exports["vkCmdTraceRaysNV"] = Napi::Function::New(env, _vkCmdTraceRaysNV, "vkCmdTraceRaysNV");
  exports["vkGetRayTracingShaderGroupHandlesNV"] = Napi::Function::New(env, _vkGetRayTracingShaderGroupHandlesNV, "vkGetRayTracingShaderGroupHandlesNV");
  exports["vkGetAccelerationStructureHandleNV"] = Napi::Function::New(env, _vkGetAccelerationStructureHandleNV, "vkGetAccelerationStructureHandleNV");
  exports["vkCreateRayTracingPipelinesNV"] = Napi::Function::New(env, _vkCreateRayTracingPipelinesNV, "vkCreateRayTracingPipelinesNV");
  exports["vkGetImageDrmFormatModifierPropertiesEXT"] = Napi::Function::New(env, _vkGetImageDrmFormatModifierPropertiesEXT, "vkGetImageDrmFormatModifierPropertiesEXT");
  exports["vkGetBufferDeviceAddressEXT"] = Napi::Function::New(env, _vkGetBufferDeviceAddressEXT, "vkGetBufferDeviceAddressEXT");
  exports["vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"] = Napi::Function::New(env, _vkGetPhysicalDeviceCooperativeMatrixPropertiesNV, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
  exports["vkGetImageViewHandleNVX"] = Napi::Function::New(env, _vkGetImageViewHandleNVX, "vkGetImageViewHandleNVX");
  exports["vkCreateHeadlessSurfaceEXT"] = Napi::Function::New(env, _vkCreateHeadlessSurfaceEXT, "vkCreateHeadlessSurfaceEXT");
  exports["vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"] = Napi::Function::New(env, _vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
  
  return exports;
}

NODE_API_MODULE(addon, Init)
