/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY nvk v0.1.9
 */

#ifndef __SOURCE_H__
#define __SOURCE_H__
#include <nan.h>

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#define VK_USE_PLATFORM_WIN32_KHR
#include <vulkan/vulkan_win32.h>

#include "utils.h"
/** ## BEGIN VkDebugUtilsMessengerEXT ## **/
#ifndef __VK_VKDEBUGUTILSMESSENGEREXT_H__
#define __VK_VKDEBUGUTILSMESSENGEREXT_H__

class _VkDebugUtilsMessengerEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkDebugUtilsMessengerEXT instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkDebugUtilsMessengerEXT();
    ~_VkDebugUtilsMessengerEXT();

};

#endif
/** ## END VkDebugUtilsMessengerEXT ## **/

/** ## BEGIN VkDebugReportCallbackEXT ## **/
#ifndef __VK_VKDEBUGREPORTCALLBACKEXT_H__
#define __VK_VKDEBUGREPORTCALLBACKEXT_H__

class _VkDebugReportCallbackEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkDebugReportCallbackEXT instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkDebugReportCallbackEXT();
    ~_VkDebugReportCallbackEXT();

};

#endif
/** ## END VkDebugReportCallbackEXT ## **/

/** ## BEGIN VkSwapchainKHR ## **/
#ifndef __VK_VKSWAPCHAINKHR_H__
#define __VK_VKSWAPCHAINKHR_H__

class _VkSwapchainKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkSwapchainKHR instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkSwapchainKHR();
    ~_VkSwapchainKHR();

};

#endif
/** ## END VkSwapchainKHR ## **/

/** ## BEGIN VkSurfaceKHR ## **/
#ifndef __VK_VKSURFACEKHR_H__
#define __VK_VKSURFACEKHR_H__

class _VkSurfaceKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkSurfaceKHR instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkSurfaceKHR();
    ~_VkSurfaceKHR();

};

#endif
/** ## END VkSurfaceKHR ## **/

/** ## BEGIN VkDisplayModeKHR ## **/
#ifndef __VK_VKDISPLAYMODEKHR_H__
#define __VK_VKDISPLAYMODEKHR_H__

class _VkDisplayModeKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkDisplayModeKHR instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkDisplayModeKHR();
    ~_VkDisplayModeKHR();

};

#endif
/** ## END VkDisplayModeKHR ## **/

/** ## BEGIN VkDisplayKHR ## **/
#ifndef __VK_VKDISPLAYKHR_H__
#define __VK_VKDISPLAYKHR_H__

class _VkDisplayKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkDisplayKHR instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkDisplayKHR();
    ~_VkDisplayKHR();

};

#endif
/** ## END VkDisplayKHR ## **/

/** ## BEGIN VkAccelerationStructureNV ## **/
#ifndef __VK_VKACCELERATIONSTRUCTURENV_H__
#define __VK_VKACCELERATIONSTRUCTURENV_H__

class _VkAccelerationStructureNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkAccelerationStructureNV instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkAccelerationStructureNV();
    ~_VkAccelerationStructureNV();

};

#endif
/** ## END VkAccelerationStructureNV ## **/

/** ## BEGIN VkValidationCacheEXT ## **/
#ifndef __VK_VKVALIDATIONCACHEEXT_H__
#define __VK_VKVALIDATIONCACHEEXT_H__

class _VkValidationCacheEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkValidationCacheEXT instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkValidationCacheEXT();
    ~_VkValidationCacheEXT();

};

#endif
/** ## END VkValidationCacheEXT ## **/

/** ## BEGIN VkSamplerYcbcrConversion ## **/
#ifndef __VK_VKSAMPLERYCBCRCONVERSION_H__
#define __VK_VKSAMPLERYCBCRCONVERSION_H__

class _VkSamplerYcbcrConversion: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkSamplerYcbcrConversion instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkSamplerYcbcrConversion();
    ~_VkSamplerYcbcrConversion();

};

#endif
/** ## END VkSamplerYcbcrConversion ## **/

/** ## BEGIN VkDescriptorUpdateTemplate ## **/
#ifndef __VK_VKDESCRIPTORUPDATETEMPLATE_H__
#define __VK_VKDESCRIPTORUPDATETEMPLATE_H__

class _VkDescriptorUpdateTemplate: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkDescriptorUpdateTemplate instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkDescriptorUpdateTemplate();
    ~_VkDescriptorUpdateTemplate();

};

#endif
/** ## END VkDescriptorUpdateTemplate ## **/

/** ## BEGIN VkIndirectCommandsLayoutNVX ## **/
#ifndef __VK_VKINDIRECTCOMMANDSLAYOUTNVX_H__
#define __VK_VKINDIRECTCOMMANDSLAYOUTNVX_H__

class _VkIndirectCommandsLayoutNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkIndirectCommandsLayoutNVX instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkIndirectCommandsLayoutNVX();
    ~_VkIndirectCommandsLayoutNVX();

};

#endif
/** ## END VkIndirectCommandsLayoutNVX ## **/

/** ## BEGIN VkObjectTableNVX ## **/
#ifndef __VK_VKOBJECTTABLENVX_H__
#define __VK_VKOBJECTTABLENVX_H__

class _VkObjectTableNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkObjectTableNVX instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkObjectTableNVX();
    ~_VkObjectTableNVX();

};

#endif
/** ## END VkObjectTableNVX ## **/

/** ## BEGIN VkPipelineCache ## **/
#ifndef __VK_VKPIPELINECACHE_H__
#define __VK_VKPIPELINECACHE_H__

class _VkPipelineCache: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkPipelineCache instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkPipelineCache();
    ~_VkPipelineCache();

};

#endif
/** ## END VkPipelineCache ## **/

/** ## BEGIN VkRenderPass ## **/
#ifndef __VK_VKRENDERPASS_H__
#define __VK_VKRENDERPASS_H__

class _VkRenderPass: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkRenderPass instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkRenderPass();
    ~_VkRenderPass();

};

#endif
/** ## END VkRenderPass ## **/

/** ## BEGIN VkFramebuffer ## **/
#ifndef __VK_VKFRAMEBUFFER_H__
#define __VK_VKFRAMEBUFFER_H__

class _VkFramebuffer: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkFramebuffer instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkFramebuffer();
    ~_VkFramebuffer();

};

#endif
/** ## END VkFramebuffer ## **/

/** ## BEGIN VkQueryPool ## **/
#ifndef __VK_VKQUERYPOOL_H__
#define __VK_VKQUERYPOOL_H__

class _VkQueryPool: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkQueryPool instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkQueryPool();
    ~_VkQueryPool();

};

#endif
/** ## END VkQueryPool ## **/

/** ## BEGIN VkEvent ## **/
#ifndef __VK_VKEVENT_H__
#define __VK_VKEVENT_H__

class _VkEvent: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkEvent instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkEvent();
    ~_VkEvent();

};

#endif
/** ## END VkEvent ## **/

/** ## BEGIN VkSemaphore ## **/
#ifndef __VK_VKSEMAPHORE_H__
#define __VK_VKSEMAPHORE_H__

class _VkSemaphore: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkSemaphore instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkSemaphore();
    ~_VkSemaphore();

};

#endif
/** ## END VkSemaphore ## **/

/** ## BEGIN VkFence ## **/
#ifndef __VK_VKFENCE_H__
#define __VK_VKFENCE_H__

class _VkFence: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkFence instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkFence();
    ~_VkFence();

};

#endif
/** ## END VkFence ## **/

/** ## BEGIN VkDescriptorPool ## **/
#ifndef __VK_VKDESCRIPTORPOOL_H__
#define __VK_VKDESCRIPTORPOOL_H__

class _VkDescriptorPool: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkDescriptorPool instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkDescriptorPool();
    ~_VkDescriptorPool();

};

#endif
/** ## END VkDescriptorPool ## **/

/** ## BEGIN VkDescriptorSetLayout ## **/
#ifndef __VK_VKDESCRIPTORSETLAYOUT_H__
#define __VK_VKDESCRIPTORSETLAYOUT_H__

class _VkDescriptorSetLayout: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkDescriptorSetLayout instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkDescriptorSetLayout();
    ~_VkDescriptorSetLayout();

};

#endif
/** ## END VkDescriptorSetLayout ## **/

/** ## BEGIN VkDescriptorSet ## **/
#ifndef __VK_VKDESCRIPTORSET_H__
#define __VK_VKDESCRIPTORSET_H__

class _VkDescriptorSet: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkDescriptorSet instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkDescriptorSet();
    ~_VkDescriptorSet();

};

#endif
/** ## END VkDescriptorSet ## **/

/** ## BEGIN VkSampler ## **/
#ifndef __VK_VKSAMPLER_H__
#define __VK_VKSAMPLER_H__

class _VkSampler: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkSampler instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkSampler();
    ~_VkSampler();

};

#endif
/** ## END VkSampler ## **/

/** ## BEGIN VkPipelineLayout ## **/
#ifndef __VK_VKPIPELINELAYOUT_H__
#define __VK_VKPIPELINELAYOUT_H__

class _VkPipelineLayout: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkPipelineLayout instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkPipelineLayout();
    ~_VkPipelineLayout();

};

#endif
/** ## END VkPipelineLayout ## **/

/** ## BEGIN VkPipeline ## **/
#ifndef __VK_VKPIPELINE_H__
#define __VK_VKPIPELINE_H__

class _VkPipeline: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkPipeline instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkPipeline();
    ~_VkPipeline();

};

#endif
/** ## END VkPipeline ## **/

/** ## BEGIN VkShaderModule ## **/
#ifndef __VK_VKSHADERMODULE_H__
#define __VK_VKSHADERMODULE_H__

class _VkShaderModule: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkShaderModule instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkShaderModule();
    ~_VkShaderModule();

};

#endif
/** ## END VkShaderModule ## **/

/** ## BEGIN VkImageView ## **/
#ifndef __VK_VKIMAGEVIEW_H__
#define __VK_VKIMAGEVIEW_H__

class _VkImageView: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkImageView instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkImageView();
    ~_VkImageView();

};

#endif
/** ## END VkImageView ## **/

/** ## BEGIN VkImage ## **/
#ifndef __VK_VKIMAGE_H__
#define __VK_VKIMAGE_H__

class _VkImage: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkImage instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkImage();
    ~_VkImage();

};

#endif
/** ## END VkImage ## **/

/** ## BEGIN VkBufferView ## **/
#ifndef __VK_VKBUFFERVIEW_H__
#define __VK_VKBUFFERVIEW_H__

class _VkBufferView: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkBufferView instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkBufferView();
    ~_VkBufferView();

};

#endif
/** ## END VkBufferView ## **/

/** ## BEGIN VkBuffer ## **/
#ifndef __VK_VKBUFFER_H__
#define __VK_VKBUFFER_H__

class _VkBuffer: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkBuffer instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkBuffer();
    ~_VkBuffer();

};

#endif
/** ## END VkBuffer ## **/

/** ## BEGIN VkCommandPool ## **/
#ifndef __VK_VKCOMMANDPOOL_H__
#define __VK_VKCOMMANDPOOL_H__

class _VkCommandPool: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkCommandPool instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkCommandPool();
    ~_VkCommandPool();

};

#endif
/** ## END VkCommandPool ## **/

/** ## BEGIN VkDeviceMemory ## **/
#ifndef __VK_VKDEVICEMEMORY_H__
#define __VK_VKDEVICEMEMORY_H__

class _VkDeviceMemory: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkDeviceMemory instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkDeviceMemory();
    ~_VkDeviceMemory();

};

#endif
/** ## END VkDeviceMemory ## **/

/** ## BEGIN VkCommandBuffer ## **/
#ifndef __VK_VKCOMMANDBUFFER_H__
#define __VK_VKCOMMANDBUFFER_H__

class _VkCommandBuffer: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkCommandBuffer instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkCommandBuffer();
    ~_VkCommandBuffer();

};

#endif
/** ## END VkCommandBuffer ## **/

/** ## BEGIN VkQueue ## **/
#ifndef __VK_VKQUEUE_H__
#define __VK_VKQUEUE_H__

class _VkQueue: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkQueue instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkQueue();
    ~_VkQueue();

};

#endif
/** ## END VkQueue ## **/

/** ## BEGIN VkDevice ## **/
#ifndef __VK_VKDEVICE_H__
#define __VK_VKDEVICE_H__

class _VkDevice: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkDevice instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkDevice();
    ~_VkDevice();

};

#endif
/** ## END VkDevice ## **/

/** ## BEGIN VkPhysicalDevice ## **/
#ifndef __VK_VKPHYSICALDEVICE_H__
#define __VK_VKPHYSICALDEVICE_H__

class _VkPhysicalDevice: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkPhysicalDevice instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkPhysicalDevice();
    ~_VkPhysicalDevice();

};

#endif
/** ## END VkPhysicalDevice ## **/

/** ## BEGIN VkInstance ## **/
#ifndef __VK_VKINSTANCE_H__
#define __VK_VKINSTANCE_H__

class _VkInstance: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);

    // real instance
    VkInstance instance;

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);

  private:
    _VkInstance();
    ~_VkInstance();

};

#endif
/** ## END VkInstance ## **/

/** ## BEGIN VkClearColorValue ## **/

class _VkClearColorValue: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    std::vector<float>* vfloat32;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> float32;
    static NAN_GETTER(Getfloat32);
    static NAN_SETTER(Setfloat32);
    
    std::vector<int32_t>* vint32;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> int32;
    static NAN_GETTER(Getint32);
    static NAN_SETTER(Setint32);
    
    std::vector<uint32_t>* vuint32;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> uint32;
    static NAN_GETTER(Getuint32);
    static NAN_SETTER(Setuint32);
    

    // real instance
    VkClearColorValue instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkClearColorValue();
    ~_VkClearColorValue();

};

/** ## END VkClearColorValue ## **/

/** ## BEGIN VkBufferDeviceAddressCreateInfoEXT ## **/

class _VkBufferDeviceAddressCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdeviceAddress);
    static NAN_SETTER(SetdeviceAddress);
    

    // real instance
    VkBufferDeviceAddressCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBufferDeviceAddressCreateInfoEXT();
    ~_VkBufferDeviceAddressCreateInfoEXT();

};

/** ## END VkBufferDeviceAddressCreateInfoEXT ## **/

/** ## BEGIN VkBufferDeviceAddressInfoEXT ## **/

class _VkBufferDeviceAddressInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> buffer;
      static NAN_GETTER(Getbuffer);
    static NAN_SETTER(Setbuffer);
    

    // real instance
    VkBufferDeviceAddressInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBufferDeviceAddressInfoEXT();
    ~_VkBufferDeviceAddressInfoEXT();

};

/** ## END VkBufferDeviceAddressInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceBufferAddressFeaturesEXT ## **/

class _VkPhysicalDeviceBufferAddressFeaturesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetbufferDeviceAddress);
    static NAN_SETTER(SetbufferDeviceAddress);
    
    static NAN_GETTER(GetbufferDeviceAddressCaptureReplay);
    static NAN_SETTER(SetbufferDeviceAddressCaptureReplay);
    
    static NAN_GETTER(GetbufferDeviceAddressMultiDevice);
    static NAN_SETTER(SetbufferDeviceAddressMultiDevice);
    

    // real instance
    VkPhysicalDeviceBufferAddressFeaturesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceBufferAddressFeaturesEXT();
    ~_VkPhysicalDeviceBufferAddressFeaturesEXT();

};

/** ## END VkPhysicalDeviceBufferAddressFeaturesEXT ## **/

/** ## BEGIN VkMemoryPriorityAllocateInfoEXT ## **/

class _VkMemoryPriorityAllocateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getpriority);
    static NAN_SETTER(Setpriority);
    

    // real instance
    VkMemoryPriorityAllocateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryPriorityAllocateInfoEXT();
    ~_VkMemoryPriorityAllocateInfoEXT();

};

/** ## END VkMemoryPriorityAllocateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceMemoryPriorityFeaturesEXT ## **/

class _VkPhysicalDeviceMemoryPriorityFeaturesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmemoryPriority);
    static NAN_SETTER(SetmemoryPriority);
    

    // real instance
    VkPhysicalDeviceMemoryPriorityFeaturesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMemoryPriorityFeaturesEXT();
    ~_VkPhysicalDeviceMemoryPriorityFeaturesEXT();

};

/** ## END VkPhysicalDeviceMemoryPriorityFeaturesEXT ## **/

/** ## BEGIN VkPhysicalDeviceMemoryBudgetPropertiesEXT ## **/

class _VkPhysicalDeviceMemoryBudgetPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    std::vector<uint64_t>* vheapBudget;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> heapBudget;
    static NAN_GETTER(GetheapBudget);
    std::vector<uint64_t>* vheapUsage;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> heapUsage;
    static NAN_GETTER(GetheapUsage);

    // real instance
    VkPhysicalDeviceMemoryBudgetPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMemoryBudgetPropertiesEXT();
    ~_VkPhysicalDeviceMemoryBudgetPropertiesEXT();

};

/** ## END VkPhysicalDeviceMemoryBudgetPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceScalarBlockLayoutFeaturesEXT ## **/

class _VkPhysicalDeviceScalarBlockLayoutFeaturesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetscalarBlockLayout);
    static NAN_SETTER(SetscalarBlockLayout);
    

    // real instance
    VkPhysicalDeviceScalarBlockLayoutFeaturesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceScalarBlockLayoutFeaturesEXT();
    ~_VkPhysicalDeviceScalarBlockLayoutFeaturesEXT();

};

/** ## END VkPhysicalDeviceScalarBlockLayoutFeaturesEXT ## **/

/** ## BEGIN VkAttachmentReference ## **/

class _VkAttachmentReference: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getattachment);
    static NAN_SETTER(Setattachment);
    
    static NAN_GETTER(Getlayout);
    static NAN_SETTER(Setlayout);
    

    // real instance
    VkAttachmentReference instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkAttachmentReference();
    ~_VkAttachmentReference();

};

/** ## END VkAttachmentReference ## **/

/** ## BEGIN VkRenderPassFragmentDensityMapCreateInfoEXT ## **/

class _VkRenderPassFragmentDensityMapCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> fragmentDensityMapAttachment;
      static NAN_GETTER(GetfragmentDensityMapAttachment);
    static NAN_SETTER(SetfragmentDensityMapAttachment);
    

    // real instance
    VkRenderPassFragmentDensityMapCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRenderPassFragmentDensityMapCreateInfoEXT();
    ~_VkRenderPassFragmentDensityMapCreateInfoEXT();

};

/** ## END VkRenderPassFragmentDensityMapCreateInfoEXT ## **/

/** ## BEGIN VkExtent2D ## **/

class _VkExtent2D: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getwidth);
    static NAN_SETTER(Setwidth);
    
    static NAN_GETTER(Getheight);
    static NAN_SETTER(Setheight);
    

    // real instance
    VkExtent2D instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExtent2D();
    ~_VkExtent2D();

};

/** ## END VkExtent2D ## **/

/** ## BEGIN VkPhysicalDeviceFragmentDensityMapPropertiesEXT ## **/

class _VkPhysicalDeviceFragmentDensityMapPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> minFragmentDensityTexelSize;
      static NAN_GETTER(GetminFragmentDensityTexelSize);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> maxFragmentDensityTexelSize;
      static NAN_GETTER(GetmaxFragmentDensityTexelSize);
    static NAN_GETTER(GetfragmentDensityInvocations);

    // real instance
    VkPhysicalDeviceFragmentDensityMapPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceFragmentDensityMapPropertiesEXT();
    ~_VkPhysicalDeviceFragmentDensityMapPropertiesEXT();

};

/** ## END VkPhysicalDeviceFragmentDensityMapPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceFragmentDensityMapFeaturesEXT ## **/

class _VkPhysicalDeviceFragmentDensityMapFeaturesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetfragmentDensityMap);
    static NAN_GETTER(GetfragmentDensityMapDynamic);
    static NAN_GETTER(GetfragmentDensityMapNonSubsampledImages);

    // real instance
    VkPhysicalDeviceFragmentDensityMapFeaturesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceFragmentDensityMapFeaturesEXT();
    ~_VkPhysicalDeviceFragmentDensityMapFeaturesEXT();

};

/** ## END VkPhysicalDeviceFragmentDensityMapFeaturesEXT ## **/

/** ## BEGIN VkDeviceMemoryOverallocationCreateInfoAMD ## **/

class _VkDeviceMemoryOverallocationCreateInfoAMD: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetoverallocationBehavior);
    static NAN_SETTER(SetoverallocationBehavior);
    

    // real instance
    VkDeviceMemoryOverallocationCreateInfoAMD instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceMemoryOverallocationCreateInfoAMD();
    ~_VkDeviceMemoryOverallocationCreateInfoAMD();

};

/** ## END VkDeviceMemoryOverallocationCreateInfoAMD ## **/

/** ## BEGIN VkImageStencilUsageCreateInfoEXT ## **/

class _VkImageStencilUsageCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetstencilUsage);
    static NAN_SETTER(SetstencilUsage);
    

    // real instance
    VkImageStencilUsageCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageStencilUsageCreateInfoEXT();
    ~_VkImageStencilUsageCreateInfoEXT();

};

/** ## END VkImageStencilUsageCreateInfoEXT ## **/

/** ## BEGIN VkImageDrmFormatModifierPropertiesEXT ## **/

class _VkImageDrmFormatModifierPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdrmFormatModifier);

    // real instance
    VkImageDrmFormatModifierPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageDrmFormatModifierPropertiesEXT();
    ~_VkImageDrmFormatModifierPropertiesEXT();

};

/** ## END VkImageDrmFormatModifierPropertiesEXT ## **/

/** ## BEGIN VkSubresourceLayout ## **/

class _VkSubresourceLayout: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getoffset);
    static NAN_GETTER(Getsize);
    static NAN_GETTER(GetrowPitch);
    static NAN_GETTER(GetarrayPitch);
    static NAN_GETTER(GetdepthPitch);

    // real instance
    VkSubresourceLayout instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSubresourceLayout();
    ~_VkSubresourceLayout();

};

/** ## END VkSubresourceLayout ## **/

/** ## BEGIN VkImageDrmFormatModifierExplicitCreateInfoEXT ## **/

class _VkImageDrmFormatModifierExplicitCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdrmFormatModifier);
    static NAN_SETTER(SetdrmFormatModifier);
    
    static NAN_GETTER(GetdrmFormatModifierPlaneCount);
    static NAN_SETTER(SetdrmFormatModifierPlaneCount);
    
    std::vector<VkSubresourceLayout>* vpPlaneLayouts;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pPlaneLayouts;
    static NAN_GETTER(GetpPlaneLayouts);
    static NAN_SETTER(SetpPlaneLayouts);
    

    // real instance
    VkImageDrmFormatModifierExplicitCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageDrmFormatModifierExplicitCreateInfoEXT();
    ~_VkImageDrmFormatModifierExplicitCreateInfoEXT();

};

/** ## END VkImageDrmFormatModifierExplicitCreateInfoEXT ## **/

/** ## BEGIN VkImageDrmFormatModifierListCreateInfoEXT ## **/

class _VkImageDrmFormatModifierListCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdrmFormatModifierCount);
    static NAN_SETTER(SetdrmFormatModifierCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDrmFormatModifiers;
    static NAN_GETTER(GetpDrmFormatModifiers);
    static NAN_SETTER(SetpDrmFormatModifiers);
    

    // real instance
    VkImageDrmFormatModifierListCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageDrmFormatModifierListCreateInfoEXT();
    ~_VkImageDrmFormatModifierListCreateInfoEXT();

};

/** ## END VkImageDrmFormatModifierListCreateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceImageDrmFormatModifierInfoEXT ## **/

class _VkPhysicalDeviceImageDrmFormatModifierInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdrmFormatModifier);
    static NAN_SETTER(SetdrmFormatModifier);
    
    static NAN_GETTER(GetsharingMode);
    static NAN_SETTER(SetsharingMode);
    
    static NAN_GETTER(GetqueueFamilyIndexCount);
    static NAN_SETTER(SetqueueFamilyIndexCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pQueueFamilyIndices;
    static NAN_GETTER(GetpQueueFamilyIndices);
    static NAN_SETTER(SetpQueueFamilyIndices);
    

    // real instance
    VkPhysicalDeviceImageDrmFormatModifierInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceImageDrmFormatModifierInfoEXT();
    ~_VkPhysicalDeviceImageDrmFormatModifierInfoEXT();

};

/** ## END VkPhysicalDeviceImageDrmFormatModifierInfoEXT ## **/

/** ## BEGIN VkDrmFormatModifierPropertiesEXT ## **/

class _VkDrmFormatModifierPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetdrmFormatModifier);
    static NAN_GETTER(GetdrmFormatModifierPlaneCount);
    static NAN_GETTER(GetdrmFormatModifierTilingFeatures);

    // real instance
    VkDrmFormatModifierPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDrmFormatModifierPropertiesEXT();
    ~_VkDrmFormatModifierPropertiesEXT();

};

/** ## END VkDrmFormatModifierPropertiesEXT ## **/

/** ## BEGIN VkDrmFormatModifierPropertiesListEXT ## **/

class _VkDrmFormatModifierPropertiesListEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdrmFormatModifierCount);
    std::vector<VkDrmFormatModifierPropertiesEXT>* vpDrmFormatModifierProperties;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDrmFormatModifierProperties;
    static NAN_GETTER(GetpDrmFormatModifierProperties);

    // real instance
    VkDrmFormatModifierPropertiesListEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDrmFormatModifierPropertiesListEXT();
    ~_VkDrmFormatModifierPropertiesListEXT();

};

/** ## END VkDrmFormatModifierPropertiesListEXT ## **/

/** ## BEGIN VkPhysicalDeviceRayTracingPropertiesNV ## **/

class _VkPhysicalDeviceRayTracingPropertiesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetshaderGroupHandleSize);
    static NAN_GETTER(GetmaxRecursionDepth);
    static NAN_GETTER(GetmaxShaderGroupStride);
    static NAN_GETTER(GetshaderGroupBaseAlignment);
    static NAN_GETTER(GetmaxGeometryCount);
    static NAN_GETTER(GetmaxInstanceCount);
    static NAN_GETTER(GetmaxTriangleCount);
    static NAN_GETTER(GetmaxDescriptorSetAccelerationStructures);

    // real instance
    VkPhysicalDeviceRayTracingPropertiesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceRayTracingPropertiesNV();
    ~_VkPhysicalDeviceRayTracingPropertiesNV();

};

/** ## END VkPhysicalDeviceRayTracingPropertiesNV ## **/

/** ## BEGIN VkAccelerationStructureMemoryRequirementsInfoNV ## **/

class _VkAccelerationStructureMemoryRequirementsInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Gettype);
    static NAN_SETTER(Settype);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> accelerationStructure;
      static NAN_GETTER(GetaccelerationStructure);
    static NAN_SETTER(SetaccelerationStructure);
    

    // real instance
    VkAccelerationStructureMemoryRequirementsInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkAccelerationStructureMemoryRequirementsInfoNV();
    ~_VkAccelerationStructureMemoryRequirementsInfoNV();

};

/** ## END VkAccelerationStructureMemoryRequirementsInfoNV ## **/

/** ## BEGIN VkWriteDescriptorSetAccelerationStructureNV ## **/

class _VkWriteDescriptorSetAccelerationStructureNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetaccelerationStructureCount);
    static NAN_SETTER(SetaccelerationStructureCount);
    
    std::vector<VkAccelerationStructureNV>* vpAccelerationStructures;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAccelerationStructures;
    static NAN_GETTER(GetpAccelerationStructures);
    static NAN_SETTER(SetpAccelerationStructures);
    

    // real instance
    VkWriteDescriptorSetAccelerationStructureNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkWriteDescriptorSetAccelerationStructureNV();
    ~_VkWriteDescriptorSetAccelerationStructureNV();

};

/** ## END VkWriteDescriptorSetAccelerationStructureNV ## **/

/** ## BEGIN VkBindAccelerationStructureMemoryInfoNV ## **/

class _VkBindAccelerationStructureMemoryInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> accelerationStructure;
      static NAN_GETTER(GetaccelerationStructure);
    static NAN_SETTER(SetaccelerationStructure);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> memory;
      static NAN_GETTER(Getmemory);
    static NAN_SETTER(Setmemory);
    
    static NAN_GETTER(GetmemoryOffset);
    static NAN_SETTER(SetmemoryOffset);
    
    static NAN_GETTER(GetdeviceIndexCount);
    static NAN_SETTER(SetdeviceIndexCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDeviceIndices;
    static NAN_GETTER(GetpDeviceIndices);
    static NAN_SETTER(SetpDeviceIndices);
    

    // real instance
    VkBindAccelerationStructureMemoryInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBindAccelerationStructureMemoryInfoNV();
    ~_VkBindAccelerationStructureMemoryInfoNV();

};

/** ## END VkBindAccelerationStructureMemoryInfoNV ## **/

/** ## BEGIN VkGeometryAABBNV ## **/

class _VkGeometryAABBNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> aabbData;
      static NAN_GETTER(GetaabbData);
    static NAN_SETTER(SetaabbData);
    
    static NAN_GETTER(GetnumAABBs);
    static NAN_SETTER(SetnumAABBs);
    
    static NAN_GETTER(Getstride);
    static NAN_SETTER(Setstride);
    
    static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    

    // real instance
    VkGeometryAABBNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkGeometryAABBNV();
    ~_VkGeometryAABBNV();

};

/** ## END VkGeometryAABBNV ## **/

/** ## BEGIN VkGeometryTrianglesNV ## **/

class _VkGeometryTrianglesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> vertexData;
      static NAN_GETTER(GetvertexData);
    static NAN_SETTER(SetvertexData);
    
    static NAN_GETTER(GetvertexOffset);
    static NAN_SETTER(SetvertexOffset);
    
    static NAN_GETTER(GetvertexCount);
    static NAN_SETTER(SetvertexCount);
    
    static NAN_GETTER(GetvertexStride);
    static NAN_SETTER(SetvertexStride);
    
    static NAN_GETTER(GetvertexFormat);
    static NAN_SETTER(SetvertexFormat);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> indexData;
      static NAN_GETTER(GetindexData);
    static NAN_SETTER(SetindexData);
    
    static NAN_GETTER(GetindexOffset);
    static NAN_SETTER(SetindexOffset);
    
    static NAN_GETTER(GetindexCount);
    static NAN_SETTER(SetindexCount);
    
    static NAN_GETTER(GetindexType);
    static NAN_SETTER(SetindexType);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> transformData;
      static NAN_GETTER(GettransformData);
    static NAN_SETTER(SettransformData);
    
    static NAN_GETTER(GettransformOffset);
    static NAN_SETTER(SettransformOffset);
    

    // real instance
    VkGeometryTrianglesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkGeometryTrianglesNV();
    ~_VkGeometryTrianglesNV();

};

/** ## END VkGeometryTrianglesNV ## **/

/** ## BEGIN VkGeometryDataNV ## **/

class _VkGeometryDataNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> triangles;
      static NAN_GETTER(Gettriangles);
    static NAN_SETTER(Settriangles);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> aabbs;
      static NAN_GETTER(Getaabbs);
    static NAN_SETTER(Setaabbs);
    

    // real instance
    VkGeometryDataNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkGeometryDataNV();
    ~_VkGeometryDataNV();

};

/** ## END VkGeometryDataNV ## **/

/** ## BEGIN VkGeometryNV ## **/

class _VkGeometryNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetgeometryType);
    static NAN_SETTER(SetgeometryType);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> geometry;
      static NAN_GETTER(Getgeometry);
    static NAN_SETTER(Setgeometry);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    

    // real instance
    VkGeometryNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkGeometryNV();
    ~_VkGeometryNV();

};

/** ## END VkGeometryNV ## **/

/** ## BEGIN VkAccelerationStructureInfoNV ## **/

class _VkAccelerationStructureInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Gettype);
    static NAN_SETTER(Settype);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetinstanceCount);
    static NAN_SETTER(SetinstanceCount);
    
    static NAN_GETTER(GetgeometryCount);
    static NAN_SETTER(SetgeometryCount);
    
    std::vector<VkGeometryNV>* vpGeometries;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pGeometries;
    static NAN_GETTER(GetpGeometries);
    static NAN_SETTER(SetpGeometries);
    

    // real instance
    VkAccelerationStructureInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkAccelerationStructureInfoNV();
    ~_VkAccelerationStructureInfoNV();

};

/** ## END VkAccelerationStructureInfoNV ## **/

/** ## BEGIN VkAccelerationStructureCreateInfoNV ## **/

class _VkAccelerationStructureCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetcompactedSize);
    static NAN_SETTER(SetcompactedSize);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> info;
      static NAN_GETTER(Getinfo);
    static NAN_SETTER(Setinfo);
    

    // real instance
    VkAccelerationStructureCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkAccelerationStructureCreateInfoNV();
    ~_VkAccelerationStructureCreateInfoNV();

};

/** ## END VkAccelerationStructureCreateInfoNV ## **/

/** ## BEGIN VkRayTracingShaderGroupCreateInfoNV ## **/

class _VkRayTracingShaderGroupCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Gettype);
    static NAN_SETTER(Settype);
    
    static NAN_GETTER(GetgeneralShader);
    static NAN_SETTER(SetgeneralShader);
    
    static NAN_GETTER(GetclosestHitShader);
    static NAN_SETTER(SetclosestHitShader);
    
    static NAN_GETTER(GetanyHitShader);
    static NAN_SETTER(SetanyHitShader);
    
    static NAN_GETTER(GetintersectionShader);
    static NAN_SETTER(SetintersectionShader);
    

    // real instance
    VkRayTracingShaderGroupCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRayTracingShaderGroupCreateInfoNV();
    ~_VkRayTracingShaderGroupCreateInfoNV();

};

/** ## END VkRayTracingShaderGroupCreateInfoNV ## **/

/** ## BEGIN VkSpecializationMapEntry ## **/

class _VkSpecializationMapEntry: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetconstantID);
    static NAN_SETTER(SetconstantID);
    
    static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    
    static NAN_GETTER(Getsize);
    static NAN_SETTER(Setsize);
    

    // real instance
    VkSpecializationMapEntry instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSpecializationMapEntry();
    ~_VkSpecializationMapEntry();

};

/** ## END VkSpecializationMapEntry ## **/

/** ## BEGIN VkSpecializationInfo ## **/

class _VkSpecializationInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetmapEntryCount);
    static NAN_SETTER(SetmapEntryCount);
    
    std::vector<VkSpecializationMapEntry>* vpMapEntries;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pMapEntries;
    static NAN_GETTER(GetpMapEntries);
    static NAN_SETTER(SetpMapEntries);
    
    static NAN_GETTER(GetdataSize);
    static NAN_SETTER(SetdataSize);
    

    // real instance
    VkSpecializationInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSpecializationInfo();
    ~_VkSpecializationInfo();

};

/** ## END VkSpecializationInfo ## **/

/** ## BEGIN VkPipelineShaderStageCreateInfo ## **/

class _VkPipelineShaderStageCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(Getstage);
    static NAN_SETTER(Setstage);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> module;
      static NAN_GETTER(Getmodule);
    static NAN_SETTER(Setmodule);
    
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> pName;
    static NAN_GETTER(GetpName);
    static NAN_SETTER(SetpName);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pSpecializationInfo;
      static NAN_GETTER(GetpSpecializationInfo);
    static NAN_SETTER(SetpSpecializationInfo);
    

    // real instance
    VkPipelineShaderStageCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineShaderStageCreateInfo();
    ~_VkPipelineShaderStageCreateInfo();

};

/** ## END VkPipelineShaderStageCreateInfo ## **/

/** ## BEGIN VkRayTracingPipelineCreateInfoNV ## **/

class _VkRayTracingPipelineCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetstageCount);
    static NAN_SETTER(SetstageCount);
    
    std::vector<VkPipelineShaderStageCreateInfo>* vpStages;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pStages;
    static NAN_GETTER(GetpStages);
    static NAN_SETTER(SetpStages);
    
    static NAN_GETTER(GetgroupCount);
    static NAN_SETTER(SetgroupCount);
    
    std::vector<VkRayTracingShaderGroupCreateInfoNV>* vpGroups;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pGroups;
    static NAN_GETTER(GetpGroups);
    static NAN_SETTER(SetpGroups);
    
    static NAN_GETTER(GetmaxRecursionDepth);
    static NAN_SETTER(SetmaxRecursionDepth);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> layout;
      static NAN_GETTER(Getlayout);
    static NAN_SETTER(Setlayout);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> basePipelineHandle;
      static NAN_GETTER(GetbasePipelineHandle);
    static NAN_SETTER(SetbasePipelineHandle);
    
    static NAN_GETTER(GetbasePipelineIndex);
    static NAN_SETTER(SetbasePipelineIndex);
    

    // real instance
    VkRayTracingPipelineCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRayTracingPipelineCreateInfoNV();
    ~_VkRayTracingPipelineCreateInfoNV();

};

/** ## END VkRayTracingPipelineCreateInfoNV ## **/

/** ## BEGIN VkDrawMeshTasksIndirectCommandNV ## **/

class _VkDrawMeshTasksIndirectCommandNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GettaskCount);
    static NAN_SETTER(SettaskCount);
    
    static NAN_GETTER(GetfirstTask);
    static NAN_SETTER(SetfirstTask);
    

    // real instance
    VkDrawMeshTasksIndirectCommandNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDrawMeshTasksIndirectCommandNV();
    ~_VkDrawMeshTasksIndirectCommandNV();

};

/** ## END VkDrawMeshTasksIndirectCommandNV ## **/

/** ## BEGIN VkPhysicalDeviceMeshShaderPropertiesNV ## **/

class _VkPhysicalDeviceMeshShaderPropertiesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmaxDrawMeshTasksCount);
    static NAN_GETTER(GetmaxTaskWorkGroupInvocations);
    std::vector<uint32_t>* vmaxTaskWorkGroupSize;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> maxTaskWorkGroupSize;
    static NAN_GETTER(GetmaxTaskWorkGroupSize);
    static NAN_GETTER(GetmaxTaskTotalMemorySize);
    static NAN_GETTER(GetmaxTaskOutputCount);
    static NAN_GETTER(GetmaxMeshWorkGroupInvocations);
    std::vector<uint32_t>* vmaxMeshWorkGroupSize;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> maxMeshWorkGroupSize;
    static NAN_GETTER(GetmaxMeshWorkGroupSize);
    static NAN_GETTER(GetmaxMeshTotalMemorySize);
    static NAN_GETTER(GetmaxMeshOutputVertices);
    static NAN_GETTER(GetmaxMeshOutputPrimitives);
    static NAN_GETTER(GetmaxMeshMultiviewViewCount);
    static NAN_GETTER(GetmeshOutputPerVertexGranularity);
    static NAN_GETTER(GetmeshOutputPerPrimitiveGranularity);

    // real instance
    VkPhysicalDeviceMeshShaderPropertiesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMeshShaderPropertiesNV();
    ~_VkPhysicalDeviceMeshShaderPropertiesNV();

};

/** ## END VkPhysicalDeviceMeshShaderPropertiesNV ## **/

/** ## BEGIN VkPhysicalDeviceMeshShaderFeaturesNV ## **/

class _VkPhysicalDeviceMeshShaderFeaturesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GettaskShader);
    static NAN_SETTER(SettaskShader);
    
    static NAN_GETTER(GetmeshShader);
    static NAN_SETTER(SetmeshShader);
    

    // real instance
    VkPhysicalDeviceMeshShaderFeaturesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMeshShaderFeaturesNV();
    ~_VkPhysicalDeviceMeshShaderFeaturesNV();

};

/** ## END VkPhysicalDeviceMeshShaderFeaturesNV ## **/

/** ## BEGIN VkCoarseSampleLocationNV ## **/

class _VkCoarseSampleLocationNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetpixelX);
    static NAN_SETTER(SetpixelX);
    
    static NAN_GETTER(GetpixelY);
    static NAN_SETTER(SetpixelY);
    
    static NAN_GETTER(Getsample);
    static NAN_SETTER(Setsample);
    

    // real instance
    VkCoarseSampleLocationNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkCoarseSampleLocationNV();
    ~_VkCoarseSampleLocationNV();

};

/** ## END VkCoarseSampleLocationNV ## **/

/** ## BEGIN VkCoarseSampleOrderCustomNV ## **/

class _VkCoarseSampleOrderCustomNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetshadingRate);
    static NAN_SETTER(SetshadingRate);
    
    static NAN_GETTER(GetsampleCount);
    static NAN_SETTER(SetsampleCount);
    
    static NAN_GETTER(GetsampleLocationCount);
    static NAN_SETTER(SetsampleLocationCount);
    
    std::vector<VkCoarseSampleLocationNV>* vpSampleLocations;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSampleLocations;
    static NAN_GETTER(GetpSampleLocations);
    static NAN_SETTER(SetpSampleLocations);
    

    // real instance
    VkCoarseSampleOrderCustomNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkCoarseSampleOrderCustomNV();
    ~_VkCoarseSampleOrderCustomNV();

};

/** ## END VkCoarseSampleOrderCustomNV ## **/

/** ## BEGIN VkPipelineViewportCoarseSampleOrderStateCreateInfoNV ## **/

class _VkPipelineViewportCoarseSampleOrderStateCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsampleOrderType);
    static NAN_SETTER(SetsampleOrderType);
    
    static NAN_GETTER(GetcustomSampleOrderCount);
    static NAN_SETTER(SetcustomSampleOrderCount);
    
    std::vector<VkCoarseSampleOrderCustomNV>* vpCustomSampleOrders;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pCustomSampleOrders;
    static NAN_GETTER(GetpCustomSampleOrders);
    static NAN_SETTER(SetpCustomSampleOrders);
    

    // real instance
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineViewportCoarseSampleOrderStateCreateInfoNV();
    ~_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV();

};

/** ## END VkPipelineViewportCoarseSampleOrderStateCreateInfoNV ## **/

/** ## BEGIN VkPhysicalDeviceShadingRateImagePropertiesNV ## **/

class _VkPhysicalDeviceShadingRateImagePropertiesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> shadingRateTexelSize;
      static NAN_GETTER(GetshadingRateTexelSize);
    static NAN_GETTER(GetshadingRatePaletteSize);
    static NAN_GETTER(GetshadingRateMaxCoarseSamples);

    // real instance
    VkPhysicalDeviceShadingRateImagePropertiesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceShadingRateImagePropertiesNV();
    ~_VkPhysicalDeviceShadingRateImagePropertiesNV();

};

/** ## END VkPhysicalDeviceShadingRateImagePropertiesNV ## **/

/** ## BEGIN VkPhysicalDeviceShadingRateImageFeaturesNV ## **/

class _VkPhysicalDeviceShadingRateImageFeaturesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetshadingRateImage);
    static NAN_SETTER(SetshadingRateImage);
    
    static NAN_GETTER(GetshadingRateCoarseSampleOrder);
    static NAN_SETTER(SetshadingRateCoarseSampleOrder);
    

    // real instance
    VkPhysicalDeviceShadingRateImageFeaturesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceShadingRateImageFeaturesNV();
    ~_VkPhysicalDeviceShadingRateImageFeaturesNV();

};

/** ## END VkPhysicalDeviceShadingRateImageFeaturesNV ## **/

/** ## BEGIN VkShadingRatePaletteNV ## **/

class _VkShadingRatePaletteNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetshadingRatePaletteEntryCount);
    static NAN_SETTER(SetshadingRatePaletteEntryCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pShadingRatePaletteEntries;
    static NAN_GETTER(GetpShadingRatePaletteEntries);
    static NAN_SETTER(SetpShadingRatePaletteEntries);
    

    // real instance
    VkShadingRatePaletteNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkShadingRatePaletteNV();
    ~_VkShadingRatePaletteNV();

};

/** ## END VkShadingRatePaletteNV ## **/

/** ## BEGIN VkPipelineViewportShadingRateImageStateCreateInfoNV ## **/

class _VkPipelineViewportShadingRateImageStateCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetshadingRateImageEnable);
    static NAN_SETTER(SetshadingRateImageEnable);
    
    static NAN_GETTER(GetviewportCount);
    static NAN_SETTER(SetviewportCount);
    
    std::vector<VkShadingRatePaletteNV>* vpShadingRatePalettes;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pShadingRatePalettes;
    static NAN_GETTER(GetpShadingRatePalettes);
    static NAN_SETTER(SetpShadingRatePalettes);
    

    // real instance
    VkPipelineViewportShadingRateImageStateCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineViewportShadingRateImageStateCreateInfoNV();
    ~_VkPipelineViewportShadingRateImageStateCreateInfoNV();

};

/** ## END VkPipelineViewportShadingRateImageStateCreateInfoNV ## **/

/** ## BEGIN VkPhysicalDeviceShaderImageFootprintFeaturesNV ## **/

class _VkPhysicalDeviceShaderImageFootprintFeaturesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetimageFootprint);
    static NAN_SETTER(SetimageFootprint);
    

    // real instance
    VkPhysicalDeviceShaderImageFootprintFeaturesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceShaderImageFootprintFeaturesNV();
    ~_VkPhysicalDeviceShaderImageFootprintFeaturesNV();

};

/** ## END VkPhysicalDeviceShaderImageFootprintFeaturesNV ## **/

/** ## BEGIN VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV ## **/

class _VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetfragmentShaderBarycentric);
    static NAN_SETTER(SetfragmentShaderBarycentric);
    

    // real instance
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV();
    ~_VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV();

};

/** ## END VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV ## **/

/** ## BEGIN VkPhysicalDeviceComputeShaderDerivativesFeaturesNV ## **/

class _VkPhysicalDeviceComputeShaderDerivativesFeaturesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetcomputeDerivativeGroupQuads);
    static NAN_SETTER(SetcomputeDerivativeGroupQuads);
    
    static NAN_GETTER(GetcomputeDerivativeGroupLinear);
    static NAN_SETTER(SetcomputeDerivativeGroupLinear);
    

    // real instance
    VkPhysicalDeviceComputeShaderDerivativesFeaturesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceComputeShaderDerivativesFeaturesNV();
    ~_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV();

};

/** ## END VkPhysicalDeviceComputeShaderDerivativesFeaturesNV ## **/

/** ## BEGIN VkPhysicalDeviceCornerSampledImageFeaturesNV ## **/

class _VkPhysicalDeviceCornerSampledImageFeaturesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetcornerSampledImage);
    static NAN_SETTER(SetcornerSampledImage);
    

    // real instance
    VkPhysicalDeviceCornerSampledImageFeaturesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceCornerSampledImageFeaturesNV();
    ~_VkPhysicalDeviceCornerSampledImageFeaturesNV();

};

/** ## END VkPhysicalDeviceCornerSampledImageFeaturesNV ## **/

/** ## BEGIN VkOffset2D ## **/

class _VkOffset2D: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getx);
    static NAN_SETTER(Setx);
    
    static NAN_GETTER(Gety);
    static NAN_SETTER(Sety);
    

    // real instance
    VkOffset2D instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkOffset2D();
    ~_VkOffset2D();

};

/** ## END VkOffset2D ## **/

/** ## BEGIN VkRect2D ## **/

class _VkRect2D: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> offset;
      static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> extent;
      static NAN_GETTER(Getextent);
    static NAN_SETTER(Setextent);
    

    // real instance
    VkRect2D instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRect2D();
    ~_VkRect2D();

};

/** ## END VkRect2D ## **/

/** ## BEGIN VkPipelineViewportExclusiveScissorStateCreateInfoNV ## **/

class _VkPipelineViewportExclusiveScissorStateCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetexclusiveScissorCount);
    static NAN_SETTER(SetexclusiveScissorCount);
    
    std::vector<VkRect2D>* vpExclusiveScissors;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pExclusiveScissors;
    static NAN_GETTER(GetpExclusiveScissors);
    static NAN_SETTER(SetpExclusiveScissors);
    

    // real instance
    VkPipelineViewportExclusiveScissorStateCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineViewportExclusiveScissorStateCreateInfoNV();
    ~_VkPipelineViewportExclusiveScissorStateCreateInfoNV();

};

/** ## END VkPipelineViewportExclusiveScissorStateCreateInfoNV ## **/

/** ## BEGIN VkPhysicalDeviceExclusiveScissorFeaturesNV ## **/

class _VkPhysicalDeviceExclusiveScissorFeaturesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetexclusiveScissor);
    static NAN_SETTER(SetexclusiveScissor);
    

    // real instance
    VkPhysicalDeviceExclusiveScissorFeaturesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceExclusiveScissorFeaturesNV();
    ~_VkPhysicalDeviceExclusiveScissorFeaturesNV();

};

/** ## END VkPhysicalDeviceExclusiveScissorFeaturesNV ## **/

/** ## BEGIN VkPipelineRepresentativeFragmentTestStateCreateInfoNV ## **/

class _VkPipelineRepresentativeFragmentTestStateCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetrepresentativeFragmentTestEnable);
    static NAN_SETTER(SetrepresentativeFragmentTestEnable);
    

    // real instance
    VkPipelineRepresentativeFragmentTestStateCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineRepresentativeFragmentTestStateCreateInfoNV();
    ~_VkPipelineRepresentativeFragmentTestStateCreateInfoNV();

};

/** ## END VkPipelineRepresentativeFragmentTestStateCreateInfoNV ## **/

/** ## BEGIN VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV ## **/

class _VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetrepresentativeFragmentTest);
    static NAN_SETTER(SetrepresentativeFragmentTest);
    

    // real instance
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV();
    ~_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV();

};

/** ## END VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV ## **/

/** ## BEGIN VkPipelineRasterizationStateStreamCreateInfoEXT ## **/

class _VkPipelineRasterizationStateStreamCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetrasterizationStream);
    static NAN_SETTER(SetrasterizationStream);
    

    // real instance
    VkPipelineRasterizationStateStreamCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineRasterizationStateStreamCreateInfoEXT();
    ~_VkPipelineRasterizationStateStreamCreateInfoEXT();

};

/** ## END VkPipelineRasterizationStateStreamCreateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceTransformFeedbackPropertiesEXT ## **/

class _VkPhysicalDeviceTransformFeedbackPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmaxTransformFeedbackStreams);
    static NAN_GETTER(GetmaxTransformFeedbackBuffers);
    static NAN_GETTER(GetmaxTransformFeedbackBufferSize);
    static NAN_GETTER(GetmaxTransformFeedbackStreamDataSize);
    static NAN_GETTER(GetmaxTransformFeedbackBufferDataSize);
    static NAN_GETTER(GetmaxTransformFeedbackBufferDataStride);
    static NAN_GETTER(GettransformFeedbackQueries);
    static NAN_GETTER(GettransformFeedbackStreamsLinesTriangles);
    static NAN_GETTER(GettransformFeedbackRasterizationStreamSelect);
    static NAN_GETTER(GettransformFeedbackDraw);

    // real instance
    VkPhysicalDeviceTransformFeedbackPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceTransformFeedbackPropertiesEXT();
    ~_VkPhysicalDeviceTransformFeedbackPropertiesEXT();

};

/** ## END VkPhysicalDeviceTransformFeedbackPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceTransformFeedbackFeaturesEXT ## **/

class _VkPhysicalDeviceTransformFeedbackFeaturesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GettransformFeedback);
    static NAN_SETTER(SettransformFeedback);
    
    static NAN_GETTER(GetgeometryStreams);
    static NAN_SETTER(SetgeometryStreams);
    

    // real instance
    VkPhysicalDeviceTransformFeedbackFeaturesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceTransformFeedbackFeaturesEXT();
    ~_VkPhysicalDeviceTransformFeedbackFeaturesEXT();

};

/** ## END VkPhysicalDeviceTransformFeedbackFeaturesEXT ## **/

/** ## BEGIN VkPhysicalDeviceASTCDecodeFeaturesEXT ## **/

class _VkPhysicalDeviceASTCDecodeFeaturesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdecodeModeSharedExponent);
    static NAN_SETTER(SetdecodeModeSharedExponent);
    

    // real instance
    VkPhysicalDeviceASTCDecodeFeaturesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceASTCDecodeFeaturesEXT();
    ~_VkPhysicalDeviceASTCDecodeFeaturesEXT();

};

/** ## END VkPhysicalDeviceASTCDecodeFeaturesEXT ## **/

/** ## BEGIN VkImageViewASTCDecodeModeEXT ## **/

class _VkImageViewASTCDecodeModeEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdecodeMode);
    static NAN_SETTER(SetdecodeMode);
    

    // real instance
    VkImageViewASTCDecodeModeEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageViewASTCDecodeModeEXT();
    ~_VkImageViewASTCDecodeModeEXT();

};

/** ## END VkImageViewASTCDecodeModeEXT ## **/

/** ## BEGIN VkAttachmentReference2KHR ## **/

class _VkAttachmentReference2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getattachment);
    static NAN_SETTER(Setattachment);
    
    static NAN_GETTER(Getlayout);
    static NAN_SETTER(Setlayout);
    
    static NAN_GETTER(GetaspectMask);
    static NAN_SETTER(SetaspectMask);
    

    // real instance
    VkAttachmentReference2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkAttachmentReference2KHR();
    ~_VkAttachmentReference2KHR();

};

/** ## END VkAttachmentReference2KHR ## **/

/** ## BEGIN VkSubpassDescriptionDepthStencilResolveKHR ## **/

class _VkSubpassDescriptionDepthStencilResolveKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdepthResolveMode);
    static NAN_SETTER(SetdepthResolveMode);
    
    static NAN_GETTER(GetstencilResolveMode);
    static NAN_SETTER(SetstencilResolveMode);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pDepthStencilResolveAttachment;
      static NAN_GETTER(GetpDepthStencilResolveAttachment);
    static NAN_SETTER(SetpDepthStencilResolveAttachment);
    

    // real instance
    VkSubpassDescriptionDepthStencilResolveKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSubpassDescriptionDepthStencilResolveKHR();
    ~_VkSubpassDescriptionDepthStencilResolveKHR();

};

/** ## END VkSubpassDescriptionDepthStencilResolveKHR ## **/

/** ## BEGIN VkPhysicalDeviceDepthStencilResolvePropertiesKHR ## **/

class _VkPhysicalDeviceDepthStencilResolvePropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsupportedDepthResolveModes);
    static NAN_GETTER(GetsupportedStencilResolveModes);
    static NAN_GETTER(GetindependentResolveNone);
    static NAN_GETTER(GetindependentResolve);

    // real instance
    VkPhysicalDeviceDepthStencilResolvePropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceDepthStencilResolvePropertiesKHR();
    ~_VkPhysicalDeviceDepthStencilResolvePropertiesKHR();

};

/** ## END VkPhysicalDeviceDepthStencilResolvePropertiesKHR ## **/

/** ## BEGIN VkCheckpointDataNV ## **/

class _VkCheckpointDataNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getstage);

    // real instance
    VkCheckpointDataNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkCheckpointDataNV();
    ~_VkCheckpointDataNV();

};

/** ## END VkCheckpointDataNV ## **/

/** ## BEGIN VkQueueFamilyCheckpointPropertiesNV ## **/

class _VkQueueFamilyCheckpointPropertiesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetcheckpointExecutionStageMask);

    // real instance
    VkQueueFamilyCheckpointPropertiesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkQueueFamilyCheckpointPropertiesNV();
    ~_VkQueueFamilyCheckpointPropertiesNV();

};

/** ## END VkQueueFamilyCheckpointPropertiesNV ## **/

/** ## BEGIN VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT ## **/

class _VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetvertexAttributeInstanceRateDivisor);
    static NAN_SETTER(SetvertexAttributeInstanceRateDivisor);
    
    static NAN_GETTER(GetvertexAttributeInstanceRateZeroDivisor);
    static NAN_SETTER(SetvertexAttributeInstanceRateZeroDivisor);
    

    // real instance
    VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT();
    ~_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT();

};

/** ## END VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT ## **/

/** ## BEGIN VkPhysicalDeviceShaderAtomicInt64FeaturesKHR ## **/

class _VkPhysicalDeviceShaderAtomicInt64FeaturesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetshaderBufferInt64Atomics);
    static NAN_SETTER(SetshaderBufferInt64Atomics);
    
    static NAN_GETTER(GetshaderSharedInt64Atomics);
    static NAN_SETTER(SetshaderSharedInt64Atomics);
    

    // real instance
    VkPhysicalDeviceShaderAtomicInt64FeaturesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceShaderAtomicInt64FeaturesKHR();
    ~_VkPhysicalDeviceShaderAtomicInt64FeaturesKHR();

};

/** ## END VkPhysicalDeviceShaderAtomicInt64FeaturesKHR ## **/

/** ## BEGIN VkPhysicalDeviceVulkanMemoryModelFeaturesKHR ## **/

class _VkPhysicalDeviceVulkanMemoryModelFeaturesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetvulkanMemoryModel);
    static NAN_SETTER(SetvulkanMemoryModel);
    
    static NAN_GETTER(GetvulkanMemoryModelDeviceScope);
    static NAN_SETTER(SetvulkanMemoryModelDeviceScope);
    
    static NAN_GETTER(GetvulkanMemoryModelAvailabilityVisibilityChains);
    static NAN_SETTER(SetvulkanMemoryModelAvailabilityVisibilityChains);
    

    // real instance
    VkPhysicalDeviceVulkanMemoryModelFeaturesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceVulkanMemoryModelFeaturesKHR();
    ~_VkPhysicalDeviceVulkanMemoryModelFeaturesKHR();

};

/** ## END VkPhysicalDeviceVulkanMemoryModelFeaturesKHR ## **/

/** ## BEGIN VkPhysicalDeviceConditionalRenderingFeaturesEXT ## **/

class _VkPhysicalDeviceConditionalRenderingFeaturesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetconditionalRendering);
    static NAN_SETTER(SetconditionalRendering);
    
    static NAN_GETTER(GetinheritedConditionalRendering);
    static NAN_SETTER(SetinheritedConditionalRendering);
    

    // real instance
    VkPhysicalDeviceConditionalRenderingFeaturesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceConditionalRenderingFeaturesEXT();
    ~_VkPhysicalDeviceConditionalRenderingFeaturesEXT();

};

/** ## END VkPhysicalDeviceConditionalRenderingFeaturesEXT ## **/

/** ## BEGIN VkPhysicalDevice8BitStorageFeaturesKHR ## **/

class _VkPhysicalDevice8BitStorageFeaturesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetstorageBuffer8BitAccess);
    static NAN_SETTER(SetstorageBuffer8BitAccess);
    
    static NAN_GETTER(GetuniformAndStorageBuffer8BitAccess);
    static NAN_SETTER(SetuniformAndStorageBuffer8BitAccess);
    
    static NAN_GETTER(GetstoragePushConstant8);
    static NAN_SETTER(SetstoragePushConstant8);
    

    // real instance
    VkPhysicalDevice8BitStorageFeaturesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDevice8BitStorageFeaturesKHR();
    ~_VkPhysicalDevice8BitStorageFeaturesKHR();

};

/** ## END VkPhysicalDevice8BitStorageFeaturesKHR ## **/

/** ## BEGIN VkCommandBufferInheritanceConditionalRenderingInfoEXT ## **/

class _VkCommandBufferInheritanceConditionalRenderingInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetconditionalRenderingEnable);
    static NAN_SETTER(SetconditionalRenderingEnable);
    

    // real instance
    VkCommandBufferInheritanceConditionalRenderingInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkCommandBufferInheritanceConditionalRenderingInfoEXT();
    ~_VkCommandBufferInheritanceConditionalRenderingInfoEXT();

};

/** ## END VkCommandBufferInheritanceConditionalRenderingInfoEXT ## **/

/** ## BEGIN VkPhysicalDevicePCIBusInfoPropertiesEXT ## **/

class _VkPhysicalDevicePCIBusInfoPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetpciDomain);
    static NAN_GETTER(GetpciBus);
    static NAN_GETTER(GetpciDevice);
    static NAN_GETTER(GetpciFunction);

    // real instance
    VkPhysicalDevicePCIBusInfoPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDevicePCIBusInfoPropertiesEXT();
    ~_VkPhysicalDevicePCIBusInfoPropertiesEXT();

};

/** ## END VkPhysicalDevicePCIBusInfoPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT ## **/

class _VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmaxVertexAttribDivisor);

    // real instance
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT();
    ~_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT();

};

/** ## END VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT ## **/

/** ## BEGIN VkVertexInputBindingDivisorDescriptionEXT ## **/

class _VkVertexInputBindingDivisorDescriptionEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getbinding);
    static NAN_SETTER(Setbinding);
    
    static NAN_GETTER(Getdivisor);
    static NAN_SETTER(Setdivisor);
    

    // real instance
    VkVertexInputBindingDivisorDescriptionEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkVertexInputBindingDivisorDescriptionEXT();
    ~_VkVertexInputBindingDivisorDescriptionEXT();

};

/** ## END VkVertexInputBindingDivisorDescriptionEXT ## **/

/** ## BEGIN VkPipelineVertexInputDivisorStateCreateInfoEXT ## **/

class _VkPipelineVertexInputDivisorStateCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetvertexBindingDivisorCount);
    static NAN_SETTER(SetvertexBindingDivisorCount);
    
    std::vector<VkVertexInputBindingDivisorDescriptionEXT>* vpVertexBindingDivisors;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pVertexBindingDivisors;
    static NAN_GETTER(GetpVertexBindingDivisors);
    static NAN_SETTER(SetpVertexBindingDivisors);
    

    // real instance
    VkPipelineVertexInputDivisorStateCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineVertexInputDivisorStateCreateInfoEXT();
    ~_VkPipelineVertexInputDivisorStateCreateInfoEXT();

};

/** ## END VkPipelineVertexInputDivisorStateCreateInfoEXT ## **/

/** ## BEGIN VkSubpassEndInfoKHR ## **/

class _VkSubpassEndInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    

    // real instance
    VkSubpassEndInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSubpassEndInfoKHR();
    ~_VkSubpassEndInfoKHR();

};

/** ## END VkSubpassEndInfoKHR ## **/

/** ## BEGIN VkSubpassBeginInfoKHR ## **/

class _VkSubpassBeginInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getcontents);
    static NAN_SETTER(Setcontents);
    

    // real instance
    VkSubpassBeginInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSubpassBeginInfoKHR();
    ~_VkSubpassBeginInfoKHR();

};

/** ## END VkSubpassBeginInfoKHR ## **/

/** ## BEGIN VkSubpassDependency2KHR ## **/

class _VkSubpassDependency2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsrcSubpass);
    static NAN_SETTER(SetsrcSubpass);
    
    static NAN_GETTER(GetdstSubpass);
    static NAN_SETTER(SetdstSubpass);
    
    static NAN_GETTER(GetsrcStageMask);
    static NAN_SETTER(SetsrcStageMask);
    
    static NAN_GETTER(GetdstStageMask);
    static NAN_SETTER(SetdstStageMask);
    
    static NAN_GETTER(GetsrcAccessMask);
    static NAN_SETTER(SetsrcAccessMask);
    
    static NAN_GETTER(GetdstAccessMask);
    static NAN_SETTER(SetdstAccessMask);
    
    static NAN_GETTER(GetdependencyFlags);
    static NAN_SETTER(SetdependencyFlags);
    
    static NAN_GETTER(GetviewOffset);
    static NAN_SETTER(SetviewOffset);
    

    // real instance
    VkSubpassDependency2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSubpassDependency2KHR();
    ~_VkSubpassDependency2KHR();

};

/** ## END VkSubpassDependency2KHR ## **/

/** ## BEGIN VkSubpassDescription2KHR ## **/

class _VkSubpassDescription2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetpipelineBindPoint);
    static NAN_SETTER(SetpipelineBindPoint);
    
    static NAN_GETTER(GetviewMask);
    static NAN_SETTER(SetviewMask);
    
    static NAN_GETTER(GetinputAttachmentCount);
    static NAN_SETTER(SetinputAttachmentCount);
    
    std::vector<VkAttachmentReference2KHR>* vpInputAttachments;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pInputAttachments;
    static NAN_GETTER(GetpInputAttachments);
    static NAN_SETTER(SetpInputAttachments);
    
    static NAN_GETTER(GetcolorAttachmentCount);
    static NAN_SETTER(SetcolorAttachmentCount);
    
    std::vector<VkAttachmentReference2KHR>* vpColorAttachments;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pColorAttachments;
    static NAN_GETTER(GetpColorAttachments);
    static NAN_SETTER(SetpColorAttachments);
    
    std::vector<VkAttachmentReference2KHR>* vpResolveAttachments;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pResolveAttachments;
    static NAN_GETTER(GetpResolveAttachments);
    static NAN_SETTER(SetpResolveAttachments);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pDepthStencilAttachment;
      static NAN_GETTER(GetpDepthStencilAttachment);
    static NAN_SETTER(SetpDepthStencilAttachment);
    
    static NAN_GETTER(GetpreserveAttachmentCount);
    static NAN_SETTER(SetpreserveAttachmentCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pPreserveAttachments;
    static NAN_GETTER(GetpPreserveAttachments);
    static NAN_SETTER(SetpPreserveAttachments);
    

    // real instance
    VkSubpassDescription2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSubpassDescription2KHR();
    ~_VkSubpassDescription2KHR();

};

/** ## END VkSubpassDescription2KHR ## **/

/** ## BEGIN VkAttachmentDescription2KHR ## **/

class _VkAttachmentDescription2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(Getformat);
    static NAN_SETTER(Setformat);
    
    static NAN_GETTER(Getsamples);
    static NAN_SETTER(Setsamples);
    
    static NAN_GETTER(GetloadOp);
    static NAN_SETTER(SetloadOp);
    
    static NAN_GETTER(GetstoreOp);
    static NAN_SETTER(SetstoreOp);
    
    static NAN_GETTER(GetstencilLoadOp);
    static NAN_SETTER(SetstencilLoadOp);
    
    static NAN_GETTER(GetstencilStoreOp);
    static NAN_SETTER(SetstencilStoreOp);
    
    static NAN_GETTER(GetinitialLayout);
    static NAN_SETTER(SetinitialLayout);
    
    static NAN_GETTER(GetfinalLayout);
    static NAN_SETTER(SetfinalLayout);
    

    // real instance
    VkAttachmentDescription2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkAttachmentDescription2KHR();
    ~_VkAttachmentDescription2KHR();

};

/** ## END VkAttachmentDescription2KHR ## **/

/** ## BEGIN VkRenderPassCreateInfo2KHR ## **/

class _VkRenderPassCreateInfo2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetattachmentCount);
    static NAN_SETTER(SetattachmentCount);
    
    std::vector<VkAttachmentDescription2KHR>* vpAttachments;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAttachments;
    static NAN_GETTER(GetpAttachments);
    static NAN_SETTER(SetpAttachments);
    
    static NAN_GETTER(GetsubpassCount);
    static NAN_SETTER(SetsubpassCount);
    
    std::vector<VkSubpassDescription2KHR>* vpSubpasses;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSubpasses;
    static NAN_GETTER(GetpSubpasses);
    static NAN_SETTER(SetpSubpasses);
    
    static NAN_GETTER(GetdependencyCount);
    static NAN_SETTER(SetdependencyCount);
    
    std::vector<VkSubpassDependency2KHR>* vpDependencies;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDependencies;
    static NAN_GETTER(GetpDependencies);
    static NAN_SETTER(SetpDependencies);
    
    static NAN_GETTER(GetcorrelatedViewMaskCount);
    static NAN_SETTER(SetcorrelatedViewMaskCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pCorrelatedViewMasks;
    static NAN_GETTER(GetpCorrelatedViewMasks);
    static NAN_SETTER(SetpCorrelatedViewMasks);
    

    // real instance
    VkRenderPassCreateInfo2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRenderPassCreateInfo2KHR();
    ~_VkRenderPassCreateInfo2KHR();

};

/** ## END VkRenderPassCreateInfo2KHR ## **/

/** ## BEGIN VkDescriptorSetVariableDescriptorCountLayoutSupportEXT ## **/

class _VkDescriptorSetVariableDescriptorCountLayoutSupportEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmaxVariableDescriptorCount);

    // real instance
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorSetVariableDescriptorCountLayoutSupportEXT();
    ~_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT();

};

/** ## END VkDescriptorSetVariableDescriptorCountLayoutSupportEXT ## **/

/** ## BEGIN VkDescriptorSetVariableDescriptorCountAllocateInfoEXT ## **/

class _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdescriptorSetCount);
    static NAN_SETTER(SetdescriptorSetCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDescriptorCounts;
    static NAN_GETTER(GetpDescriptorCounts);
    static NAN_SETTER(SetpDescriptorCounts);
    

    // real instance
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorSetVariableDescriptorCountAllocateInfoEXT();
    ~_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT();

};

/** ## END VkDescriptorSetVariableDescriptorCountAllocateInfoEXT ## **/

/** ## BEGIN VkDescriptorSetLayoutBindingFlagsCreateInfoEXT ## **/

class _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetbindingCount);
    static NAN_SETTER(SetbindingCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pBindingFlags;
    static NAN_GETTER(GetpBindingFlags);
    static NAN_SETTER(SetpBindingFlags);
    

    // real instance
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorSetLayoutBindingFlagsCreateInfoEXT();
    ~_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT();

};

/** ## END VkDescriptorSetLayoutBindingFlagsCreateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceDescriptorIndexingPropertiesEXT ## **/

class _VkPhysicalDeviceDescriptorIndexingPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmaxUpdateAfterBindDescriptorsInAllPools);
    static NAN_GETTER(GetshaderUniformBufferArrayNonUniformIndexingNative);
    static NAN_GETTER(GetshaderSampledImageArrayNonUniformIndexingNative);
    static NAN_GETTER(GetshaderStorageBufferArrayNonUniformIndexingNative);
    static NAN_GETTER(GetshaderStorageImageArrayNonUniformIndexingNative);
    static NAN_GETTER(GetshaderInputAttachmentArrayNonUniformIndexingNative);
    static NAN_GETTER(GetrobustBufferAccessUpdateAfterBind);
    static NAN_GETTER(GetquadDivergentImplicitLod);
    static NAN_GETTER(GetmaxPerStageDescriptorUpdateAfterBindSamplers);
    static NAN_GETTER(GetmaxPerStageDescriptorUpdateAfterBindUniformBuffers);
    static NAN_GETTER(GetmaxPerStageDescriptorUpdateAfterBindStorageBuffers);
    static NAN_GETTER(GetmaxPerStageDescriptorUpdateAfterBindSampledImages);
    static NAN_GETTER(GetmaxPerStageDescriptorUpdateAfterBindStorageImages);
    static NAN_GETTER(GetmaxPerStageDescriptorUpdateAfterBindInputAttachments);
    static NAN_GETTER(GetmaxPerStageUpdateAfterBindResources);
    static NAN_GETTER(GetmaxDescriptorSetUpdateAfterBindSamplers);
    static NAN_GETTER(GetmaxDescriptorSetUpdateAfterBindUniformBuffers);
    static NAN_GETTER(GetmaxDescriptorSetUpdateAfterBindUniformBuffersDynamic);
    static NAN_GETTER(GetmaxDescriptorSetUpdateAfterBindStorageBuffers);
    static NAN_GETTER(GetmaxDescriptorSetUpdateAfterBindStorageBuffersDynamic);
    static NAN_GETTER(GetmaxDescriptorSetUpdateAfterBindSampledImages);
    static NAN_GETTER(GetmaxDescriptorSetUpdateAfterBindStorageImages);
    static NAN_GETTER(GetmaxDescriptorSetUpdateAfterBindInputAttachments);

    // real instance
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceDescriptorIndexingPropertiesEXT();
    ~_VkPhysicalDeviceDescriptorIndexingPropertiesEXT();

};

/** ## END VkPhysicalDeviceDescriptorIndexingPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceDescriptorIndexingFeaturesEXT ## **/

class _VkPhysicalDeviceDescriptorIndexingFeaturesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetshaderInputAttachmentArrayDynamicIndexing);
    static NAN_SETTER(SetshaderInputAttachmentArrayDynamicIndexing);
    
    static NAN_GETTER(GetshaderUniformTexelBufferArrayDynamicIndexing);
    static NAN_SETTER(SetshaderUniformTexelBufferArrayDynamicIndexing);
    
    static NAN_GETTER(GetshaderStorageTexelBufferArrayDynamicIndexing);
    static NAN_SETTER(SetshaderStorageTexelBufferArrayDynamicIndexing);
    
    static NAN_GETTER(GetshaderUniformBufferArrayNonUniformIndexing);
    static NAN_SETTER(SetshaderUniformBufferArrayNonUniformIndexing);
    
    static NAN_GETTER(GetshaderSampledImageArrayNonUniformIndexing);
    static NAN_SETTER(SetshaderSampledImageArrayNonUniformIndexing);
    
    static NAN_GETTER(GetshaderStorageBufferArrayNonUniformIndexing);
    static NAN_SETTER(SetshaderStorageBufferArrayNonUniformIndexing);
    
    static NAN_GETTER(GetshaderStorageImageArrayNonUniformIndexing);
    static NAN_SETTER(SetshaderStorageImageArrayNonUniformIndexing);
    
    static NAN_GETTER(GetshaderInputAttachmentArrayNonUniformIndexing);
    static NAN_SETTER(SetshaderInputAttachmentArrayNonUniformIndexing);
    
    static NAN_GETTER(GetshaderUniformTexelBufferArrayNonUniformIndexing);
    static NAN_SETTER(SetshaderUniformTexelBufferArrayNonUniformIndexing);
    
    static NAN_GETTER(GetshaderStorageTexelBufferArrayNonUniformIndexing);
    static NAN_SETTER(SetshaderStorageTexelBufferArrayNonUniformIndexing);
    
    static NAN_GETTER(GetdescriptorBindingUniformBufferUpdateAfterBind);
    static NAN_SETTER(SetdescriptorBindingUniformBufferUpdateAfterBind);
    
    static NAN_GETTER(GetdescriptorBindingSampledImageUpdateAfterBind);
    static NAN_SETTER(SetdescriptorBindingSampledImageUpdateAfterBind);
    
    static NAN_GETTER(GetdescriptorBindingStorageImageUpdateAfterBind);
    static NAN_SETTER(SetdescriptorBindingStorageImageUpdateAfterBind);
    
    static NAN_GETTER(GetdescriptorBindingStorageBufferUpdateAfterBind);
    static NAN_SETTER(SetdescriptorBindingStorageBufferUpdateAfterBind);
    
    static NAN_GETTER(GetdescriptorBindingUniformTexelBufferUpdateAfterBind);
    static NAN_SETTER(SetdescriptorBindingUniformTexelBufferUpdateAfterBind);
    
    static NAN_GETTER(GetdescriptorBindingStorageTexelBufferUpdateAfterBind);
    static NAN_SETTER(SetdescriptorBindingStorageTexelBufferUpdateAfterBind);
    
    static NAN_GETTER(GetdescriptorBindingUpdateUnusedWhilePending);
    static NAN_SETTER(SetdescriptorBindingUpdateUnusedWhilePending);
    
    static NAN_GETTER(GetdescriptorBindingPartiallyBound);
    static NAN_SETTER(SetdescriptorBindingPartiallyBound);
    
    static NAN_GETTER(GetdescriptorBindingVariableDescriptorCount);
    static NAN_SETTER(SetdescriptorBindingVariableDescriptorCount);
    
    static NAN_GETTER(GetruntimeDescriptorArray);
    static NAN_SETTER(SetruntimeDescriptorArray);
    

    // real instance
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceDescriptorIndexingFeaturesEXT();
    ~_VkPhysicalDeviceDescriptorIndexingFeaturesEXT();

};

/** ## END VkPhysicalDeviceDescriptorIndexingFeaturesEXT ## **/

/** ## BEGIN VkPipelineRasterizationConservativeStateCreateInfoEXT ## **/

class _VkPipelineRasterizationConservativeStateCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetconservativeRasterizationMode);
    static NAN_SETTER(SetconservativeRasterizationMode);
    
    static NAN_GETTER(GetextraPrimitiveOverestimationSize);
    static NAN_SETTER(SetextraPrimitiveOverestimationSize);
    

    // real instance
    VkPipelineRasterizationConservativeStateCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineRasterizationConservativeStateCreateInfoEXT();
    ~_VkPipelineRasterizationConservativeStateCreateInfoEXT();

};

/** ## END VkPipelineRasterizationConservativeStateCreateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceShaderCorePropertiesAMD ## **/

class _VkPhysicalDeviceShaderCorePropertiesAMD: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetshaderEngineCount);
    static NAN_GETTER(GetshaderArraysPerEngineCount);
    static NAN_GETTER(GetcomputeUnitsPerShaderArray);
    static NAN_GETTER(GetsimdPerComputeUnit);
    static NAN_GETTER(GetwavefrontsPerSimd);
    static NAN_GETTER(GetwavefrontSize);
    static NAN_GETTER(GetsgprsPerSimd);
    static NAN_GETTER(GetminSgprAllocation);
    static NAN_GETTER(GetmaxSgprAllocation);
    static NAN_GETTER(GetsgprAllocationGranularity);
    static NAN_GETTER(GetvgprsPerSimd);
    static NAN_GETTER(GetminVgprAllocation);
    static NAN_GETTER(GetmaxVgprAllocation);
    static NAN_GETTER(GetvgprAllocationGranularity);

    // real instance
    VkPhysicalDeviceShaderCorePropertiesAMD instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceShaderCorePropertiesAMD();
    ~_VkPhysicalDeviceShaderCorePropertiesAMD();

};

/** ## END VkPhysicalDeviceShaderCorePropertiesAMD ## **/

/** ## BEGIN VkCalibratedTimestampInfoEXT ## **/

class _VkCalibratedTimestampInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GettimeDomain);
    static NAN_SETTER(SettimeDomain);
    

    // real instance
    VkCalibratedTimestampInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkCalibratedTimestampInfoEXT();
    ~_VkCalibratedTimestampInfoEXT();

};

/** ## END VkCalibratedTimestampInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceConservativeRasterizationPropertiesEXT ## **/

class _VkPhysicalDeviceConservativeRasterizationPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetprimitiveOverestimationSize);
    static NAN_GETTER(GetmaxExtraPrimitiveOverestimationSize);
    static NAN_GETTER(GetextraPrimitiveOverestimationSizeGranularity);
    static NAN_GETTER(GetprimitiveUnderestimation);
    static NAN_GETTER(GetconservativePointAndLineRasterization);
    static NAN_GETTER(GetdegenerateTrianglesRasterized);
    static NAN_GETTER(GetdegenerateLinesRasterized);
    static NAN_GETTER(GetfullyCoveredFragmentShaderInputVariable);
    static NAN_GETTER(GetconservativeRasterizationPostDepthCoverage);

    // real instance
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceConservativeRasterizationPropertiesEXT();
    ~_VkPhysicalDeviceConservativeRasterizationPropertiesEXT();

};

/** ## END VkPhysicalDeviceConservativeRasterizationPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceExternalMemoryHostPropertiesEXT ## **/

class _VkPhysicalDeviceExternalMemoryHostPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetminImportedHostPointerAlignment);

    // real instance
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceExternalMemoryHostPropertiesEXT();
    ~_VkPhysicalDeviceExternalMemoryHostPropertiesEXT();

};

/** ## END VkPhysicalDeviceExternalMemoryHostPropertiesEXT ## **/

/** ## BEGIN VkMemoryHostPointerPropertiesEXT ## **/

class _VkMemoryHostPointerPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmemoryTypeBits);

    // real instance
    VkMemoryHostPointerPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryHostPointerPropertiesEXT();
    ~_VkMemoryHostPointerPropertiesEXT();

};

/** ## END VkMemoryHostPointerPropertiesEXT ## **/

/** ## BEGIN VkImportMemoryHostPointerInfoEXT ## **/

class _VkImportMemoryHostPointerInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkImportMemoryHostPointerInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImportMemoryHostPointerInfoEXT();
    ~_VkImportMemoryHostPointerInfoEXT();

};

/** ## END VkImportMemoryHostPointerInfoEXT ## **/

/** ## BEGIN VkDebugUtilsObjectNameInfoEXT ## **/

class _VkDebugUtilsObjectNameInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetobjectType);
    static NAN_SETTER(SetobjectType);
    
    static NAN_GETTER(GetobjectHandle);
    static NAN_SETTER(SetobjectHandle);
    
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> pObjectName;
    static NAN_GETTER(GetpObjectName);
    static NAN_SETTER(SetpObjectName);
    

    // real instance
    VkDebugUtilsObjectNameInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDebugUtilsObjectNameInfoEXT();
    ~_VkDebugUtilsObjectNameInfoEXT();

};

/** ## END VkDebugUtilsObjectNameInfoEXT ## **/

/** ## BEGIN VkDebugUtilsLabelEXT ## **/

class _VkDebugUtilsLabelEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> pLabelName;
    static NAN_GETTER(GetpLabelName);
    static NAN_SETTER(SetpLabelName);
    
    std::vector<float>* vcolor;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> color;
    static NAN_GETTER(Getcolor);
    static NAN_SETTER(Setcolor);
    

    // real instance
    VkDebugUtilsLabelEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDebugUtilsLabelEXT();
    ~_VkDebugUtilsLabelEXT();

};

/** ## END VkDebugUtilsLabelEXT ## **/

/** ## BEGIN VkDebugUtilsMessengerCallbackDataEXT ## **/

class _VkDebugUtilsMessengerCallbackDataEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> pMessageIdName;
    static NAN_GETTER(GetpMessageIdName);
    static NAN_SETTER(SetpMessageIdName);
    
    static NAN_GETTER(GetmessageIdNumber);
    static NAN_SETTER(SetmessageIdNumber);
    
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> pMessage;
    static NAN_GETTER(GetpMessage);
    static NAN_SETTER(SetpMessage);
    
    static NAN_GETTER(GetqueueLabelCount);
    static NAN_SETTER(SetqueueLabelCount);
    
    std::vector<VkDebugUtilsLabelEXT>* vpQueueLabels;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pQueueLabels;
    static NAN_GETTER(GetpQueueLabels);
    static NAN_SETTER(SetpQueueLabels);
    
    static NAN_GETTER(GetcmdBufLabelCount);
    static NAN_SETTER(SetcmdBufLabelCount);
    
    std::vector<VkDebugUtilsLabelEXT>* vpCmdBufLabels;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pCmdBufLabels;
    static NAN_GETTER(GetpCmdBufLabels);
    static NAN_SETTER(SetpCmdBufLabels);
    
    static NAN_GETTER(GetobjectCount);
    static NAN_SETTER(SetobjectCount);
    
    std::vector<VkDebugUtilsObjectNameInfoEXT>* vpObjects;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pObjects;
    static NAN_GETTER(GetpObjects);
    static NAN_SETTER(SetpObjects);
    

    // real instance
    VkDebugUtilsMessengerCallbackDataEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDebugUtilsMessengerCallbackDataEXT();
    ~_VkDebugUtilsMessengerCallbackDataEXT();

};

/** ## END VkDebugUtilsMessengerCallbackDataEXT ## **/

/** ## BEGIN VkDebugUtilsMessengerCreateInfoEXT ## **/

class _VkDebugUtilsMessengerCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetmessageSeverity);
    static NAN_SETTER(SetmessageSeverity);
    
    static NAN_GETTER(GetmessageType);
    static NAN_SETTER(SetmessageType);
    

    // real instance
    VkDebugUtilsMessengerCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDebugUtilsMessengerCreateInfoEXT();
    ~_VkDebugUtilsMessengerCreateInfoEXT();

};

/** ## END VkDebugUtilsMessengerCreateInfoEXT ## **/

/** ## BEGIN VkDebugUtilsObjectTagInfoEXT ## **/

class _VkDebugUtilsObjectTagInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetobjectType);
    static NAN_SETTER(SetobjectType);
    
    static NAN_GETTER(GetobjectHandle);
    static NAN_SETTER(SetobjectHandle);
    
    static NAN_GETTER(GettagName);
    static NAN_SETTER(SettagName);
    
    static NAN_GETTER(GettagSize);
    static NAN_SETTER(SettagSize);
    

    // real instance
    VkDebugUtilsObjectTagInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDebugUtilsObjectTagInfoEXT();
    ~_VkDebugUtilsObjectTagInfoEXT();

};

/** ## END VkDebugUtilsObjectTagInfoEXT ## **/

/** ## BEGIN VkDeviceQueueGlobalPriorityCreateInfoEXT ## **/

class _VkDeviceQueueGlobalPriorityCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetglobalPriority);
    static NAN_SETTER(SetglobalPriority);
    

    // real instance
    VkDeviceQueueGlobalPriorityCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceQueueGlobalPriorityCreateInfoEXT();
    ~_VkDeviceQueueGlobalPriorityCreateInfoEXT();

};

/** ## END VkDeviceQueueGlobalPriorityCreateInfoEXT ## **/

/** ## BEGIN VkShaderResourceUsageAMD ## **/

class _VkShaderResourceUsageAMD: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetnumUsedVgprs);
    static NAN_GETTER(GetnumUsedSgprs);
    static NAN_GETTER(GetldsSizePerLocalWorkGroup);
    static NAN_GETTER(GetldsUsageSizeInBytes);
    static NAN_GETTER(GetscratchMemUsageInBytes);

    // real instance
    VkShaderResourceUsageAMD instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkShaderResourceUsageAMD();
    ~_VkShaderResourceUsageAMD();

};

/** ## END VkShaderResourceUsageAMD ## **/

/** ## BEGIN VkShaderStatisticsInfoAMD ## **/

class _VkShaderStatisticsInfoAMD: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetshaderStageMask);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> resourceUsage;
      static NAN_GETTER(GetresourceUsage);
    static NAN_GETTER(GetnumPhysicalVgprs);
    static NAN_GETTER(GetnumPhysicalSgprs);
    static NAN_GETTER(GetnumAvailableVgprs);
    static NAN_GETTER(GetnumAvailableSgprs);
    std::vector<uint32_t>* vcomputeWorkGroupSize;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> computeWorkGroupSize;
    static NAN_GETTER(GetcomputeWorkGroupSize);

    // real instance
    VkShaderStatisticsInfoAMD instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkShaderStatisticsInfoAMD();
    ~_VkShaderStatisticsInfoAMD();

};

/** ## END VkShaderStatisticsInfoAMD ## **/

/** ## BEGIN VkPhysicalDeviceFloatControlsPropertiesKHR ## **/

class _VkPhysicalDeviceFloatControlsPropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetseparateDenormSettings);
    static NAN_GETTER(GetseparateRoundingModeSettings);
    static NAN_GETTER(GetshaderSignedZeroInfNanPreserveFloat16);
    static NAN_GETTER(GetshaderSignedZeroInfNanPreserveFloat32);
    static NAN_GETTER(GetshaderSignedZeroInfNanPreserveFloat64);
    static NAN_GETTER(GetshaderDenormPreserveFloat16);
    static NAN_GETTER(GetshaderDenormPreserveFloat32);
    static NAN_GETTER(GetshaderDenormPreserveFloat64);
    static NAN_GETTER(GetshaderDenormFlushToZeroFloat16);
    static NAN_GETTER(GetshaderDenormFlushToZeroFloat32);
    static NAN_GETTER(GetshaderDenormFlushToZeroFloat64);
    static NAN_GETTER(GetshaderRoundingModeRTEFloat16);
    static NAN_GETTER(GetshaderRoundingModeRTEFloat32);
    static NAN_GETTER(GetshaderRoundingModeRTEFloat64);
    static NAN_GETTER(GetshaderRoundingModeRTZFloat16);
    static NAN_GETTER(GetshaderRoundingModeRTZFloat32);
    static NAN_GETTER(GetshaderRoundingModeRTZFloat64);

    // real instance
    VkPhysicalDeviceFloatControlsPropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceFloatControlsPropertiesKHR();
    ~_VkPhysicalDeviceFloatControlsPropertiesKHR();

};

/** ## END VkPhysicalDeviceFloatControlsPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDeviceFloat16Int8FeaturesKHR ## **/

class _VkPhysicalDeviceFloat16Int8FeaturesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetshaderFloat16);
    static NAN_SETTER(SetshaderFloat16);
    
    static NAN_GETTER(GetshaderInt8);
    static NAN_SETTER(SetshaderInt8);
    

    // real instance
    VkPhysicalDeviceFloat16Int8FeaturesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceFloat16Int8FeaturesKHR();
    ~_VkPhysicalDeviceFloat16Int8FeaturesKHR();

};

/** ## END VkPhysicalDeviceFloat16Int8FeaturesKHR ## **/

/** ## BEGIN VkPhysicalDeviceShaderDrawParameterFeatures ## **/

class _VkPhysicalDeviceShaderDrawParameterFeatures: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetshaderDrawParameters);
    static NAN_SETTER(SetshaderDrawParameters);
    

    // real instance
    VkPhysicalDeviceShaderDrawParameterFeatures instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceShaderDrawParameterFeatures();
    ~_VkPhysicalDeviceShaderDrawParameterFeatures();

};

/** ## END VkPhysicalDeviceShaderDrawParameterFeatures ## **/

/** ## BEGIN VkDescriptorSetLayoutSupportKHR ## **/

class _VkDescriptorSetLayoutSupportKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkDescriptorSetLayoutSupportKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorSetLayoutSupportKHR();
    ~_VkDescriptorSetLayoutSupportKHR();

};

/** ## END VkDescriptorSetLayoutSupportKHR ## **/

/** ## BEGIN VkDescriptorSetLayoutSupport ## **/

class _VkDescriptorSetLayoutSupport: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getsupported);

    // real instance
    VkDescriptorSetLayoutSupport instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorSetLayoutSupport();
    ~_VkDescriptorSetLayoutSupport();

};

/** ## END VkDescriptorSetLayoutSupport ## **/

/** ## BEGIN VkPhysicalDeviceMaintenance3PropertiesKHR ## **/

class _VkPhysicalDeviceMaintenance3PropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceMaintenance3PropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMaintenance3PropertiesKHR();
    ~_VkPhysicalDeviceMaintenance3PropertiesKHR();

};

/** ## END VkPhysicalDeviceMaintenance3PropertiesKHR ## **/

/** ## BEGIN VkPhysicalDeviceMaintenance3Properties ## **/

class _VkPhysicalDeviceMaintenance3Properties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmaxPerSetDescriptors);
    static NAN_GETTER(GetmaxMemoryAllocationSize);

    // real instance
    VkPhysicalDeviceMaintenance3Properties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMaintenance3Properties();
    ~_VkPhysicalDeviceMaintenance3Properties();

};

/** ## END VkPhysicalDeviceMaintenance3Properties ## **/

/** ## BEGIN VkShaderModuleValidationCacheCreateInfoEXT ## **/

class _VkShaderModuleValidationCacheCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> validationCache;
      static NAN_GETTER(GetvalidationCache);
    static NAN_SETTER(SetvalidationCache);
    

    // real instance
    VkShaderModuleValidationCacheCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkShaderModuleValidationCacheCreateInfoEXT();
    ~_VkShaderModuleValidationCacheCreateInfoEXT();

};

/** ## END VkShaderModuleValidationCacheCreateInfoEXT ## **/

/** ## BEGIN VkValidationCacheCreateInfoEXT ## **/

class _VkValidationCacheCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetinitialDataSize);
    static NAN_SETTER(SetinitialDataSize);
    

    // real instance
    VkValidationCacheCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkValidationCacheCreateInfoEXT();
    ~_VkValidationCacheCreateInfoEXT();

};

/** ## END VkValidationCacheCreateInfoEXT ## **/

/** ## BEGIN VkImageFormatListCreateInfoKHR ## **/

class _VkImageFormatListCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetviewFormatCount);
    static NAN_SETTER(SetviewFormatCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pViewFormats;
    static NAN_GETTER(GetpViewFormats);
    static NAN_SETTER(SetpViewFormats);
    

    // real instance
    VkImageFormatListCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageFormatListCreateInfoKHR();
    ~_VkImageFormatListCreateInfoKHR();

};

/** ## END VkImageFormatListCreateInfoKHR ## **/

/** ## BEGIN VkPipelineCoverageModulationStateCreateInfoNV ## **/

class _VkPipelineCoverageModulationStateCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetcoverageModulationMode);
    static NAN_SETTER(SetcoverageModulationMode);
    
    static NAN_GETTER(GetcoverageModulationTableEnable);
    static NAN_SETTER(SetcoverageModulationTableEnable);
    
    static NAN_GETTER(GetcoverageModulationTableCount);
    static NAN_SETTER(SetcoverageModulationTableCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pCoverageModulationTable;
    static NAN_GETTER(GetpCoverageModulationTable);
    static NAN_SETTER(SetpCoverageModulationTable);
    

    // real instance
    VkPipelineCoverageModulationStateCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineCoverageModulationStateCreateInfoNV();
    ~_VkPipelineCoverageModulationStateCreateInfoNV();

};

/** ## END VkPipelineCoverageModulationStateCreateInfoNV ## **/

/** ## BEGIN VkDescriptorPoolInlineUniformBlockCreateInfoEXT ## **/

class _VkDescriptorPoolInlineUniformBlockCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmaxInlineUniformBlockBindings);
    static NAN_SETTER(SetmaxInlineUniformBlockBindings);
    

    // real instance
    VkDescriptorPoolInlineUniformBlockCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorPoolInlineUniformBlockCreateInfoEXT();
    ~_VkDescriptorPoolInlineUniformBlockCreateInfoEXT();

};

/** ## END VkDescriptorPoolInlineUniformBlockCreateInfoEXT ## **/

/** ## BEGIN VkWriteDescriptorSetInlineUniformBlockEXT ## **/

class _VkWriteDescriptorSetInlineUniformBlockEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdataSize);
    static NAN_SETTER(SetdataSize);
    

    // real instance
    VkWriteDescriptorSetInlineUniformBlockEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkWriteDescriptorSetInlineUniformBlockEXT();
    ~_VkWriteDescriptorSetInlineUniformBlockEXT();

};

/** ## END VkWriteDescriptorSetInlineUniformBlockEXT ## **/

/** ## BEGIN VkPhysicalDeviceInlineUniformBlockPropertiesEXT ## **/

class _VkPhysicalDeviceInlineUniformBlockPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmaxInlineUniformBlockSize);
    static NAN_GETTER(GetmaxPerStageDescriptorInlineUniformBlocks);
    static NAN_GETTER(GetmaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks);
    static NAN_GETTER(GetmaxDescriptorSetInlineUniformBlocks);
    static NAN_GETTER(GetmaxDescriptorSetUpdateAfterBindInlineUniformBlocks);

    // real instance
    VkPhysicalDeviceInlineUniformBlockPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceInlineUniformBlockPropertiesEXT();
    ~_VkPhysicalDeviceInlineUniformBlockPropertiesEXT();

};

/** ## END VkPhysicalDeviceInlineUniformBlockPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceInlineUniformBlockFeaturesEXT ## **/

class _VkPhysicalDeviceInlineUniformBlockFeaturesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetinlineUniformBlock);
    static NAN_SETTER(SetinlineUniformBlock);
    
    static NAN_GETTER(GetdescriptorBindingInlineUniformBlockUpdateAfterBind);
    static NAN_SETTER(SetdescriptorBindingInlineUniformBlockUpdateAfterBind);
    

    // real instance
    VkPhysicalDeviceInlineUniformBlockFeaturesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceInlineUniformBlockFeaturesEXT();
    ~_VkPhysicalDeviceInlineUniformBlockFeaturesEXT();

};

/** ## END VkPhysicalDeviceInlineUniformBlockFeaturesEXT ## **/

/** ## BEGIN VkPipelineColorBlendAdvancedStateCreateInfoEXT ## **/

class _VkPipelineColorBlendAdvancedStateCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsrcPremultiplied);
    static NAN_SETTER(SetsrcPremultiplied);
    
    static NAN_GETTER(GetdstPremultiplied);
    static NAN_SETTER(SetdstPremultiplied);
    
    static NAN_GETTER(GetblendOverlap);
    static NAN_SETTER(SetblendOverlap);
    

    // real instance
    VkPipelineColorBlendAdvancedStateCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineColorBlendAdvancedStateCreateInfoEXT();
    ~_VkPipelineColorBlendAdvancedStateCreateInfoEXT();

};

/** ## END VkPipelineColorBlendAdvancedStateCreateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT ## **/

class _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetadvancedBlendMaxColorAttachments);
    static NAN_GETTER(GetadvancedBlendIndependentBlend);
    static NAN_GETTER(GetadvancedBlendNonPremultipliedSrcColor);
    static NAN_GETTER(GetadvancedBlendNonPremultipliedDstColor);
    static NAN_GETTER(GetadvancedBlendCorrelatedOverlap);
    static NAN_GETTER(GetadvancedBlendAllOperations);

    // real instance
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT();
    ~_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT();

};

/** ## END VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT ## **/

class _VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetadvancedBlendCoherentOperations);
    static NAN_SETTER(SetadvancedBlendCoherentOperations);
    

    // real instance
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT();
    ~_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT();

};

/** ## END VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT ## **/

/** ## BEGIN VkSamplerReductionModeCreateInfoEXT ## **/

class _VkSamplerReductionModeCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetreductionMode);
    static NAN_SETTER(SetreductionMode);
    

    // real instance
    VkSamplerReductionModeCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSamplerReductionModeCreateInfoEXT();
    ~_VkSamplerReductionModeCreateInfoEXT();

};

/** ## END VkSamplerReductionModeCreateInfoEXT ## **/

/** ## BEGIN VkMultisamplePropertiesEXT ## **/

class _VkMultisamplePropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> maxSampleLocationGridSize;
      static NAN_GETTER(GetmaxSampleLocationGridSize);

    // real instance
    VkMultisamplePropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMultisamplePropertiesEXT();
    ~_VkMultisamplePropertiesEXT();

};

/** ## END VkMultisamplePropertiesEXT ## **/

/** ## BEGIN VkPhysicalDeviceSampleLocationsPropertiesEXT ## **/

class _VkPhysicalDeviceSampleLocationsPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsampleLocationSampleCounts);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> maxSampleLocationGridSize;
      static NAN_GETTER(GetmaxSampleLocationGridSize);
    std::vector<float>* vsampleLocationCoordinateRange;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> sampleLocationCoordinateRange;
    static NAN_GETTER(GetsampleLocationCoordinateRange);
    static NAN_GETTER(GetsampleLocationSubPixelBits);
    static NAN_GETTER(GetvariableSampleLocations);

    // real instance
    VkPhysicalDeviceSampleLocationsPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceSampleLocationsPropertiesEXT();
    ~_VkPhysicalDeviceSampleLocationsPropertiesEXT();

};

/** ## END VkPhysicalDeviceSampleLocationsPropertiesEXT ## **/

/** ## BEGIN VkSampleLocationEXT ## **/

class _VkSampleLocationEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getx);
    static NAN_SETTER(Setx);
    
    static NAN_GETTER(Gety);
    static NAN_SETTER(Sety);
    

    // real instance
    VkSampleLocationEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSampleLocationEXT();
    ~_VkSampleLocationEXT();

};

/** ## END VkSampleLocationEXT ## **/

/** ## BEGIN VkSampleLocationsInfoEXT ## **/

class _VkSampleLocationsInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsampleLocationsPerPixel);
    static NAN_SETTER(SetsampleLocationsPerPixel);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> sampleLocationGridSize;
      static NAN_GETTER(GetsampleLocationGridSize);
    static NAN_SETTER(SetsampleLocationGridSize);
    
    static NAN_GETTER(GetsampleLocationsCount);
    static NAN_SETTER(SetsampleLocationsCount);
    
    std::vector<VkSampleLocationEXT>* vpSampleLocations;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSampleLocations;
    static NAN_GETTER(GetpSampleLocations);
    static NAN_SETTER(SetpSampleLocations);
    

    // real instance
    VkSampleLocationsInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSampleLocationsInfoEXT();
    ~_VkSampleLocationsInfoEXT();

};

/** ## END VkSampleLocationsInfoEXT ## **/

/** ## BEGIN VkPipelineSampleLocationsStateCreateInfoEXT ## **/

class _VkPipelineSampleLocationsStateCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsampleLocationsEnable);
    static NAN_SETTER(SetsampleLocationsEnable);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> sampleLocationsInfo;
      static NAN_GETTER(GetsampleLocationsInfo);
    static NAN_SETTER(SetsampleLocationsInfo);
    

    // real instance
    VkPipelineSampleLocationsStateCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineSampleLocationsStateCreateInfoEXT();
    ~_VkPipelineSampleLocationsStateCreateInfoEXT();

};

/** ## END VkPipelineSampleLocationsStateCreateInfoEXT ## **/

/** ## BEGIN VkSubpassSampleLocationsEXT ## **/

class _VkSubpassSampleLocationsEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsubpassIndex);
    static NAN_SETTER(SetsubpassIndex);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> sampleLocationsInfo;
      static NAN_GETTER(GetsampleLocationsInfo);
    static NAN_SETTER(SetsampleLocationsInfo);
    

    // real instance
    VkSubpassSampleLocationsEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSubpassSampleLocationsEXT();
    ~_VkSubpassSampleLocationsEXT();

};

/** ## END VkSubpassSampleLocationsEXT ## **/

/** ## BEGIN VkAttachmentSampleLocationsEXT ## **/

class _VkAttachmentSampleLocationsEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetattachmentIndex);
    static NAN_SETTER(SetattachmentIndex);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> sampleLocationsInfo;
      static NAN_GETTER(GetsampleLocationsInfo);
    static NAN_SETTER(SetsampleLocationsInfo);
    

    // real instance
    VkAttachmentSampleLocationsEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkAttachmentSampleLocationsEXT();
    ~_VkAttachmentSampleLocationsEXT();

};

/** ## END VkAttachmentSampleLocationsEXT ## **/

/** ## BEGIN VkRenderPassSampleLocationsBeginInfoEXT ## **/

class _VkRenderPassSampleLocationsBeginInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetattachmentInitialSampleLocationsCount);
    static NAN_SETTER(SetattachmentInitialSampleLocationsCount);
    
    std::vector<VkAttachmentSampleLocationsEXT>* vpAttachmentInitialSampleLocations;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAttachmentInitialSampleLocations;
    static NAN_GETTER(GetpAttachmentInitialSampleLocations);
    static NAN_SETTER(SetpAttachmentInitialSampleLocations);
    
    static NAN_GETTER(GetpostSubpassSampleLocationsCount);
    static NAN_SETTER(SetpostSubpassSampleLocationsCount);
    
    std::vector<VkSubpassSampleLocationsEXT>* vpPostSubpassSampleLocations;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pPostSubpassSampleLocations;
    static NAN_GETTER(GetpPostSubpassSampleLocations);
    static NAN_SETTER(SetpPostSubpassSampleLocations);
    

    // real instance
    VkRenderPassSampleLocationsBeginInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRenderPassSampleLocationsBeginInfoEXT();
    ~_VkRenderPassSampleLocationsBeginInfoEXT();

};

/** ## END VkRenderPassSampleLocationsBeginInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT ## **/

class _VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetfilterMinmaxSingleComponentFormats);
    static NAN_GETTER(GetfilterMinmaxImageComponentMapping);

    // real instance
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT();
    ~_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT();

};

/** ## END VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT ## **/

/** ## BEGIN VkPipelineCoverageToColorStateCreateInfoNV ## **/

class _VkPipelineCoverageToColorStateCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetcoverageToColorEnable);
    static NAN_SETTER(SetcoverageToColorEnable);
    
    static NAN_GETTER(GetcoverageToColorLocation);
    static NAN_SETTER(SetcoverageToColorLocation);
    

    // real instance
    VkPipelineCoverageToColorStateCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineCoverageToColorStateCreateInfoNV();
    ~_VkPipelineCoverageToColorStateCreateInfoNV();

};

/** ## END VkPipelineCoverageToColorStateCreateInfoNV ## **/

/** ## BEGIN VkDeviceQueueInfo2 ## **/

class _VkDeviceQueueInfo2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetqueueFamilyIndex);
    static NAN_SETTER(SetqueueFamilyIndex);
    
    static NAN_GETTER(GetqueueIndex);
    static NAN_SETTER(SetqueueIndex);
    

    // real instance
    VkDeviceQueueInfo2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceQueueInfo2();
    ~_VkDeviceQueueInfo2();

};

/** ## END VkDeviceQueueInfo2 ## **/

/** ## BEGIN VkPhysicalDeviceProtectedMemoryProperties ## **/

class _VkPhysicalDeviceProtectedMemoryProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetprotectedNoFault);

    // real instance
    VkPhysicalDeviceProtectedMemoryProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceProtectedMemoryProperties();
    ~_VkPhysicalDeviceProtectedMemoryProperties();

};

/** ## END VkPhysicalDeviceProtectedMemoryProperties ## **/

/** ## BEGIN VkPhysicalDeviceProtectedMemoryFeatures ## **/

class _VkPhysicalDeviceProtectedMemoryFeatures: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetprotectedMemory);
    static NAN_SETTER(SetprotectedMemory);
    

    // real instance
    VkPhysicalDeviceProtectedMemoryFeatures instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceProtectedMemoryFeatures();
    ~_VkPhysicalDeviceProtectedMemoryFeatures();

};

/** ## END VkPhysicalDeviceProtectedMemoryFeatures ## **/

/** ## BEGIN VkProtectedSubmitInfo ## **/

class _VkProtectedSubmitInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetprotectedSubmit);
    static NAN_SETTER(SetprotectedSubmit);
    

    // real instance
    VkProtectedSubmitInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkProtectedSubmitInfo();
    ~_VkProtectedSubmitInfo();

};

/** ## END VkProtectedSubmitInfo ## **/

/** ## BEGIN VkConditionalRenderingBeginInfoEXT ## **/

class _VkConditionalRenderingBeginInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> buffer;
      static NAN_GETTER(Getbuffer);
    static NAN_SETTER(Setbuffer);
    
    static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    

    // real instance
    VkConditionalRenderingBeginInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkConditionalRenderingBeginInfoEXT();
    ~_VkConditionalRenderingBeginInfoEXT();

};

/** ## END VkConditionalRenderingBeginInfoEXT ## **/

/** ## BEGIN VkTextureLODGatherFormatPropertiesAMD ## **/

class _VkTextureLODGatherFormatPropertiesAMD: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsupportsTextureGatherLODBiasAMD);

    // real instance
    VkTextureLODGatherFormatPropertiesAMD instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkTextureLODGatherFormatPropertiesAMD();
    ~_VkTextureLODGatherFormatPropertiesAMD();

};

/** ## END VkTextureLODGatherFormatPropertiesAMD ## **/

/** ## BEGIN VkSamplerYcbcrConversionImageFormatPropertiesKHR ## **/

class _VkSamplerYcbcrConversionImageFormatPropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkSamplerYcbcrConversionImageFormatPropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSamplerYcbcrConversionImageFormatPropertiesKHR();
    ~_VkSamplerYcbcrConversionImageFormatPropertiesKHR();

};

/** ## END VkSamplerYcbcrConversionImageFormatPropertiesKHR ## **/

/** ## BEGIN VkSamplerYcbcrConversionImageFormatProperties ## **/

class _VkSamplerYcbcrConversionImageFormatProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetcombinedImageSamplerDescriptorCount);

    // real instance
    VkSamplerYcbcrConversionImageFormatProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSamplerYcbcrConversionImageFormatProperties();
    ~_VkSamplerYcbcrConversionImageFormatProperties();

};

/** ## END VkSamplerYcbcrConversionImageFormatProperties ## **/

/** ## BEGIN VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR ## **/

class _VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR();
    ~_VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR();

};

/** ## END VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR ## **/

/** ## BEGIN VkPhysicalDeviceSamplerYcbcrConversionFeatures ## **/

class _VkPhysicalDeviceSamplerYcbcrConversionFeatures: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsamplerYcbcrConversion);
    static NAN_SETTER(SetsamplerYcbcrConversion);
    

    // real instance
    VkPhysicalDeviceSamplerYcbcrConversionFeatures instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceSamplerYcbcrConversionFeatures();
    ~_VkPhysicalDeviceSamplerYcbcrConversionFeatures();

};

/** ## END VkPhysicalDeviceSamplerYcbcrConversionFeatures ## **/

/** ## BEGIN VkImagePlaneMemoryRequirementsInfoKHR ## **/

class _VkImagePlaneMemoryRequirementsInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkImagePlaneMemoryRequirementsInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImagePlaneMemoryRequirementsInfoKHR();
    ~_VkImagePlaneMemoryRequirementsInfoKHR();

};

/** ## END VkImagePlaneMemoryRequirementsInfoKHR ## **/

/** ## BEGIN VkImagePlaneMemoryRequirementsInfo ## **/

class _VkImagePlaneMemoryRequirementsInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetplaneAspect);
    static NAN_SETTER(SetplaneAspect);
    

    // real instance
    VkImagePlaneMemoryRequirementsInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImagePlaneMemoryRequirementsInfo();
    ~_VkImagePlaneMemoryRequirementsInfo();

};

/** ## END VkImagePlaneMemoryRequirementsInfo ## **/

/** ## BEGIN VkBindImagePlaneMemoryInfoKHR ## **/

class _VkBindImagePlaneMemoryInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkBindImagePlaneMemoryInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBindImagePlaneMemoryInfoKHR();
    ~_VkBindImagePlaneMemoryInfoKHR();

};

/** ## END VkBindImagePlaneMemoryInfoKHR ## **/

/** ## BEGIN VkBindImagePlaneMemoryInfo ## **/

class _VkBindImagePlaneMemoryInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetplaneAspect);
    static NAN_SETTER(SetplaneAspect);
    

    // real instance
    VkBindImagePlaneMemoryInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBindImagePlaneMemoryInfo();
    ~_VkBindImagePlaneMemoryInfo();

};

/** ## END VkBindImagePlaneMemoryInfo ## **/

/** ## BEGIN VkSamplerYcbcrConversionCreateInfoKHR ## **/

class _VkSamplerYcbcrConversionCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkSamplerYcbcrConversionCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSamplerYcbcrConversionCreateInfoKHR();
    ~_VkSamplerYcbcrConversionCreateInfoKHR();

};

/** ## END VkSamplerYcbcrConversionCreateInfoKHR ## **/

/** ## BEGIN VkComponentMapping ## **/

class _VkComponentMapping: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getr);
    static NAN_SETTER(Setr);
    
    static NAN_GETTER(Getg);
    static NAN_SETTER(Setg);
    
    static NAN_GETTER(Getb);
    static NAN_SETTER(Setb);
    
    static NAN_GETTER(Geta);
    static NAN_SETTER(Seta);
    

    // real instance
    VkComponentMapping instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkComponentMapping();
    ~_VkComponentMapping();

};

/** ## END VkComponentMapping ## **/

/** ## BEGIN VkSamplerYcbcrConversionCreateInfo ## **/

class _VkSamplerYcbcrConversionCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getformat);
    static NAN_SETTER(Setformat);
    
    static NAN_GETTER(GetycbcrModel);
    static NAN_SETTER(SetycbcrModel);
    
    static NAN_GETTER(GetycbcrRange);
    static NAN_SETTER(SetycbcrRange);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> components;
      static NAN_GETTER(Getcomponents);
    static NAN_SETTER(Setcomponents);
    
    static NAN_GETTER(GetxChromaOffset);
    static NAN_SETTER(SetxChromaOffset);
    
    static NAN_GETTER(GetyChromaOffset);
    static NAN_SETTER(SetyChromaOffset);
    
    static NAN_GETTER(GetchromaFilter);
    static NAN_SETTER(SetchromaFilter);
    
    static NAN_GETTER(GetforceExplicitReconstruction);
    static NAN_SETTER(SetforceExplicitReconstruction);
    

    // real instance
    VkSamplerYcbcrConversionCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSamplerYcbcrConversionCreateInfo();
    ~_VkSamplerYcbcrConversionCreateInfo();

};

/** ## END VkSamplerYcbcrConversionCreateInfo ## **/

/** ## BEGIN VkSamplerYcbcrConversionInfoKHR ## **/

class _VkSamplerYcbcrConversionInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkSamplerYcbcrConversionInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSamplerYcbcrConversionInfoKHR();
    ~_VkSamplerYcbcrConversionInfoKHR();

};

/** ## END VkSamplerYcbcrConversionInfoKHR ## **/

/** ## BEGIN VkSamplerYcbcrConversionInfo ## **/

class _VkSamplerYcbcrConversionInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> conversion;
      static NAN_GETTER(Getconversion);
    static NAN_SETTER(Setconversion);
    

    // real instance
    VkSamplerYcbcrConversionInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSamplerYcbcrConversionInfo();
    ~_VkSamplerYcbcrConversionInfo();

};

/** ## END VkSamplerYcbcrConversionInfo ## **/

/** ## BEGIN VkPipelineTessellationDomainOriginStateCreateInfoKHR ## **/

class _VkPipelineTessellationDomainOriginStateCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPipelineTessellationDomainOriginStateCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineTessellationDomainOriginStateCreateInfoKHR();
    ~_VkPipelineTessellationDomainOriginStateCreateInfoKHR();

};

/** ## END VkPipelineTessellationDomainOriginStateCreateInfoKHR ## **/

/** ## BEGIN VkPipelineTessellationDomainOriginStateCreateInfo ## **/

class _VkPipelineTessellationDomainOriginStateCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdomainOrigin);
    static NAN_SETTER(SetdomainOrigin);
    

    // real instance
    VkPipelineTessellationDomainOriginStateCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineTessellationDomainOriginStateCreateInfo();
    ~_VkPipelineTessellationDomainOriginStateCreateInfo();

};

/** ## END VkPipelineTessellationDomainOriginStateCreateInfo ## **/

/** ## BEGIN VkImageViewUsageCreateInfoKHR ## **/

class _VkImageViewUsageCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkImageViewUsageCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageViewUsageCreateInfoKHR();
    ~_VkImageViewUsageCreateInfoKHR();

};

/** ## END VkImageViewUsageCreateInfoKHR ## **/

/** ## BEGIN VkImageViewUsageCreateInfo ## **/

class _VkImageViewUsageCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getusage);
    static NAN_SETTER(Setusage);
    

    // real instance
    VkImageViewUsageCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageViewUsageCreateInfo();
    ~_VkImageViewUsageCreateInfo();

};

/** ## END VkImageViewUsageCreateInfo ## **/

/** ## BEGIN VkMemoryDedicatedAllocateInfoKHR ## **/

class _VkMemoryDedicatedAllocateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkMemoryDedicatedAllocateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryDedicatedAllocateInfoKHR();
    ~_VkMemoryDedicatedAllocateInfoKHR();

};

/** ## END VkMemoryDedicatedAllocateInfoKHR ## **/

/** ## BEGIN VkMemoryDedicatedAllocateInfo ## **/

class _VkMemoryDedicatedAllocateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> image;
      static NAN_GETTER(Getimage);
    static NAN_SETTER(Setimage);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> buffer;
      static NAN_GETTER(Getbuffer);
    static NAN_SETTER(Setbuffer);
    

    // real instance
    VkMemoryDedicatedAllocateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryDedicatedAllocateInfo();
    ~_VkMemoryDedicatedAllocateInfo();

};

/** ## END VkMemoryDedicatedAllocateInfo ## **/

/** ## BEGIN VkMemoryDedicatedRequirementsKHR ## **/

class _VkMemoryDedicatedRequirementsKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkMemoryDedicatedRequirementsKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryDedicatedRequirementsKHR();
    ~_VkMemoryDedicatedRequirementsKHR();

};

/** ## END VkMemoryDedicatedRequirementsKHR ## **/

/** ## BEGIN VkMemoryDedicatedRequirements ## **/

class _VkMemoryDedicatedRequirements: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetprefersDedicatedAllocation);
    static NAN_GETTER(GetrequiresDedicatedAllocation);

    // real instance
    VkMemoryDedicatedRequirements instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryDedicatedRequirements();
    ~_VkMemoryDedicatedRequirements();

};

/** ## END VkMemoryDedicatedRequirements ## **/

/** ## BEGIN VkPhysicalDevicePointClippingPropertiesKHR ## **/

class _VkPhysicalDevicePointClippingPropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDevicePointClippingPropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDevicePointClippingPropertiesKHR();
    ~_VkPhysicalDevicePointClippingPropertiesKHR();

};

/** ## END VkPhysicalDevicePointClippingPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDevicePointClippingProperties ## **/

class _VkPhysicalDevicePointClippingProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetpointClippingBehavior);

    // real instance
    VkPhysicalDevicePointClippingProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDevicePointClippingProperties();
    ~_VkPhysicalDevicePointClippingProperties();

};

/** ## END VkPhysicalDevicePointClippingProperties ## **/

/** ## BEGIN VkSparseImageMemoryRequirements2KHR ## **/

class _VkSparseImageMemoryRequirements2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkSparseImageMemoryRequirements2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSparseImageMemoryRequirements2KHR();
    ~_VkSparseImageMemoryRequirements2KHR();

};

/** ## END VkSparseImageMemoryRequirements2KHR ## **/

/** ## BEGIN VkExtent3D ## **/

class _VkExtent3D: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getwidth);
    static NAN_SETTER(Setwidth);
    
    static NAN_GETTER(Getheight);
    static NAN_SETTER(Setheight);
    
    static NAN_GETTER(Getdepth);
    static NAN_SETTER(Setdepth);
    

    // real instance
    VkExtent3D instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExtent3D();
    ~_VkExtent3D();

};

/** ## END VkExtent3D ## **/

/** ## BEGIN VkSparseImageFormatProperties ## **/

class _VkSparseImageFormatProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetaspectMask);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> imageGranularity;
      static NAN_GETTER(GetimageGranularity);
    static NAN_GETTER(Getflags);

    // real instance
    VkSparseImageFormatProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSparseImageFormatProperties();
    ~_VkSparseImageFormatProperties();

};

/** ## END VkSparseImageFormatProperties ## **/

/** ## BEGIN VkSparseImageMemoryRequirements ## **/

class _VkSparseImageMemoryRequirements: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> formatProperties;
      static NAN_GETTER(GetformatProperties);
    static NAN_GETTER(GetimageMipTailFirstLod);
    static NAN_GETTER(GetimageMipTailSize);
    static NAN_GETTER(GetimageMipTailOffset);
    static NAN_GETTER(GetimageMipTailStride);

    // real instance
    VkSparseImageMemoryRequirements instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSparseImageMemoryRequirements();
    ~_VkSparseImageMemoryRequirements();

};

/** ## END VkSparseImageMemoryRequirements ## **/

/** ## BEGIN VkSparseImageMemoryRequirements2 ## **/

class _VkSparseImageMemoryRequirements2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> memoryRequirements;
      static NAN_GETTER(GetmemoryRequirements);

    // real instance
    VkSparseImageMemoryRequirements2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSparseImageMemoryRequirements2();
    ~_VkSparseImageMemoryRequirements2();

};

/** ## END VkSparseImageMemoryRequirements2 ## **/

/** ## BEGIN VkMemoryRequirements2KHR ## **/

class _VkMemoryRequirements2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkMemoryRequirements2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryRequirements2KHR();
    ~_VkMemoryRequirements2KHR();

};

/** ## END VkMemoryRequirements2KHR ## **/

/** ## BEGIN VkMemoryRequirements ## **/

class _VkMemoryRequirements: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getsize);
    static NAN_GETTER(Getalignment);
    static NAN_GETTER(GetmemoryTypeBits);

    // real instance
    VkMemoryRequirements instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryRequirements();
    ~_VkMemoryRequirements();

};

/** ## END VkMemoryRequirements ## **/

/** ## BEGIN VkMemoryRequirements2 ## **/

class _VkMemoryRequirements2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> memoryRequirements;
      static NAN_GETTER(GetmemoryRequirements);

    // real instance
    VkMemoryRequirements2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryRequirements2();
    ~_VkMemoryRequirements2();

};

/** ## END VkMemoryRequirements2 ## **/

/** ## BEGIN VkImageSparseMemoryRequirementsInfo2KHR ## **/

class _VkImageSparseMemoryRequirementsInfo2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkImageSparseMemoryRequirementsInfo2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageSparseMemoryRequirementsInfo2KHR();
    ~_VkImageSparseMemoryRequirementsInfo2KHR();

};

/** ## END VkImageSparseMemoryRequirementsInfo2KHR ## **/

/** ## BEGIN VkImageSparseMemoryRequirementsInfo2 ## **/

class _VkImageSparseMemoryRequirementsInfo2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> image;
      static NAN_GETTER(Getimage);
    static NAN_SETTER(Setimage);
    

    // real instance
    VkImageSparseMemoryRequirementsInfo2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageSparseMemoryRequirementsInfo2();
    ~_VkImageSparseMemoryRequirementsInfo2();

};

/** ## END VkImageSparseMemoryRequirementsInfo2 ## **/

/** ## BEGIN VkImageMemoryRequirementsInfo2KHR ## **/

class _VkImageMemoryRequirementsInfo2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkImageMemoryRequirementsInfo2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageMemoryRequirementsInfo2KHR();
    ~_VkImageMemoryRequirementsInfo2KHR();

};

/** ## END VkImageMemoryRequirementsInfo2KHR ## **/

/** ## BEGIN VkImageMemoryRequirementsInfo2 ## **/

class _VkImageMemoryRequirementsInfo2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> image;
      static NAN_GETTER(Getimage);
    static NAN_SETTER(Setimage);
    

    // real instance
    VkImageMemoryRequirementsInfo2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageMemoryRequirementsInfo2();
    ~_VkImageMemoryRequirementsInfo2();

};

/** ## END VkImageMemoryRequirementsInfo2 ## **/

/** ## BEGIN VkBufferMemoryRequirementsInfo2KHR ## **/

class _VkBufferMemoryRequirementsInfo2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkBufferMemoryRequirementsInfo2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBufferMemoryRequirementsInfo2KHR();
    ~_VkBufferMemoryRequirementsInfo2KHR();

};

/** ## END VkBufferMemoryRequirementsInfo2KHR ## **/

/** ## BEGIN VkBufferMemoryRequirementsInfo2 ## **/

class _VkBufferMemoryRequirementsInfo2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> buffer;
      static NAN_GETTER(Getbuffer);
    static NAN_SETTER(Setbuffer);
    

    // real instance
    VkBufferMemoryRequirementsInfo2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBufferMemoryRequirementsInfo2();
    ~_VkBufferMemoryRequirementsInfo2();

};

/** ## END VkBufferMemoryRequirementsInfo2 ## **/

/** ## BEGIN VkPhysicalDeviceSubgroupProperties ## **/

class _VkPhysicalDeviceSubgroupProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsubgroupSize);
    static NAN_GETTER(GetsupportedStages);
    static NAN_GETTER(GetsupportedOperations);
    static NAN_GETTER(GetquadOperationsInAllStages);

    // real instance
    VkPhysicalDeviceSubgroupProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceSubgroupProperties();
    ~_VkPhysicalDeviceSubgroupProperties();

};

/** ## END VkPhysicalDeviceSubgroupProperties ## **/

/** ## BEGIN VkPhysicalDevice16BitStorageFeaturesKHR ## **/

class _VkPhysicalDevice16BitStorageFeaturesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDevice16BitStorageFeaturesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDevice16BitStorageFeaturesKHR();
    ~_VkPhysicalDevice16BitStorageFeaturesKHR();

};

/** ## END VkPhysicalDevice16BitStorageFeaturesKHR ## **/

/** ## BEGIN VkPhysicalDevice16BitStorageFeatures ## **/

class _VkPhysicalDevice16BitStorageFeatures: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetstorageBuffer16BitAccess);
    static NAN_SETTER(SetstorageBuffer16BitAccess);
    
    static NAN_GETTER(GetuniformAndStorageBuffer16BitAccess);
    static NAN_SETTER(SetuniformAndStorageBuffer16BitAccess);
    
    static NAN_GETTER(GetstoragePushConstant16);
    static NAN_SETTER(SetstoragePushConstant16);
    
    static NAN_GETTER(GetstorageInputOutput16);
    static NAN_SETTER(SetstorageInputOutput16);
    

    // real instance
    VkPhysicalDevice16BitStorageFeatures instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDevice16BitStorageFeatures();
    ~_VkPhysicalDevice16BitStorageFeatures();

};

/** ## END VkPhysicalDevice16BitStorageFeatures ## **/

/** ## BEGIN VkSharedPresentSurfaceCapabilitiesKHR ## **/

class _VkSharedPresentSurfaceCapabilitiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsharedPresentSupportedUsageFlags);

    // real instance
    VkSharedPresentSurfaceCapabilitiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSharedPresentSurfaceCapabilitiesKHR();
    ~_VkSharedPresentSurfaceCapabilitiesKHR();

};

/** ## END VkSharedPresentSurfaceCapabilitiesKHR ## **/

/** ## BEGIN VkDisplayPlaneCapabilitiesKHR ## **/

class _VkDisplayPlaneCapabilitiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsupportedAlpha);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> minSrcPosition;
      static NAN_GETTER(GetminSrcPosition);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> maxSrcPosition;
      static NAN_GETTER(GetmaxSrcPosition);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> minSrcExtent;
      static NAN_GETTER(GetminSrcExtent);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> maxSrcExtent;
      static NAN_GETTER(GetmaxSrcExtent);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> minDstPosition;
      static NAN_GETTER(GetminDstPosition);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> maxDstPosition;
      static NAN_GETTER(GetmaxDstPosition);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> minDstExtent;
      static NAN_GETTER(GetminDstExtent);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> maxDstExtent;
      static NAN_GETTER(GetmaxDstExtent);

    // real instance
    VkDisplayPlaneCapabilitiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayPlaneCapabilitiesKHR();
    ~_VkDisplayPlaneCapabilitiesKHR();

};

/** ## END VkDisplayPlaneCapabilitiesKHR ## **/

/** ## BEGIN VkDisplayPlaneCapabilities2KHR ## **/

class _VkDisplayPlaneCapabilities2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> capabilities;
      static NAN_GETTER(Getcapabilities);

    // real instance
    VkDisplayPlaneCapabilities2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayPlaneCapabilities2KHR();
    ~_VkDisplayPlaneCapabilities2KHR();

};

/** ## END VkDisplayPlaneCapabilities2KHR ## **/

/** ## BEGIN VkDisplayPlaneInfo2KHR ## **/

class _VkDisplayPlaneInfo2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> mode;
      static NAN_GETTER(Getmode);
    static NAN_SETTER(Setmode);
    
    static NAN_GETTER(GetplaneIndex);
    static NAN_SETTER(SetplaneIndex);
    

    // real instance
    VkDisplayPlaneInfo2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayPlaneInfo2KHR();
    ~_VkDisplayPlaneInfo2KHR();

};

/** ## END VkDisplayPlaneInfo2KHR ## **/

/** ## BEGIN VkDisplayModeParametersKHR ## **/

class _VkDisplayModeParametersKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> visibleRegion;
      static NAN_GETTER(GetvisibleRegion);
    static NAN_SETTER(SetvisibleRegion);
    
    static NAN_GETTER(GetrefreshRate);
    static NAN_SETTER(SetrefreshRate);
    

    // real instance
    VkDisplayModeParametersKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayModeParametersKHR();
    ~_VkDisplayModeParametersKHR();

};

/** ## END VkDisplayModeParametersKHR ## **/

/** ## BEGIN VkDisplayModePropertiesKHR ## **/

class _VkDisplayModePropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> displayMode;
      static NAN_GETTER(GetdisplayMode);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> parameters;
      static NAN_GETTER(Getparameters);

    // real instance
    VkDisplayModePropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayModePropertiesKHR();
    ~_VkDisplayModePropertiesKHR();

};

/** ## END VkDisplayModePropertiesKHR ## **/

/** ## BEGIN VkDisplayModeProperties2KHR ## **/

class _VkDisplayModeProperties2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> displayModeProperties;
      static NAN_GETTER(GetdisplayModeProperties);

    // real instance
    VkDisplayModeProperties2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayModeProperties2KHR();
    ~_VkDisplayModeProperties2KHR();

};

/** ## END VkDisplayModeProperties2KHR ## **/

/** ## BEGIN VkDisplayPlanePropertiesKHR ## **/

class _VkDisplayPlanePropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> currentDisplay;
      static NAN_GETTER(GetcurrentDisplay);
    static NAN_GETTER(GetcurrentStackIndex);

    // real instance
    VkDisplayPlanePropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayPlanePropertiesKHR();
    ~_VkDisplayPlanePropertiesKHR();

};

/** ## END VkDisplayPlanePropertiesKHR ## **/

/** ## BEGIN VkDisplayPlaneProperties2KHR ## **/

class _VkDisplayPlaneProperties2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> displayPlaneProperties;
      static NAN_GETTER(GetdisplayPlaneProperties);

    // real instance
    VkDisplayPlaneProperties2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayPlaneProperties2KHR();
    ~_VkDisplayPlaneProperties2KHR();

};

/** ## END VkDisplayPlaneProperties2KHR ## **/

/** ## BEGIN VkDisplayPropertiesKHR ## **/

class _VkDisplayPropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> display;
      static NAN_GETTER(Getdisplay);
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> displayName;
    static NAN_GETTER(GetdisplayName);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> physicalDimensions;
      static NAN_GETTER(GetphysicalDimensions);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> physicalResolution;
      static NAN_GETTER(GetphysicalResolution);
    static NAN_GETTER(GetsupportedTransforms);
    static NAN_GETTER(GetplaneReorderPossible);
    static NAN_GETTER(GetpersistentContent);

    // real instance
    VkDisplayPropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayPropertiesKHR();
    ~_VkDisplayPropertiesKHR();

};

/** ## END VkDisplayPropertiesKHR ## **/

/** ## BEGIN VkDisplayProperties2KHR ## **/

class _VkDisplayProperties2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> displayProperties;
      static NAN_GETTER(GetdisplayProperties);

    // real instance
    VkDisplayProperties2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayProperties2KHR();
    ~_VkDisplayProperties2KHR();

};

/** ## END VkDisplayProperties2KHR ## **/

/** ## BEGIN VkSurfaceFormatKHR ## **/

class _VkSurfaceFormatKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getformat);
    static NAN_GETTER(GetcolorSpace);

    // real instance
    VkSurfaceFormatKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSurfaceFormatKHR();
    ~_VkSurfaceFormatKHR();

};

/** ## END VkSurfaceFormatKHR ## **/

/** ## BEGIN VkSurfaceFormat2KHR ## **/

class _VkSurfaceFormat2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> surfaceFormat;
      static NAN_GETTER(GetsurfaceFormat);

    // real instance
    VkSurfaceFormat2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSurfaceFormat2KHR();
    ~_VkSurfaceFormat2KHR();

};

/** ## END VkSurfaceFormat2KHR ## **/

/** ## BEGIN VkSurfaceCapabilitiesKHR ## **/

class _VkSurfaceCapabilitiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetminImageCount);
    static NAN_GETTER(GetmaxImageCount);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> currentExtent;
      static NAN_GETTER(GetcurrentExtent);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> minImageExtent;
      static NAN_GETTER(GetminImageExtent);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> maxImageExtent;
      static NAN_GETTER(GetmaxImageExtent);
    static NAN_GETTER(GetmaxImageArrayLayers);
    static NAN_GETTER(GetsupportedTransforms);
    static NAN_GETTER(GetcurrentTransform);
    static NAN_GETTER(GetsupportedCompositeAlpha);
    static NAN_GETTER(GetsupportedUsageFlags);

    // real instance
    VkSurfaceCapabilitiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSurfaceCapabilitiesKHR();
    ~_VkSurfaceCapabilitiesKHR();

};

/** ## END VkSurfaceCapabilitiesKHR ## **/

/** ## BEGIN VkSurfaceCapabilities2KHR ## **/

class _VkSurfaceCapabilities2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> surfaceCapabilities;
      static NAN_GETTER(GetsurfaceCapabilities);

    // real instance
    VkSurfaceCapabilities2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSurfaceCapabilities2KHR();
    ~_VkSurfaceCapabilities2KHR();

};

/** ## END VkSurfaceCapabilities2KHR ## **/

/** ## BEGIN VkPhysicalDeviceSurfaceInfo2KHR ## **/

class _VkPhysicalDeviceSurfaceInfo2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> surface;
      static NAN_GETTER(Getsurface);
    static NAN_SETTER(Setsurface);
    

    // real instance
    VkPhysicalDeviceSurfaceInfo2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceSurfaceInfo2KHR();
    ~_VkPhysicalDeviceSurfaceInfo2KHR();

};

/** ## END VkPhysicalDeviceSurfaceInfo2KHR ## **/

/** ## BEGIN VkRenderPassInputAttachmentAspectCreateInfoKHR ## **/

class _VkRenderPassInputAttachmentAspectCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkRenderPassInputAttachmentAspectCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRenderPassInputAttachmentAspectCreateInfoKHR();
    ~_VkRenderPassInputAttachmentAspectCreateInfoKHR();

};

/** ## END VkRenderPassInputAttachmentAspectCreateInfoKHR ## **/

/** ## BEGIN VkInputAttachmentAspectReference ## **/

class _VkInputAttachmentAspectReference: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getsubpass);
    static NAN_SETTER(Setsubpass);
    
    static NAN_GETTER(GetinputAttachmentIndex);
    static NAN_SETTER(SetinputAttachmentIndex);
    
    static NAN_GETTER(GetaspectMask);
    static NAN_SETTER(SetaspectMask);
    

    // real instance
    VkInputAttachmentAspectReference instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkInputAttachmentAspectReference();
    ~_VkInputAttachmentAspectReference();

};

/** ## END VkInputAttachmentAspectReference ## **/

/** ## BEGIN VkRenderPassInputAttachmentAspectCreateInfo ## **/

class _VkRenderPassInputAttachmentAspectCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetaspectReferenceCount);
    static NAN_SETTER(SetaspectReferenceCount);
    
    std::vector<VkInputAttachmentAspectReference>* vpAspectReferences;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAspectReferences;
    static NAN_GETTER(GetpAspectReferences);
    static NAN_SETTER(SetpAspectReferences);
    

    // real instance
    VkRenderPassInputAttachmentAspectCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRenderPassInputAttachmentAspectCreateInfo();
    ~_VkRenderPassInputAttachmentAspectCreateInfo();

};

/** ## END VkRenderPassInputAttachmentAspectCreateInfo ## **/

/** ## BEGIN VkInputAttachmentAspectReferenceKHR ## **/

class _VkInputAttachmentAspectReferenceKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkInputAttachmentAspectReferenceKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkInputAttachmentAspectReferenceKHR();
    ~_VkInputAttachmentAspectReferenceKHR();

};

/** ## END VkInputAttachmentAspectReferenceKHR ## **/

/** ## BEGIN VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX ## **/

class _VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetperViewPositionAllComponents);

    // real instance
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX();
    ~_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX();

};

/** ## END VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX ## **/

/** ## BEGIN VkPipelineDiscardRectangleStateCreateInfoEXT ## **/

class _VkPipelineDiscardRectangleStateCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetdiscardRectangleMode);
    static NAN_SETTER(SetdiscardRectangleMode);
    
    static NAN_GETTER(GetdiscardRectangleCount);
    static NAN_SETTER(SetdiscardRectangleCount);
    
    std::vector<VkRect2D>* vpDiscardRectangles;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDiscardRectangles;
    static NAN_GETTER(GetpDiscardRectangles);
    static NAN_SETTER(SetpDiscardRectangles);
    

    // real instance
    VkPipelineDiscardRectangleStateCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineDiscardRectangleStateCreateInfoEXT();
    ~_VkPipelineDiscardRectangleStateCreateInfoEXT();

};

/** ## END VkPipelineDiscardRectangleStateCreateInfoEXT ## **/

/** ## BEGIN VkPhysicalDeviceDiscardRectanglePropertiesEXT ## **/

class _VkPhysicalDeviceDiscardRectanglePropertiesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmaxDiscardRectangles);

    // real instance
    VkPhysicalDeviceDiscardRectanglePropertiesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceDiscardRectanglePropertiesEXT();
    ~_VkPhysicalDeviceDiscardRectanglePropertiesEXT();

};

/** ## END VkPhysicalDeviceDiscardRectanglePropertiesEXT ## **/

/** ## BEGIN VkViewportSwizzleNV ## **/

class _VkViewportSwizzleNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getx);
    static NAN_SETTER(Setx);
    
    static NAN_GETTER(Gety);
    static NAN_SETTER(Sety);
    
    static NAN_GETTER(Getz);
    static NAN_SETTER(Setz);
    
    static NAN_GETTER(Getw);
    static NAN_SETTER(Setw);
    

    // real instance
    VkViewportSwizzleNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkViewportSwizzleNV();
    ~_VkViewportSwizzleNV();

};

/** ## END VkViewportSwizzleNV ## **/

/** ## BEGIN VkPipelineViewportSwizzleStateCreateInfoNV ## **/

class _VkPipelineViewportSwizzleStateCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetviewportCount);
    static NAN_SETTER(SetviewportCount);
    
    std::vector<VkViewportSwizzleNV>* vpViewportSwizzles;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pViewportSwizzles;
    static NAN_GETTER(GetpViewportSwizzles);
    static NAN_SETTER(SetpViewportSwizzles);
    

    // real instance
    VkPipelineViewportSwizzleStateCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineViewportSwizzleStateCreateInfoNV();
    ~_VkPipelineViewportSwizzleStateCreateInfoNV();

};

/** ## END VkPipelineViewportSwizzleStateCreateInfoNV ## **/

/** ## BEGIN VkViewportWScalingNV ## **/

class _VkViewportWScalingNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getxcoeff);
    static NAN_SETTER(Setxcoeff);
    
    static NAN_GETTER(Getycoeff);
    static NAN_SETTER(Setycoeff);
    

    // real instance
    VkViewportWScalingNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkViewportWScalingNV();
    ~_VkViewportWScalingNV();

};

/** ## END VkViewportWScalingNV ## **/

/** ## BEGIN VkPipelineViewportWScalingStateCreateInfoNV ## **/

class _VkPipelineViewportWScalingStateCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetviewportWScalingEnable);
    static NAN_SETTER(SetviewportWScalingEnable);
    
    static NAN_GETTER(GetviewportCount);
    static NAN_SETTER(SetviewportCount);
    
    std::vector<VkViewportWScalingNV>* vpViewportWScalings;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pViewportWScalings;
    static NAN_GETTER(GetpViewportWScalings);
    static NAN_SETTER(SetpViewportWScalings);
    

    // real instance
    VkPipelineViewportWScalingStateCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineViewportWScalingStateCreateInfoNV();
    ~_VkPipelineViewportWScalingStateCreateInfoNV();

};

/** ## END VkPipelineViewportWScalingStateCreateInfoNV ## **/

/** ## BEGIN VkPresentTimeGOOGLE ## **/

class _VkPresentTimeGOOGLE: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetpresentID);
    static NAN_SETTER(SetpresentID);
    
    static NAN_GETTER(GetdesiredPresentTime);
    static NAN_SETTER(SetdesiredPresentTime);
    

    // real instance
    VkPresentTimeGOOGLE instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPresentTimeGOOGLE();
    ~_VkPresentTimeGOOGLE();

};

/** ## END VkPresentTimeGOOGLE ## **/

/** ## BEGIN VkPresentTimesInfoGOOGLE ## **/

class _VkPresentTimesInfoGOOGLE: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetswapchainCount);
    static NAN_SETTER(SetswapchainCount);
    
    std::vector<VkPresentTimeGOOGLE>* vpTimes;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pTimes;
    static NAN_GETTER(GetpTimes);
    static NAN_SETTER(SetpTimes);
    

    // real instance
    VkPresentTimesInfoGOOGLE instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPresentTimesInfoGOOGLE();
    ~_VkPresentTimesInfoGOOGLE();

};

/** ## END VkPresentTimesInfoGOOGLE ## **/

/** ## BEGIN VkPastPresentationTimingGOOGLE ## **/

class _VkPastPresentationTimingGOOGLE: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetpresentID);
    static NAN_GETTER(GetdesiredPresentTime);
    static NAN_GETTER(GetactualPresentTime);
    static NAN_GETTER(GetearliestPresentTime);
    static NAN_GETTER(GetpresentMargin);

    // real instance
    VkPastPresentationTimingGOOGLE instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPastPresentationTimingGOOGLE();
    ~_VkPastPresentationTimingGOOGLE();

};

/** ## END VkPastPresentationTimingGOOGLE ## **/

/** ## BEGIN VkRefreshCycleDurationGOOGLE ## **/

class _VkRefreshCycleDurationGOOGLE: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetrefreshDuration);

    // real instance
    VkRefreshCycleDurationGOOGLE instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRefreshCycleDurationGOOGLE();
    ~_VkRefreshCycleDurationGOOGLE();

};

/** ## END VkRefreshCycleDurationGOOGLE ## **/

/** ## BEGIN VkXYColorEXT ## **/

class _VkXYColorEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getx);
    static NAN_SETTER(Setx);
    
    static NAN_GETTER(Gety);
    static NAN_SETTER(Sety);
    

    // real instance
    VkXYColorEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkXYColorEXT();
    ~_VkXYColorEXT();

};

/** ## END VkXYColorEXT ## **/

/** ## BEGIN VkHdrMetadataEXT ## **/

class _VkHdrMetadataEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> displayPrimaryRed;
      static NAN_GETTER(GetdisplayPrimaryRed);
    static NAN_SETTER(SetdisplayPrimaryRed);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> displayPrimaryGreen;
      static NAN_GETTER(GetdisplayPrimaryGreen);
    static NAN_SETTER(SetdisplayPrimaryGreen);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> displayPrimaryBlue;
      static NAN_GETTER(GetdisplayPrimaryBlue);
    static NAN_SETTER(SetdisplayPrimaryBlue);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> whitePoint;
      static NAN_GETTER(GetwhitePoint);
    static NAN_SETTER(SetwhitePoint);
    
    static NAN_GETTER(GetmaxLuminance);
    static NAN_SETTER(SetmaxLuminance);
    
    static NAN_GETTER(GetminLuminance);
    static NAN_SETTER(SetminLuminance);
    
    static NAN_GETTER(GetmaxContentLightLevel);
    static NAN_SETTER(SetmaxContentLightLevel);
    
    static NAN_GETTER(GetmaxFrameAverageLightLevel);
    static NAN_SETTER(SetmaxFrameAverageLightLevel);
    

    // real instance
    VkHdrMetadataEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkHdrMetadataEXT();
    ~_VkHdrMetadataEXT();

};

/** ## END VkHdrMetadataEXT ## **/

/** ## BEGIN VkDescriptorUpdateTemplateCreateInfoKHR ## **/

class _VkDescriptorUpdateTemplateCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkDescriptorUpdateTemplateCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorUpdateTemplateCreateInfoKHR();
    ~_VkDescriptorUpdateTemplateCreateInfoKHR();

};

/** ## END VkDescriptorUpdateTemplateCreateInfoKHR ## **/

/** ## BEGIN VkDescriptorUpdateTemplateEntry ## **/

class _VkDescriptorUpdateTemplateEntry: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetdstBinding);
    static NAN_SETTER(SetdstBinding);
    
    static NAN_GETTER(GetdstArrayElement);
    static NAN_SETTER(SetdstArrayElement);
    
    static NAN_GETTER(GetdescriptorCount);
    static NAN_SETTER(SetdescriptorCount);
    
    static NAN_GETTER(GetdescriptorType);
    static NAN_SETTER(SetdescriptorType);
    
    static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    
    static NAN_GETTER(Getstride);
    static NAN_SETTER(Setstride);
    

    // real instance
    VkDescriptorUpdateTemplateEntry instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorUpdateTemplateEntry();
    ~_VkDescriptorUpdateTemplateEntry();

};

/** ## END VkDescriptorUpdateTemplateEntry ## **/

/** ## BEGIN VkDescriptorUpdateTemplateCreateInfo ## **/

class _VkDescriptorUpdateTemplateCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetdescriptorUpdateEntryCount);
    static NAN_SETTER(SetdescriptorUpdateEntryCount);
    
    std::vector<VkDescriptorUpdateTemplateEntry>* vpDescriptorUpdateEntries;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDescriptorUpdateEntries;
    static NAN_GETTER(GetpDescriptorUpdateEntries);
    static NAN_SETTER(SetpDescriptorUpdateEntries);
    
    static NAN_GETTER(GettemplateType);
    static NAN_SETTER(SettemplateType);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> descriptorSetLayout;
      static NAN_GETTER(GetdescriptorSetLayout);
    static NAN_SETTER(SetdescriptorSetLayout);
    
    static NAN_GETTER(GetpipelineBindPoint);
    static NAN_SETTER(SetpipelineBindPoint);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pipelineLayout;
      static NAN_GETTER(GetpipelineLayout);
    static NAN_SETTER(SetpipelineLayout);
    
    static NAN_GETTER(Getset);
    static NAN_SETTER(Setset);
    

    // real instance
    VkDescriptorUpdateTemplateCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorUpdateTemplateCreateInfo();
    ~_VkDescriptorUpdateTemplateCreateInfo();

};

/** ## END VkDescriptorUpdateTemplateCreateInfo ## **/

/** ## BEGIN VkDescriptorUpdateTemplateEntryKHR ## **/

class _VkDescriptorUpdateTemplateEntryKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkDescriptorUpdateTemplateEntryKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorUpdateTemplateEntryKHR();
    ~_VkDescriptorUpdateTemplateEntryKHR();

};

/** ## END VkDescriptorUpdateTemplateEntryKHR ## **/

/** ## BEGIN VkDeviceGroupSwapchainCreateInfoKHR ## **/

class _VkDeviceGroupSwapchainCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getmodes);
    static NAN_SETTER(Setmodes);
    

    // real instance
    VkDeviceGroupSwapchainCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGroupSwapchainCreateInfoKHR();
    ~_VkDeviceGroupSwapchainCreateInfoKHR();

};

/** ## END VkDeviceGroupSwapchainCreateInfoKHR ## **/

/** ## BEGIN VkDeviceGroupDeviceCreateInfoKHR ## **/

class _VkDeviceGroupDeviceCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkDeviceGroupDeviceCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGroupDeviceCreateInfoKHR();
    ~_VkDeviceGroupDeviceCreateInfoKHR();

};

/** ## END VkDeviceGroupDeviceCreateInfoKHR ## **/

/** ## BEGIN VkDeviceGroupDeviceCreateInfo ## **/

class _VkDeviceGroupDeviceCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetphysicalDeviceCount);
    static NAN_SETTER(SetphysicalDeviceCount);
    
    std::vector<VkPhysicalDevice>* vpPhysicalDevices;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pPhysicalDevices;
    static NAN_GETTER(GetpPhysicalDevices);
    static NAN_SETTER(SetpPhysicalDevices);
    

    // real instance
    VkDeviceGroupDeviceCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGroupDeviceCreateInfo();
    ~_VkDeviceGroupDeviceCreateInfo();

};

/** ## END VkDeviceGroupDeviceCreateInfo ## **/

/** ## BEGIN VkDeviceGroupPresentInfoKHR ## **/

class _VkDeviceGroupPresentInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetswapchainCount);
    static NAN_SETTER(SetswapchainCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDeviceMasks;
    static NAN_GETTER(GetpDeviceMasks);
    static NAN_SETTER(SetpDeviceMasks);
    
    static NAN_GETTER(Getmode);
    static NAN_SETTER(Setmode);
    

    // real instance
    VkDeviceGroupPresentInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGroupPresentInfoKHR();
    ~_VkDeviceGroupPresentInfoKHR();

};

/** ## END VkDeviceGroupPresentInfoKHR ## **/

/** ## BEGIN VkAcquireNextImageInfoKHR ## **/

class _VkAcquireNextImageInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> swapchain;
      static NAN_GETTER(Getswapchain);
    static NAN_SETTER(Setswapchain);
    
    static NAN_GETTER(Gettimeout);
    static NAN_SETTER(Settimeout);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> semaphore;
      static NAN_GETTER(Getsemaphore);
    static NAN_SETTER(Setsemaphore);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> fence;
      static NAN_GETTER(Getfence);
    static NAN_SETTER(Setfence);
    
    static NAN_GETTER(GetdeviceMask);
    static NAN_SETTER(SetdeviceMask);
    

    // real instance
    VkAcquireNextImageInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkAcquireNextImageInfoKHR();
    ~_VkAcquireNextImageInfoKHR();

};

/** ## END VkAcquireNextImageInfoKHR ## **/

/** ## BEGIN VkBindImageMemorySwapchainInfoKHR ## **/

class _VkBindImageMemorySwapchainInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> swapchain;
      static NAN_GETTER(Getswapchain);
    static NAN_SETTER(Setswapchain);
    
    static NAN_GETTER(GetimageIndex);
    static NAN_SETTER(SetimageIndex);
    

    // real instance
    VkBindImageMemorySwapchainInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBindImageMemorySwapchainInfoKHR();
    ~_VkBindImageMemorySwapchainInfoKHR();

};

/** ## END VkBindImageMemorySwapchainInfoKHR ## **/

/** ## BEGIN VkImageSwapchainCreateInfoKHR ## **/

class _VkImageSwapchainCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> swapchain;
      static NAN_GETTER(Getswapchain);
    static NAN_SETTER(Setswapchain);
    

    // real instance
    VkImageSwapchainCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageSwapchainCreateInfoKHR();
    ~_VkImageSwapchainCreateInfoKHR();

};

/** ## END VkImageSwapchainCreateInfoKHR ## **/

/** ## BEGIN VkDeviceGroupPresentCapabilitiesKHR ## **/

class _VkDeviceGroupPresentCapabilitiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    std::vector<uint32_t>* vpresentMask;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> presentMask;
    static NAN_GETTER(GetpresentMask);
    static NAN_GETTER(Getmodes);

    // real instance
    VkDeviceGroupPresentCapabilitiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGroupPresentCapabilitiesKHR();
    ~_VkDeviceGroupPresentCapabilitiesKHR();

};

/** ## END VkDeviceGroupPresentCapabilitiesKHR ## **/

/** ## BEGIN VkDeviceGroupBindSparseInfoKHR ## **/

class _VkDeviceGroupBindSparseInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkDeviceGroupBindSparseInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGroupBindSparseInfoKHR();
    ~_VkDeviceGroupBindSparseInfoKHR();

};

/** ## END VkDeviceGroupBindSparseInfoKHR ## **/

/** ## BEGIN VkDeviceGroupBindSparseInfo ## **/

class _VkDeviceGroupBindSparseInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetresourceDeviceIndex);
    static NAN_SETTER(SetresourceDeviceIndex);
    
    static NAN_GETTER(GetmemoryDeviceIndex);
    static NAN_SETTER(SetmemoryDeviceIndex);
    

    // real instance
    VkDeviceGroupBindSparseInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGroupBindSparseInfo();
    ~_VkDeviceGroupBindSparseInfo();

};

/** ## END VkDeviceGroupBindSparseInfo ## **/

/** ## BEGIN VkDeviceGroupSubmitInfoKHR ## **/

class _VkDeviceGroupSubmitInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkDeviceGroupSubmitInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGroupSubmitInfoKHR();
    ~_VkDeviceGroupSubmitInfoKHR();

};

/** ## END VkDeviceGroupSubmitInfoKHR ## **/

/** ## BEGIN VkDeviceGroupSubmitInfo ## **/

class _VkDeviceGroupSubmitInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetwaitSemaphoreCount);
    static NAN_SETTER(SetwaitSemaphoreCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pWaitSemaphoreDeviceIndices;
    static NAN_GETTER(GetpWaitSemaphoreDeviceIndices);
    static NAN_SETTER(SetpWaitSemaphoreDeviceIndices);
    
    static NAN_GETTER(GetcommandBufferCount);
    static NAN_SETTER(SetcommandBufferCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pCommandBufferDeviceMasks;
    static NAN_GETTER(GetpCommandBufferDeviceMasks);
    static NAN_SETTER(SetpCommandBufferDeviceMasks);
    
    static NAN_GETTER(GetsignalSemaphoreCount);
    static NAN_SETTER(SetsignalSemaphoreCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSignalSemaphoreDeviceIndices;
    static NAN_GETTER(GetpSignalSemaphoreDeviceIndices);
    static NAN_SETTER(SetpSignalSemaphoreDeviceIndices);
    

    // real instance
    VkDeviceGroupSubmitInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGroupSubmitInfo();
    ~_VkDeviceGroupSubmitInfo();

};

/** ## END VkDeviceGroupSubmitInfo ## **/

/** ## BEGIN VkDeviceGroupCommandBufferBeginInfoKHR ## **/

class _VkDeviceGroupCommandBufferBeginInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkDeviceGroupCommandBufferBeginInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGroupCommandBufferBeginInfoKHR();
    ~_VkDeviceGroupCommandBufferBeginInfoKHR();

};

/** ## END VkDeviceGroupCommandBufferBeginInfoKHR ## **/

/** ## BEGIN VkDeviceGroupCommandBufferBeginInfo ## **/

class _VkDeviceGroupCommandBufferBeginInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdeviceMask);
    static NAN_SETTER(SetdeviceMask);
    

    // real instance
    VkDeviceGroupCommandBufferBeginInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGroupCommandBufferBeginInfo();
    ~_VkDeviceGroupCommandBufferBeginInfo();

};

/** ## END VkDeviceGroupCommandBufferBeginInfo ## **/

/** ## BEGIN VkDeviceGroupRenderPassBeginInfoKHR ## **/

class _VkDeviceGroupRenderPassBeginInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkDeviceGroupRenderPassBeginInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGroupRenderPassBeginInfoKHR();
    ~_VkDeviceGroupRenderPassBeginInfoKHR();

};

/** ## END VkDeviceGroupRenderPassBeginInfoKHR ## **/

/** ## BEGIN VkDeviceGroupRenderPassBeginInfo ## **/

class _VkDeviceGroupRenderPassBeginInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdeviceMask);
    static NAN_SETTER(SetdeviceMask);
    
    static NAN_GETTER(GetdeviceRenderAreaCount);
    static NAN_SETTER(SetdeviceRenderAreaCount);
    
    std::vector<VkRect2D>* vpDeviceRenderAreas;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDeviceRenderAreas;
    static NAN_GETTER(GetpDeviceRenderAreas);
    static NAN_SETTER(SetpDeviceRenderAreas);
    

    // real instance
    VkDeviceGroupRenderPassBeginInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGroupRenderPassBeginInfo();
    ~_VkDeviceGroupRenderPassBeginInfo();

};

/** ## END VkDeviceGroupRenderPassBeginInfo ## **/

/** ## BEGIN VkBindImageMemoryDeviceGroupInfoKHR ## **/

class _VkBindImageMemoryDeviceGroupInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkBindImageMemoryDeviceGroupInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBindImageMemoryDeviceGroupInfoKHR();
    ~_VkBindImageMemoryDeviceGroupInfoKHR();

};

/** ## END VkBindImageMemoryDeviceGroupInfoKHR ## **/

/** ## BEGIN VkBindImageMemoryDeviceGroupInfo ## **/

class _VkBindImageMemoryDeviceGroupInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdeviceIndexCount);
    static NAN_SETTER(SetdeviceIndexCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDeviceIndices;
    static NAN_GETTER(GetpDeviceIndices);
    static NAN_SETTER(SetpDeviceIndices);
    
    static NAN_GETTER(GetsplitInstanceBindRegionCount);
    static NAN_SETTER(SetsplitInstanceBindRegionCount);
    
    std::vector<VkRect2D>* vpSplitInstanceBindRegions;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSplitInstanceBindRegions;
    static NAN_GETTER(GetpSplitInstanceBindRegions);
    static NAN_SETTER(SetpSplitInstanceBindRegions);
    

    // real instance
    VkBindImageMemoryDeviceGroupInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBindImageMemoryDeviceGroupInfo();
    ~_VkBindImageMemoryDeviceGroupInfo();

};

/** ## END VkBindImageMemoryDeviceGroupInfo ## **/

/** ## BEGIN VkBindImageMemoryInfoKHR ## **/

class _VkBindImageMemoryInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkBindImageMemoryInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBindImageMemoryInfoKHR();
    ~_VkBindImageMemoryInfoKHR();

};

/** ## END VkBindImageMemoryInfoKHR ## **/

/** ## BEGIN VkBindImageMemoryInfo ## **/

class _VkBindImageMemoryInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> image;
      static NAN_GETTER(Getimage);
    static NAN_SETTER(Setimage);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> memory;
      static NAN_GETTER(Getmemory);
    static NAN_SETTER(Setmemory);
    
    static NAN_GETTER(GetmemoryOffset);
    static NAN_SETTER(SetmemoryOffset);
    

    // real instance
    VkBindImageMemoryInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBindImageMemoryInfo();
    ~_VkBindImageMemoryInfo();

};

/** ## END VkBindImageMemoryInfo ## **/

/** ## BEGIN VkBindBufferMemoryDeviceGroupInfoKHR ## **/

class _VkBindBufferMemoryDeviceGroupInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkBindBufferMemoryDeviceGroupInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBindBufferMemoryDeviceGroupInfoKHR();
    ~_VkBindBufferMemoryDeviceGroupInfoKHR();

};

/** ## END VkBindBufferMemoryDeviceGroupInfoKHR ## **/

/** ## BEGIN VkBindBufferMemoryDeviceGroupInfo ## **/

class _VkBindBufferMemoryDeviceGroupInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdeviceIndexCount);
    static NAN_SETTER(SetdeviceIndexCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDeviceIndices;
    static NAN_GETTER(GetpDeviceIndices);
    static NAN_SETTER(SetpDeviceIndices);
    

    // real instance
    VkBindBufferMemoryDeviceGroupInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBindBufferMemoryDeviceGroupInfo();
    ~_VkBindBufferMemoryDeviceGroupInfo();

};

/** ## END VkBindBufferMemoryDeviceGroupInfo ## **/

/** ## BEGIN VkBindBufferMemoryInfoKHR ## **/

class _VkBindBufferMemoryInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkBindBufferMemoryInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBindBufferMemoryInfoKHR();
    ~_VkBindBufferMemoryInfoKHR();

};

/** ## END VkBindBufferMemoryInfoKHR ## **/

/** ## BEGIN VkBindBufferMemoryInfo ## **/

class _VkBindBufferMemoryInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> buffer;
      static NAN_GETTER(Getbuffer);
    static NAN_SETTER(Setbuffer);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> memory;
      static NAN_GETTER(Getmemory);
    static NAN_SETTER(Setmemory);
    
    static NAN_GETTER(GetmemoryOffset);
    static NAN_SETTER(SetmemoryOffset);
    

    // real instance
    VkBindBufferMemoryInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBindBufferMemoryInfo();
    ~_VkBindBufferMemoryInfo();

};

/** ## END VkBindBufferMemoryInfo ## **/

/** ## BEGIN VkMemoryAllocateFlagsInfoKHR ## **/

class _VkMemoryAllocateFlagsInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkMemoryAllocateFlagsInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryAllocateFlagsInfoKHR();
    ~_VkMemoryAllocateFlagsInfoKHR();

};

/** ## END VkMemoryAllocateFlagsInfoKHR ## **/

/** ## BEGIN VkMemoryAllocateFlagsInfo ## **/

class _VkMemoryAllocateFlagsInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetdeviceMask);
    static NAN_SETTER(SetdeviceMask);
    

    // real instance
    VkMemoryAllocateFlagsInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryAllocateFlagsInfo();
    ~_VkMemoryAllocateFlagsInfo();

};

/** ## END VkMemoryAllocateFlagsInfo ## **/

/** ## BEGIN VkPhysicalDeviceGroupPropertiesKHR ## **/

class _VkPhysicalDeviceGroupPropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceGroupPropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceGroupPropertiesKHR();
    ~_VkPhysicalDeviceGroupPropertiesKHR();

};

/** ## END VkPhysicalDeviceGroupPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDeviceGroupProperties ## **/

class _VkPhysicalDeviceGroupProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetphysicalDeviceCount);
    std::vector<VkPhysicalDevice>* vphysicalDevices;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> physicalDevices;
    static NAN_GETTER(GetphysicalDevices);
    static NAN_GETTER(GetsubsetAllocation);

    // real instance
    VkPhysicalDeviceGroupProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceGroupProperties();
    ~_VkPhysicalDeviceGroupProperties();

};

/** ## END VkPhysicalDeviceGroupProperties ## **/

/** ## BEGIN VkSwapchainCounterCreateInfoEXT ## **/

class _VkSwapchainCounterCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsurfaceCounters);
    static NAN_SETTER(SetsurfaceCounters);
    

    // real instance
    VkSwapchainCounterCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSwapchainCounterCreateInfoEXT();
    ~_VkSwapchainCounterCreateInfoEXT();

};

/** ## END VkSwapchainCounterCreateInfoEXT ## **/

/** ## BEGIN VkDisplayEventInfoEXT ## **/

class _VkDisplayEventInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdisplayEvent);
    static NAN_SETTER(SetdisplayEvent);
    

    // real instance
    VkDisplayEventInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayEventInfoEXT();
    ~_VkDisplayEventInfoEXT();

};

/** ## END VkDisplayEventInfoEXT ## **/

/** ## BEGIN VkDeviceEventInfoEXT ## **/

class _VkDeviceEventInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdeviceEvent);
    static NAN_SETTER(SetdeviceEvent);
    

    // real instance
    VkDeviceEventInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceEventInfoEXT();
    ~_VkDeviceEventInfoEXT();

};

/** ## END VkDeviceEventInfoEXT ## **/

/** ## BEGIN VkDisplayPowerInfoEXT ## **/

class _VkDisplayPowerInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetpowerState);
    static NAN_SETTER(SetpowerState);
    

    // real instance
    VkDisplayPowerInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayPowerInfoEXT();
    ~_VkDisplayPowerInfoEXT();

};

/** ## END VkDisplayPowerInfoEXT ## **/

/** ## BEGIN VkSurfaceCapabilities2EXT ## **/

class _VkSurfaceCapabilities2EXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetminImageCount);
    static NAN_GETTER(GetmaxImageCount);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> currentExtent;
      static NAN_GETTER(GetcurrentExtent);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> minImageExtent;
      static NAN_GETTER(GetminImageExtent);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> maxImageExtent;
      static NAN_GETTER(GetmaxImageExtent);
    static NAN_GETTER(GetmaxImageArrayLayers);
    static NAN_GETTER(GetsupportedTransforms);
    static NAN_GETTER(GetcurrentTransform);
    static NAN_GETTER(GetsupportedCompositeAlpha);
    static NAN_GETTER(GetsupportedUsageFlags);
    static NAN_GETTER(GetsupportedSurfaceCounters);

    // real instance
    VkSurfaceCapabilities2EXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSurfaceCapabilities2EXT();
    ~_VkSurfaceCapabilities2EXT();

};

/** ## END VkSurfaceCapabilities2EXT ## **/

/** ## BEGIN VkRenderPassMultiviewCreateInfoKHR ## **/

class _VkRenderPassMultiviewCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkRenderPassMultiviewCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRenderPassMultiviewCreateInfoKHR();
    ~_VkRenderPassMultiviewCreateInfoKHR();

};

/** ## END VkRenderPassMultiviewCreateInfoKHR ## **/

/** ## BEGIN VkRenderPassMultiviewCreateInfo ## **/

class _VkRenderPassMultiviewCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsubpassCount);
    static NAN_SETTER(SetsubpassCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pViewMasks;
    static NAN_GETTER(GetpViewMasks);
    static NAN_SETTER(SetpViewMasks);
    
    static NAN_GETTER(GetdependencyCount);
    static NAN_SETTER(SetdependencyCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pViewOffsets;
    static NAN_GETTER(GetpViewOffsets);
    static NAN_SETTER(SetpViewOffsets);
    
    static NAN_GETTER(GetcorrelationMaskCount);
    static NAN_SETTER(SetcorrelationMaskCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pCorrelationMasks;
    static NAN_GETTER(GetpCorrelationMasks);
    static NAN_SETTER(SetpCorrelationMasks);
    

    // real instance
    VkRenderPassMultiviewCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRenderPassMultiviewCreateInfo();
    ~_VkRenderPassMultiviewCreateInfo();

};

/** ## END VkRenderPassMultiviewCreateInfo ## **/

/** ## BEGIN VkPhysicalDeviceMultiviewPropertiesKHR ## **/

class _VkPhysicalDeviceMultiviewPropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceMultiviewPropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMultiviewPropertiesKHR();
    ~_VkPhysicalDeviceMultiviewPropertiesKHR();

};

/** ## END VkPhysicalDeviceMultiviewPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDeviceMultiviewProperties ## **/

class _VkPhysicalDeviceMultiviewProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmaxMultiviewViewCount);
    static NAN_GETTER(GetmaxMultiviewInstanceIndex);

    // real instance
    VkPhysicalDeviceMultiviewProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMultiviewProperties();
    ~_VkPhysicalDeviceMultiviewProperties();

};

/** ## END VkPhysicalDeviceMultiviewProperties ## **/

/** ## BEGIN VkPhysicalDeviceMultiviewFeaturesKHR ## **/

class _VkPhysicalDeviceMultiviewFeaturesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceMultiviewFeaturesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMultiviewFeaturesKHR();
    ~_VkPhysicalDeviceMultiviewFeaturesKHR();

};

/** ## END VkPhysicalDeviceMultiviewFeaturesKHR ## **/

/** ## BEGIN VkPhysicalDeviceMultiviewFeatures ## **/

class _VkPhysicalDeviceMultiviewFeatures: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getmultiview);
    static NAN_SETTER(Setmultiview);
    
    static NAN_GETTER(GetmultiviewGeometryShader);
    static NAN_SETTER(SetmultiviewGeometryShader);
    
    static NAN_GETTER(GetmultiviewTessellationShader);
    static NAN_SETTER(SetmultiviewTessellationShader);
    

    // real instance
    VkPhysicalDeviceMultiviewFeatures instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMultiviewFeatures();
    ~_VkPhysicalDeviceMultiviewFeatures();

};

/** ## END VkPhysicalDeviceMultiviewFeatures ## **/

/** ## BEGIN VkFenceGetFdInfoKHR ## **/

class _VkFenceGetFdInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> fence;
      static NAN_GETTER(Getfence);
    static NAN_SETTER(Setfence);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkFenceGetFdInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkFenceGetFdInfoKHR();
    ~_VkFenceGetFdInfoKHR();

};

/** ## END VkFenceGetFdInfoKHR ## **/

/** ## BEGIN VkImportFenceFdInfoKHR ## **/

class _VkImportFenceFdInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> fence;
      static NAN_GETTER(Getfence);
    static NAN_SETTER(Setfence);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    
    static NAN_GETTER(Getfd);
    static NAN_SETTER(Setfd);
    

    // real instance
    VkImportFenceFdInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImportFenceFdInfoKHR();
    ~_VkImportFenceFdInfoKHR();

};

/** ## END VkImportFenceFdInfoKHR ## **/

/** ## BEGIN VkFenceGetWin32HandleInfoKHR ## **/

class _VkFenceGetWin32HandleInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> fence;
      static NAN_GETTER(Getfence);
    static NAN_SETTER(Setfence);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkFenceGetWin32HandleInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkFenceGetWin32HandleInfoKHR();
    ~_VkFenceGetWin32HandleInfoKHR();

};

/** ## END VkFenceGetWin32HandleInfoKHR ## **/

/** ## BEGIN VkExportFenceWin32HandleInfoKHR ## **/

class _VkExportFenceWin32HandleInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    

    // real instance
    VkExportFenceWin32HandleInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExportFenceWin32HandleInfoKHR();
    ~_VkExportFenceWin32HandleInfoKHR();

};

/** ## END VkExportFenceWin32HandleInfoKHR ## **/

/** ## BEGIN VkImportFenceWin32HandleInfoKHR ## **/

class _VkImportFenceWin32HandleInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> fence;
      static NAN_GETTER(Getfence);
    static NAN_SETTER(Setfence);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkImportFenceWin32HandleInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImportFenceWin32HandleInfoKHR();
    ~_VkImportFenceWin32HandleInfoKHR();

};

/** ## END VkImportFenceWin32HandleInfoKHR ## **/

/** ## BEGIN VkExportFenceCreateInfoKHR ## **/

class _VkExportFenceCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkExportFenceCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExportFenceCreateInfoKHR();
    ~_VkExportFenceCreateInfoKHR();

};

/** ## END VkExportFenceCreateInfoKHR ## **/

/** ## BEGIN VkExportFenceCreateInfo ## **/

class _VkExportFenceCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleTypes);
    static NAN_SETTER(SethandleTypes);
    

    // real instance
    VkExportFenceCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExportFenceCreateInfo();
    ~_VkExportFenceCreateInfo();

};

/** ## END VkExportFenceCreateInfo ## **/

/** ## BEGIN VkExternalFencePropertiesKHR ## **/

class _VkExternalFencePropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkExternalFencePropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalFencePropertiesKHR();
    ~_VkExternalFencePropertiesKHR();

};

/** ## END VkExternalFencePropertiesKHR ## **/

/** ## BEGIN VkExternalFenceProperties ## **/

class _VkExternalFenceProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetexportFromImportedHandleTypes);
    static NAN_GETTER(GetcompatibleHandleTypes);
    static NAN_GETTER(GetexternalFenceFeatures);

    // real instance
    VkExternalFenceProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalFenceProperties();
    ~_VkExternalFenceProperties();

};

/** ## END VkExternalFenceProperties ## **/

/** ## BEGIN VkPhysicalDeviceExternalFenceInfoKHR ## **/

class _VkPhysicalDeviceExternalFenceInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceExternalFenceInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceExternalFenceInfoKHR();
    ~_VkPhysicalDeviceExternalFenceInfoKHR();

};

/** ## END VkPhysicalDeviceExternalFenceInfoKHR ## **/

/** ## BEGIN VkPhysicalDeviceExternalFenceInfo ## **/

class _VkPhysicalDeviceExternalFenceInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkPhysicalDeviceExternalFenceInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceExternalFenceInfo();
    ~_VkPhysicalDeviceExternalFenceInfo();

};

/** ## END VkPhysicalDeviceExternalFenceInfo ## **/

/** ## BEGIN VkSemaphoreGetFdInfoKHR ## **/

class _VkSemaphoreGetFdInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> semaphore;
      static NAN_GETTER(Getsemaphore);
    static NAN_SETTER(Setsemaphore);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkSemaphoreGetFdInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSemaphoreGetFdInfoKHR();
    ~_VkSemaphoreGetFdInfoKHR();

};

/** ## END VkSemaphoreGetFdInfoKHR ## **/

/** ## BEGIN VkImportSemaphoreFdInfoKHR ## **/

class _VkImportSemaphoreFdInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> semaphore;
      static NAN_GETTER(Getsemaphore);
    static NAN_SETTER(Setsemaphore);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    
    static NAN_GETTER(Getfd);
    static NAN_SETTER(Setfd);
    

    // real instance
    VkImportSemaphoreFdInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImportSemaphoreFdInfoKHR();
    ~_VkImportSemaphoreFdInfoKHR();

};

/** ## END VkImportSemaphoreFdInfoKHR ## **/

/** ## BEGIN VkSemaphoreGetWin32HandleInfoKHR ## **/

class _VkSemaphoreGetWin32HandleInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> semaphore;
      static NAN_GETTER(Getsemaphore);
    static NAN_SETTER(Setsemaphore);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkSemaphoreGetWin32HandleInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSemaphoreGetWin32HandleInfoKHR();
    ~_VkSemaphoreGetWin32HandleInfoKHR();

};

/** ## END VkSemaphoreGetWin32HandleInfoKHR ## **/

/** ## BEGIN VkD3D12FenceSubmitInfoKHR ## **/

class _VkD3D12FenceSubmitInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetwaitSemaphoreValuesCount);
    static NAN_SETTER(SetwaitSemaphoreValuesCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pWaitSemaphoreValues;
    static NAN_GETTER(GetpWaitSemaphoreValues);
    static NAN_SETTER(SetpWaitSemaphoreValues);
    
    static NAN_GETTER(GetsignalSemaphoreValuesCount);
    static NAN_SETTER(SetsignalSemaphoreValuesCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSignalSemaphoreValues;
    static NAN_GETTER(GetpSignalSemaphoreValues);
    static NAN_SETTER(SetpSignalSemaphoreValues);
    

    // real instance
    VkD3D12FenceSubmitInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkD3D12FenceSubmitInfoKHR();
    ~_VkD3D12FenceSubmitInfoKHR();

};

/** ## END VkD3D12FenceSubmitInfoKHR ## **/

/** ## BEGIN VkExportSemaphoreWin32HandleInfoKHR ## **/

class _VkExportSemaphoreWin32HandleInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    

    // real instance
    VkExportSemaphoreWin32HandleInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExportSemaphoreWin32HandleInfoKHR();
    ~_VkExportSemaphoreWin32HandleInfoKHR();

};

/** ## END VkExportSemaphoreWin32HandleInfoKHR ## **/

/** ## BEGIN VkImportSemaphoreWin32HandleInfoKHR ## **/

class _VkImportSemaphoreWin32HandleInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> semaphore;
      static NAN_GETTER(Getsemaphore);
    static NAN_SETTER(Setsemaphore);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkImportSemaphoreWin32HandleInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImportSemaphoreWin32HandleInfoKHR();
    ~_VkImportSemaphoreWin32HandleInfoKHR();

};

/** ## END VkImportSemaphoreWin32HandleInfoKHR ## **/

/** ## BEGIN VkExportSemaphoreCreateInfoKHR ## **/

class _VkExportSemaphoreCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkExportSemaphoreCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExportSemaphoreCreateInfoKHR();
    ~_VkExportSemaphoreCreateInfoKHR();

};

/** ## END VkExportSemaphoreCreateInfoKHR ## **/

/** ## BEGIN VkExportSemaphoreCreateInfo ## **/

class _VkExportSemaphoreCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleTypes);
    static NAN_SETTER(SethandleTypes);
    

    // real instance
    VkExportSemaphoreCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExportSemaphoreCreateInfo();
    ~_VkExportSemaphoreCreateInfo();

};

/** ## END VkExportSemaphoreCreateInfo ## **/

/** ## BEGIN VkExternalSemaphorePropertiesKHR ## **/

class _VkExternalSemaphorePropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkExternalSemaphorePropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalSemaphorePropertiesKHR();
    ~_VkExternalSemaphorePropertiesKHR();

};

/** ## END VkExternalSemaphorePropertiesKHR ## **/

/** ## BEGIN VkExternalSemaphoreProperties ## **/

class _VkExternalSemaphoreProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetexportFromImportedHandleTypes);
    static NAN_GETTER(GetcompatibleHandleTypes);
    static NAN_GETTER(GetexternalSemaphoreFeatures);

    // real instance
    VkExternalSemaphoreProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalSemaphoreProperties();
    ~_VkExternalSemaphoreProperties();

};

/** ## END VkExternalSemaphoreProperties ## **/

/** ## BEGIN VkPhysicalDeviceExternalSemaphoreInfoKHR ## **/

class _VkPhysicalDeviceExternalSemaphoreInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceExternalSemaphoreInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceExternalSemaphoreInfoKHR();
    ~_VkPhysicalDeviceExternalSemaphoreInfoKHR();

};

/** ## END VkPhysicalDeviceExternalSemaphoreInfoKHR ## **/

/** ## BEGIN VkPhysicalDeviceExternalSemaphoreInfo ## **/

class _VkPhysicalDeviceExternalSemaphoreInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkPhysicalDeviceExternalSemaphoreInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceExternalSemaphoreInfo();
    ~_VkPhysicalDeviceExternalSemaphoreInfo();

};

/** ## END VkPhysicalDeviceExternalSemaphoreInfo ## **/

/** ## BEGIN VkWin32KeyedMutexAcquireReleaseInfoKHR ## **/

class _VkWin32KeyedMutexAcquireReleaseInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetacquireCount);
    static NAN_SETTER(SetacquireCount);
    
    std::vector<VkDeviceMemory>* vpAcquireSyncs;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAcquireSyncs;
    static NAN_GETTER(GetpAcquireSyncs);
    static NAN_SETTER(SetpAcquireSyncs);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAcquireKeys;
    static NAN_GETTER(GetpAcquireKeys);
    static NAN_SETTER(SetpAcquireKeys);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAcquireTimeouts;
    static NAN_GETTER(GetpAcquireTimeouts);
    static NAN_SETTER(SetpAcquireTimeouts);
    
    static NAN_GETTER(GetreleaseCount);
    static NAN_SETTER(SetreleaseCount);
    
    std::vector<VkDeviceMemory>* vpReleaseSyncs;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pReleaseSyncs;
    static NAN_GETTER(GetpReleaseSyncs);
    static NAN_SETTER(SetpReleaseSyncs);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pReleaseKeys;
    static NAN_GETTER(GetpReleaseKeys);
    static NAN_SETTER(SetpReleaseKeys);
    

    // real instance
    VkWin32KeyedMutexAcquireReleaseInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkWin32KeyedMutexAcquireReleaseInfoKHR();
    ~_VkWin32KeyedMutexAcquireReleaseInfoKHR();

};

/** ## END VkWin32KeyedMutexAcquireReleaseInfoKHR ## **/

/** ## BEGIN VkMemoryGetFdInfoKHR ## **/

class _VkMemoryGetFdInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> memory;
      static NAN_GETTER(Getmemory);
    static NAN_SETTER(Setmemory);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkMemoryGetFdInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryGetFdInfoKHR();
    ~_VkMemoryGetFdInfoKHR();

};

/** ## END VkMemoryGetFdInfoKHR ## **/

/** ## BEGIN VkMemoryFdPropertiesKHR ## **/

class _VkMemoryFdPropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmemoryTypeBits);

    // real instance
    VkMemoryFdPropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryFdPropertiesKHR();
    ~_VkMemoryFdPropertiesKHR();

};

/** ## END VkMemoryFdPropertiesKHR ## **/

/** ## BEGIN VkImportMemoryFdInfoKHR ## **/

class _VkImportMemoryFdInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    
    static NAN_GETTER(Getfd);
    static NAN_SETTER(Setfd);
    

    // real instance
    VkImportMemoryFdInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImportMemoryFdInfoKHR();
    ~_VkImportMemoryFdInfoKHR();

};

/** ## END VkImportMemoryFdInfoKHR ## **/

/** ## BEGIN VkMemoryGetWin32HandleInfoKHR ## **/

class _VkMemoryGetWin32HandleInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> memory;
      static NAN_GETTER(Getmemory);
    static NAN_SETTER(Setmemory);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkMemoryGetWin32HandleInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryGetWin32HandleInfoKHR();
    ~_VkMemoryGetWin32HandleInfoKHR();

};

/** ## END VkMemoryGetWin32HandleInfoKHR ## **/

/** ## BEGIN VkMemoryWin32HandlePropertiesKHR ## **/

class _VkMemoryWin32HandlePropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmemoryTypeBits);

    // real instance
    VkMemoryWin32HandlePropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryWin32HandlePropertiesKHR();
    ~_VkMemoryWin32HandlePropertiesKHR();

};

/** ## END VkMemoryWin32HandlePropertiesKHR ## **/

/** ## BEGIN VkExportMemoryWin32HandleInfoKHR ## **/

class _VkExportMemoryWin32HandleInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    

    // real instance
    VkExportMemoryWin32HandleInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExportMemoryWin32HandleInfoKHR();
    ~_VkExportMemoryWin32HandleInfoKHR();

};

/** ## END VkExportMemoryWin32HandleInfoKHR ## **/

/** ## BEGIN VkImportMemoryWin32HandleInfoKHR ## **/

class _VkImportMemoryWin32HandleInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkImportMemoryWin32HandleInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImportMemoryWin32HandleInfoKHR();
    ~_VkImportMemoryWin32HandleInfoKHR();

};

/** ## END VkImportMemoryWin32HandleInfoKHR ## **/

/** ## BEGIN VkExportMemoryAllocateInfoKHR ## **/

class _VkExportMemoryAllocateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkExportMemoryAllocateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExportMemoryAllocateInfoKHR();
    ~_VkExportMemoryAllocateInfoKHR();

};

/** ## END VkExportMemoryAllocateInfoKHR ## **/

/** ## BEGIN VkExportMemoryAllocateInfo ## **/

class _VkExportMemoryAllocateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleTypes);
    static NAN_SETTER(SethandleTypes);
    

    // real instance
    VkExportMemoryAllocateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExportMemoryAllocateInfo();
    ~_VkExportMemoryAllocateInfo();

};

/** ## END VkExportMemoryAllocateInfo ## **/

/** ## BEGIN VkExternalMemoryBufferCreateInfoKHR ## **/

class _VkExternalMemoryBufferCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkExternalMemoryBufferCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalMemoryBufferCreateInfoKHR();
    ~_VkExternalMemoryBufferCreateInfoKHR();

};

/** ## END VkExternalMemoryBufferCreateInfoKHR ## **/

/** ## BEGIN VkExternalMemoryBufferCreateInfo ## **/

class _VkExternalMemoryBufferCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleTypes);
    static NAN_SETTER(SethandleTypes);
    

    // real instance
    VkExternalMemoryBufferCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalMemoryBufferCreateInfo();
    ~_VkExternalMemoryBufferCreateInfo();

};

/** ## END VkExternalMemoryBufferCreateInfo ## **/

/** ## BEGIN VkExternalMemoryImageCreateInfoKHR ## **/

class _VkExternalMemoryImageCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkExternalMemoryImageCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalMemoryImageCreateInfoKHR();
    ~_VkExternalMemoryImageCreateInfoKHR();

};

/** ## END VkExternalMemoryImageCreateInfoKHR ## **/

/** ## BEGIN VkExternalMemoryImageCreateInfo ## **/

class _VkExternalMemoryImageCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleTypes);
    static NAN_SETTER(SethandleTypes);
    

    // real instance
    VkExternalMemoryImageCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalMemoryImageCreateInfo();
    ~_VkExternalMemoryImageCreateInfo();

};

/** ## END VkExternalMemoryImageCreateInfo ## **/

/** ## BEGIN VkPhysicalDeviceIDPropertiesKHR ## **/

class _VkPhysicalDeviceIDPropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceIDPropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceIDPropertiesKHR();
    ~_VkPhysicalDeviceIDPropertiesKHR();

};

/** ## END VkPhysicalDeviceIDPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDeviceIDProperties ## **/

class _VkPhysicalDeviceIDProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    std::vector<uint8_t>* vdeviceUUID;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> deviceUUID;
    static NAN_GETTER(GetdeviceUUID);
    std::vector<uint8_t>* vdriverUUID;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> driverUUID;
    static NAN_GETTER(GetdriverUUID);
    std::vector<uint8_t>* vdeviceLUID;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> deviceLUID;
    static NAN_GETTER(GetdeviceLUID);
    static NAN_GETTER(GetdeviceNodeMask);
    static NAN_GETTER(GetdeviceLUIDValid);

    // real instance
    VkPhysicalDeviceIDProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceIDProperties();
    ~_VkPhysicalDeviceIDProperties();

};

/** ## END VkPhysicalDeviceIDProperties ## **/

/** ## BEGIN VkExternalBufferPropertiesKHR ## **/

class _VkExternalBufferPropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkExternalBufferPropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalBufferPropertiesKHR();
    ~_VkExternalBufferPropertiesKHR();

};

/** ## END VkExternalBufferPropertiesKHR ## **/

/** ## BEGIN VkExternalMemoryProperties ## **/

class _VkExternalMemoryProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetexternalMemoryFeatures);
    static NAN_GETTER(GetexportFromImportedHandleTypes);
    static NAN_GETTER(GetcompatibleHandleTypes);

    // real instance
    VkExternalMemoryProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalMemoryProperties();
    ~_VkExternalMemoryProperties();

};

/** ## END VkExternalMemoryProperties ## **/

/** ## BEGIN VkExternalBufferProperties ## **/

class _VkExternalBufferProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> externalMemoryProperties;
      static NAN_GETTER(GetexternalMemoryProperties);

    // real instance
    VkExternalBufferProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalBufferProperties();
    ~_VkExternalBufferProperties();

};

/** ## END VkExternalBufferProperties ## **/

/** ## BEGIN VkPhysicalDeviceExternalBufferInfoKHR ## **/

class _VkPhysicalDeviceExternalBufferInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceExternalBufferInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceExternalBufferInfoKHR();
    ~_VkPhysicalDeviceExternalBufferInfoKHR();

};

/** ## END VkPhysicalDeviceExternalBufferInfoKHR ## **/

/** ## BEGIN VkPhysicalDeviceExternalBufferInfo ## **/

class _VkPhysicalDeviceExternalBufferInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(Getusage);
    static NAN_SETTER(Setusage);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkPhysicalDeviceExternalBufferInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceExternalBufferInfo();
    ~_VkPhysicalDeviceExternalBufferInfo();

};

/** ## END VkPhysicalDeviceExternalBufferInfo ## **/

/** ## BEGIN VkExternalImageFormatPropertiesKHR ## **/

class _VkExternalImageFormatPropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkExternalImageFormatPropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalImageFormatPropertiesKHR();
    ~_VkExternalImageFormatPropertiesKHR();

};

/** ## END VkExternalImageFormatPropertiesKHR ## **/

/** ## BEGIN VkExternalImageFormatProperties ## **/

class _VkExternalImageFormatProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> externalMemoryProperties;
      static NAN_GETTER(GetexternalMemoryProperties);

    // real instance
    VkExternalImageFormatProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalImageFormatProperties();
    ~_VkExternalImageFormatProperties();

};

/** ## END VkExternalImageFormatProperties ## **/

/** ## BEGIN VkPhysicalDeviceExternalImageFormatInfoKHR ## **/

class _VkPhysicalDeviceExternalImageFormatInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceExternalImageFormatInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceExternalImageFormatInfoKHR();
    ~_VkPhysicalDeviceExternalImageFormatInfoKHR();

};

/** ## END VkPhysicalDeviceExternalImageFormatInfoKHR ## **/

/** ## BEGIN VkPhysicalDeviceExternalImageFormatInfo ## **/

class _VkPhysicalDeviceExternalImageFormatInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkPhysicalDeviceExternalImageFormatInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceExternalImageFormatInfo();
    ~_VkPhysicalDeviceExternalImageFormatInfo();

};

/** ## END VkPhysicalDeviceExternalImageFormatInfo ## **/

/** ## BEGIN VkExternalMemoryPropertiesKHR ## **/

class _VkExternalMemoryPropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkExternalMemoryPropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalMemoryPropertiesKHR();
    ~_VkExternalMemoryPropertiesKHR();

};

/** ## END VkExternalMemoryPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDeviceVariablePointerFeaturesKHR ## **/

class _VkPhysicalDeviceVariablePointerFeaturesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceVariablePointerFeaturesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceVariablePointerFeaturesKHR();
    ~_VkPhysicalDeviceVariablePointerFeaturesKHR();

};

/** ## END VkPhysicalDeviceVariablePointerFeaturesKHR ## **/

/** ## BEGIN VkPhysicalDeviceVariablePointerFeatures ## **/

class _VkPhysicalDeviceVariablePointerFeatures: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetvariablePointersStorageBuffer);
    static NAN_SETTER(SetvariablePointersStorageBuffer);
    
    static NAN_GETTER(GetvariablePointers);
    static NAN_SETTER(SetvariablePointers);
    

    // real instance
    VkPhysicalDeviceVariablePointerFeatures instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceVariablePointerFeatures();
    ~_VkPhysicalDeviceVariablePointerFeatures();

};

/** ## END VkPhysicalDeviceVariablePointerFeatures ## **/

/** ## BEGIN VkRectLayerKHR ## **/

class _VkRectLayerKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> offset;
      static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> extent;
      static NAN_GETTER(Getextent);
    static NAN_SETTER(Setextent);
    
    static NAN_GETTER(Getlayer);
    static NAN_SETTER(Setlayer);
    

    // real instance
    VkRectLayerKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRectLayerKHR();
    ~_VkRectLayerKHR();

};

/** ## END VkRectLayerKHR ## **/

/** ## BEGIN VkPresentRegionKHR ## **/

class _VkPresentRegionKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetrectangleCount);
    static NAN_SETTER(SetrectangleCount);
    
    std::vector<VkRectLayerKHR>* vpRectangles;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pRectangles;
    static NAN_GETTER(GetpRectangles);
    static NAN_SETTER(SetpRectangles);
    

    // real instance
    VkPresentRegionKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPresentRegionKHR();
    ~_VkPresentRegionKHR();

};

/** ## END VkPresentRegionKHR ## **/

/** ## BEGIN VkPresentRegionsKHR ## **/

class _VkPresentRegionsKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetswapchainCount);
    static NAN_SETTER(SetswapchainCount);
    
    std::vector<VkPresentRegionKHR>* vpRegions;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pRegions;
    static NAN_GETTER(GetpRegions);
    static NAN_SETTER(SetpRegions);
    

    // real instance
    VkPresentRegionsKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPresentRegionsKHR();
    ~_VkPresentRegionsKHR();

};

/** ## END VkPresentRegionsKHR ## **/

/** ## BEGIN VkConformanceVersionKHR ## **/

class _VkConformanceVersionKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getmajor);
    static NAN_SETTER(Setmajor);
    
    static NAN_GETTER(Getminor);
    static NAN_SETTER(Setminor);
    
    static NAN_GETTER(Getsubminor);
    static NAN_SETTER(Setsubminor);
    
    static NAN_GETTER(Getpatch);
    static NAN_SETTER(Setpatch);
    

    // real instance
    VkConformanceVersionKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkConformanceVersionKHR();
    ~_VkConformanceVersionKHR();

};

/** ## END VkConformanceVersionKHR ## **/

/** ## BEGIN VkPhysicalDeviceDriverPropertiesKHR ## **/

class _VkPhysicalDeviceDriverPropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdriverID);
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> driverName;
    static NAN_GETTER(GetdriverName);
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> driverInfo;
    static NAN_GETTER(GetdriverInfo);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> conformanceVersion;
      static NAN_GETTER(GetconformanceVersion);

    // real instance
    VkPhysicalDeviceDriverPropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceDriverPropertiesKHR();
    ~_VkPhysicalDeviceDriverPropertiesKHR();

};

/** ## END VkPhysicalDeviceDriverPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDevicePushDescriptorPropertiesKHR ## **/

class _VkPhysicalDevicePushDescriptorPropertiesKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmaxPushDescriptors);

    // real instance
    VkPhysicalDevicePushDescriptorPropertiesKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDevicePushDescriptorPropertiesKHR();
    ~_VkPhysicalDevicePushDescriptorPropertiesKHR();

};

/** ## END VkPhysicalDevicePushDescriptorPropertiesKHR ## **/

/** ## BEGIN VkPhysicalDeviceSparseImageFormatInfo2KHR ## **/

class _VkPhysicalDeviceSparseImageFormatInfo2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceSparseImageFormatInfo2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceSparseImageFormatInfo2KHR();
    ~_VkPhysicalDeviceSparseImageFormatInfo2KHR();

};

/** ## END VkPhysicalDeviceSparseImageFormatInfo2KHR ## **/

/** ## BEGIN VkPhysicalDeviceSparseImageFormatInfo2 ## **/

class _VkPhysicalDeviceSparseImageFormatInfo2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getformat);
    static NAN_SETTER(Setformat);
    
    static NAN_GETTER(Gettype);
    static NAN_SETTER(Settype);
    
    static NAN_GETTER(Getsamples);
    static NAN_SETTER(Setsamples);
    
    static NAN_GETTER(Getusage);
    static NAN_SETTER(Setusage);
    
    static NAN_GETTER(Gettiling);
    static NAN_SETTER(Settiling);
    

    // real instance
    VkPhysicalDeviceSparseImageFormatInfo2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceSparseImageFormatInfo2();
    ~_VkPhysicalDeviceSparseImageFormatInfo2();

};

/** ## END VkPhysicalDeviceSparseImageFormatInfo2 ## **/

/** ## BEGIN VkSparseImageFormatProperties2KHR ## **/

class _VkSparseImageFormatProperties2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkSparseImageFormatProperties2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSparseImageFormatProperties2KHR();
    ~_VkSparseImageFormatProperties2KHR();

};

/** ## END VkSparseImageFormatProperties2KHR ## **/

/** ## BEGIN VkSparseImageFormatProperties2 ## **/

class _VkSparseImageFormatProperties2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> properties;
      static NAN_GETTER(Getproperties);

    // real instance
    VkSparseImageFormatProperties2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSparseImageFormatProperties2();
    ~_VkSparseImageFormatProperties2();

};

/** ## END VkSparseImageFormatProperties2 ## **/

/** ## BEGIN VkPhysicalDeviceMemoryProperties2KHR ## **/

class _VkPhysicalDeviceMemoryProperties2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceMemoryProperties2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMemoryProperties2KHR();
    ~_VkPhysicalDeviceMemoryProperties2KHR();

};

/** ## END VkPhysicalDeviceMemoryProperties2KHR ## **/

/** ## BEGIN VkMemoryHeap ## **/

class _VkMemoryHeap: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getsize);
    static NAN_GETTER(Getflags);

    // real instance
    VkMemoryHeap instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryHeap();
    ~_VkMemoryHeap();

};

/** ## END VkMemoryHeap ## **/

/** ## BEGIN VkMemoryType ## **/

class _VkMemoryType: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetpropertyFlags);
    static NAN_GETTER(GetheapIndex);

    // real instance
    VkMemoryType instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryType();
    ~_VkMemoryType();

};

/** ## END VkMemoryType ## **/

/** ## BEGIN VkPhysicalDeviceMemoryProperties ## **/

class _VkPhysicalDeviceMemoryProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetmemoryTypeCount);
    std::vector<VkMemoryType>* vmemoryTypes;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> memoryTypes;
    static NAN_GETTER(GetmemoryTypes);
    static NAN_GETTER(GetmemoryHeapCount);
    std::vector<VkMemoryHeap>* vmemoryHeaps;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> memoryHeaps;
    static NAN_GETTER(GetmemoryHeaps);

    // real instance
    VkPhysicalDeviceMemoryProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMemoryProperties();
    ~_VkPhysicalDeviceMemoryProperties();

};

/** ## END VkPhysicalDeviceMemoryProperties ## **/

/** ## BEGIN VkPhysicalDeviceMemoryProperties2 ## **/

class _VkPhysicalDeviceMemoryProperties2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> memoryProperties;
      static NAN_GETTER(GetmemoryProperties);

    // real instance
    VkPhysicalDeviceMemoryProperties2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceMemoryProperties2();
    ~_VkPhysicalDeviceMemoryProperties2();

};

/** ## END VkPhysicalDeviceMemoryProperties2 ## **/

/** ## BEGIN VkQueueFamilyProperties2KHR ## **/

class _VkQueueFamilyProperties2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkQueueFamilyProperties2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkQueueFamilyProperties2KHR();
    ~_VkQueueFamilyProperties2KHR();

};

/** ## END VkQueueFamilyProperties2KHR ## **/

/** ## BEGIN VkQueueFamilyProperties ## **/

class _VkQueueFamilyProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetqueueFlags);
    static NAN_GETTER(GetqueueCount);
    static NAN_GETTER(GettimestampValidBits);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> minImageTransferGranularity;
      static NAN_GETTER(GetminImageTransferGranularity);

    // real instance
    VkQueueFamilyProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkQueueFamilyProperties();
    ~_VkQueueFamilyProperties();

};

/** ## END VkQueueFamilyProperties ## **/

/** ## BEGIN VkQueueFamilyProperties2 ## **/

class _VkQueueFamilyProperties2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> queueFamilyProperties;
      static NAN_GETTER(GetqueueFamilyProperties);

    // real instance
    VkQueueFamilyProperties2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkQueueFamilyProperties2();
    ~_VkQueueFamilyProperties2();

};

/** ## END VkQueueFamilyProperties2 ## **/

/** ## BEGIN VkPhysicalDeviceImageFormatInfo2KHR ## **/

class _VkPhysicalDeviceImageFormatInfo2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceImageFormatInfo2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceImageFormatInfo2KHR();
    ~_VkPhysicalDeviceImageFormatInfo2KHR();

};

/** ## END VkPhysicalDeviceImageFormatInfo2KHR ## **/

/** ## BEGIN VkPhysicalDeviceImageFormatInfo2 ## **/

class _VkPhysicalDeviceImageFormatInfo2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getformat);
    static NAN_SETTER(Setformat);
    
    static NAN_GETTER(Gettype);
    static NAN_SETTER(Settype);
    
    static NAN_GETTER(Gettiling);
    static NAN_SETTER(Settiling);
    
    static NAN_GETTER(Getusage);
    static NAN_SETTER(Setusage);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    

    // real instance
    VkPhysicalDeviceImageFormatInfo2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceImageFormatInfo2();
    ~_VkPhysicalDeviceImageFormatInfo2();

};

/** ## END VkPhysicalDeviceImageFormatInfo2 ## **/

/** ## BEGIN VkImageFormatProperties2KHR ## **/

class _VkImageFormatProperties2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkImageFormatProperties2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageFormatProperties2KHR();
    ~_VkImageFormatProperties2KHR();

};

/** ## END VkImageFormatProperties2KHR ## **/

/** ## BEGIN VkImageFormatProperties ## **/

class _VkImageFormatProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> maxExtent;
      static NAN_GETTER(GetmaxExtent);
    static NAN_GETTER(GetmaxMipLevels);
    static NAN_GETTER(GetmaxArrayLayers);
    static NAN_GETTER(GetsampleCounts);
    static NAN_GETTER(GetmaxResourceSize);

    // real instance
    VkImageFormatProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageFormatProperties();
    ~_VkImageFormatProperties();

};

/** ## END VkImageFormatProperties ## **/

/** ## BEGIN VkImageFormatProperties2 ## **/

class _VkImageFormatProperties2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> imageFormatProperties;
      static NAN_GETTER(GetimageFormatProperties);

    // real instance
    VkImageFormatProperties2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageFormatProperties2();
    ~_VkImageFormatProperties2();

};

/** ## END VkImageFormatProperties2 ## **/

/** ## BEGIN VkFormatProperties2KHR ## **/

class _VkFormatProperties2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkFormatProperties2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkFormatProperties2KHR();
    ~_VkFormatProperties2KHR();

};

/** ## END VkFormatProperties2KHR ## **/

/** ## BEGIN VkFormatProperties ## **/

class _VkFormatProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetlinearTilingFeatures);
    static NAN_GETTER(GetoptimalTilingFeatures);
    static NAN_GETTER(GetbufferFeatures);

    // real instance
    VkFormatProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkFormatProperties();
    ~_VkFormatProperties();

};

/** ## END VkFormatProperties ## **/

/** ## BEGIN VkFormatProperties2 ## **/

class _VkFormatProperties2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> formatProperties;
      static NAN_GETTER(GetformatProperties);

    // real instance
    VkFormatProperties2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkFormatProperties2();
    ~_VkFormatProperties2();

};

/** ## END VkFormatProperties2 ## **/

/** ## BEGIN VkPhysicalDeviceProperties2KHR ## **/

class _VkPhysicalDeviceProperties2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceProperties2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceProperties2KHR();
    ~_VkPhysicalDeviceProperties2KHR();

};

/** ## END VkPhysicalDeviceProperties2KHR ## **/

/** ## BEGIN VkPhysicalDeviceSparseProperties ## **/

class _VkPhysicalDeviceSparseProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetresidencyStandard2DBlockShape);
    static NAN_GETTER(GetresidencyStandard2DMultisampleBlockShape);
    static NAN_GETTER(GetresidencyStandard3DBlockShape);
    static NAN_GETTER(GetresidencyAlignedMipSize);
    static NAN_GETTER(GetresidencyNonResidentStrict);

    // real instance
    VkPhysicalDeviceSparseProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceSparseProperties();
    ~_VkPhysicalDeviceSparseProperties();

};

/** ## END VkPhysicalDeviceSparseProperties ## **/

/** ## BEGIN VkPhysicalDeviceLimits ## **/

class _VkPhysicalDeviceLimits: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetmaxImageDimension1D);
    static NAN_GETTER(GetmaxImageDimension2D);
    static NAN_GETTER(GetmaxImageDimension3D);
    static NAN_GETTER(GetmaxImageDimensionCube);
    static NAN_GETTER(GetmaxImageArrayLayers);
    static NAN_GETTER(GetmaxTexelBufferElements);
    static NAN_GETTER(GetmaxUniformBufferRange);
    static NAN_GETTER(GetmaxStorageBufferRange);
    static NAN_GETTER(GetmaxPushConstantsSize);
    static NAN_GETTER(GetmaxMemoryAllocationCount);
    static NAN_GETTER(GetmaxSamplerAllocationCount);
    static NAN_GETTER(GetbufferImageGranularity);
    static NAN_GETTER(GetsparseAddressSpaceSize);
    static NAN_GETTER(GetmaxBoundDescriptorSets);
    static NAN_GETTER(GetmaxPerStageDescriptorSamplers);
    static NAN_GETTER(GetmaxPerStageDescriptorUniformBuffers);
    static NAN_GETTER(GetmaxPerStageDescriptorStorageBuffers);
    static NAN_GETTER(GetmaxPerStageDescriptorSampledImages);
    static NAN_GETTER(GetmaxPerStageDescriptorStorageImages);
    static NAN_GETTER(GetmaxPerStageDescriptorInputAttachments);
    static NAN_GETTER(GetmaxPerStageResources);
    static NAN_GETTER(GetmaxDescriptorSetSamplers);
    static NAN_GETTER(GetmaxDescriptorSetUniformBuffers);
    static NAN_GETTER(GetmaxDescriptorSetUniformBuffersDynamic);
    static NAN_GETTER(GetmaxDescriptorSetStorageBuffers);
    static NAN_GETTER(GetmaxDescriptorSetStorageBuffersDynamic);
    static NAN_GETTER(GetmaxDescriptorSetSampledImages);
    static NAN_GETTER(GetmaxDescriptorSetStorageImages);
    static NAN_GETTER(GetmaxDescriptorSetInputAttachments);
    static NAN_GETTER(GetmaxVertexInputAttributes);
    static NAN_GETTER(GetmaxVertexInputBindings);
    static NAN_GETTER(GetmaxVertexInputAttributeOffset);
    static NAN_GETTER(GetmaxVertexInputBindingStride);
    static NAN_GETTER(GetmaxVertexOutputComponents);
    static NAN_GETTER(GetmaxTessellationGenerationLevel);
    static NAN_GETTER(GetmaxTessellationPatchSize);
    static NAN_GETTER(GetmaxTessellationControlPerVertexInputComponents);
    static NAN_GETTER(GetmaxTessellationControlPerVertexOutputComponents);
    static NAN_GETTER(GetmaxTessellationControlPerPatchOutputComponents);
    static NAN_GETTER(GetmaxTessellationControlTotalOutputComponents);
    static NAN_GETTER(GetmaxTessellationEvaluationInputComponents);
    static NAN_GETTER(GetmaxTessellationEvaluationOutputComponents);
    static NAN_GETTER(GetmaxGeometryShaderInvocations);
    static NAN_GETTER(GetmaxGeometryInputComponents);
    static NAN_GETTER(GetmaxGeometryOutputComponents);
    static NAN_GETTER(GetmaxGeometryOutputVertices);
    static NAN_GETTER(GetmaxGeometryTotalOutputComponents);
    static NAN_GETTER(GetmaxFragmentInputComponents);
    static NAN_GETTER(GetmaxFragmentOutputAttachments);
    static NAN_GETTER(GetmaxFragmentDualSrcAttachments);
    static NAN_GETTER(GetmaxFragmentCombinedOutputResources);
    static NAN_GETTER(GetmaxComputeSharedMemorySize);
    std::vector<uint32_t>* vmaxComputeWorkGroupCount;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> maxComputeWorkGroupCount;
    static NAN_GETTER(GetmaxComputeWorkGroupCount);
    static NAN_GETTER(GetmaxComputeWorkGroupInvocations);
    std::vector<uint32_t>* vmaxComputeWorkGroupSize;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> maxComputeWorkGroupSize;
    static NAN_GETTER(GetmaxComputeWorkGroupSize);
    static NAN_GETTER(GetsubPixelPrecisionBits);
    static NAN_GETTER(GetsubTexelPrecisionBits);
    static NAN_GETTER(GetmipmapPrecisionBits);
    static NAN_GETTER(GetmaxDrawIndexedIndexValue);
    static NAN_GETTER(GetmaxDrawIndirectCount);
    static NAN_GETTER(GetmaxSamplerLodBias);
    static NAN_GETTER(GetmaxSamplerAnisotropy);
    static NAN_GETTER(GetmaxViewports);
    std::vector<uint32_t>* vmaxViewportDimensions;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> maxViewportDimensions;
    static NAN_GETTER(GetmaxViewportDimensions);
    std::vector<float>* vviewportBoundsRange;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> viewportBoundsRange;
    static NAN_GETTER(GetviewportBoundsRange);
    static NAN_GETTER(GetviewportSubPixelBits);
    static NAN_GETTER(GetminMemoryMapAlignment);
    static NAN_GETTER(GetminTexelBufferOffsetAlignment);
    static NAN_GETTER(GetminUniformBufferOffsetAlignment);
    static NAN_GETTER(GetminStorageBufferOffsetAlignment);
    static NAN_GETTER(GetminTexelOffset);
    static NAN_GETTER(GetmaxTexelOffset);
    static NAN_GETTER(GetminTexelGatherOffset);
    static NAN_GETTER(GetmaxTexelGatherOffset);
    static NAN_GETTER(GetminInterpolationOffset);
    static NAN_GETTER(GetmaxInterpolationOffset);
    static NAN_GETTER(GetsubPixelInterpolationOffsetBits);
    static NAN_GETTER(GetmaxFramebufferWidth);
    static NAN_GETTER(GetmaxFramebufferHeight);
    static NAN_GETTER(GetmaxFramebufferLayers);
    static NAN_GETTER(GetframebufferColorSampleCounts);
    static NAN_GETTER(GetframebufferDepthSampleCounts);
    static NAN_GETTER(GetframebufferStencilSampleCounts);
    static NAN_GETTER(GetframebufferNoAttachmentsSampleCounts);
    static NAN_GETTER(GetmaxColorAttachments);
    static NAN_GETTER(GetsampledImageColorSampleCounts);
    static NAN_GETTER(GetsampledImageIntegerSampleCounts);
    static NAN_GETTER(GetsampledImageDepthSampleCounts);
    static NAN_GETTER(GetsampledImageStencilSampleCounts);
    static NAN_GETTER(GetstorageImageSampleCounts);
    static NAN_GETTER(GetmaxSampleMaskWords);
    static NAN_GETTER(GettimestampComputeAndGraphics);
    static NAN_GETTER(GettimestampPeriod);
    static NAN_GETTER(GetmaxClipDistances);
    static NAN_GETTER(GetmaxCullDistances);
    static NAN_GETTER(GetmaxCombinedClipAndCullDistances);
    static NAN_GETTER(GetdiscreteQueuePriorities);
    std::vector<float>* vpointSizeRange;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pointSizeRange;
    static NAN_GETTER(GetpointSizeRange);
    std::vector<float>* vlineWidthRange;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> lineWidthRange;
    static NAN_GETTER(GetlineWidthRange);
    static NAN_GETTER(GetpointSizeGranularity);
    static NAN_GETTER(GetlineWidthGranularity);
    static NAN_GETTER(GetstrictLines);
    static NAN_GETTER(GetstandardSampleLocations);
    static NAN_GETTER(GetoptimalBufferCopyOffsetAlignment);
    static NAN_GETTER(GetoptimalBufferCopyRowPitchAlignment);
    static NAN_GETTER(GetnonCoherentAtomSize);

    // real instance
    VkPhysicalDeviceLimits instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceLimits();
    ~_VkPhysicalDeviceLimits();

};

/** ## END VkPhysicalDeviceLimits ## **/

/** ## BEGIN VkPhysicalDeviceProperties ## **/

class _VkPhysicalDeviceProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetapiVersion);
    static NAN_GETTER(GetdriverVersion);
    static NAN_GETTER(GetvendorID);
    static NAN_GETTER(GetdeviceID);
    static NAN_GETTER(GetdeviceType);
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> deviceName;
    static NAN_GETTER(GetdeviceName);
    std::vector<uint8_t>* vpipelineCacheUUID;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pipelineCacheUUID;
    static NAN_GETTER(GetpipelineCacheUUID);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> limits;
      static NAN_GETTER(Getlimits);
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> sparseProperties;
      static NAN_GETTER(GetsparseProperties);

    // real instance
    VkPhysicalDeviceProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceProperties();
    ~_VkPhysicalDeviceProperties();

};

/** ## END VkPhysicalDeviceProperties ## **/

/** ## BEGIN VkPhysicalDeviceProperties2 ## **/

class _VkPhysicalDeviceProperties2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> properties;
      static NAN_GETTER(Getproperties);

    // real instance
    VkPhysicalDeviceProperties2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceProperties2();
    ~_VkPhysicalDeviceProperties2();

};

/** ## END VkPhysicalDeviceProperties2 ## **/

/** ## BEGIN VkPhysicalDeviceFeatures2KHR ## **/

class _VkPhysicalDeviceFeatures2KHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkPhysicalDeviceFeatures2KHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceFeatures2KHR();
    ~_VkPhysicalDeviceFeatures2KHR();

};

/** ## END VkPhysicalDeviceFeatures2KHR ## **/

/** ## BEGIN VkPhysicalDeviceFeatures ## **/

class _VkPhysicalDeviceFeatures: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetrobustBufferAccess);
    static NAN_SETTER(SetrobustBufferAccess);
    
    static NAN_GETTER(GetfullDrawIndexUint32);
    static NAN_SETTER(SetfullDrawIndexUint32);
    
    static NAN_GETTER(GetimageCubeArray);
    static NAN_SETTER(SetimageCubeArray);
    
    static NAN_GETTER(GetindependentBlend);
    static NAN_SETTER(SetindependentBlend);
    
    static NAN_GETTER(GetgeometryShader);
    static NAN_SETTER(SetgeometryShader);
    
    static NAN_GETTER(GettessellationShader);
    static NAN_SETTER(SettessellationShader);
    
    static NAN_GETTER(GetsampleRateShading);
    static NAN_SETTER(SetsampleRateShading);
    
    static NAN_GETTER(GetdualSrcBlend);
    static NAN_SETTER(SetdualSrcBlend);
    
    static NAN_GETTER(GetlogicOp);
    static NAN_SETTER(SetlogicOp);
    
    static NAN_GETTER(GetmultiDrawIndirect);
    static NAN_SETTER(SetmultiDrawIndirect);
    
    static NAN_GETTER(GetdrawIndirectFirstInstance);
    static NAN_SETTER(SetdrawIndirectFirstInstance);
    
    static NAN_GETTER(GetdepthClamp);
    static NAN_SETTER(SetdepthClamp);
    
    static NAN_GETTER(GetdepthBiasClamp);
    static NAN_SETTER(SetdepthBiasClamp);
    
    static NAN_GETTER(GetfillModeNonSolid);
    static NAN_SETTER(SetfillModeNonSolid);
    
    static NAN_GETTER(GetdepthBounds);
    static NAN_SETTER(SetdepthBounds);
    
    static NAN_GETTER(GetwideLines);
    static NAN_SETTER(SetwideLines);
    
    static NAN_GETTER(GetlargePoints);
    static NAN_SETTER(SetlargePoints);
    
    static NAN_GETTER(GetalphaToOne);
    static NAN_SETTER(SetalphaToOne);
    
    static NAN_GETTER(GetmultiViewport);
    static NAN_SETTER(SetmultiViewport);
    
    static NAN_GETTER(GetsamplerAnisotropy);
    static NAN_SETTER(SetsamplerAnisotropy);
    
    static NAN_GETTER(GettextureCompressionETC2);
    static NAN_SETTER(SettextureCompressionETC2);
    
    static NAN_GETTER(GettextureCompressionASTC_LDR);
    static NAN_SETTER(SettextureCompressionASTC_LDR);
    
    static NAN_GETTER(GettextureCompressionBC);
    static NAN_SETTER(SettextureCompressionBC);
    
    static NAN_GETTER(GetocclusionQueryPrecise);
    static NAN_SETTER(SetocclusionQueryPrecise);
    
    static NAN_GETTER(GetpipelineStatisticsQuery);
    static NAN_SETTER(SetpipelineStatisticsQuery);
    
    static NAN_GETTER(GetvertexPipelineStoresAndAtomics);
    static NAN_SETTER(SetvertexPipelineStoresAndAtomics);
    
    static NAN_GETTER(GetfragmentStoresAndAtomics);
    static NAN_SETTER(SetfragmentStoresAndAtomics);
    
    static NAN_GETTER(GetshaderTessellationAndGeometryPointSize);
    static NAN_SETTER(SetshaderTessellationAndGeometryPointSize);
    
    static NAN_GETTER(GetshaderImageGatherExtended);
    static NAN_SETTER(SetshaderImageGatherExtended);
    
    static NAN_GETTER(GetshaderStorageImageExtendedFormats);
    static NAN_SETTER(SetshaderStorageImageExtendedFormats);
    
    static NAN_GETTER(GetshaderStorageImageMultisample);
    static NAN_SETTER(SetshaderStorageImageMultisample);
    
    static NAN_GETTER(GetshaderStorageImageReadWithoutFormat);
    static NAN_SETTER(SetshaderStorageImageReadWithoutFormat);
    
    static NAN_GETTER(GetshaderStorageImageWriteWithoutFormat);
    static NAN_SETTER(SetshaderStorageImageWriteWithoutFormat);
    
    static NAN_GETTER(GetshaderUniformBufferArrayDynamicIndexing);
    static NAN_SETTER(SetshaderUniformBufferArrayDynamicIndexing);
    
    static NAN_GETTER(GetshaderSampledImageArrayDynamicIndexing);
    static NAN_SETTER(SetshaderSampledImageArrayDynamicIndexing);
    
    static NAN_GETTER(GetshaderStorageBufferArrayDynamicIndexing);
    static NAN_SETTER(SetshaderStorageBufferArrayDynamicIndexing);
    
    static NAN_GETTER(GetshaderStorageImageArrayDynamicIndexing);
    static NAN_SETTER(SetshaderStorageImageArrayDynamicIndexing);
    
    static NAN_GETTER(GetshaderClipDistance);
    static NAN_SETTER(SetshaderClipDistance);
    
    static NAN_GETTER(GetshaderCullDistance);
    static NAN_SETTER(SetshaderCullDistance);
    
    static NAN_GETTER(GetshaderFloat64);
    static NAN_SETTER(SetshaderFloat64);
    
    static NAN_GETTER(GetshaderInt64);
    static NAN_SETTER(SetshaderInt64);
    
    static NAN_GETTER(GetshaderInt16);
    static NAN_SETTER(SetshaderInt16);
    
    static NAN_GETTER(GetshaderResourceResidency);
    static NAN_SETTER(SetshaderResourceResidency);
    
    static NAN_GETTER(GetshaderResourceMinLod);
    static NAN_SETTER(SetshaderResourceMinLod);
    
    static NAN_GETTER(GetsparseBinding);
    static NAN_SETTER(SetsparseBinding);
    
    static NAN_GETTER(GetsparseResidencyBuffer);
    static NAN_SETTER(SetsparseResidencyBuffer);
    
    static NAN_GETTER(GetsparseResidencyImage2D);
    static NAN_SETTER(SetsparseResidencyImage2D);
    
    static NAN_GETTER(GetsparseResidencyImage3D);
    static NAN_SETTER(SetsparseResidencyImage3D);
    
    static NAN_GETTER(GetsparseResidency2Samples);
    static NAN_SETTER(SetsparseResidency2Samples);
    
    static NAN_GETTER(GetsparseResidency4Samples);
    static NAN_SETTER(SetsparseResidency4Samples);
    
    static NAN_GETTER(GetsparseResidency8Samples);
    static NAN_SETTER(SetsparseResidency8Samples);
    
    static NAN_GETTER(GetsparseResidency16Samples);
    static NAN_SETTER(SetsparseResidency16Samples);
    
    static NAN_GETTER(GetsparseResidencyAliased);
    static NAN_SETTER(SetsparseResidencyAliased);
    
    static NAN_GETTER(GetvariableMultisampleRate);
    static NAN_SETTER(SetvariableMultisampleRate);
    
    static NAN_GETTER(GetinheritedQueries);
    static NAN_SETTER(SetinheritedQueries);
    

    // real instance
    VkPhysicalDeviceFeatures instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceFeatures();
    ~_VkPhysicalDeviceFeatures();

};

/** ## END VkPhysicalDeviceFeatures ## **/

/** ## BEGIN VkPhysicalDeviceFeatures2 ## **/

class _VkPhysicalDeviceFeatures2: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> features;
      static NAN_GETTER(Getfeatures);
    static NAN_SETTER(Setfeatures);
    

    // real instance
    VkPhysicalDeviceFeatures2 instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPhysicalDeviceFeatures2();
    ~_VkPhysicalDeviceFeatures2();

};

/** ## END VkPhysicalDeviceFeatures2 ## **/

/** ## BEGIN VkObjectTablePushConstantEntryNVX ## **/

class _VkObjectTablePushConstantEntryNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Gettype);
    static NAN_SETTER(Settype);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pipelineLayout;
      static NAN_GETTER(GetpipelineLayout);
    static NAN_SETTER(SetpipelineLayout);
    
    static NAN_GETTER(GetstageFlags);
    static NAN_SETTER(SetstageFlags);
    

    // real instance
    VkObjectTablePushConstantEntryNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkObjectTablePushConstantEntryNVX();
    ~_VkObjectTablePushConstantEntryNVX();

};

/** ## END VkObjectTablePushConstantEntryNVX ## **/

/** ## BEGIN VkObjectTableIndexBufferEntryNVX ## **/

class _VkObjectTableIndexBufferEntryNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Gettype);
    static NAN_SETTER(Settype);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> buffer;
      static NAN_GETTER(Getbuffer);
    static NAN_SETTER(Setbuffer);
    
    static NAN_GETTER(GetindexType);
    static NAN_SETTER(SetindexType);
    

    // real instance
    VkObjectTableIndexBufferEntryNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkObjectTableIndexBufferEntryNVX();
    ~_VkObjectTableIndexBufferEntryNVX();

};

/** ## END VkObjectTableIndexBufferEntryNVX ## **/

/** ## BEGIN VkObjectTableVertexBufferEntryNVX ## **/

class _VkObjectTableVertexBufferEntryNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Gettype);
    static NAN_SETTER(Settype);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> buffer;
      static NAN_GETTER(Getbuffer);
    static NAN_SETTER(Setbuffer);
    

    // real instance
    VkObjectTableVertexBufferEntryNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkObjectTableVertexBufferEntryNVX();
    ~_VkObjectTableVertexBufferEntryNVX();

};

/** ## END VkObjectTableVertexBufferEntryNVX ## **/

/** ## BEGIN VkObjectTableDescriptorSetEntryNVX ## **/

class _VkObjectTableDescriptorSetEntryNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Gettype);
    static NAN_SETTER(Settype);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pipelineLayout;
      static NAN_GETTER(GetpipelineLayout);
    static NAN_SETTER(SetpipelineLayout);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> descriptorSet;
      static NAN_GETTER(GetdescriptorSet);
    static NAN_SETTER(SetdescriptorSet);
    

    // real instance
    VkObjectTableDescriptorSetEntryNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkObjectTableDescriptorSetEntryNVX();
    ~_VkObjectTableDescriptorSetEntryNVX();

};

/** ## END VkObjectTableDescriptorSetEntryNVX ## **/

/** ## BEGIN VkObjectTablePipelineEntryNVX ## **/

class _VkObjectTablePipelineEntryNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Gettype);
    static NAN_SETTER(Settype);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pipeline;
      static NAN_GETTER(Getpipeline);
    static NAN_SETTER(Setpipeline);
    

    // real instance
    VkObjectTablePipelineEntryNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkObjectTablePipelineEntryNVX();
    ~_VkObjectTablePipelineEntryNVX();

};

/** ## END VkObjectTablePipelineEntryNVX ## **/

/** ## BEGIN VkObjectTableEntryNVX ## **/

class _VkObjectTableEntryNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Gettype);
    static NAN_SETTER(Settype);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    

    // real instance
    VkObjectTableEntryNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkObjectTableEntryNVX();
    ~_VkObjectTableEntryNVX();

};

/** ## END VkObjectTableEntryNVX ## **/

/** ## BEGIN VkObjectTableCreateInfoNVX ## **/

class _VkObjectTableCreateInfoNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetobjectCount);
    static NAN_SETTER(SetobjectCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pObjectEntryTypes;
    static NAN_GETTER(GetpObjectEntryTypes);
    static NAN_SETTER(SetpObjectEntryTypes);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pObjectEntryCounts;
    static NAN_GETTER(GetpObjectEntryCounts);
    static NAN_SETTER(SetpObjectEntryCounts);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pObjectEntryUsageFlags;
    static NAN_GETTER(GetpObjectEntryUsageFlags);
    static NAN_SETTER(SetpObjectEntryUsageFlags);
    
    static NAN_GETTER(GetmaxUniformBuffersPerDescriptor);
    static NAN_SETTER(SetmaxUniformBuffersPerDescriptor);
    
    static NAN_GETTER(GetmaxStorageBuffersPerDescriptor);
    static NAN_SETTER(SetmaxStorageBuffersPerDescriptor);
    
    static NAN_GETTER(GetmaxStorageImagesPerDescriptor);
    static NAN_SETTER(SetmaxStorageImagesPerDescriptor);
    
    static NAN_GETTER(GetmaxSampledImagesPerDescriptor);
    static NAN_SETTER(SetmaxSampledImagesPerDescriptor);
    
    static NAN_GETTER(GetmaxPipelineLayouts);
    static NAN_SETTER(SetmaxPipelineLayouts);
    

    // real instance
    VkObjectTableCreateInfoNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkObjectTableCreateInfoNVX();
    ~_VkObjectTableCreateInfoNVX();

};

/** ## END VkObjectTableCreateInfoNVX ## **/

/** ## BEGIN VkCmdReserveSpaceForCommandsInfoNVX ## **/

class _VkCmdReserveSpaceForCommandsInfoNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> objectTable;
      static NAN_GETTER(GetobjectTable);
    static NAN_SETTER(SetobjectTable);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> indirectCommandsLayout;
      static NAN_GETTER(GetindirectCommandsLayout);
    static NAN_SETTER(SetindirectCommandsLayout);
    
    static NAN_GETTER(GetmaxSequencesCount);
    static NAN_SETTER(SetmaxSequencesCount);
    

    // real instance
    VkCmdReserveSpaceForCommandsInfoNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkCmdReserveSpaceForCommandsInfoNVX();
    ~_VkCmdReserveSpaceForCommandsInfoNVX();

};

/** ## END VkCmdReserveSpaceForCommandsInfoNVX ## **/

/** ## BEGIN VkIndirectCommandsTokenNVX ## **/

class _VkIndirectCommandsTokenNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GettokenType);
    static NAN_SETTER(SettokenType);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> buffer;
      static NAN_GETTER(Getbuffer);
    static NAN_SETTER(Setbuffer);
    
    static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    

    // real instance
    VkIndirectCommandsTokenNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkIndirectCommandsTokenNVX();
    ~_VkIndirectCommandsTokenNVX();

};

/** ## END VkIndirectCommandsTokenNVX ## **/

/** ## BEGIN VkCmdProcessCommandsInfoNVX ## **/

class _VkCmdProcessCommandsInfoNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> objectTable;
      static NAN_GETTER(GetobjectTable);
    static NAN_SETTER(SetobjectTable);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> indirectCommandsLayout;
      static NAN_GETTER(GetindirectCommandsLayout);
    static NAN_SETTER(SetindirectCommandsLayout);
    
    static NAN_GETTER(GetindirectCommandsTokenCount);
    static NAN_SETTER(SetindirectCommandsTokenCount);
    
    std::vector<VkIndirectCommandsTokenNVX>* vpIndirectCommandsTokens;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pIndirectCommandsTokens;
    static NAN_GETTER(GetpIndirectCommandsTokens);
    static NAN_SETTER(SetpIndirectCommandsTokens);
    
    static NAN_GETTER(GetmaxSequencesCount);
    static NAN_SETTER(SetmaxSequencesCount);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> targetCommandBuffer;
      static NAN_GETTER(GettargetCommandBuffer);
    static NAN_SETTER(SettargetCommandBuffer);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> sequencesCountBuffer;
      static NAN_GETTER(GetsequencesCountBuffer);
    static NAN_SETTER(SetsequencesCountBuffer);
    
    static NAN_GETTER(GetsequencesCountOffset);
    static NAN_SETTER(SetsequencesCountOffset);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> sequencesIndexBuffer;
      static NAN_GETTER(GetsequencesIndexBuffer);
    static NAN_SETTER(SetsequencesIndexBuffer);
    
    static NAN_GETTER(GetsequencesIndexOffset);
    static NAN_SETTER(SetsequencesIndexOffset);
    

    // real instance
    VkCmdProcessCommandsInfoNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkCmdProcessCommandsInfoNVX();
    ~_VkCmdProcessCommandsInfoNVX();

};

/** ## END VkCmdProcessCommandsInfoNVX ## **/

/** ## BEGIN VkIndirectCommandsLayoutTokenNVX ## **/

class _VkIndirectCommandsLayoutTokenNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GettokenType);
    static NAN_SETTER(SettokenType);
    
    static NAN_GETTER(GetbindingUnit);
    static NAN_SETTER(SetbindingUnit);
    
    static NAN_GETTER(GetdynamicCount);
    static NAN_SETTER(SetdynamicCount);
    
    static NAN_GETTER(Getdivisor);
    static NAN_SETTER(Setdivisor);
    

    // real instance
    VkIndirectCommandsLayoutTokenNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkIndirectCommandsLayoutTokenNVX();
    ~_VkIndirectCommandsLayoutTokenNVX();

};

/** ## END VkIndirectCommandsLayoutTokenNVX ## **/

/** ## BEGIN VkIndirectCommandsLayoutCreateInfoNVX ## **/

class _VkIndirectCommandsLayoutCreateInfoNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetpipelineBindPoint);
    static NAN_SETTER(SetpipelineBindPoint);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GettokenCount);
    static NAN_SETTER(SettokenCount);
    
    std::vector<VkIndirectCommandsLayoutTokenNVX>* vpTokens;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pTokens;
    static NAN_GETTER(GetpTokens);
    static NAN_SETTER(SetpTokens);
    

    // real instance
    VkIndirectCommandsLayoutCreateInfoNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkIndirectCommandsLayoutCreateInfoNVX();
    ~_VkIndirectCommandsLayoutCreateInfoNVX();

};

/** ## END VkIndirectCommandsLayoutCreateInfoNVX ## **/

/** ## BEGIN VkDeviceGeneratedCommandsLimitsNVX ## **/

class _VkDeviceGeneratedCommandsLimitsNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetmaxIndirectCommandsLayoutTokenCount);
    static NAN_SETTER(SetmaxIndirectCommandsLayoutTokenCount);
    
    static NAN_GETTER(GetmaxObjectEntryCounts);
    static NAN_SETTER(SetmaxObjectEntryCounts);
    
    static NAN_GETTER(GetminSequenceCountBufferOffsetAlignment);
    static NAN_SETTER(SetminSequenceCountBufferOffsetAlignment);
    
    static NAN_GETTER(GetminSequenceIndexBufferOffsetAlignment);
    static NAN_SETTER(SetminSequenceIndexBufferOffsetAlignment);
    
    static NAN_GETTER(GetminCommandsTokenBufferOffsetAlignment);
    static NAN_SETTER(SetminCommandsTokenBufferOffsetAlignment);
    

    // real instance
    VkDeviceGeneratedCommandsLimitsNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGeneratedCommandsLimitsNVX();
    ~_VkDeviceGeneratedCommandsLimitsNVX();

};

/** ## END VkDeviceGeneratedCommandsLimitsNVX ## **/

/** ## BEGIN VkDeviceGeneratedCommandsFeaturesNVX ## **/

class _VkDeviceGeneratedCommandsFeaturesNVX: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetcomputeBindingPointSupport);
    static NAN_SETTER(SetcomputeBindingPointSupport);
    

    // real instance
    VkDeviceGeneratedCommandsFeaturesNVX instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceGeneratedCommandsFeaturesNVX();
    ~_VkDeviceGeneratedCommandsFeaturesNVX();

};

/** ## END VkDeviceGeneratedCommandsFeaturesNVX ## **/

/** ## BEGIN VkWin32KeyedMutexAcquireReleaseInfoNV ## **/

class _VkWin32KeyedMutexAcquireReleaseInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetacquireCount);
    static NAN_SETTER(SetacquireCount);
    
    std::vector<VkDeviceMemory>* vpAcquireSyncs;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAcquireSyncs;
    static NAN_GETTER(GetpAcquireSyncs);
    static NAN_SETTER(SetpAcquireSyncs);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAcquireKeys;
    static NAN_GETTER(GetpAcquireKeys);
    static NAN_SETTER(SetpAcquireKeys);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAcquireTimeoutMilliseconds;
    static NAN_GETTER(GetpAcquireTimeoutMilliseconds);
    static NAN_SETTER(SetpAcquireTimeoutMilliseconds);
    
    static NAN_GETTER(GetreleaseCount);
    static NAN_SETTER(SetreleaseCount);
    
    std::vector<VkDeviceMemory>* vpReleaseSyncs;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pReleaseSyncs;
    static NAN_GETTER(GetpReleaseSyncs);
    static NAN_SETTER(SetpReleaseSyncs);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pReleaseKeys;
    static NAN_GETTER(GetpReleaseKeys);
    static NAN_SETTER(SetpReleaseKeys);
    

    // real instance
    VkWin32KeyedMutexAcquireReleaseInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkWin32KeyedMutexAcquireReleaseInfoNV();
    ~_VkWin32KeyedMutexAcquireReleaseInfoNV();

};

/** ## END VkWin32KeyedMutexAcquireReleaseInfoNV ## **/

/** ## BEGIN VkExportMemoryWin32HandleInfoNV ## **/

class _VkExportMemoryWin32HandleInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    

    // real instance
    VkExportMemoryWin32HandleInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExportMemoryWin32HandleInfoNV();
    ~_VkExportMemoryWin32HandleInfoNV();

};

/** ## END VkExportMemoryWin32HandleInfoNV ## **/

/** ## BEGIN VkImportMemoryWin32HandleInfoNV ## **/

class _VkImportMemoryWin32HandleInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleType);
    static NAN_SETTER(SethandleType);
    

    // real instance
    VkImportMemoryWin32HandleInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImportMemoryWin32HandleInfoNV();
    ~_VkImportMemoryWin32HandleInfoNV();

};

/** ## END VkImportMemoryWin32HandleInfoNV ## **/

/** ## BEGIN VkExportMemoryAllocateInfoNV ## **/

class _VkExportMemoryAllocateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleTypes);
    static NAN_SETTER(SethandleTypes);
    

    // real instance
    VkExportMemoryAllocateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExportMemoryAllocateInfoNV();
    ~_VkExportMemoryAllocateInfoNV();

};

/** ## END VkExportMemoryAllocateInfoNV ## **/

/** ## BEGIN VkExternalMemoryImageCreateInfoNV ## **/

class _VkExternalMemoryImageCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GethandleTypes);
    static NAN_SETTER(SethandleTypes);
    

    // real instance
    VkExternalMemoryImageCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalMemoryImageCreateInfoNV();
    ~_VkExternalMemoryImageCreateInfoNV();

};

/** ## END VkExternalMemoryImageCreateInfoNV ## **/

/** ## BEGIN VkExternalImageFormatPropertiesNV ## **/

class _VkExternalImageFormatPropertiesNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> imageFormatProperties;
      static NAN_GETTER(GetimageFormatProperties);
    static NAN_GETTER(GetexternalMemoryFeatures);
    static NAN_GETTER(GetexportFromImportedHandleTypes);
    static NAN_GETTER(GetcompatibleHandleTypes);

    // real instance
    VkExternalImageFormatPropertiesNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExternalImageFormatPropertiesNV();
    ~_VkExternalImageFormatPropertiesNV();

};

/** ## END VkExternalImageFormatPropertiesNV ## **/

/** ## BEGIN VkDedicatedAllocationMemoryAllocateInfoNV ## **/

class _VkDedicatedAllocationMemoryAllocateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> image;
      static NAN_GETTER(Getimage);
    static NAN_SETTER(Setimage);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> buffer;
      static NAN_GETTER(Getbuffer);
    static NAN_SETTER(Setbuffer);
    

    // real instance
    VkDedicatedAllocationMemoryAllocateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDedicatedAllocationMemoryAllocateInfoNV();
    ~_VkDedicatedAllocationMemoryAllocateInfoNV();

};

/** ## END VkDedicatedAllocationMemoryAllocateInfoNV ## **/

/** ## BEGIN VkDedicatedAllocationBufferCreateInfoNV ## **/

class _VkDedicatedAllocationBufferCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdedicatedAllocation);
    static NAN_SETTER(SetdedicatedAllocation);
    

    // real instance
    VkDedicatedAllocationBufferCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDedicatedAllocationBufferCreateInfoNV();
    ~_VkDedicatedAllocationBufferCreateInfoNV();

};

/** ## END VkDedicatedAllocationBufferCreateInfoNV ## **/

/** ## BEGIN VkDedicatedAllocationImageCreateInfoNV ## **/

class _VkDedicatedAllocationImageCreateInfoNV: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdedicatedAllocation);
    static NAN_SETTER(SetdedicatedAllocation);
    

    // real instance
    VkDedicatedAllocationImageCreateInfoNV instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDedicatedAllocationImageCreateInfoNV();
    ~_VkDedicatedAllocationImageCreateInfoNV();

};

/** ## END VkDedicatedAllocationImageCreateInfoNV ## **/

/** ## BEGIN VkDebugMarkerMarkerInfoEXT ## **/

class _VkDebugMarkerMarkerInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> pMarkerName;
    static NAN_GETTER(GetpMarkerName);
    static NAN_SETTER(SetpMarkerName);
    
    std::vector<float>* vcolor;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> color;
    static NAN_GETTER(Getcolor);
    static NAN_SETTER(Setcolor);
    

    // real instance
    VkDebugMarkerMarkerInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDebugMarkerMarkerInfoEXT();
    ~_VkDebugMarkerMarkerInfoEXT();

};

/** ## END VkDebugMarkerMarkerInfoEXT ## **/

/** ## BEGIN VkDebugMarkerObjectTagInfoEXT ## **/

class _VkDebugMarkerObjectTagInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetobjectType);
    static NAN_SETTER(SetobjectType);
    
    static NAN_GETTER(Getobject);
    static NAN_SETTER(Setobject);
    
    static NAN_GETTER(GettagName);
    static NAN_SETTER(SettagName);
    
    static NAN_GETTER(GettagSize);
    static NAN_SETTER(SettagSize);
    

    // real instance
    VkDebugMarkerObjectTagInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDebugMarkerObjectTagInfoEXT();
    ~_VkDebugMarkerObjectTagInfoEXT();

};

/** ## END VkDebugMarkerObjectTagInfoEXT ## **/

/** ## BEGIN VkDebugMarkerObjectNameInfoEXT ## **/

class _VkDebugMarkerObjectNameInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetobjectType);
    static NAN_SETTER(SetobjectType);
    
    static NAN_GETTER(Getobject);
    static NAN_SETTER(Setobject);
    
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> pObjectName;
    static NAN_GETTER(GetpObjectName);
    static NAN_SETTER(SetpObjectName);
    

    // real instance
    VkDebugMarkerObjectNameInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDebugMarkerObjectNameInfoEXT();
    ~_VkDebugMarkerObjectNameInfoEXT();

};

/** ## END VkDebugMarkerObjectNameInfoEXT ## **/

/** ## BEGIN VkPipelineRasterizationStateRasterizationOrderAMD ## **/

class _VkPipelineRasterizationStateRasterizationOrderAMD: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetrasterizationOrder);
    static NAN_SETTER(SetrasterizationOrder);
    

    // real instance
    VkPipelineRasterizationStateRasterizationOrderAMD instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineRasterizationStateRasterizationOrderAMD();
    ~_VkPipelineRasterizationStateRasterizationOrderAMD();

};

/** ## END VkPipelineRasterizationStateRasterizationOrderAMD ## **/

/** ## BEGIN VkValidationFeaturesEXT ## **/

class _VkValidationFeaturesEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetenabledValidationFeatureCount);
    static NAN_SETTER(SetenabledValidationFeatureCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pEnabledValidationFeatures;
    static NAN_GETTER(GetpEnabledValidationFeatures);
    static NAN_SETTER(SetpEnabledValidationFeatures);
    
    static NAN_GETTER(GetdisabledValidationFeatureCount);
    static NAN_SETTER(SetdisabledValidationFeatureCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDisabledValidationFeatures;
    static NAN_GETTER(GetpDisabledValidationFeatures);
    static NAN_SETTER(SetpDisabledValidationFeatures);
    

    // real instance
    VkValidationFeaturesEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkValidationFeaturesEXT();
    ~_VkValidationFeaturesEXT();

};

/** ## END VkValidationFeaturesEXT ## **/

/** ## BEGIN VkValidationFlagsEXT ## **/

class _VkValidationFlagsEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetdisabledValidationCheckCount);
    static NAN_SETTER(SetdisabledValidationCheckCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDisabledValidationChecks;
    static NAN_GETTER(GetpDisabledValidationChecks);
    static NAN_SETTER(SetpDisabledValidationChecks);
    

    // real instance
    VkValidationFlagsEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkValidationFlagsEXT();
    ~_VkValidationFlagsEXT();

};

/** ## END VkValidationFlagsEXT ## **/

/** ## BEGIN VkDebugReportCallbackCreateInfoEXT ## **/

class _VkDebugReportCallbackCreateInfoEXT: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    

    // real instance
    VkDebugReportCallbackCreateInfoEXT instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDebugReportCallbackCreateInfoEXT();
    ~_VkDebugReportCallbackCreateInfoEXT();

};

/** ## END VkDebugReportCallbackCreateInfoEXT ## **/

/** ## BEGIN VkPresentInfoKHR ## **/

class _VkPresentInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetwaitSemaphoreCount);
    static NAN_SETTER(SetwaitSemaphoreCount);
    
    std::vector<VkSemaphore>* vpWaitSemaphores;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pWaitSemaphores;
    static NAN_GETTER(GetpWaitSemaphores);
    static NAN_SETTER(SetpWaitSemaphores);
    
    static NAN_GETTER(GetswapchainCount);
    static NAN_SETTER(SetswapchainCount);
    
    std::vector<VkSwapchainKHR>* vpSwapchains;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSwapchains;
    static NAN_GETTER(GetpSwapchains);
    static NAN_SETTER(SetpSwapchains);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pImageIndices;
    static NAN_GETTER(GetpImageIndices);
    static NAN_SETTER(SetpImageIndices);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pResults;
    static NAN_GETTER(GetpResults);
    static NAN_SETTER(SetpResults);
    

    // real instance
    VkPresentInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPresentInfoKHR();
    ~_VkPresentInfoKHR();

};

/** ## END VkPresentInfoKHR ## **/

/** ## BEGIN VkSwapchainCreateInfoKHR ## **/

class _VkSwapchainCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> surface;
      static NAN_GETTER(Getsurface);
    static NAN_SETTER(Setsurface);
    
    static NAN_GETTER(GetminImageCount);
    static NAN_SETTER(SetminImageCount);
    
    static NAN_GETTER(GetimageFormat);
    static NAN_SETTER(SetimageFormat);
    
    static NAN_GETTER(GetimageColorSpace);
    static NAN_SETTER(SetimageColorSpace);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> imageExtent;
      static NAN_GETTER(GetimageExtent);
    static NAN_SETTER(SetimageExtent);
    
    static NAN_GETTER(GetimageArrayLayers);
    static NAN_SETTER(SetimageArrayLayers);
    
    static NAN_GETTER(GetimageUsage);
    static NAN_SETTER(SetimageUsage);
    
    static NAN_GETTER(GetimageSharingMode);
    static NAN_SETTER(SetimageSharingMode);
    
    static NAN_GETTER(GetqueueFamilyIndexCount);
    static NAN_SETTER(SetqueueFamilyIndexCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pQueueFamilyIndices;
    static NAN_GETTER(GetpQueueFamilyIndices);
    static NAN_SETTER(SetpQueueFamilyIndices);
    
    static NAN_GETTER(GetpreTransform);
    static NAN_SETTER(SetpreTransform);
    
    static NAN_GETTER(GetcompositeAlpha);
    static NAN_SETTER(SetcompositeAlpha);
    
    static NAN_GETTER(GetpresentMode);
    static NAN_SETTER(SetpresentMode);
    
    static NAN_GETTER(Getclipped);
    static NAN_SETTER(Setclipped);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> oldSwapchain;
      static NAN_GETTER(GetoldSwapchain);
    static NAN_SETTER(SetoldSwapchain);
    

    // real instance
    VkSwapchainCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSwapchainCreateInfoKHR();
    ~_VkSwapchainCreateInfoKHR();

};

/** ## END VkSwapchainCreateInfoKHR ## **/

/** ## BEGIN VkWin32SurfaceCreateInfoKHR ## **/

class _VkWin32SurfaceCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    

    // real instance
    VkWin32SurfaceCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkWin32SurfaceCreateInfoKHR();
    ~_VkWin32SurfaceCreateInfoKHR();

};

/** ## END VkWin32SurfaceCreateInfoKHR ## **/

/** ## BEGIN VkDisplayPresentInfoKHR ## **/

class _VkDisplayPresentInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> srcRect;
      static NAN_GETTER(GetsrcRect);
    static NAN_SETTER(SetsrcRect);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> dstRect;
      static NAN_GETTER(GetdstRect);
    static NAN_SETTER(SetdstRect);
    
    static NAN_GETTER(Getpersistent);
    static NAN_SETTER(Setpersistent);
    

    // real instance
    VkDisplayPresentInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayPresentInfoKHR();
    ~_VkDisplayPresentInfoKHR();

};

/** ## END VkDisplayPresentInfoKHR ## **/

/** ## BEGIN VkDisplaySurfaceCreateInfoKHR ## **/

class _VkDisplaySurfaceCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> displayMode;
      static NAN_GETTER(GetdisplayMode);
    static NAN_SETTER(SetdisplayMode);
    
    static NAN_GETTER(GetplaneIndex);
    static NAN_SETTER(SetplaneIndex);
    
    static NAN_GETTER(GetplaneStackIndex);
    static NAN_SETTER(SetplaneStackIndex);
    
    static NAN_GETTER(Gettransform);
    static NAN_SETTER(Settransform);
    
    static NAN_GETTER(GetglobalAlpha);
    static NAN_SETTER(SetglobalAlpha);
    
    static NAN_GETTER(GetalphaMode);
    static NAN_SETTER(SetalphaMode);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> imageExtent;
      static NAN_GETTER(GetimageExtent);
    static NAN_SETTER(SetimageExtent);
    

    // real instance
    VkDisplaySurfaceCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplaySurfaceCreateInfoKHR();
    ~_VkDisplaySurfaceCreateInfoKHR();

};

/** ## END VkDisplaySurfaceCreateInfoKHR ## **/

/** ## BEGIN VkDisplayModeCreateInfoKHR ## **/

class _VkDisplayModeCreateInfoKHR: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> parameters;
      static NAN_GETTER(Getparameters);
    static NAN_SETTER(Setparameters);
    

    // real instance
    VkDisplayModeCreateInfoKHR instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDisplayModeCreateInfoKHR();
    ~_VkDisplayModeCreateInfoKHR();

};

/** ## END VkDisplayModeCreateInfoKHR ## **/

/** ## BEGIN VkSubmitInfo ## **/

class _VkSubmitInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetwaitSemaphoreCount);
    static NAN_SETTER(SetwaitSemaphoreCount);
    
    std::vector<VkSemaphore>* vpWaitSemaphores;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pWaitSemaphores;
    static NAN_GETTER(GetpWaitSemaphores);
    static NAN_SETTER(SetpWaitSemaphores);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pWaitDstStageMask;
    static NAN_GETTER(GetpWaitDstStageMask);
    static NAN_SETTER(SetpWaitDstStageMask);
    
    static NAN_GETTER(GetcommandBufferCount);
    static NAN_SETTER(SetcommandBufferCount);
    
    std::vector<VkCommandBuffer>* vpCommandBuffers;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pCommandBuffers;
    static NAN_GETTER(GetpCommandBuffers);
    static NAN_SETTER(SetpCommandBuffers);
    
    static NAN_GETTER(GetsignalSemaphoreCount);
    static NAN_SETTER(SetsignalSemaphoreCount);
    
    std::vector<VkSemaphore>* vpSignalSemaphores;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSignalSemaphores;
    static NAN_GETTER(GetpSignalSemaphores);
    static NAN_SETTER(SetpSignalSemaphores);
    

    // real instance
    VkSubmitInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSubmitInfo();
    ~_VkSubmitInfo();

};

/** ## END VkSubmitInfo ## **/

/** ## BEGIN VkDispatchIndirectCommand ## **/

class _VkDispatchIndirectCommand: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getx);
    static NAN_SETTER(Setx);
    
    static NAN_GETTER(Gety);
    static NAN_SETTER(Sety);
    
    static NAN_GETTER(Getz);
    static NAN_SETTER(Setz);
    

    // real instance
    VkDispatchIndirectCommand instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDispatchIndirectCommand();
    ~_VkDispatchIndirectCommand();

};

/** ## END VkDispatchIndirectCommand ## **/

/** ## BEGIN VkDrawIndexedIndirectCommand ## **/

class _VkDrawIndexedIndirectCommand: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetindexCount);
    static NAN_SETTER(SetindexCount);
    
    static NAN_GETTER(GetinstanceCount);
    static NAN_SETTER(SetinstanceCount);
    
    static NAN_GETTER(GetfirstIndex);
    static NAN_SETTER(SetfirstIndex);
    
    static NAN_GETTER(GetvertexOffset);
    static NAN_SETTER(SetvertexOffset);
    
    static NAN_GETTER(GetfirstInstance);
    static NAN_SETTER(SetfirstInstance);
    

    // real instance
    VkDrawIndexedIndirectCommand instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDrawIndexedIndirectCommand();
    ~_VkDrawIndexedIndirectCommand();

};

/** ## END VkDrawIndexedIndirectCommand ## **/

/** ## BEGIN VkDrawIndirectCommand ## **/

class _VkDrawIndirectCommand: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetvertexCount);
    static NAN_SETTER(SetvertexCount);
    
    static NAN_GETTER(GetinstanceCount);
    static NAN_SETTER(SetinstanceCount);
    
    static NAN_GETTER(GetfirstVertex);
    static NAN_SETTER(SetfirstVertex);
    
    static NAN_GETTER(GetfirstInstance);
    static NAN_SETTER(SetfirstInstance);
    

    // real instance
    VkDrawIndirectCommand instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDrawIndirectCommand();
    ~_VkDrawIndirectCommand();

};

/** ## END VkDrawIndirectCommand ## **/

/** ## BEGIN VkFramebufferCreateInfo ## **/

class _VkFramebufferCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> renderPass;
      static NAN_GETTER(GetrenderPass);
    static NAN_SETTER(SetrenderPass);
    
    static NAN_GETTER(GetattachmentCount);
    static NAN_SETTER(SetattachmentCount);
    
    std::vector<VkImageView>* vpAttachments;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAttachments;
    static NAN_GETTER(GetpAttachments);
    static NAN_SETTER(SetpAttachments);
    
    static NAN_GETTER(Getwidth);
    static NAN_SETTER(Setwidth);
    
    static NAN_GETTER(Getheight);
    static NAN_SETTER(Setheight);
    
    static NAN_GETTER(Getlayers);
    static NAN_SETTER(Setlayers);
    

    // real instance
    VkFramebufferCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkFramebufferCreateInfo();
    ~_VkFramebufferCreateInfo();

};

/** ## END VkFramebufferCreateInfo ## **/

/** ## BEGIN VkQueryPoolCreateInfo ## **/

class _VkQueryPoolCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetqueryType);
    static NAN_SETTER(SetqueryType);
    
    static NAN_GETTER(GetqueryCount);
    static NAN_SETTER(SetqueryCount);
    
    static NAN_GETTER(GetpipelineStatistics);
    static NAN_SETTER(SetpipelineStatistics);
    

    // real instance
    VkQueryPoolCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkQueryPoolCreateInfo();
    ~_VkQueryPoolCreateInfo();

};

/** ## END VkQueryPoolCreateInfo ## **/

/** ## BEGIN VkSemaphoreCreateInfo ## **/

class _VkSemaphoreCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    

    // real instance
    VkSemaphoreCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSemaphoreCreateInfo();
    ~_VkSemaphoreCreateInfo();

};

/** ## END VkSemaphoreCreateInfo ## **/

/** ## BEGIN VkFenceCreateInfo ## **/

class _VkFenceCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    

    // real instance
    VkFenceCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkFenceCreateInfo();
    ~_VkFenceCreateInfo();

};

/** ## END VkFenceCreateInfo ## **/

/** ## BEGIN VkEventCreateInfo ## **/

class _VkEventCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    

    // real instance
    VkEventCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkEventCreateInfo();
    ~_VkEventCreateInfo();

};

/** ## END VkEventCreateInfo ## **/

/** ## BEGIN VkSubpassDependency ## **/

class _VkSubpassDependency: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsrcSubpass);
    static NAN_SETTER(SetsrcSubpass);
    
    static NAN_GETTER(GetdstSubpass);
    static NAN_SETTER(SetdstSubpass);
    
    static NAN_GETTER(GetsrcStageMask);
    static NAN_SETTER(SetsrcStageMask);
    
    static NAN_GETTER(GetdstStageMask);
    static NAN_SETTER(SetdstStageMask);
    
    static NAN_GETTER(GetsrcAccessMask);
    static NAN_SETTER(SetsrcAccessMask);
    
    static NAN_GETTER(GetdstAccessMask);
    static NAN_SETTER(SetdstAccessMask);
    
    static NAN_GETTER(GetdependencyFlags);
    static NAN_SETTER(SetdependencyFlags);
    

    // real instance
    VkSubpassDependency instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSubpassDependency();
    ~_VkSubpassDependency();

};

/** ## END VkSubpassDependency ## **/

/** ## BEGIN VkSubpassDescription ## **/

class _VkSubpassDescription: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetpipelineBindPoint);
    static NAN_SETTER(SetpipelineBindPoint);
    
    static NAN_GETTER(GetinputAttachmentCount);
    static NAN_SETTER(SetinputAttachmentCount);
    
    std::vector<VkAttachmentReference>* vpInputAttachments;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pInputAttachments;
    static NAN_GETTER(GetpInputAttachments);
    static NAN_SETTER(SetpInputAttachments);
    
    static NAN_GETTER(GetcolorAttachmentCount);
    static NAN_SETTER(SetcolorAttachmentCount);
    
    std::vector<VkAttachmentReference>* vpColorAttachments;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pColorAttachments;
    static NAN_GETTER(GetpColorAttachments);
    static NAN_SETTER(SetpColorAttachments);
    
    std::vector<VkAttachmentReference>* vpResolveAttachments;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pResolveAttachments;
    static NAN_GETTER(GetpResolveAttachments);
    static NAN_SETTER(SetpResolveAttachments);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pDepthStencilAttachment;
      static NAN_GETTER(GetpDepthStencilAttachment);
    static NAN_SETTER(SetpDepthStencilAttachment);
    
    static NAN_GETTER(GetpreserveAttachmentCount);
    static NAN_SETTER(SetpreserveAttachmentCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pPreserveAttachments;
    static NAN_GETTER(GetpPreserveAttachments);
    static NAN_SETTER(SetpPreserveAttachments);
    

    // real instance
    VkSubpassDescription instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSubpassDescription();
    ~_VkSubpassDescription();

};

/** ## END VkSubpassDescription ## **/

/** ## BEGIN VkAttachmentDescription ## **/

class _VkAttachmentDescription: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(Getformat);
    static NAN_SETTER(Setformat);
    
    static NAN_GETTER(Getsamples);
    static NAN_SETTER(Setsamples);
    
    static NAN_GETTER(GetloadOp);
    static NAN_SETTER(SetloadOp);
    
    static NAN_GETTER(GetstoreOp);
    static NAN_SETTER(SetstoreOp);
    
    static NAN_GETTER(GetstencilLoadOp);
    static NAN_SETTER(SetstencilLoadOp);
    
    static NAN_GETTER(GetstencilStoreOp);
    static NAN_SETTER(SetstencilStoreOp);
    
    static NAN_GETTER(GetinitialLayout);
    static NAN_SETTER(SetinitialLayout);
    
    static NAN_GETTER(GetfinalLayout);
    static NAN_SETTER(SetfinalLayout);
    

    // real instance
    VkAttachmentDescription instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkAttachmentDescription();
    ~_VkAttachmentDescription();

};

/** ## END VkAttachmentDescription ## **/

/** ## BEGIN VkRenderPassCreateInfo ## **/

class _VkRenderPassCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetattachmentCount);
    static NAN_SETTER(SetattachmentCount);
    
    std::vector<VkAttachmentDescription>* vpAttachments;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAttachments;
    static NAN_GETTER(GetpAttachments);
    static NAN_SETTER(SetpAttachments);
    
    static NAN_GETTER(GetsubpassCount);
    static NAN_SETTER(SetsubpassCount);
    
    std::vector<VkSubpassDescription>* vpSubpasses;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSubpasses;
    static NAN_GETTER(GetpSubpasses);
    static NAN_SETTER(SetpSubpasses);
    
    static NAN_GETTER(GetdependencyCount);
    static NAN_SETTER(SetdependencyCount);
    
    std::vector<VkSubpassDependency>* vpDependencies;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDependencies;
    static NAN_GETTER(GetpDependencies);
    static NAN_SETTER(SetpDependencies);
    

    // real instance
    VkRenderPassCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRenderPassCreateInfo();
    ~_VkRenderPassCreateInfo();

};

/** ## END VkRenderPassCreateInfo ## **/

/** ## BEGIN VkClearDepthStencilValue ## **/

class _VkClearDepthStencilValue: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getdepth);
    static NAN_SETTER(Setdepth);
    
    static NAN_GETTER(Getstencil);
    static NAN_SETTER(Setstencil);
    

    // real instance
    VkClearDepthStencilValue instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkClearDepthStencilValue();
    ~_VkClearDepthStencilValue();

};

/** ## END VkClearDepthStencilValue ## **/

/** ## BEGIN VkClearValue ## **/

class _VkClearValue: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> color;
      static NAN_GETTER(Getcolor);
    static NAN_SETTER(Setcolor);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> depthStencil;
      static NAN_GETTER(GetdepthStencil);
    static NAN_SETTER(SetdepthStencil);
    

    // real instance
    VkClearValue instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkClearValue();
    ~_VkClearValue();

};

/** ## END VkClearValue ## **/

/** ## BEGIN VkClearAttachment ## **/

class _VkClearAttachment: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetaspectMask);
    static NAN_SETTER(SetaspectMask);
    
    static NAN_GETTER(GetcolorAttachment);
    static NAN_SETTER(SetcolorAttachment);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> clearValue;
      static NAN_GETTER(GetclearValue);
    static NAN_SETTER(SetclearValue);
    

    // real instance
    VkClearAttachment instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkClearAttachment();
    ~_VkClearAttachment();

};

/** ## END VkClearAttachment ## **/

/** ## BEGIN VkRenderPassBeginInfo ## **/

class _VkRenderPassBeginInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> renderPass;
      static NAN_GETTER(GetrenderPass);
    static NAN_SETTER(SetrenderPass);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> framebuffer;
      static NAN_GETTER(Getframebuffer);
    static NAN_SETTER(Setframebuffer);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> renderArea;
      static NAN_GETTER(GetrenderArea);
    static NAN_SETTER(SetrenderArea);
    
    static NAN_GETTER(GetclearValueCount);
    static NAN_SETTER(SetclearValueCount);
    
    std::vector<VkClearValue>* vpClearValues;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pClearValues;
    static NAN_GETTER(GetpClearValues);
    static NAN_SETTER(SetpClearValues);
    

    // real instance
    VkRenderPassBeginInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkRenderPassBeginInfo();
    ~_VkRenderPassBeginInfo();

};

/** ## END VkRenderPassBeginInfo ## **/

/** ## BEGIN VkCommandBufferInheritanceInfo ## **/

class _VkCommandBufferInheritanceInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> renderPass;
      static NAN_GETTER(GetrenderPass);
    static NAN_SETTER(SetrenderPass);
    
    static NAN_GETTER(Getsubpass);
    static NAN_SETTER(Setsubpass);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> framebuffer;
      static NAN_GETTER(Getframebuffer);
    static NAN_SETTER(Setframebuffer);
    
    static NAN_GETTER(GetocclusionQueryEnable);
    static NAN_SETTER(SetocclusionQueryEnable);
    
    static NAN_GETTER(GetqueryFlags);
    static NAN_SETTER(SetqueryFlags);
    
    static NAN_GETTER(GetpipelineStatistics);
    static NAN_SETTER(SetpipelineStatistics);
    

    // real instance
    VkCommandBufferInheritanceInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkCommandBufferInheritanceInfo();
    ~_VkCommandBufferInheritanceInfo();

};

/** ## END VkCommandBufferInheritanceInfo ## **/

/** ## BEGIN VkCommandBufferBeginInfo ## **/

class _VkCommandBufferBeginInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pInheritanceInfo;
      static NAN_GETTER(GetpInheritanceInfo);
    static NAN_SETTER(SetpInheritanceInfo);
    

    // real instance
    VkCommandBufferBeginInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkCommandBufferBeginInfo();
    ~_VkCommandBufferBeginInfo();

};

/** ## END VkCommandBufferBeginInfo ## **/

/** ## BEGIN VkCommandBufferAllocateInfo ## **/

class _VkCommandBufferAllocateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> commandPool;
      static NAN_GETTER(GetcommandPool);
    static NAN_SETTER(SetcommandPool);
    
    static NAN_GETTER(Getlevel);
    static NAN_SETTER(Setlevel);
    
    static NAN_GETTER(GetcommandBufferCount);
    static NAN_SETTER(SetcommandBufferCount);
    

    // real instance
    VkCommandBufferAllocateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkCommandBufferAllocateInfo();
    ~_VkCommandBufferAllocateInfo();

};

/** ## END VkCommandBufferAllocateInfo ## **/

/** ## BEGIN VkCommandPoolCreateInfo ## **/

class _VkCommandPoolCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetqueueFamilyIndex);
    static NAN_SETTER(SetqueueFamilyIndex);
    

    // real instance
    VkCommandPoolCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkCommandPoolCreateInfo();
    ~_VkCommandPoolCreateInfo();

};

/** ## END VkCommandPoolCreateInfo ## **/

/** ## BEGIN VkSamplerCreateInfo ## **/

class _VkSamplerCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetmagFilter);
    static NAN_SETTER(SetmagFilter);
    
    static NAN_GETTER(GetminFilter);
    static NAN_SETTER(SetminFilter);
    
    static NAN_GETTER(GetmipmapMode);
    static NAN_SETTER(SetmipmapMode);
    
    static NAN_GETTER(GetaddressModeU);
    static NAN_SETTER(SetaddressModeU);
    
    static NAN_GETTER(GetaddressModeV);
    static NAN_SETTER(SetaddressModeV);
    
    static NAN_GETTER(GetaddressModeW);
    static NAN_SETTER(SetaddressModeW);
    
    static NAN_GETTER(GetmipLodBias);
    static NAN_SETTER(SetmipLodBias);
    
    static NAN_GETTER(GetanisotropyEnable);
    static NAN_SETTER(SetanisotropyEnable);
    
    static NAN_GETTER(GetmaxAnisotropy);
    static NAN_SETTER(SetmaxAnisotropy);
    
    static NAN_GETTER(GetcompareEnable);
    static NAN_SETTER(SetcompareEnable);
    
    static NAN_GETTER(GetcompareOp);
    static NAN_SETTER(SetcompareOp);
    
    static NAN_GETTER(GetminLod);
    static NAN_SETTER(SetminLod);
    
    static NAN_GETTER(GetmaxLod);
    static NAN_SETTER(SetmaxLod);
    
    static NAN_GETTER(GetborderColor);
    static NAN_SETTER(SetborderColor);
    
    static NAN_GETTER(GetunnormalizedCoordinates);
    static NAN_SETTER(SetunnormalizedCoordinates);
    

    // real instance
    VkSamplerCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSamplerCreateInfo();
    ~_VkSamplerCreateInfo();

};

/** ## END VkSamplerCreateInfo ## **/

/** ## BEGIN VkPushConstantRange ## **/

class _VkPushConstantRange: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetstageFlags);
    static NAN_SETTER(SetstageFlags);
    
    static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    
    static NAN_GETTER(Getsize);
    static NAN_SETTER(Setsize);
    

    // real instance
    VkPushConstantRange instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPushConstantRange();
    ~_VkPushConstantRange();

};

/** ## END VkPushConstantRange ## **/

/** ## BEGIN VkPipelineLayoutCreateInfo ## **/

class _VkPipelineLayoutCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetsetLayoutCount);
    static NAN_SETTER(SetsetLayoutCount);
    
    std::vector<VkDescriptorSetLayout>* vpSetLayouts;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSetLayouts;
    static NAN_GETTER(GetpSetLayouts);
    static NAN_SETTER(SetpSetLayouts);
    
    static NAN_GETTER(GetpushConstantRangeCount);
    static NAN_SETTER(SetpushConstantRangeCount);
    
    std::vector<VkPushConstantRange>* vpPushConstantRanges;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pPushConstantRanges;
    static NAN_GETTER(GetpPushConstantRanges);
    static NAN_SETTER(SetpPushConstantRanges);
    

    // real instance
    VkPipelineLayoutCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineLayoutCreateInfo();
    ~_VkPipelineLayoutCreateInfo();

};

/** ## END VkPipelineLayoutCreateInfo ## **/

/** ## BEGIN VkPipelineCacheCreateInfo ## **/

class _VkPipelineCacheCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetinitialDataSize);
    static NAN_SETTER(SetinitialDataSize);
    

    // real instance
    VkPipelineCacheCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineCacheCreateInfo();
    ~_VkPipelineCacheCreateInfo();

};

/** ## END VkPipelineCacheCreateInfo ## **/

/** ## BEGIN VkPipelineDynamicStateCreateInfo ## **/

class _VkPipelineDynamicStateCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetdynamicStateCount);
    static NAN_SETTER(SetdynamicStateCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pDynamicStates;
    static NAN_GETTER(GetpDynamicStates);
    static NAN_SETTER(SetpDynamicStates);
    

    // real instance
    VkPipelineDynamicStateCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineDynamicStateCreateInfo();
    ~_VkPipelineDynamicStateCreateInfo();

};

/** ## END VkPipelineDynamicStateCreateInfo ## **/

/** ## BEGIN VkPipelineColorBlendAttachmentState ## **/

class _VkPipelineColorBlendAttachmentState: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetblendEnable);
    static NAN_SETTER(SetblendEnable);
    
    static NAN_GETTER(GetsrcColorBlendFactor);
    static NAN_SETTER(SetsrcColorBlendFactor);
    
    static NAN_GETTER(GetdstColorBlendFactor);
    static NAN_SETTER(SetdstColorBlendFactor);
    
    static NAN_GETTER(GetcolorBlendOp);
    static NAN_SETTER(SetcolorBlendOp);
    
    static NAN_GETTER(GetsrcAlphaBlendFactor);
    static NAN_SETTER(SetsrcAlphaBlendFactor);
    
    static NAN_GETTER(GetdstAlphaBlendFactor);
    static NAN_SETTER(SetdstAlphaBlendFactor);
    
    static NAN_GETTER(GetalphaBlendOp);
    static NAN_SETTER(SetalphaBlendOp);
    
    static NAN_GETTER(GetcolorWriteMask);
    static NAN_SETTER(SetcolorWriteMask);
    

    // real instance
    VkPipelineColorBlendAttachmentState instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineColorBlendAttachmentState();
    ~_VkPipelineColorBlendAttachmentState();

};

/** ## END VkPipelineColorBlendAttachmentState ## **/

/** ## BEGIN VkPipelineColorBlendStateCreateInfo ## **/

class _VkPipelineColorBlendStateCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetlogicOpEnable);
    static NAN_SETTER(SetlogicOpEnable);
    
    static NAN_GETTER(GetlogicOp);
    static NAN_SETTER(SetlogicOp);
    
    static NAN_GETTER(GetattachmentCount);
    static NAN_SETTER(SetattachmentCount);
    
    std::vector<VkPipelineColorBlendAttachmentState>* vpAttachments;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pAttachments;
    static NAN_GETTER(GetpAttachments);
    static NAN_SETTER(SetpAttachments);
    
    std::vector<float>* vblendConstants;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> blendConstants;
    static NAN_GETTER(GetblendConstants);
    static NAN_SETTER(SetblendConstants);
    

    // real instance
    VkPipelineColorBlendStateCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineColorBlendStateCreateInfo();
    ~_VkPipelineColorBlendStateCreateInfo();

};

/** ## END VkPipelineColorBlendStateCreateInfo ## **/

/** ## BEGIN VkStencilOpState ## **/

class _VkStencilOpState: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetfailOp);
    static NAN_SETTER(SetfailOp);
    
    static NAN_GETTER(GetpassOp);
    static NAN_SETTER(SetpassOp);
    
    static NAN_GETTER(GetdepthFailOp);
    static NAN_SETTER(SetdepthFailOp);
    
    static NAN_GETTER(GetcompareOp);
    static NAN_SETTER(SetcompareOp);
    
    static NAN_GETTER(GetcompareMask);
    static NAN_SETTER(SetcompareMask);
    
    static NAN_GETTER(GetwriteMask);
    static NAN_SETTER(SetwriteMask);
    
    static NAN_GETTER(Getreference);
    static NAN_SETTER(Setreference);
    

    // real instance
    VkStencilOpState instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkStencilOpState();
    ~_VkStencilOpState();

};

/** ## END VkStencilOpState ## **/

/** ## BEGIN VkPipelineDepthStencilStateCreateInfo ## **/

class _VkPipelineDepthStencilStateCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetdepthTestEnable);
    static NAN_SETTER(SetdepthTestEnable);
    
    static NAN_GETTER(GetdepthWriteEnable);
    static NAN_SETTER(SetdepthWriteEnable);
    
    static NAN_GETTER(GetdepthCompareOp);
    static NAN_SETTER(SetdepthCompareOp);
    
    static NAN_GETTER(GetdepthBoundsTestEnable);
    static NAN_SETTER(SetdepthBoundsTestEnable);
    
    static NAN_GETTER(GetstencilTestEnable);
    static NAN_SETTER(SetstencilTestEnable);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> front;
      static NAN_GETTER(Getfront);
    static NAN_SETTER(Setfront);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> back;
      static NAN_GETTER(Getback);
    static NAN_SETTER(Setback);
    
    static NAN_GETTER(GetminDepthBounds);
    static NAN_SETTER(SetminDepthBounds);
    
    static NAN_GETTER(GetmaxDepthBounds);
    static NAN_SETTER(SetmaxDepthBounds);
    

    // real instance
    VkPipelineDepthStencilStateCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineDepthStencilStateCreateInfo();
    ~_VkPipelineDepthStencilStateCreateInfo();

};

/** ## END VkPipelineDepthStencilStateCreateInfo ## **/

/** ## BEGIN VkPipelineMultisampleStateCreateInfo ## **/

class _VkPipelineMultisampleStateCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetrasterizationSamples);
    static NAN_SETTER(SetrasterizationSamples);
    
    static NAN_GETTER(GetsampleShadingEnable);
    static NAN_SETTER(SetsampleShadingEnable);
    
    static NAN_GETTER(GetminSampleShading);
    static NAN_SETTER(SetminSampleShading);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSampleMask;
    static NAN_GETTER(GetpSampleMask);
    static NAN_SETTER(SetpSampleMask);
    
    static NAN_GETTER(GetalphaToCoverageEnable);
    static NAN_SETTER(SetalphaToCoverageEnable);
    
    static NAN_GETTER(GetalphaToOneEnable);
    static NAN_SETTER(SetalphaToOneEnable);
    

    // real instance
    VkPipelineMultisampleStateCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineMultisampleStateCreateInfo();
    ~_VkPipelineMultisampleStateCreateInfo();

};

/** ## END VkPipelineMultisampleStateCreateInfo ## **/

/** ## BEGIN VkPipelineRasterizationStateCreateInfo ## **/

class _VkPipelineRasterizationStateCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetdepthClampEnable);
    static NAN_SETTER(SetdepthClampEnable);
    
    static NAN_GETTER(GetrasterizerDiscardEnable);
    static NAN_SETTER(SetrasterizerDiscardEnable);
    
    static NAN_GETTER(GetpolygonMode);
    static NAN_SETTER(SetpolygonMode);
    
    static NAN_GETTER(GetcullMode);
    static NAN_SETTER(SetcullMode);
    
    static NAN_GETTER(GetfrontFace);
    static NAN_SETTER(SetfrontFace);
    
    static NAN_GETTER(GetdepthBiasEnable);
    static NAN_SETTER(SetdepthBiasEnable);
    
    static NAN_GETTER(GetdepthBiasConstantFactor);
    static NAN_SETTER(SetdepthBiasConstantFactor);
    
    static NAN_GETTER(GetdepthBiasClamp);
    static NAN_SETTER(SetdepthBiasClamp);
    
    static NAN_GETTER(GetdepthBiasSlopeFactor);
    static NAN_SETTER(SetdepthBiasSlopeFactor);
    
    static NAN_GETTER(GetlineWidth);
    static NAN_SETTER(SetlineWidth);
    

    // real instance
    VkPipelineRasterizationStateCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineRasterizationStateCreateInfo();
    ~_VkPipelineRasterizationStateCreateInfo();

};

/** ## END VkPipelineRasterizationStateCreateInfo ## **/

/** ## BEGIN VkViewport ## **/

class _VkViewport: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getx);
    static NAN_SETTER(Setx);
    
    static NAN_GETTER(Gety);
    static NAN_SETTER(Sety);
    
    static NAN_GETTER(Getwidth);
    static NAN_SETTER(Setwidth);
    
    static NAN_GETTER(Getheight);
    static NAN_SETTER(Setheight);
    
    static NAN_GETTER(GetminDepth);
    static NAN_SETTER(SetminDepth);
    
    static NAN_GETTER(GetmaxDepth);
    static NAN_SETTER(SetmaxDepth);
    

    // real instance
    VkViewport instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkViewport();
    ~_VkViewport();

};

/** ## END VkViewport ## **/

/** ## BEGIN VkPipelineViewportStateCreateInfo ## **/

class _VkPipelineViewportStateCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetviewportCount);
    static NAN_SETTER(SetviewportCount);
    
    std::vector<VkViewport>* vpViewports;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pViewports;
    static NAN_GETTER(GetpViewports);
    static NAN_SETTER(SetpViewports);
    
    static NAN_GETTER(GetscissorCount);
    static NAN_SETTER(SetscissorCount);
    
    std::vector<VkRect2D>* vpScissors;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pScissors;
    static NAN_GETTER(GetpScissors);
    static NAN_SETTER(SetpScissors);
    

    // real instance
    VkPipelineViewportStateCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineViewportStateCreateInfo();
    ~_VkPipelineViewportStateCreateInfo();

};

/** ## END VkPipelineViewportStateCreateInfo ## **/

/** ## BEGIN VkPipelineTessellationStateCreateInfo ## **/

class _VkPipelineTessellationStateCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetpatchControlPoints);
    static NAN_SETTER(SetpatchControlPoints);
    

    // real instance
    VkPipelineTessellationStateCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineTessellationStateCreateInfo();
    ~_VkPipelineTessellationStateCreateInfo();

};

/** ## END VkPipelineTessellationStateCreateInfo ## **/

/** ## BEGIN VkPipelineInputAssemblyStateCreateInfo ## **/

class _VkPipelineInputAssemblyStateCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(Gettopology);
    static NAN_SETTER(Settopology);
    
    static NAN_GETTER(GetprimitiveRestartEnable);
    static NAN_SETTER(SetprimitiveRestartEnable);
    

    // real instance
    VkPipelineInputAssemblyStateCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineInputAssemblyStateCreateInfo();
    ~_VkPipelineInputAssemblyStateCreateInfo();

};

/** ## END VkPipelineInputAssemblyStateCreateInfo ## **/

/** ## BEGIN VkVertexInputAttributeDescription ## **/

class _VkVertexInputAttributeDescription: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getlocation);
    static NAN_SETTER(Setlocation);
    
    static NAN_GETTER(Getbinding);
    static NAN_SETTER(Setbinding);
    
    static NAN_GETTER(Getformat);
    static NAN_SETTER(Setformat);
    
    static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    

    // real instance
    VkVertexInputAttributeDescription instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkVertexInputAttributeDescription();
    ~_VkVertexInputAttributeDescription();

};

/** ## END VkVertexInputAttributeDescription ## **/

/** ## BEGIN VkVertexInputBindingDescription ## **/

class _VkVertexInputBindingDescription: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getbinding);
    static NAN_SETTER(Setbinding);
    
    static NAN_GETTER(Getstride);
    static NAN_SETTER(Setstride);
    
    static NAN_GETTER(GetinputRate);
    static NAN_SETTER(SetinputRate);
    

    // real instance
    VkVertexInputBindingDescription instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkVertexInputBindingDescription();
    ~_VkVertexInputBindingDescription();

};

/** ## END VkVertexInputBindingDescription ## **/

/** ## BEGIN VkPipelineVertexInputStateCreateInfo ## **/

class _VkPipelineVertexInputStateCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetvertexBindingDescriptionCount);
    static NAN_SETTER(SetvertexBindingDescriptionCount);
    
    std::vector<VkVertexInputBindingDescription>* vpVertexBindingDescriptions;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pVertexBindingDescriptions;
    static NAN_GETTER(GetpVertexBindingDescriptions);
    static NAN_SETTER(SetpVertexBindingDescriptions);
    
    static NAN_GETTER(GetvertexAttributeDescriptionCount);
    static NAN_SETTER(SetvertexAttributeDescriptionCount);
    
    std::vector<VkVertexInputAttributeDescription>* vpVertexAttributeDescriptions;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pVertexAttributeDescriptions;
    static NAN_GETTER(GetpVertexAttributeDescriptions);
    static NAN_SETTER(SetpVertexAttributeDescriptions);
    

    // real instance
    VkPipelineVertexInputStateCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkPipelineVertexInputStateCreateInfo();
    ~_VkPipelineVertexInputStateCreateInfo();

};

/** ## END VkPipelineVertexInputStateCreateInfo ## **/

/** ## BEGIN VkGraphicsPipelineCreateInfo ## **/

class _VkGraphicsPipelineCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetstageCount);
    static NAN_SETTER(SetstageCount);
    
    std::vector<VkPipelineShaderStageCreateInfo>* vpStages;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pStages;
    static NAN_GETTER(GetpStages);
    static NAN_SETTER(SetpStages);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pVertexInputState;
      static NAN_GETTER(GetpVertexInputState);
    static NAN_SETTER(SetpVertexInputState);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pInputAssemblyState;
      static NAN_GETTER(GetpInputAssemblyState);
    static NAN_SETTER(SetpInputAssemblyState);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pTessellationState;
      static NAN_GETTER(GetpTessellationState);
    static NAN_SETTER(SetpTessellationState);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pViewportState;
      static NAN_GETTER(GetpViewportState);
    static NAN_SETTER(SetpViewportState);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pRasterizationState;
      static NAN_GETTER(GetpRasterizationState);
    static NAN_SETTER(SetpRasterizationState);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pMultisampleState;
      static NAN_GETTER(GetpMultisampleState);
    static NAN_SETTER(SetpMultisampleState);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pDepthStencilState;
      static NAN_GETTER(GetpDepthStencilState);
    static NAN_SETTER(SetpDepthStencilState);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pColorBlendState;
      static NAN_GETTER(GetpColorBlendState);
    static NAN_SETTER(SetpColorBlendState);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pDynamicState;
      static NAN_GETTER(GetpDynamicState);
    static NAN_SETTER(SetpDynamicState);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> layout;
      static NAN_GETTER(Getlayout);
    static NAN_SETTER(Setlayout);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> renderPass;
      static NAN_GETTER(GetrenderPass);
    static NAN_SETTER(SetrenderPass);
    
    static NAN_GETTER(Getsubpass);
    static NAN_SETTER(Setsubpass);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> basePipelineHandle;
      static NAN_GETTER(GetbasePipelineHandle);
    static NAN_SETTER(SetbasePipelineHandle);
    
    static NAN_GETTER(GetbasePipelineIndex);
    static NAN_SETTER(SetbasePipelineIndex);
    

    // real instance
    VkGraphicsPipelineCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkGraphicsPipelineCreateInfo();
    ~_VkGraphicsPipelineCreateInfo();

};

/** ## END VkGraphicsPipelineCreateInfo ## **/

/** ## BEGIN VkComputePipelineCreateInfo ## **/

class _VkComputePipelineCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> stage;
      static NAN_GETTER(Getstage);
    static NAN_SETTER(Setstage);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> layout;
      static NAN_GETTER(Getlayout);
    static NAN_SETTER(Setlayout);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> basePipelineHandle;
      static NAN_GETTER(GetbasePipelineHandle);
    static NAN_SETTER(SetbasePipelineHandle);
    
    static NAN_GETTER(GetbasePipelineIndex);
    static NAN_SETTER(SetbasePipelineIndex);
    

    // real instance
    VkComputePipelineCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkComputePipelineCreateInfo();
    ~_VkComputePipelineCreateInfo();

};

/** ## END VkComputePipelineCreateInfo ## **/

/** ## BEGIN VkDescriptorSetAllocateInfo ## **/

class _VkDescriptorSetAllocateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> descriptorPool;
      static NAN_GETTER(GetdescriptorPool);
    static NAN_SETTER(SetdescriptorPool);
    
    static NAN_GETTER(GetdescriptorSetCount);
    static NAN_SETTER(SetdescriptorSetCount);
    
    std::vector<VkDescriptorSetLayout>* vpSetLayouts;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSetLayouts;
    static NAN_GETTER(GetpSetLayouts);
    static NAN_SETTER(SetpSetLayouts);
    

    // real instance
    VkDescriptorSetAllocateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorSetAllocateInfo();
    ~_VkDescriptorSetAllocateInfo();

};

/** ## END VkDescriptorSetAllocateInfo ## **/

/** ## BEGIN VkDescriptorPoolSize ## **/

class _VkDescriptorPoolSize: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Gettype);
    static NAN_SETTER(Settype);
    
    static NAN_GETTER(GetdescriptorCount);
    static NAN_SETTER(SetdescriptorCount);
    

    // real instance
    VkDescriptorPoolSize instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorPoolSize();
    ~_VkDescriptorPoolSize();

};

/** ## END VkDescriptorPoolSize ## **/

/** ## BEGIN VkDescriptorPoolCreateInfo ## **/

class _VkDescriptorPoolCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetmaxSets);
    static NAN_SETTER(SetmaxSets);
    
    static NAN_GETTER(GetpoolSizeCount);
    static NAN_SETTER(SetpoolSizeCount);
    
    std::vector<VkDescriptorPoolSize>* vpPoolSizes;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pPoolSizes;
    static NAN_GETTER(GetpPoolSizes);
    static NAN_SETTER(SetpPoolSizes);
    

    // real instance
    VkDescriptorPoolCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorPoolCreateInfo();
    ~_VkDescriptorPoolCreateInfo();

};

/** ## END VkDescriptorPoolCreateInfo ## **/

/** ## BEGIN VkDescriptorSetLayoutBinding ## **/

class _VkDescriptorSetLayoutBinding: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getbinding);
    static NAN_SETTER(Setbinding);
    
    static NAN_GETTER(GetdescriptorType);
    static NAN_SETTER(SetdescriptorType);
    
    static NAN_GETTER(GetdescriptorCount);
    static NAN_SETTER(SetdescriptorCount);
    
    static NAN_GETTER(GetstageFlags);
    static NAN_SETTER(SetstageFlags);
    
    std::vector<VkSampler>* vpImmutableSamplers;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pImmutableSamplers;
    static NAN_GETTER(GetpImmutableSamplers);
    static NAN_SETTER(SetpImmutableSamplers);
    

    // real instance
    VkDescriptorSetLayoutBinding instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorSetLayoutBinding();
    ~_VkDescriptorSetLayoutBinding();

};

/** ## END VkDescriptorSetLayoutBinding ## **/

/** ## BEGIN VkDescriptorSetLayoutCreateInfo ## **/

class _VkDescriptorSetLayoutCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetbindingCount);
    static NAN_SETTER(SetbindingCount);
    
    std::vector<VkDescriptorSetLayoutBinding>* vpBindings;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pBindings;
    static NAN_GETTER(GetpBindings);
    static NAN_SETTER(SetpBindings);
    

    // real instance
    VkDescriptorSetLayoutCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorSetLayoutCreateInfo();
    ~_VkDescriptorSetLayoutCreateInfo();

};

/** ## END VkDescriptorSetLayoutCreateInfo ## **/

/** ## BEGIN VkShaderModuleCreateInfo ## **/

class _VkShaderModuleCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetcodeSize);
    static NAN_SETTER(SetcodeSize);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pCode;
    static NAN_GETTER(GetpCode);
    static NAN_SETTER(SetpCode);
    

    // real instance
    VkShaderModuleCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkShaderModuleCreateInfo();
    ~_VkShaderModuleCreateInfo();

};

/** ## END VkShaderModuleCreateInfo ## **/

/** ## BEGIN VkOffset3D ## **/

class _VkOffset3D: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(Getx);
    static NAN_SETTER(Setx);
    
    static NAN_GETTER(Gety);
    static NAN_SETTER(Sety);
    
    static NAN_GETTER(Getz);
    static NAN_SETTER(Setz);
    

    // real instance
    VkOffset3D instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkOffset3D();
    ~_VkOffset3D();

};

/** ## END VkOffset3D ## **/

/** ## BEGIN VkImageSubresourceLayers ## **/

class _VkImageSubresourceLayers: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetaspectMask);
    static NAN_SETTER(SetaspectMask);
    
    static NAN_GETTER(GetmipLevel);
    static NAN_SETTER(SetmipLevel);
    
    static NAN_GETTER(GetbaseArrayLayer);
    static NAN_SETTER(SetbaseArrayLayer);
    
    static NAN_GETTER(GetlayerCount);
    static NAN_SETTER(SetlayerCount);
    

    // real instance
    VkImageSubresourceLayers instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageSubresourceLayers();
    ~_VkImageSubresourceLayers();

};

/** ## END VkImageSubresourceLayers ## **/

/** ## BEGIN VkImageResolve ## **/

class _VkImageResolve: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> srcSubresource;
      static NAN_GETTER(GetsrcSubresource);
    static NAN_SETTER(SetsrcSubresource);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> srcOffset;
      static NAN_GETTER(GetsrcOffset);
    static NAN_SETTER(SetsrcOffset);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> dstSubresource;
      static NAN_GETTER(GetdstSubresource);
    static NAN_SETTER(SetdstSubresource);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> dstOffset;
      static NAN_GETTER(GetdstOffset);
    static NAN_SETTER(SetdstOffset);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> extent;
      static NAN_GETTER(Getextent);
    static NAN_SETTER(Setextent);
    

    // real instance
    VkImageResolve instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageResolve();
    ~_VkImageResolve();

};

/** ## END VkImageResolve ## **/

/** ## BEGIN VkBufferImageCopy ## **/

class _VkBufferImageCopy: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetbufferOffset);
    static NAN_SETTER(SetbufferOffset);
    
    static NAN_GETTER(GetbufferRowLength);
    static NAN_SETTER(SetbufferRowLength);
    
    static NAN_GETTER(GetbufferImageHeight);
    static NAN_SETTER(SetbufferImageHeight);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> imageSubresource;
      static NAN_GETTER(GetimageSubresource);
    static NAN_SETTER(SetimageSubresource);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> imageOffset;
      static NAN_GETTER(GetimageOffset);
    static NAN_SETTER(SetimageOffset);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> imageExtent;
      static NAN_GETTER(GetimageExtent);
    static NAN_SETTER(SetimageExtent);
    

    // real instance
    VkBufferImageCopy instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBufferImageCopy();
    ~_VkBufferImageCopy();

};

/** ## END VkBufferImageCopy ## **/

/** ## BEGIN VkImageBlit ## **/

class _VkImageBlit: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> srcSubresource;
      static NAN_GETTER(GetsrcSubresource);
    static NAN_SETTER(SetsrcSubresource);
    
    std::vector<VkOffset3D>* vsrcOffsets;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> srcOffsets;
    static NAN_GETTER(GetsrcOffsets);
    static NAN_SETTER(SetsrcOffsets);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> dstSubresource;
      static NAN_GETTER(GetdstSubresource);
    static NAN_SETTER(SetdstSubresource);
    
    std::vector<VkOffset3D>* vdstOffsets;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> dstOffsets;
    static NAN_GETTER(GetdstOffsets);
    static NAN_SETTER(SetdstOffsets);
    

    // real instance
    VkImageBlit instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageBlit();
    ~_VkImageBlit();

};

/** ## END VkImageBlit ## **/

/** ## BEGIN VkImageCopy ## **/

class _VkImageCopy: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> srcSubresource;
      static NAN_GETTER(GetsrcSubresource);
    static NAN_SETTER(SetsrcSubresource);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> srcOffset;
      static NAN_GETTER(GetsrcOffset);
    static NAN_SETTER(SetsrcOffset);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> dstSubresource;
      static NAN_GETTER(GetdstSubresource);
    static NAN_SETTER(SetdstSubresource);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> dstOffset;
      static NAN_GETTER(GetdstOffset);
    static NAN_SETTER(SetdstOffset);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> extent;
      static NAN_GETTER(Getextent);
    static NAN_SETTER(Setextent);
    

    // real instance
    VkImageCopy instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageCopy();
    ~_VkImageCopy();

};

/** ## END VkImageCopy ## **/

/** ## BEGIN VkImageSubresource ## **/

class _VkImageSubresource: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetaspectMask);
    static NAN_SETTER(SetaspectMask);
    
    static NAN_GETTER(GetmipLevel);
    static NAN_SETTER(SetmipLevel);
    
    static NAN_GETTER(GetarrayLayer);
    static NAN_SETTER(SetarrayLayer);
    

    // real instance
    VkImageSubresource instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageSubresource();
    ~_VkImageSubresource();

};

/** ## END VkImageSubresource ## **/

/** ## BEGIN VkSparseImageMemoryBind ## **/

class _VkSparseImageMemoryBind: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> subresource;
      static NAN_GETTER(Getsubresource);
    static NAN_SETTER(Setsubresource);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> offset;
      static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> extent;
      static NAN_GETTER(Getextent);
    static NAN_SETTER(Setextent);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> memory;
      static NAN_GETTER(Getmemory);
    static NAN_SETTER(Setmemory);
    
    static NAN_GETTER(GetmemoryOffset);
    static NAN_SETTER(SetmemoryOffset);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    

    // real instance
    VkSparseImageMemoryBind instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSparseImageMemoryBind();
    ~_VkSparseImageMemoryBind();

};

/** ## END VkSparseImageMemoryBind ## **/

/** ## BEGIN VkSparseImageMemoryBindInfo ## **/

class _VkSparseImageMemoryBindInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> image;
      static NAN_GETTER(Getimage);
    static NAN_SETTER(Setimage);
    
    static NAN_GETTER(GetbindCount);
    static NAN_SETTER(SetbindCount);
    
    std::vector<VkSparseImageMemoryBind>* vpBinds;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pBinds;
    static NAN_GETTER(GetpBinds);
    static NAN_SETTER(SetpBinds);
    

    // real instance
    VkSparseImageMemoryBindInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSparseImageMemoryBindInfo();
    ~_VkSparseImageMemoryBindInfo();

};

/** ## END VkSparseImageMemoryBindInfo ## **/

/** ## BEGIN VkSparseMemoryBind ## **/

class _VkSparseMemoryBind: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetresourceOffset);
    static NAN_SETTER(SetresourceOffset);
    
    static NAN_GETTER(Getsize);
    static NAN_SETTER(Setsize);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> memory;
      static NAN_GETTER(Getmemory);
    static NAN_SETTER(Setmemory);
    
    static NAN_GETTER(GetmemoryOffset);
    static NAN_SETTER(SetmemoryOffset);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    

    // real instance
    VkSparseMemoryBind instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSparseMemoryBind();
    ~_VkSparseMemoryBind();

};

/** ## END VkSparseMemoryBind ## **/

/** ## BEGIN VkSparseImageOpaqueMemoryBindInfo ## **/

class _VkSparseImageOpaqueMemoryBindInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> image;
      static NAN_GETTER(Getimage);
    static NAN_SETTER(Setimage);
    
    static NAN_GETTER(GetbindCount);
    static NAN_SETTER(SetbindCount);
    
    std::vector<VkSparseMemoryBind>* vpBinds;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pBinds;
    static NAN_GETTER(GetpBinds);
    static NAN_SETTER(SetpBinds);
    

    // real instance
    VkSparseImageOpaqueMemoryBindInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSparseImageOpaqueMemoryBindInfo();
    ~_VkSparseImageOpaqueMemoryBindInfo();

};

/** ## END VkSparseImageOpaqueMemoryBindInfo ## **/

/** ## BEGIN VkSparseBufferMemoryBindInfo ## **/

class _VkSparseBufferMemoryBindInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> buffer;
      static NAN_GETTER(Getbuffer);
    static NAN_SETTER(Setbuffer);
    
    static NAN_GETTER(GetbindCount);
    static NAN_SETTER(SetbindCount);
    
    std::vector<VkSparseMemoryBind>* vpBinds;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pBinds;
    static NAN_GETTER(GetpBinds);
    static NAN_SETTER(SetpBinds);
    

    // real instance
    VkSparseBufferMemoryBindInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkSparseBufferMemoryBindInfo();
    ~_VkSparseBufferMemoryBindInfo();

};

/** ## END VkSparseBufferMemoryBindInfo ## **/

/** ## BEGIN VkBindSparseInfo ## **/

class _VkBindSparseInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetwaitSemaphoreCount);
    static NAN_SETTER(SetwaitSemaphoreCount);
    
    std::vector<VkSemaphore>* vpWaitSemaphores;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pWaitSemaphores;
    static NAN_GETTER(GetpWaitSemaphores);
    static NAN_SETTER(SetpWaitSemaphores);
    
    static NAN_GETTER(GetbufferBindCount);
    static NAN_SETTER(SetbufferBindCount);
    
    std::vector<VkSparseBufferMemoryBindInfo>* vpBufferBinds;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pBufferBinds;
    static NAN_GETTER(GetpBufferBinds);
    static NAN_SETTER(SetpBufferBinds);
    
    static NAN_GETTER(GetimageOpaqueBindCount);
    static NAN_SETTER(SetimageOpaqueBindCount);
    
    std::vector<VkSparseImageOpaqueMemoryBindInfo>* vpImageOpaqueBinds;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pImageOpaqueBinds;
    static NAN_GETTER(GetpImageOpaqueBinds);
    static NAN_SETTER(SetpImageOpaqueBinds);
    
    static NAN_GETTER(GetimageBindCount);
    static NAN_SETTER(SetimageBindCount);
    
    std::vector<VkSparseImageMemoryBindInfo>* vpImageBinds;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pImageBinds;
    static NAN_GETTER(GetpImageBinds);
    static NAN_SETTER(SetpImageBinds);
    
    static NAN_GETTER(GetsignalSemaphoreCount);
    static NAN_SETTER(SetsignalSemaphoreCount);
    
    std::vector<VkSemaphore>* vpSignalSemaphores;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pSignalSemaphores;
    static NAN_GETTER(GetpSignalSemaphores);
    static NAN_SETTER(SetpSignalSemaphores);
    

    // real instance
    VkBindSparseInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBindSparseInfo();
    ~_VkBindSparseInfo();

};

/** ## END VkBindSparseInfo ## **/

/** ## BEGIN VkBufferCopy ## **/

class _VkBufferCopy: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsrcOffset);
    static NAN_SETTER(SetsrcOffset);
    
    static NAN_GETTER(GetdstOffset);
    static NAN_SETTER(SetdstOffset);
    
    static NAN_GETTER(Getsize);
    static NAN_SETTER(Setsize);
    

    // real instance
    VkBufferCopy instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBufferCopy();
    ~_VkBufferCopy();

};

/** ## END VkBufferCopy ## **/

/** ## BEGIN VkImageSubresourceRange ## **/

class _VkImageSubresourceRange: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetaspectMask);
    static NAN_SETTER(SetaspectMask);
    
    static NAN_GETTER(GetbaseMipLevel);
    static NAN_SETTER(SetbaseMipLevel);
    
    static NAN_GETTER(GetlevelCount);
    static NAN_SETTER(SetlevelCount);
    
    static NAN_GETTER(GetbaseArrayLayer);
    static NAN_SETTER(SetbaseArrayLayer);
    
    static NAN_GETTER(GetlayerCount);
    static NAN_SETTER(SetlayerCount);
    

    // real instance
    VkImageSubresourceRange instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageSubresourceRange();
    ~_VkImageSubresourceRange();

};

/** ## END VkImageSubresourceRange ## **/

/** ## BEGIN VkImageViewCreateInfo ## **/

class _VkImageViewCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> image;
      static NAN_GETTER(Getimage);
    static NAN_SETTER(Setimage);
    
    static NAN_GETTER(GetviewType);
    static NAN_SETTER(SetviewType);
    
    static NAN_GETTER(Getformat);
    static NAN_SETTER(Setformat);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> components;
      static NAN_GETTER(Getcomponents);
    static NAN_SETTER(Setcomponents);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> subresourceRange;
      static NAN_GETTER(GetsubresourceRange);
    static NAN_SETTER(SetsubresourceRange);
    

    // real instance
    VkImageViewCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageViewCreateInfo();
    ~_VkImageViewCreateInfo();

};

/** ## END VkImageViewCreateInfo ## **/

/** ## BEGIN VkImageCreateInfo ## **/

class _VkImageCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetimageType);
    static NAN_SETTER(SetimageType);
    
    static NAN_GETTER(Getformat);
    static NAN_SETTER(Setformat);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> extent;
      static NAN_GETTER(Getextent);
    static NAN_SETTER(Setextent);
    
    static NAN_GETTER(GetmipLevels);
    static NAN_SETTER(SetmipLevels);
    
    static NAN_GETTER(GetarrayLayers);
    static NAN_SETTER(SetarrayLayers);
    
    static NAN_GETTER(Getsamples);
    static NAN_SETTER(Setsamples);
    
    static NAN_GETTER(Gettiling);
    static NAN_SETTER(Settiling);
    
    static NAN_GETTER(Getusage);
    static NAN_SETTER(Setusage);
    
    static NAN_GETTER(GetsharingMode);
    static NAN_SETTER(SetsharingMode);
    
    static NAN_GETTER(GetqueueFamilyIndexCount);
    static NAN_SETTER(SetqueueFamilyIndexCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pQueueFamilyIndices;
    static NAN_GETTER(GetpQueueFamilyIndices);
    static NAN_SETTER(SetpQueueFamilyIndices);
    
    static NAN_GETTER(GetinitialLayout);
    static NAN_SETTER(SetinitialLayout);
    

    // real instance
    VkImageCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageCreateInfo();
    ~_VkImageCreateInfo();

};

/** ## END VkImageCreateInfo ## **/

/** ## BEGIN VkImageMemoryBarrier ## **/

class _VkImageMemoryBarrier: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsrcAccessMask);
    static NAN_SETTER(SetsrcAccessMask);
    
    static NAN_GETTER(GetdstAccessMask);
    static NAN_SETTER(SetdstAccessMask);
    
    static NAN_GETTER(GetoldLayout);
    static NAN_SETTER(SetoldLayout);
    
    static NAN_GETTER(GetnewLayout);
    static NAN_SETTER(SetnewLayout);
    
    static NAN_GETTER(GetsrcQueueFamilyIndex);
    static NAN_SETTER(SetsrcQueueFamilyIndex);
    
    static NAN_GETTER(GetdstQueueFamilyIndex);
    static NAN_SETTER(SetdstQueueFamilyIndex);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> image;
      static NAN_GETTER(Getimage);
    static NAN_SETTER(Setimage);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> subresourceRange;
      static NAN_GETTER(GetsubresourceRange);
    static NAN_SETTER(SetsubresourceRange);
    

    // real instance
    VkImageMemoryBarrier instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkImageMemoryBarrier();
    ~_VkImageMemoryBarrier();

};

/** ## END VkImageMemoryBarrier ## **/

/** ## BEGIN VkBufferMemoryBarrier ## **/

class _VkBufferMemoryBarrier: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsrcAccessMask);
    static NAN_SETTER(SetsrcAccessMask);
    
    static NAN_GETTER(GetdstAccessMask);
    static NAN_SETTER(SetdstAccessMask);
    
    static NAN_GETTER(GetsrcQueueFamilyIndex);
    static NAN_SETTER(SetsrcQueueFamilyIndex);
    
    static NAN_GETTER(GetdstQueueFamilyIndex);
    static NAN_SETTER(SetdstQueueFamilyIndex);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> buffer;
      static NAN_GETTER(Getbuffer);
    static NAN_SETTER(Setbuffer);
    
    static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    
    static NAN_GETTER(Getsize);
    static NAN_SETTER(Setsize);
    

    // real instance
    VkBufferMemoryBarrier instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBufferMemoryBarrier();
    ~_VkBufferMemoryBarrier();

};

/** ## END VkBufferMemoryBarrier ## **/

/** ## BEGIN VkMemoryBarrier ## **/

class _VkMemoryBarrier: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetsrcAccessMask);
    static NAN_SETTER(SetsrcAccessMask);
    
    static NAN_GETTER(GetdstAccessMask);
    static NAN_SETTER(SetdstAccessMask);
    

    // real instance
    VkMemoryBarrier instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryBarrier();
    ~_VkMemoryBarrier();

};

/** ## END VkMemoryBarrier ## **/

/** ## BEGIN VkBufferViewCreateInfo ## **/

class _VkBufferViewCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> buffer;
      static NAN_GETTER(Getbuffer);
    static NAN_SETTER(Setbuffer);
    
    static NAN_GETTER(Getformat);
    static NAN_SETTER(Setformat);
    
    static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    
    static NAN_GETTER(Getrange);
    static NAN_SETTER(Setrange);
    

    // real instance
    VkBufferViewCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBufferViewCreateInfo();
    ~_VkBufferViewCreateInfo();

};

/** ## END VkBufferViewCreateInfo ## **/

/** ## BEGIN VkBufferCreateInfo ## **/

class _VkBufferCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(Getsize);
    static NAN_SETTER(Setsize);
    
    static NAN_GETTER(Getusage);
    static NAN_SETTER(Setusage);
    
    static NAN_GETTER(GetsharingMode);
    static NAN_SETTER(SetsharingMode);
    
    static NAN_GETTER(GetqueueFamilyIndexCount);
    static NAN_SETTER(SetqueueFamilyIndexCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pQueueFamilyIndices;
    static NAN_GETTER(GetpQueueFamilyIndices);
    static NAN_SETTER(SetpQueueFamilyIndices);
    

    // real instance
    VkBufferCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBufferCreateInfo();
    ~_VkBufferCreateInfo();

};

/** ## END VkBufferCreateInfo ## **/

/** ## BEGIN VkCopyDescriptorSet ## **/

class _VkCopyDescriptorSet: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> srcSet;
      static NAN_GETTER(GetsrcSet);
    static NAN_SETTER(SetsrcSet);
    
    static NAN_GETTER(GetsrcBinding);
    static NAN_SETTER(SetsrcBinding);
    
    static NAN_GETTER(GetsrcArrayElement);
    static NAN_SETTER(SetsrcArrayElement);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> dstSet;
      static NAN_GETTER(GetdstSet);
    static NAN_SETTER(SetdstSet);
    
    static NAN_GETTER(GetdstBinding);
    static NAN_SETTER(SetdstBinding);
    
    static NAN_GETTER(GetdstArrayElement);
    static NAN_SETTER(SetdstArrayElement);
    
    static NAN_GETTER(GetdescriptorCount);
    static NAN_SETTER(SetdescriptorCount);
    

    // real instance
    VkCopyDescriptorSet instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkCopyDescriptorSet();
    ~_VkCopyDescriptorSet();

};

/** ## END VkCopyDescriptorSet ## **/

/** ## BEGIN VkDescriptorBufferInfo ## **/

class _VkDescriptorBufferInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> buffer;
      static NAN_GETTER(Getbuffer);
    static NAN_SETTER(Setbuffer);
    
    static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    
    static NAN_GETTER(Getrange);
    static NAN_SETTER(Setrange);
    

    // real instance
    VkDescriptorBufferInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorBufferInfo();
    ~_VkDescriptorBufferInfo();

};

/** ## END VkDescriptorBufferInfo ## **/

/** ## BEGIN VkDescriptorImageInfo ## **/

class _VkDescriptorImageInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> sampler;
      static NAN_GETTER(Getsampler);
    static NAN_SETTER(Setsampler);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> imageView;
      static NAN_GETTER(GetimageView);
    static NAN_SETTER(SetimageView);
    
    static NAN_GETTER(GetimageLayout);
    static NAN_SETTER(SetimageLayout);
    

    // real instance
    VkDescriptorImageInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDescriptorImageInfo();
    ~_VkDescriptorImageInfo();

};

/** ## END VkDescriptorImageInfo ## **/

/** ## BEGIN VkWriteDescriptorSet ## **/

class _VkWriteDescriptorSet: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> dstSet;
      static NAN_GETTER(GetdstSet);
    static NAN_SETTER(SetdstSet);
    
    static NAN_GETTER(GetdstBinding);
    static NAN_SETTER(SetdstBinding);
    
    static NAN_GETTER(GetdstArrayElement);
    static NAN_SETTER(SetdstArrayElement);
    
    static NAN_GETTER(GetdescriptorCount);
    static NAN_SETTER(SetdescriptorCount);
    
    static NAN_GETTER(GetdescriptorType);
    static NAN_SETTER(SetdescriptorType);
    
    std::vector<VkDescriptorImageInfo>* vpImageInfo;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pImageInfo;
    static NAN_GETTER(GetpImageInfo);
    static NAN_SETTER(SetpImageInfo);
    
    std::vector<VkDescriptorBufferInfo>* vpBufferInfo;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pBufferInfo;
    static NAN_GETTER(GetpBufferInfo);
    static NAN_SETTER(SetpBufferInfo);
    
    std::vector<VkBufferView>* vpTexelBufferView;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pTexelBufferView;
    static NAN_GETTER(GetpTexelBufferView);
    static NAN_SETTER(SetpTexelBufferView);
    

    // real instance
    VkWriteDescriptorSet instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkWriteDescriptorSet();
    ~_VkWriteDescriptorSet();

};

/** ## END VkWriteDescriptorSet ## **/

/** ## BEGIN VkMappedMemoryRange ## **/

class _VkMappedMemoryRange: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> memory;
      static NAN_GETTER(Getmemory);
    static NAN_SETTER(Setmemory);
    
    static NAN_GETTER(Getoffset);
    static NAN_SETTER(Setoffset);
    
    static NAN_GETTER(Getsize);
    static NAN_SETTER(Setsize);
    

    // real instance
    VkMappedMemoryRange instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMappedMemoryRange();
    ~_VkMappedMemoryRange();

};

/** ## END VkMappedMemoryRange ## **/

/** ## BEGIN VkMemoryAllocateInfo ## **/

class _VkMemoryAllocateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(GetallocationSize);
    static NAN_SETTER(SetallocationSize);
    
    static NAN_GETTER(GetmemoryTypeIndex);
    static NAN_SETTER(SetmemoryTypeIndex);
    

    // real instance
    VkMemoryAllocateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkMemoryAllocateInfo();
    ~_VkMemoryAllocateInfo();

};

/** ## END VkMemoryAllocateInfo ## **/

/** ## BEGIN VkApplicationInfo ## **/

class _VkApplicationInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> pApplicationName;
    static NAN_GETTER(GetpApplicationName);
    static NAN_SETTER(SetpApplicationName);
    
    static NAN_GETTER(GetapplicationVersion);
    static NAN_SETTER(SetapplicationVersion);
    
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> pEngineName;
    static NAN_GETTER(GetpEngineName);
    static NAN_SETTER(SetpEngineName);
    
    static NAN_GETTER(GetengineVersion);
    static NAN_SETTER(SetengineVersion);
    
    static NAN_GETTER(GetapiVersion);
    static NAN_SETTER(SetapiVersion);
    

    // real instance
    VkApplicationInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkApplicationInfo();
    ~_VkApplicationInfo();

};

/** ## END VkApplicationInfo ## **/

/** ## BEGIN VkInstanceCreateInfo ## **/

class _VkInstanceCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pApplicationInfo;
      static NAN_GETTER(GetpApplicationInfo);
    static NAN_SETTER(SetpApplicationInfo);
    
    static NAN_GETTER(GetenabledLayerCount);
    static NAN_SETTER(SetenabledLayerCount);
    
    std::vector<char *>* vppEnabledLayerNames;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> ppEnabledLayerNames;
    static NAN_GETTER(GetppEnabledLayerNames);
    static NAN_SETTER(SetppEnabledLayerNames);
    
    static NAN_GETTER(GetenabledExtensionCount);
    static NAN_SETTER(SetenabledExtensionCount);
    
    std::vector<char *>* vppEnabledExtensionNames;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> ppEnabledExtensionNames;
    static NAN_GETTER(GetppEnabledExtensionNames);
    static NAN_SETTER(SetppEnabledExtensionNames);
    

    // real instance
    VkInstanceCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkInstanceCreateInfo();
    ~_VkInstanceCreateInfo();

};

/** ## END VkInstanceCreateInfo ## **/

/** ## BEGIN VkDeviceQueueCreateInfo ## **/

class _VkDeviceQueueCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetqueueFamilyIndex);
    static NAN_SETTER(SetqueueFamilyIndex);
    
    static NAN_GETTER(GetqueueCount);
    static NAN_SETTER(SetqueueCount);
    
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pQueuePriorities;
    static NAN_GETTER(GetpQueuePriorities);
    static NAN_SETTER(SetpQueuePriorities);
    

    // real instance
    VkDeviceQueueCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceQueueCreateInfo();
    ~_VkDeviceQueueCreateInfo();

};

/** ## END VkDeviceQueueCreateInfo ## **/

/** ## BEGIN VkDeviceCreateInfo ## **/

class _VkDeviceCreateInfo: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
    Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
    static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    
    static NAN_GETTER(Getflags);
    static NAN_SETTER(Setflags);
    
    static NAN_GETTER(GetqueueCreateInfoCount);
    static NAN_SETTER(SetqueueCreateInfoCount);
    
    std::vector<VkDeviceQueueCreateInfo>* vpQueueCreateInfos;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> pQueueCreateInfos;
    static NAN_GETTER(GetpQueueCreateInfos);
    static NAN_SETTER(SetpQueueCreateInfos);
    
    static NAN_GETTER(GetenabledLayerCount);
    static NAN_SETTER(SetenabledLayerCount);
    
    std::vector<char *>* vppEnabledLayerNames;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> ppEnabledLayerNames;
    static NAN_GETTER(GetppEnabledLayerNames);
    static NAN_SETTER(SetppEnabledLayerNames);
    
    static NAN_GETTER(GetenabledExtensionCount);
    static NAN_SETTER(SetenabledExtensionCount);
    
    std::vector<char *>* vppEnabledExtensionNames;
    Nan::Persistent<v8::Array, v8::CopyablePersistentTraits<v8::Array>> ppEnabledExtensionNames;
    static NAN_GETTER(GetppEnabledExtensionNames);
    static NAN_SETTER(SetppEnabledExtensionNames);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pEnabledFeatures;
      static NAN_GETTER(GetpEnabledFeatures);
    static NAN_SETTER(SetpEnabledFeatures);
    

    // real instance
    VkDeviceCreateInfo instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkDeviceCreateInfo();
    ~_VkDeviceCreateInfo();

};

/** ## END VkDeviceCreateInfo ## **/

/** ## BEGIN VkAllocationCallbacks ## **/

class _VkAllocationCallbacks: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors

    // real instance
    VkAllocationCallbacks instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkAllocationCallbacks();
    ~_VkAllocationCallbacks();

};

/** ## END VkAllocationCallbacks ## **/

/** ## BEGIN VkLayerProperties ## **/

class _VkLayerProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> layerName;
    static NAN_GETTER(GetlayerName);
    static NAN_GETTER(GetspecVersion);
    static NAN_GETTER(GetimplementationVersion);
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> description;
    static NAN_GETTER(Getdescription);

    // real instance
    VkLayerProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkLayerProperties();
    ~_VkLayerProperties();

};

/** ## END VkLayerProperties ## **/

/** ## BEGIN VkExtensionProperties ## **/

class _VkExtensionProperties: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    Nan::Persistent<v8::String, v8::CopyablePersistentTraits<v8::String>> extensionName;
    static NAN_GETTER(GetextensionName);
    static NAN_GETTER(GetspecVersion);

    // real instance
    VkExtensionProperties instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkExtensionProperties();
    ~_VkExtensionProperties();

};

/** ## END VkExtensionProperties ## **/

/** ## BEGIN VkClearRect ## **/

class _VkClearRect: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> rect;
      static NAN_GETTER(Getrect);
    static NAN_SETTER(Setrect);
    
    static NAN_GETTER(GetbaseArrayLayer);
    static NAN_SETTER(SetbaseArrayLayer);
    
    static NAN_GETTER(GetlayerCount);
    static NAN_SETTER(SetlayerCount);
    

    // real instance
    VkClearRect instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkClearRect();
    ~_VkClearRect();

};

/** ## END VkClearRect ## **/

/** ## BEGIN VkBaseInStructure ## **/

class _VkBaseInStructure: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
      static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    

    // real instance
    VkBaseInStructure instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBaseInStructure();
    ~_VkBaseInStructure();

};

/** ## END VkBaseInStructure ## **/

/** ## BEGIN VkBaseOutStructure ## **/

class _VkBaseOutStructure: public Nan::ObjectWrap {

  public:
    // #methods
    static NAN_METHOD(New);
    static NAN_GETTER(GetmemoryBuffer);
    static NAN_GETTER(GetmemoryLayout);
    // #accessors
    static NAN_GETTER(GetsType);
    static NAN_SETTER(SetsType);
    
      Nan::Persistent<v8::Object, v8::CopyablePersistentTraits<v8::Object>> pNext;
      static NAN_GETTER(GetpNext);
    static NAN_SETTER(SetpNext);
    

    // real instance
    VkBaseOutStructure instance = {};

    static Nan::Persistent<v8::FunctionTemplate> constructor;
    static void Initialize(v8::Local<v8::Object> exports);
    bool flush(void);

  private:

    _VkBaseOutStructure();
    ~_VkBaseOutStructure();

};

/** ## END VkBaseOutStructure ## **/

#endif